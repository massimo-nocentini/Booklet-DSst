{	"classes" : {		"DictionaryTest" : {			"hash" : 4155904,			"definition" : "CollectionRootTest subclass: #DictionaryTest\r\tuses: TIncludesTest + TDictionaryAddingTest + TDictionaryComparingTest + TDictionaryCopyingTest + TDictionaryEnumeratingTest + (TDictionaryPrintingTest - {#testPrintElementsOn. #testStoreOn}) + TDictionaryRemovingTest + (TPutBasicTest - {#testAtPutOutOfBounds}) + TAsStringCommaAndDelimiterTest + TPrintTest + TConvertTest + TConvertAsSortedTest + (TCopyTest - {#testCopyEmptyWithout. #testCopyNonEmptyWithout. #testCopyNonEmptyWithoutNotIncluded}) + TSetArithmetic + TDictionaryIncludesWithIdentityCheckTest + TDictionaryValueAccessTest + TDictionaryKeysValuesAssociationsAccess + TDictionaryKeyAccessTest + TDictionaryAssociationAccessTest + TStructuralEqualityTest + TOccurrencesForMultiplinessTest\r\tinstanceVariableNames: 'emptyDict nonEmptyDict nonEmpty5ElementsNoDuplicates indexArray valueArray nonEmpty1Element collectionNotIncluded collectionIncluded associationNotIn valueNotIn keyNotIn dictionaryNotIncluded dictionaryWithDuplicateValues duplicateValue nonEmptyWithString'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Tests-Dictionaries'",			"comment" : [				"SUnit tests for dictionaries"			],			"category" : "Collections-Unordered-Tests-Dictionaries"		},		"Object" : {			"hash" : 804608,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		},		"Number" : {			"hash" : 872960,			"definition" : "Magnitude subclass: #Number\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"Class Number holds the most general methods for dealing with numbers. Subclasses Float, Fraction, and Integer, and their subclasses, provide concrete representations of a numeric quantity.",				"",				"All of Number's subclasses participate in a simple type coercion mechanism that supports mixed-mode arithmetic and comparisons.  It works as follows:  If",				"\tself<typeA> op: arg<typeB>",				"fails because of incompatible types, then it is retried in the following guise:",				"\t(arg adaptTypeA: self) op: arg adaptToTypeA.",				"This gives the arg of typeB an opportunity to resolve the incompatibility, knowing exactly what two types are involved.  If self is more general, then arg will be converted, and viceVersa.  This mechanism is extensible to any new number classes that one might wish to add to Pharo.  The only requirement is that every subclass of Number must support a pair of conversion methods specific to each of the other subclasses of Number.",				"",				"Implementation notes",				"----------------------------------",				"The implementation of #degreeCos and #degreeSin is such that results are exact for any multiple of 90.",				"",				"Care is also taken to evaluate the sine between -90째 and 90째, this will avoid #degreesToRadians and i386 FPU sine function to accumulate round off errors due to approximate representation of pi.",				"We can thus evaluate 240 degreeCos with at most 1 ulp error. It's not perfect, but better than previous implementation.",				"",				"For cosine, we know that:",				"\tcosd(x)=cosd(abs(x))",				"\tcosd(x)=sind(90-x)",				"thus the trick is to evaluate:",				"\tcosd(x)=sind(90-abs(x)) after appropriate modulo in [-180,180[",				"This way, we are sure to evaluate the sine between -90째 and 90째",				"The #degreesToRadians and #sin are used rather than #degreeSin to avoid cycles.",				"",				"For sine, it would be necessary to evaluate either",				"sind(x) if abs(x) <=90",				"or sind(180-x) if abs(x) >= 90",				"A possible implementation would be:",				"\t| x |",				"\tx := 90 + self \\\\ 360 - 90.",				"\tx >= 180 ifTrue: [x := 180 - x].",				"\t^x degreesToRadians sin",				"We prefer evaluating cosd(90-x) thus providing a branch free implementation."			],			"category" : "Kernel-Numbers"		},		"Dictionary" : {			"hash" : 801024,			"definition" : "HashedCollection subclass: #Dictionary\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Dictionaries'",			"comment" : [				"I am a collection of elements that associate a key object with a value object.",				"",				"Description",				"--------------------------",				"",				"I  can be viewed from one of two perspectives: a set of associations, or a container of values that are externally named where the name can be any object that responds to #=. The external name is referred to as the key.  I inherit many operations from Set.",				"I use the #= method to locate a key. If you want a collection that use the #== method (same pointers) you can use an IdentityDictionary.",				"",				"I'm used when we need a collection of objects which I can access with a key. For example if you associate some words with a definition, the word will be the key and the definition will be the value. Both of them can be any kind of objects.",				"",				"Internally I use Associations. The Association class can help to use me. (See examples lower)",				"",				"Public API and Key Messages",				"--------------------------",				"",				"- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue \t\tallow to add an element.",				"  ",				"- #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock \t\tallow to access my values.",				"",				"- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: \t\tallow to iterate on me effectively",				"",				"Examples ",				"--------------------------",				"",				"To create a dictiony with indexes as key: ",				"",				"\tDictionary withAll: #(7 3 1 3)   \t\t\"returns:  a Dictionary(1->7 2->3 3->1 4->3 \"",				"",				"To use Objects as key (here symbols): ",				"",				"\tcolors := Dictionary new ",				"\t\t\t\tat: #yellow put: Color yellow; ",				"\t\t\t\tat: #blue put: Color blue;",				"\t\t\t\tat: #red put: Color red;",				"\t\t\t\tyourself.",				"\t\t\t\t",				"\tcolors at: #yellow. \t\"returns:  Color yellow\"",				"\tcolors keys          \"returns: a Set(#blue #yellow #red)\"",				"\tcolors values       \"returns:  {Color blue. Color yellow. Color red}\" ",				"",				"You can also directly use Associations: ",				"",				"\tcolors := Dictionary with: #yellow -> Color yellow with: #blue -> Color blue.",				"\tcolors add: #red -> Color red.",				"\t",				"\tcolors associations  \t\"returns: {#yellow->Color yellow. #red->Color red. #blue->Color blue}\"",				"\t\t",				"Here some more examples: ",				"",				"\tcolors := Dictionary newFrom: { #blue->Color blue . #red->Color red . #yellow->Color yellow }. ",				"\tcolors removeKey: #blue. ",				"\tcolors at: #red ifPresent: [ :color |  color darker] ifAbsent: [ Error signal: 'The red color should be here.' ] .\t\t\"return: (Color r: 0.92 g: 0.0 b: 0.0 alpha: 1.0)\"",				"\tcolors associations \t\t \"{#yellow->Color yellow. #red->Color red}\"",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------------",				"",				"I am just a collection of associations. If I need my keys I will just return the keys of my associations. Idem for my values.",				"I use the #= method in order to manipulate my keys. I cannot have two associations that are equals with the #= method."			],			"category" : "Collections-Unordered-Dictionaries"		},		"TopologicalSortAlgorithm" : {			"hash" : 7698944,			"definition" : "Object subclass: #TopologicalSortAlgorithm\r\tinstanceVariableNames: 'size relation'\r\tclassVariableNames: ''\r\tpackage: 'Containers-Links'",			"comment" : [				"Implementation of the Algorithm T in TAOCP by Donald Knuth, Volume 1 page 264."			],			"category" : "Containers-Links"		},		"UndefinedObject" : {			"hash" : 786688,			"definition" : "Object subclass: #UndefinedObject\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"I describe the behavior of my sole instance, nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless."			],			"category" : "Kernel-Objects"		},		"CTLinksValueLinkTest" : {			"hash" : 7701504,			"definition" : "TestCase subclass: #CTLinksValueLinkTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Links-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Links-Tests"		},		"CollectionTest" : {			"hash" : 4144640,			"definition" : "TestCase subclass: #CollectionTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Tests-Base'",			"comment" : [				"Basic Collection tests"			],			"category" : "Collections-Support-Tests-Base"		},		"SequenceableCollection" : {			"hash" : 855040,			"definition" : "Collection subclass: #SequenceableCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		},		"DateAndTime" : {			"hash" : 806144,			"definition" : "Magnitude subclass: #DateAndTime\r\tinstanceVariableNames: 'seconds offset julianDayNumber nanos'\r\tclassVariableNames: 'ClockProvider LocalTimeZoneCache'\r\tpoolDictionaries: 'ChronologyConstants'\r\tpackage: 'Kernel-Chronology'",			"comment" : [				"I am DateAndTime.",				"I represent a point in time or timestamp as defined by ISO 8601. ",				"I am a Magnitude. ",				"I have nanosecond precision.",				"I am TimeZone aware. ",				"I have zero duration.",				"",				"  DateAndTime now.",				"  DateAndTime now asUTC rounded.",				"  DateAndTime fromString: '1969-07-20T20:17:40.123+02:00'.",				"  DateAndTime fromString: '1969-07-20T20:17:40Z'.",				"",				"My implementation uses three SmallIntegers and a Duration:",				"  julianDayNumber - julian day number (starting at midnight UTC rather than noon GMT).",				"  seconds - number of seconds since midnight UTC. Always positive, between 0 and 86399.",				"  nanos\t - the number of nanoseconds since the second. Always positive, between 0 and 999999999.",				"  offset\t- duration from UTC.",				"",				"The offset is used to print the date and time in a local time zone, but the date and time are handled in UTC internally.",				"The nanosecond attribute is often zero but it defined for full ISO compliance and is suitable for timestamping."			],			"category" : "Kernel-Chronology"		},		"ObjectTest" : {			"hash" : 4193536,			"definition" : "ClassTestCase subclass: #ObjectTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Tests-Objects'",			"comment" : [				"SUnit tests for objects"			],			"category" : "Kernel-Tests-Objects"		},		"LayoutCell" : {			"hash" : 2110720,			"definition" : "Object subclass: #LayoutCell\r\tinstanceVariableNames: 'target cellSize extraSpace flags nextCell'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-Layouts'",			"comment" : [				"I am used in table layouts to hold temporary values while the layout is being computed.",				"",				"Instance variables:",				"\ttarget \t\t<Morph>\t\tThe morph contained in this cell",				"\tcellSize \t\t<Point>\t\tThe size of the cell",				"\textraSpace \t<nil | Point>\tAdditional space to add after this cell",				"\tnextCell \t<nil | LayoutCell>\tThe next cell in the arrangement.",				"",				"Implementation note:",				"Both, cellSize and extraSpace contains points where",				"\tx - represents the primary table direction",				"\ty - represents the secondary table direction"			],			"category" : "Morphic-Base-Layouts"		},		"ValueLink" : {			"hash" : 1174784,			"definition" : "Link subclass: #ValueLink\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"A ValueLink is a Link containing a Value.",				"Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.",				"",				"",				"value - The object this link points to."			],			"category" : "Collections-Support-Links"		},		"Collection" : {			"hash" : 849408,			"definition" : "Object subclass: #Collection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am the abstract superclass of all classes that represent a group of elements.",				"",				"To get more information you read the explanation on Pharo by Example book in the next link: [Pharo by Example - Collections](https://github.com/SquareBracketAssociates/UpdatedPharoByExample/blob/pharo5/Collections/Collections.pillar).",				"",				"Or if you want to read in PDF format, download it from [Pharo by Example](https://github.com/SquareBracketAssociates/PharoByExample80/releases/tag/continuous) and look for Chapter 13: Collections. "			],			"category" : "Collections-Abstract-Base"		},		"GCoordinates" : {			"hash" : 6471168,			"definition" : "GeometryObject subclass: #GCoordinates\r\tinstanceVariableNames: 'coordinates'\r\tclassVariableNames: ''\r\tpackage: 'Geometry-Core'",			"comment" : [				"Description",				"--------------------",				"",				"I represent a set of coordinates that will be used by other geometric elements.",				"",				"My subclass will represent sets of a certain amount of coordinates. In the long terme we would like to remove all the subclasses and that everything manage myself as a n-dimensions coordinates set, but for now we prefer to begin with simple sets like 2D or 3D.",				"",				"I implement basic arithmetic that can be done with coordinates.",				"",				"Examples",				"--------------------",				"\t",				"\t\"Instance creation\"",				"\tGCoordinates withCollection: #(1 3). \t\"(1,3)\"",				"\t",				"\t#(1 3) asGCoordinates.\t\"(1,3)\"",				"\t",				"\t\"Arithmetic\"\t\t",				"\t(GCoordinates withCollection: #(1 3)) + (GCoordinates withCollection: #(5 1)). \t\"(6,4)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) - (GCoordinates withCollection: #(5 1)). \t\"(-4,2)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) * 2. \t\"(2,6)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) / 2. \t\"((1/2),(3/2))\"",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------",				"",				"    Instance Variables",				"\tcoordinates:\t\t<aCollection> \tA collection of all the coordinates I contains."			],			"category" : "Geometry-Core"		}	},	"messages" : {		"testSimpleValueLink" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTLinksValueLinkTest>>#test21ValueLinks",				"CTLinksValueLinkTest>>#testAsLinkedList"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"testSimpleValueLink",						"",						"\t| l |",						"\tl := 1 ~~> nil.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 1 ~~> nil.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8757974,					"argumentNames" : [ ]				}			}		},		"sinksOfValueLinksTable:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"TopologicalSortAlgorithm>>#value:onCycleDo:"			],			"implementors" : {				"TopologicalSortAlgorithm" : {					"sourceCode" : [						"sinksOfValueLinksTable: table",						"",						"\t^ (1 to: size)",						"\t\t  foldr: [ :k :aValueLink | ",						"\t\t\t  (table at: k)",						"\t\t\t\t  ifSink: [ k ~~> aValueLink ]",						"\t\t\t\t  otherwise: [ aValueLink ]",						"\t\t\t\t  forTopologicalSortAlgorithm: self ]",						"\t\t  init: nil"					],					"body" : [						"^ (1 to: size)",						"\t  foldr: [ :k :aValueLink | ",						"\t\t  (table at: k)",						"\t\t\t  ifSink: [ k ~~> aValueLink ]",						"\t\t\t  otherwise: [ aValueLink ]",						"\t\t\t  forTopologicalSortAlgorithm: self ]",						"\t  init: nil"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 25532633,					"argumentNames" : [						"table"					]				}			}		},		"testNilAsLinkedList" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"testNilAsLinkedList",						"",						"\t^ self exportSlotsGraphOf: nil asLinkedList"					],					"body" : [						"^ self exportSlotsGraphOf: nil asLinkedList"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8495458,					"argumentNames" : [ ]				}			}		},		"anyAssociation" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"DictionaryTest>>#testAnyAssociation",				"TopologicalSortAlgorithm>>#handleCycleInValueLinksTable:do:"			],			"implementors" : {				"Dictionary" : {					"sourceCode" : [						"anyAssociation",						"",						"\t\"I mimic the message `Collection>>#anyone` with respect to associations that I collect.\"",						"",						"\tself",						"\t\temptyCheck;",						"\t\tassociationsDo: [ :assoc | ^ assoc ]"					],					"body" : [						"self",						"\temptyCheck;",						"\tassociationsDo: [ :assoc | ^ assoc ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"I mimic the message `Collection>>#anyone` with respect to associations that I collect."					],					"hash" : 1595683,					"argumentNames" : [ ]				}			}		},		"testTopologicalSortOnCycleDo2" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CollectionTest" : {					"sourceCode" : [						"testTopologicalSortOnCycleDo2",						"",						"\t\"The following test is kept from https://upload.wikimedia.org/wikipedia/commons/0/03/Directed_acyclic_graph_2.svg.\"",						"",						"\tself",						"\t\tassert: ((1 to: 8)",						"\t\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t\t (1 -> 4).",						"\t\t\t\t\t\t (2 -> 4).",						"\t\t\t\t\t\t (2 -> 5).",						"\t\t\t\t\t\t (3 -> 5).",						"\t\t\t\t\t\t (3 -> 8).",						"\t\t\t\t\t\t (4 -> 6).",						"\t\t\t\t\t\t (4 -> 7).",						"\t\t\t\t\t\t (4 -> 8).",						"\t\t\t\t\t\t (5 -> 7) }",						"\t\t\t\t onCycleDo: [ Error signal ])",						"\t\tequals: #( 1 2 4 6 3 5 7 8 )"					],					"body" : [						"self",						"\tassert: ((1 to: 8)",						"\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t (1 -> 4).",						"\t\t\t\t\t (2 -> 4).",						"\t\t\t\t\t (2 -> 5).",						"\t\t\t\t\t (3 -> 5).",						"\t\t\t\t\t (3 -> 8).",						"\t\t\t\t\t (4 -> 6).",						"\t\t\t\t\t (4 -> 7).",						"\t\t\t\t\t (4 -> 8).",						"\t\t\t\t\t (5 -> 7) }",						"\t\t\t onCycleDo: [ Error signal ])",						"\tequals: #( 1 2 4 6 3 5 7 8 )"					],					"isTestMethod" : true,					"category" : "*Containers-Links-Tests",					"comment" : [						"The following test is kept from https://upload.wikimedia.org/wikipedia/commons/0/03/Directed_acyclic_graph_2.svg."					],					"hash" : 4940084,					"argumentNames" : [ ]				}			}		},		"testAsLinkedListFromInterval" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"testAsLinkedListFromInterval",						"",						"\t^ self exportSlotsGraphOf: ((4 to: 1 by: -1) as: LinkedList)"					],					"body" : [						"^ self exportSlotsGraphOf: ((4 to: 1 by: -1) as: LinkedList)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8495802,					"argumentNames" : [ ]				}			}		},		"test43214ValueLinks" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"test43214ValueLinks",						"",						"\t| l1 l |",						"\tl1 := 1 ~~> nil.",						"\tl := 4 ~~> (3 ~~> (2 ~~> l1)).",						"\tl1 nextLink: l.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l1 l |",						"l1 := 1 ~~> nil.",						"l := 4 ~~> (3 ~~> (2 ~~> l1)).",						"l1 nextLink: l.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 9021503,					"argumentNames" : [ ]				}			}		},		"to:by:" : {			"senders" : [				"Alien class>>#exampleCqsort",				"AthensCubicSegment>>#pointsWithStart:duration:",				"AthensLineSegment>>#pointsWithStart:duration:",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTLinksValueLinkTest>>#testAsLinkedListFromInterval",				"CTLinksValueLinkTest>>#testAsValueLinkInjectInto",				"CTLinksValueLinkTest>>#testAsValueLink",				"CalendarMorph>>#daysForLine:",				"DateAndTime>>#to:by:do:",				"DateAndTimeDosEpochTest>>#testToBy",				"DateAndTimeEpochTest>>#testToBy",				"DateAndTimeUnixEpochTest>>#testToBy",				"EFContext>>#defaultOneLineMessages",				"EFFormatter class>>#settingsOneLineMessages:",				"FFICallbackTest>>#testCqsort",				"FFICallbackTest>>#testCqsortWithByteArray",				"FLBasicSerializationTest>>#testInterval",				"FT2Outline>>#pointCollection",				"FTCellSelectionModeStrategy>>#indexesToSelectInMultipleSelectionFrom:to:",				"FTRowSelectionModeStrategy>>#indexesToSelectInMultipleSelectionFrom:to:",				"FTTableContainerMorph>>#columnOrderOfWidthDistribution",				"Form>>#fadeImageCoarse:at:",				"Form>>#fadeImageFine:at:",				"Form>>#rectangleEnclosingPixelsNotOfColor:",				"FreeTypeSystemSettings class>>#freeTypeSettingsOn:",				"HColorSelectorMorph>>#defaultFillStyle",				"HiExampleCommit class>>#randomlyGenerated",				"HiNode>>#intermediateRowIndicesTo:",				"Integer>>#bitString",				"IntegerTest>>#testBitAt",				"Interval>>#-",				"Interval>>#+",				"Interval>>#sorted",				"IntervalTest>>#testLast",				"IntervalTest>>#testIsInterval",				"IntervalTest>>#testNumericTypes",				"IntervalTest>>#testEquals4",				"IntervalTest>>#testUnevenDo",				"IntervalTest>>#testRangeIncludes",				"IntervalTest>>#testExtent",				"IntervalTest>>#testInclusion",				"IntervalTest>>#testReverseUnevenDo",				"IntervalTest>>#testInclusionBug6455",				"IntervalTest>>#testOtherNewFrom",				"IntervalTest>>#testInvalid",				"IntervalTest>>#testIndexOfBug1602",				"IntervalTest>>#testAt",				"IntervalTest>>#testAsInterval",				"IntervalTest>>#setUp",				"IntervalTest>>#testEquals3",				"IntervalTest>>#testInclusionBug1603",				"IntervalTest>>#unsortedCollection",				"IntervalTest>>#accessCollection",				"IntervalTest>>#testIntervalStoreOn",				"IntervalTest>>#testIsEvaluating",				"IntervalTest>>#testIndexOfBug6455",				"JPEGHuffmanTable>>#makeDerivedTables",				"JPEGReadWriter>>#idctBlockFloat:component:",				"LargePositiveIntegerTest>>#x13kbits",				"LargePositiveIntegerTest>>#x23kbits",				"LargePositiveIntegerTest>>#x106kbits",				"LargePositiveIntegerTest>>#x92kbits",				"LineSegment>>#asBezier2Segments:",				"MockSettings class>>#rangeSettingNodeOn:",				"Number>>#to:count:",				"OrderedCollectionTest>>#testRemoveAllSuchThat",				"RSAbstractChartTest>>#testOpening",				"RSAbstractTick>>#renderIn:",				"RSAlignmentTest>>#testFromLeftWithAFixShape",				"RSAlignmentTest>>#testFromTopWithAFixShape",				"RSAlignmentTest>>#testFromTop",				"RSAlignmentTest>>#testFromBottom",				"RSAlignmentTest>>#testFromLeftWithFixedShape",				"RSAlignmentTest>>#testFromRight",				"RSAlignmentTest>>#testFromLeft",				"RSAmeba>>#update:",				"RSAnimationExamples>>#example45Beziers",				"RSAnimationExamples>>#example06LinePatterns",				"RSAnimationExamples>>#example17Flor",				"RSAnimationExamples>>#example22Lines",				"RSAnimationExamples>>#example43Waves",				"RSAnimationExamples>>#example01BoxWindmill",				"RSAnimationExamples>>#example21Lines",				"RSBasicShapeExamples>>#example12BasicLine",				"RSBezier>>#lines",				"RSChartExample>>#example09LinearSqrtSymlog",				"RSChartExample>>#example07AdjustingFontSize",				"RSChartExample>>#example13AreaPlot",				"RSChartExample>>#example01Markers",				"RSChartTest>>#testYMarker",				"RSConnectionExample>>#example02TwoViews",				"RSConnectionExample>>#example01Basic",				"RSConnectionTest>>#testBasic",				"RSDelaunayExample>>#step",				"RSEasingInterpolatorTest>>#testAllEasing",				"RSHistogramPlotTest>>#testBinsStrat",				"RSMondrianTest>>#testBasic2",				"RSPieChartExample>>#visualizeChart:package:",				"RSShapeExamples>>#example10Donut",				"RubAnnotationDisplayer class>>#tabWidthMenuOn:",				"RubParagraph>>#tabWidth:",				"RubUnderlinedSegmentMorph>>#drawUnderlineOn:",				"RubUnderlinedSegmentMorph>>#drawUnderlineOnAthensCanvas:",				"STONWriteReadTest>>#testScaledDecimals",				"STONWriteReadTest>>#testIntervals",				"STONWriteReadTest>>#testFractions",				"SequenceableCollection>>#groupsOf:atATimeCollect:",				"SequenceableCollection>>#groupsOf:",				"SourceFileArrayTest>>#testFileIndexFromSourcePointer",				"SystemWindow>>#animateRestoreFromMinimized",				"SystemWindow>>#animateMinimize",				"SystemWindow>>#animateClose",				"SystemWindow>>#animateMaximize",				"SystemWindow>>#animateRestore",				"Unicode class>>#nonCharacters",				"UnicodeTest>>#testNonCharacterPositive",				"WorldMorph class>>#displayScaleFactorSettingsOn:"			],			"implementors" : {				"Number" : {					"sourceCode" : [						"to: stop by: step",						"",						"\t\"Answer an Interval from the receiver up to the argument, stop, ",						"\tincrementing by step.\"",						"",						"\t^ Interval from: self to: stop by: step"					],					"body" : [						"^ Interval from: self to: stop by: step"					],					"isTestMethod" : false,					"category" : "*Collections-Sequenceable",					"comment" : [						"Answer an Interval from the receiver up to the argument, stop, ",						"\tincrementing by step."					],					"hash" : 35745674,					"argumentNames" : [						"stop",						"step"					]				},				"DateAndTime" : {					"sourceCode" : [						"to: anEnd by: aDuration",						"",						"\t\"Answer a Timespan. anEnd conforms to protocol DateAndTime or protocol Timespan\"",						"",						"\t^ (Schedule starting: self ending: anEnd asDateAndTime)",						"\t\t  schedule: (Array with: aDuration asDuration);",						"\t\t  yourself"					],					"body" : [						"^ (Schedule starting: self ending: anEnd asDateAndTime)",						"\t  schedule: (Array with: aDuration asDuration);",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Kernel-Chronology-Extras",					"comment" : [						"Answer a Timespan. anEnd conforms to protocol DateAndTime or protocol Timespan"					],					"hash" : 35679897,					"argumentNames" : [						"anEnd",						"aDuration"					]				}			}		},		"isAcyclicWithRespectToAssociations:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"isAcyclicWithRespectToAssociations: aRelation",						"",						"\t| isAcyclic |",						"\tisAcyclic := true.",						"\tself",						"\t\ttopologicalSortByAssociations: aRelation",						"\t\tonCycleDo: [ isAcyclic := false ].",						"\t^ isAcyclic"					],					"body" : [						"| isAcyclic |",						"isAcyclic := true.",						"self",						"\ttopologicalSortByAssociations: aRelation",						"\tonCycleDo: [ isAcyclic := false ].",						"^ isAcyclic"					],					"isTestMethod" : false,					"category" : "*Containers-Links",					"comment" : [ ],					"hash" : 18951940,					"argumentNames" : [						"aRelation"					]				}			}		},		"inject:into:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"BlockClosuresTestCase>>#testGpsExample2",				"BlockClosuresTestCase>>#testGpsExample1",				"BlockClosuresTestCase>>#nestedLoopsExample:",				"CTLinksValueLinkTest>>#testAsValueLinkInjectInto",				"CTSlotsSCCsDfsTreeDrawer>>#layoutTuples:lineBuilder:",				"CTSlotsSCCsDfsTreeDrawer>>#addAll:onCanvas:",				"ClassDescription>>#classesThatImplementAllOf:",				"ClassDescription>>#linesOfCode",				"ClassOrganization>>#ownCategories",				"Collection>>#stdev",				"Collection>>#max",				"Collection>>#sum:ifEmpty:",				"Collection>>#sumNumbers:",				"Collection>>#min",				"Collection>>#maxValue:",				"Collection>>#sum",				"Collection>>#sumNumbers",				"CollectionRootTest>>#testInjectInto",				"DADependentPackageWrapper>>#extensionDependenciesSize",				"DADependentPackageWrapper>>#dependenciesSize",				"DAPackage>>#extensionDependenciesSize",				"DAPackage>>#dependentPackages",				"DAPackage>>#dependenciesSize",				"DAPackageRelationGraph>>#outgoing",				"DTTestsProfilingResult>>#buildTreeNode",				"DebugSession class>>#debuggingActionsForPragma:for:",				"DebugSession class>>#debuggingActionsForPragmas:for:",				"Dictionary class>>#newFromAssociations:",				"DynamicPresentersListBuilder>>#nullPresentersInstVarNamesAndPresenterNamesArray",				"DynamicPresentersListBuilder>>#instVarNamesAndPresenterNamesArray",				"ExceptionTester>>#contents",				"FFIEnumeration class>>#enumNameSuffix:",				"FFIExternalStructureFieldSpec>>#compileSpec",				"FLClusterization>>#objectCount",				"FTBasicTreeListDataSource>>#countAvailableRows",				"FTBasicTreeListItem>>#availableRows",				"FontChooserMorph>>#widthRequiredFor:from:noLessThan:",				"FontTest>>#testParagraph",				"FontTest>>#testDisplay",				"FreeTypeSettings>>#subPixelFiltersFromRatios:",				"GCoordinates>>#inject:into:",				"GLMApproximateScrollbarBrick>>#approximateBandHeight",				"GLMCustomCell>>#childrenCount",				"GLMHorizontalLinearLayout>>#widthParentDependency:",				"GLMLinearLayout>>#layout:in:inject:into:",				"GLMMorphicTabulatorRenderer>>#renderCustomRow:ofPane:inUI:inBrowser:",				"GLMMorphicTabulatorRenderer>>#renderCustomColumn:ofPane:inUI:inBrowser:",				"GLMVerticalLinearLayout>>#heightParentDependency:",				"GTRawObjectVariablesBrowser>>#generateHashFor:",				"GTSUnitExampleFailingTest>>#testDictionary",				"GTSpotterStackedLayout>>#layoutProportional:in:position:",				"GTriangle>>#area",				"GVector>>#length",				"HEAbstractExported>>#hash",				"IRBytecodeGenerator>>#from:goto:",				"IRBytecodeGenerator>>#from:if:goto:otherwise:",				"IRBytecodeGenerator>>#updateJumpOffsets",				"IRBytecodeGenerator>>#closureFrom:to:copyNumCopiedValues:numArgs:",				"IceLibgitTreeBuilder>>#entryByPath:",				"Integer>>#digitSum",				"IntegerTest>>#testBitAt",				"KMCatcherMorph>>#shortcut",				"KMOSXShortcutPrinter>>#visitSingleShortcut:",				"LargePositiveIntegerTest>>#x13kbits",				"LargePositiveIntegerTest>>#x23kbits",				"LargePositiveIntegerTest>>#x106kbits",				"LargePositiveIntegerTest>>#x92kbits",				"LinkedListTest>>#testInjectInto",				"MCServerRegistry>>#repositoryAt:credentialsDo:",				"MCWorkingCopyBrowser>>#collectConfigurationMenuSpecs",				"MailMessage>>#atomicParts",				"MalDisjointSets>>#run",				"MalHits>>#computeHubsFor:",				"MalHits>>#computeAuthoritiesFor:",				"MalHits>>#normalize:",				"MalWeightedHits>>#computeAuthoritiesFor:",				"MalWeightedHits>>#computeHubsFor:",				"MessageTally>>#localTime",				"MessageTally>>#localTally",				"MorphicLabelAdapter>>#emphasisCodeFor:",				"MultiFontTest>>#testMultistringFont",				"OCArrayLiteralTest>>#testByteArrayLong",				"RBAccessorClassRefactoring>>#preconditions",				"RBAddClassRefactoring>>#preconditions",				"RBAddClassTransformation>>#preconditions",				"RBBasicDummyLintRuleTest class>>#variableReferencedOnce",				"RBBasicDummyLintRuleTest class>>#variableAssignedLiteral",				"RBBasicDummyLintRuleTest class>>#longMethods",				"RBCategoryEnvironment>>#classNames",				"RBChangeMethodNameRefactoring>>#preconditions",				"RBChildrenToSiblingsRefactoring>>#preconditions",				"RBClassEnvironment>>#classSelectorDictionary",				"RBClassEnvironment>>#includesCategory:",				"RBClassEnvironment>>#metaClassSelectorDictionary",				"RBCompositeLintRule>>#problemCount",				"RBCompositeLintRuleTestData>>#problemCount",				"RBCompositeLintRuleTestData>>#failedRules",				"RBCompositeRefactoryChange>>#changesSize",				"RBDummyCompositeLintRuleTest>>#problemCount",				"RBDummyCompositeLintRuleTest>>#failedRules",				"RBDummyRefactoryTestDataApp>>#foo:",				"RBDummyRefactoryTestDataApp>>#caller2",				"RBFindAndReplaceRefactoring>>#preconditions",				"RBGenerateEqualHashRefactoring>>#preconditions",				"RBGeneratePrintStringRefactoring>>#preconditions",				"RBMethodNode>>#conceptualArgumentSize",				"RBMethodNode>>#reformatSource",				"RBProgramNode>>#allDefinedVariables",				"RBProgramNode>>#allStatements",				"RBProgramNode>>#allTemporaryVariables",				"RBProgramNode>>#sentMessages",				"RBProgramNode>>#allArgumentVariables",				"RBProtocolEnvironment>>#includesCategory:",				"RBPullUpMethodRefactoring>>#preconditions",				"RBPullUpMethodTest>>#testPullUpWhenSuperClassDoesNotDirectlyImplement",				"RBPushDownMethodRefactoring>>#preconditions",				"RBRefactoringTest>>#abstractVariableTestData",				"RBRefactoringTest>>#extractMethodTestData",				"RBRefactoryTestDataApp>>#foo:",				"RBRefactoryTestDataApp>>#caller2",				"RBRefactoryTyper>>#findTypeFor:",				"RBRefactoryTyper>>#processCollectionMessagesFor:in:",				"RBRegexRefactoring>>#execute:",				"RBRemoveClassKeepingSubclassesRefactoring>>#preconditions",				"RBRemoveClassRefactoring>>#preconditions",				"RBRemoveClassTransformation>>#preconditions",				"RBRemoveHierarchyMethodRefactoring>>#preconditions",				"RBRemoveMethodRefactoring>>#preconditions",				"RBRemoveParameterRefactoring>>#myConditions",				"RBTransformationTest>>#abstractVariableTestData",				"RBVariableEnvironment>>#numberVariables",				"RGPackageDefinition>>#numberOfLinesOfCode",				"RPackage>>#linesOfCode",				"RPackageSet>>#categoryNames",				"RSAbstractGraphLayout>>#maximumRadius:",				"RSAbstractGraphLayout>>#maximumDiameter:",				"RSAbstractHorizontalTreeLayout>>#rearrangeByLayers:",				"RSAbstractTreeBuilder>>#weightFromChildren:block:",				"RSAbstractVerticalTreeLayout>>#rearrangeByLayers:",				"RSAlignment>>#rightMostShape",				"RSAlignment>>#topMostShape",				"RSAlignment>>#leftMostShape",				"RSAlignment>>#bottomMostShape",				"RSAlignment>>#centerMostShape",				"RSHorizontalVanDerPloegTreeLayout>>#addChildSpacing:",				"RSHorizontalVanDerPloegTreeLayout>>#firstWalk:",				"RSKeyNavigationCanvasInteraction>>#processStepsOn:",				"RSLayoutExamples>>#example05LayoutBasicWithColorFading",				"RSRadialTreeLayout>>#moveAllElementsToTopLeft:",				"RSRectanglePackLayout>>#doExecute:",				"RSRectanglePackLayout>>#recalculateFreeSpacesWith:",				"RSResize>>#highestShape",				"RSResize>>#widestShape",				"RSResize>>#biggestExtent",				"RSResize>>#biggestShape",				"RSSankey>>#setupBoxesDepth:",				"RSSankey>>#sum:",				"RSSugiyamaLayout>>#layoutAt:",				"RSTWalkBasedRegularTreeLayout>>#addChildSpacing:",				"RSTWalkBasedRegularTreeLayout>>#firstWalk:",				"RSVanDerPloegTreeLayout>>#addChildSpacing:",				"RSVanDerPloegTreeLayout>>#firstWalk:",				"ReMissingMethodCritique>>#methodHeader",				"ReleaseTest>>#testWorldMenuHasHelpForAllEntries",				"RowLayout>>#layout:in:",				"RubTextEditor>>#inOutdent:delta:",				"RunArrayTest>>#testRunArrayInvariant",				"SequenceableCollection>>#horner:init:",				"SequenceableCollection>>#injectBRGC:intoIn:intoOut:",				"Set>>#max:",				"SpClassStyle>>#mergedStylesWith:",				"SpClassStyle>>#flattenClasses",				"SpClassStyle>>#flattenProperties",				"SpExecutableLayout>>#deepPresenters",				"SpMorphStyle>>#calculateMergedProperties",				"SpMorphStyle>>#propertiesLike:",				"StInspectionCollector>>#collectInspectionContexts",				"StPharoMorphicConfiguration>>#styleSheet",				"StSizeReporter>>#reportSmartInfo:",				"StSizeReporter>>#computeLocs",				"StrikeFontSet>>#characters:in:displayAt:clippedBy:rule:fillColor:kernDelta:on:",				"StrikeFontSet>>#initializeWithFontArray:",				"String>>#findAnySubstring:startingAt:",				"String>>#asFourCode",				"SystemProgressMorph>>#maxBarWidth",				"SystemWindow>>#reframePanesAdjoining:along:to:",				"TIterateTest>>#testInjectInto",				"TKTFuture class>>#reduceCollectionOfFutures:with:",				"TaSequence>>#aliasSelector:",				"TabGroupMorph>>#minExtent",				"TableLayout>>#computeExtraSpacing:in:horizontal:target:",				"TableLayout>>#computeGlobalCellArrangement:in:horizontal:wrap:spacing:",				"TableLayout>>#computeCellArrangement:in:horizontal:target:",				"TestCase class>>#localCoverageForClass:",				"TestCase class>>#coverageForClass:until:",				"TestCase class>>#buildSuiteFromMethods:",				"TestCase class>>#shouldGenerateLastStoredRunMethod",				"TestSuite>>#defaultResources",				"Text>>#emphasisAt:",				"TextEditor>>#inOutdent:delta:",				"TimeMeasuringTest>>#versionInfoForWorkingCopiesThat:",				"ToggleWithSymbolMenuItemShortcut>>#text",				"ToggleWithSymbolMenuItemShortcut>>#drawOnAthensCanvas:",				"TonelWriter>>#selectorIsComplete:in:",				"Unicode class>>#initializeTagConstants",				"ZdcByteArrayManager>>#totalSize",				"ZipArchive>>#extractAllTo:informing:overwrite:",				"ZipArchiveMember>>#extractInDirectory:informingOverwrite:onSuccess:onRetryWithOverwrite:onFailedOverwrite:onAbortOverwrite:",				"ZnCharacterEncoder>>#encodedByteCountForCodePoints:",				"ZnCharacterEncoder>>#encodedByteCountForString:",				"ZnMultiThreadedServer>>#exceptionSet:",				"ZnStaticFileServerDelegate>>#actualFilenameFor:",				"ZnUrl>>#hash"			],			"implementors" : {				"GCoordinates" : {					"sourceCode" : [						"inject: aSeed into: aBlock",						"",						"\t^ self coordinates inject: aSeed into: aBlock"					],					"body" : [						"^ self coordinates inject: aSeed into: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 41343909,					"argumentNames" : [						"aSeed",						"aBlock"					]				},				"Collection" : {					"sourceCode" : [						"inject: thisValue into: binaryBlock",						"",						"\t\"Accumulate a running value associated with evaluating the argument, binaryBlock, with the current value of the argument, thisValue, and the receiver as block arguments.\"",						"",						"\t\"( #(1 2 3) inject: 0 into: [ :sum :each | sum + each ] ) >>> 6\"",						"",						"\t| nextValue |",						"\tnextValue := thisValue.",						"\tself do: [ :each | ",						"\t\tnextValue := binaryBlock value: nextValue value: each ].",						"\t^ nextValue"					],					"body" : [						"| nextValue |",						"nextValue := thisValue.",						"self do: [ :each | ",						"\tnextValue := binaryBlock value: nextValue value: each ].",						"^ nextValue"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Accumulate a running value associated with evaluating the argument, binaryBlock, with the current value of the argument, thisValue, and the receiver as block arguments."					],					"hash" : 35985606,					"argumentNames" : [						"thisValue",						"binaryBlock"					]				},				"LayoutCell" : {					"sourceCode" : [						"inject: thisValue into: binaryBlock",						"",						"\t\"Accumulate a running value associated with evaluating the argument, ",						"\tbinaryBlock, with the current value of the argument, thisValue, and the ",						"\treceiver as block arguments. For instance, to sum the numeric elements ",						"\tof a collection, aCollection inject: 0 into: [:subTotal :next | subTotal + ",						"\tnext].\"",						"",						"\t| nextValue |",						"\tnextValue := thisValue.",						"\tself do: [ :each | ",						"\t\tnextValue := binaryBlock value: nextValue value: each ].",						"\t^ nextValue"					],					"body" : [						"| nextValue |",						"nextValue := thisValue.",						"self do: [ :each | ",						"\tnextValue := binaryBlock value: nextValue value: each ].",						"^ nextValue"					],					"isTestMethod" : false,					"category" : "collection",					"comment" : [						"Accumulate a running value associated with evaluating the argument, ",						"\tbinaryBlock, with the current value of the argument, thisValue, and the ",						"\treceiver as block arguments. For instance, to sum the numeric elements ",						"\tof a collection, aCollection inject: 0 into: [:subTotal :next | subTotal + ",						"\tnext]."					],					"hash" : 37246918,					"argumentNames" : [						"thisValue",						"binaryBlock"					]				}			}		},		"testTopologicalSortOnCycleDo" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CollectionTest" : {					"sourceCode" : [						"testTopologicalSortOnCycleDo",						"",						"\t\"The following test is kept from TAOCP by Donald Knuth, Volume 1 page 272.\"",						"",						"\tself",						"\t\tassert: ((1 to: 9)",						"\t\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t\t (9 -> 2).",						"\t\t\t\t\t\t (3 -> 7).",						"\t\t\t\t\t\t (7 -> 5).",						"\t\t\t\t\t\t (5 -> 8).",						"\t\t\t\t\t\t (8 -> 6).",						"\t\t\t\t\t\t (4 -> 6).",						"\t\t\t\t\t\t (1 -> 3).",						"\t\t\t\t\t\t (7 -> 4).",						"\t\t\t\t\t\t (9 -> 5).",						"\t\t\t\t\t\t (2 -> 8) }",						"\t\t\t\t onCycleDo: [ Error signal ])",						"\t\tequals: #( 1 3 7 4 9 2 5 8 6 )"					],					"body" : [						"self",						"\tassert: ((1 to: 9)",						"\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t (9 -> 2).",						"\t\t\t\t\t (3 -> 7).",						"\t\t\t\t\t (7 -> 5).",						"\t\t\t\t\t (5 -> 8).",						"\t\t\t\t\t (8 -> 6).",						"\t\t\t\t\t (4 -> 6).",						"\t\t\t\t\t (1 -> 3).",						"\t\t\t\t\t (7 -> 4).",						"\t\t\t\t\t (9 -> 5).",						"\t\t\t\t\t (2 -> 8) }",						"\t\t\t onCycleDo: [ Error signal ])",						"\tequals: #( 1 3 7 4 9 2 5 8 6 )"					],					"isTestMethod" : true,					"category" : "*Containers-Links-Tests",					"comment" : [						"The following test is kept from TAOCP by Donald Knuth, Volume 1 page 272."					],					"hash" : 4940317,					"argumentNames" : [ ]				}			}		},		"makeValueLinksTable" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"TopologicalSortAlgorithm>>#value:onCycleDo:"			],			"implementors" : {				"TopologicalSortAlgorithm" : {					"sourceCode" : [						"makeValueLinksTable",						"",						"\t\"COUNT: the number of direct predecessors of this object.\"",						"",						"\t\"TOP: link to the beginning of the list of direct successors of this object.\"",						"",						"\t^ (1 to: size) collect: [ :k | 0 -> nil ]"					],					"body" : [						"^ (1 to: size) collect: [ :k | 0 -> nil ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"COUNT: the number of direct predecessors of this object."					],					"hash" : 8493111,					"argumentNames" : [ ]				}			}		},		"topologicalSortByAssociations:acyclicDo:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CollectionTest>>#testTopologicalSortOnCycleDo3"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"topologicalSortByAssociations: aRelation acyclicDo: aBlock",						"",						"\t| ordering edges |",						"\tedges := Array streamContents: [ :aStream | ",						"\t\t         [ ",						"\t\t         | isAcyclic |",						"\t\t         isAcyclic := true.",						"\t\t         ordering := self",						"\t\t\t                     topologicalSortByAssociations: aRelation",						"\t\t\t                     onCycleDo: [ :sequence :cycle | ",						"\t\t\t\t                     | edge |",						"\t\t\t\t                     isAcyclic := false.",						"\t\t\t\t                     edge := cycle anyOne.",						"\t\t\t\t                     aStream nextPut: edge.",						"\t\t\t\t                     aRelation remove: edge.",						"\t\t\t\t                     sequence ].",						"\t\t         isAcyclic ] whileFalse ].",						"",						"\t^ aBlock value: ordering value: edges"					],					"body" : [						"| ordering edges |",						"edges := Array streamContents: [ :aStream | ",						"\t         [ ",						"\t         | isAcyclic |",						"\t         isAcyclic := true.",						"\t         ordering := self",						"\t\t                     topologicalSortByAssociations: aRelation",						"\t\t                     onCycleDo: [ :sequence :cycle | ",						"\t\t\t                     | edge |",						"\t\t\t                     isAcyclic := false.",						"\t\t\t                     edge := cycle anyOne.",						"\t\t\t                     aStream nextPut: edge.",						"\t\t\t                     aRelation remove: edge.",						"\t\t\t                     sequence ].",						"\t         isAcyclic ] whileFalse ].",						"",						"^ aBlock value: ordering value: edges"					],					"isTestMethod" : false,					"category" : "*Containers-Links",					"comment" : [ ],					"hash" : 36253367,					"argumentNames" : [						"aRelation",						"aBlock"					]				}			}		},		"asValueLink" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTLinksValueLinkTest>>#testAsValueLink",				"SequenceableCollection>>#asLinkedList"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"asValueLink",						"",						"\t^ self",						"\t\t  foldr: [ :each :aValueLink | ",						"\t\t\t  ValueLink new",						"\t\t\t\t  value: each;",						"\t\t\t\t  nextLink: aValueLink;",						"\t\t\t\t  yourself ]",						"\t\t  init: nil"					],					"body" : [						"^ self",						"\t  foldr: [ :each :aValueLink | ",						"\t\t  ValueLink new",						"\t\t\t  value: each;",						"\t\t\t  nextLink: aValueLink;",						"\t\t\t  yourself ]",						"\t  init: nil"					],					"isTestMethod" : false,					"category" : "*Collections-Abstract-Extensions",					"comment" : [ ],					"hash" : 1649133,					"argumentNames" : [ ]				}			}		},		"initializeValueLinksTable:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"TopologicalSortAlgorithm>>#value:onCycleDo:"			],			"implementors" : {				"TopologicalSortAlgorithm" : {					"sourceCode" : [						"initializeValueLinksTable: table",						"",						"\t\"T2: next relation.\"",						"",						"\trelation do: [ :anAssoc | ",						"\t\t| j k |",						"\t\t\"Unpack `relation` such that `relation = (j -> k)` holds.\"",						"\t\tj := anAssoc key.",						"\t\tk := anAssoc value.",						"",						"\t\t\"T3: Increase COUNT by one.\"",						"\t\t(table at: k) in: [ :destAssoc | destAssoc key: destAssoc key + 1 ].",						"",						"\t\t\"T3: record the relation.\"",						"\t\t(table at: j) in: [ :sourceAssoc | \"Operation (8)\" ",						"\t\t\tsourceAssoc value: k ~~> sourceAssoc value ] ]"					],					"body" : [						"relation do: [ :anAssoc | ",						"\t| j k |",						"\t\"Unpack `relation` such that `relation = (j -> k)` holds.\"",						"\tj := anAssoc key.",						"\tk := anAssoc value.",						"",						"\t\"T3: Increase COUNT by one.\"",						"\t(table at: k) in: [ :destAssoc | destAssoc key: destAssoc key + 1 ].",						"",						"\t\"T3: record the relation.\"",						"\t(table at: j) in: [ :sourceAssoc | \"Operation (8)\" ",						"\t\tsourceAssoc value: k ~~> sourceAssoc value ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"T2: next relation."					],					"hash" : 25532466,					"argumentNames" : [						"table"					]				}			}		},		"sortOn:sinksValueLink:valueLinksTable:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"TopologicalSortAlgorithm>>#value:onCycleDo:"			],			"implementors" : {				"TopologicalSortAlgorithm" : {					"sourceCode" : [						"sortOn: aStream sinksValueLink: qlink valueLinksTable: table",						"",						"\t| f |",						"\tf := qlink.",						"\t[ f ] whileNotNil: [ ",						"\t\t| aValueLink anIndex |",						"\t\t\"T5: output front of queue.\"",						"\t\tanIndex := f value.",						"\t\taStream nextPut: anIndex.",						"",						"\t\t\"T7: remove from queue.\"",						"\t\tf := f nextLink.",						"",						"\t\taValueLink := (table at: anIndex) in: [ :anAssoc | ",						"\t\t\t              anAssoc value yourself: [ anAssoc value: nil ] ].",						"",						"\t\t\"T6: erase relations.\"",						"\t\taValueLink do: [ :k | ",						"\t\t\t| kIndex |",						"\t\t\tkIndex := k value.",						"\t\t\t(table at: kIndex)",						"\t\t\t\tdecrementCountIfZero: [ f := kIndex ~~> f ]",						"\t\t\t\tforTopologicalSortAlgorithm: self ] ]"					],					"body" : [						"| f |",						"f := qlink.",						"[ f ] whileNotNil: [ ",						"\t| aValueLink anIndex |",						"\t\"T5: output front of queue.\"",						"\tanIndex := f value.",						"\taStream nextPut: anIndex.",						"",						"\t\"T7: remove from queue.\"",						"\tf := f nextLink.",						"",						"\taValueLink := (table at: anIndex) in: [ :anAssoc | ",						"\t\t              anAssoc value yourself: [ anAssoc value: nil ] ].",						"",						"\t\"T6: erase relations.\"",						"\taValueLink do: [ :k | ",						"\t\t| kIndex |",						"\t\tkIndex := k value.",						"\t\t(table at: kIndex)",						"\t\t\tdecrementCountIfZero: [ f := kIndex ~~> f ]",						"\t\t\tforTopologicalSortAlgorithm: self ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 59874615,					"argumentNames" : [						"aStream",						"qlink",						"table"					]				}			}		},		"testYourselfBlock" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"ObjectTest" : {					"sourceCode" : [						"testYourselfBlock",						"",						"\t| var |",						"\tself",						"\t\tassert: (3 yourself: [ 3 + 4 ]) equals: 3;",						"\t\tassert: (3 + 4 yourself: [ :seven | seven + 5 ]) equals: 7.",						"",						"\t\"#ignoreBlock: can be used to return a value that is bound to a variable ",						"\t that immediately has to be updated, as follows:\"",						"\tvar := 7.",						"\tself",						"\t\tassert: (var yourself: [ var := var + 1 ]) equals: 7;",						"\t\tassert: var equals: 8"					],					"body" : [						"| var |",						"self",						"\tassert: (3 yourself: [ 3 + 4 ]) equals: 3;",						"\tassert: (3 + 4 yourself: [ :seven | seven + 5 ]) equals: 7.",						"",						"\"#ignoreBlock: can be used to return a value that is bound to a variable ",						"\t that immediately has to be updated, as follows:\"",						"var := 7.",						"self",						"\tassert: (var yourself: [ var := var + 1 ]) equals: 7;",						"\tassert: var equals: 8"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 5252051,					"argumentNames" : [ ]				}			}		},		"test4321ValueLinks" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTLinksValueLinkTest>>#testAsLinkedList4321"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"test4321ValueLinks",						"",						"\t| l |",						"\tl := 4 ~~> self test321ValueLinks.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 4 ~~> self test321ValueLinks.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8758090,					"argumentNames" : [ ]				}			}		},		"testAsValueLinkInjectInto" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"testAsValueLinkInjectInto",						"",						"\t| l |",						"\tl := (4 to: 1 by: -1)",						"\t\t     inject: nil",						"\t\t     into: [ :aValueLink :each | each ~~> aValueLink ].",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := (4 to: 1 by: -1)",						"\t     inject: nil",						"\t     into: [ :aValueLink :each | each ~~> aValueLink ].",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8758551,					"argumentNames" : [ ]				}			}		},		"testTopologicalSortOnCycleDo3" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CollectionTest" : {					"sourceCode" : [						"testTopologicalSortOnCycleDo3",						"",						"\t\"This test case shows how to iteratively removing edges",						"\t belonging to a cycle to yield an acyclic relation.\"",						"",						"\t| aRelation m |",						"\tm := 100.",						"\taRelation := self randomRelationOfSize: 1000 max: m.",						"",						"\t(1 to: m)",						"\t\ttopologicalSortByAssociations: aRelation",						"\t\tacyclicDo: [ :ordering :edges | ",						"\t\t\tself",						"\t\t\t\tassert: ordering",						"\t\t\t\tequals:",						"\t\t\t\t\t#( 64 78 75 80 84 95 70 71 85 99 62 97 73 88 90 82 60 92 81 83 77",						"\t\t\t\t\t   93 59 96 98 89 91 69 67 74 86 7 48 100 55 39 68 65 44 20 87 66",						"\t\t\t\t\t   58 35 41 46 32 76 37 43 94 40 57 72 16 33 54 47 1 2 13 21 38",						"\t\t\t\t\t   30 19 50 6 29 4 14 52 9 11 42 10 22 61 18 12 24 25 34 27 28 31",						"\t\t\t\t\t   45 17 3 79 36 63 8 56 49 51 15 26 23 53 5 ).",						"",						"\t\t\tself assert_testTopologicalSortOnCycleDo3_edgesEqualsTo: edges ]"					],					"body" : [						"| aRelation m |",						"m := 100.",						"aRelation := self randomRelationOfSize: 1000 max: m.",						"",						"(1 to: m)",						"\ttopologicalSortByAssociations: aRelation",						"\tacyclicDo: [ :ordering :edges | ",						"\t\tself",						"\t\t\tassert: ordering",						"\t\t\tequals:",						"\t\t\t\t#( 64 78 75 80 84 95 70 71 85 99 62 97 73 88 90 82 60 92 81 83 77",						"\t\t\t\t   93 59 96 98 89 91 69 67 74 86 7 48 100 55 39 68 65 44 20 87 66",						"\t\t\t\t   58 35 41 46 32 76 37 43 94 40 57 72 16 33 54 47 1 2 13 21 38 30",						"\t\t\t\t   19 50 6 29 4 14 52 9 11 42 10 22 61 18 12 24 25 34 27 28 31 45",						"\t\t\t\t   17 3 79 36 63 8 56 49 51 15 26 23 53 5 ).",						"",						"\t\tself assert_testTopologicalSortOnCycleDo3_edgesEqualsTo: edges ]"					],					"isTestMethod" : true,					"category" : "*Containers-Links-Tests",					"comment" : [						"This test case shows how to iteratively removing edges",						"\t belonging to a cycle to yield an acyclic relation."					],					"hash" : 5464306,					"argumentNames" : [ ]				}			}		},		"testAnyAssociation" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"DictionaryTest" : {					"sourceCode" : [						"testAnyAssociation",						"",						"\tself",						"\t\tshould: [ Dictionary new anyAssociation ]",						"\t\traise: CollectionIsEmpty.",						"",						"\tself",						"\t\tassert: (Dictionary new",						"\t\t\t\t at: 0 put: 1;",						"\t\t\t\t anyAssociation)",						"\t\tequals: 0 -> 1.",						"",						"\tself",						"\t\tassert: (Dictionary new",						"\t\t\t\t at: 0 put: 1;",						"\t\t\t\t at: 1 put: 2;",						"\t\t\t\t anyAssociation)",						"\t\tequals: 0 -> 1.",						"",						"\tself",						"\t\tassert: (Dictionary new",						"\t\t\t\t at: 0 put: 1;",						"\t\t\t\t at: 1 put: 2;",						"\t\t\t\t select: #even) anyAssociation",						"\t\tequals: 1 -> 2"					],					"body" : [						"self",						"\tshould: [ Dictionary new anyAssociation ]",						"\traise: CollectionIsEmpty.",						"",						"self",						"\tassert: (Dictionary new",						"\t\t\t at: 0 put: 1;",						"\t\t\t anyAssociation)",						"\tequals: 0 -> 1.",						"",						"self",						"\tassert: (Dictionary new",						"\t\t\t at: 0 put: 1;",						"\t\t\t at: 1 put: 2;",						"\t\t\t anyAssociation)",						"\tequals: 0 -> 1.",						"",						"self",						"\tassert: (Dictionary new",						"\t\t\t at: 0 put: 1;",						"\t\t\t at: 1 put: 2;",						"\t\t\t select: #even) anyAssociation",						"\tequals: 1 -> 2"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4951984,					"argumentNames" : [ ]				}			}		},		"test321ValueLinks" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTLinksValueLinkTest>>#test4321ValueLinks"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"test321ValueLinks",						"",						"\t| l |",						"\tl := 3 ~~> self test21ValueLinks.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 3 ~~> self test21ValueLinks.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8758090,					"argumentNames" : [ ]				}			}		},		"foldr:init:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"SequenceableCollection>>#asValueLink",				"TopologicalSortAlgorithm>>#sinksOfValueLinksTable:"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"foldr: aBlock init: init",						"",						"\t| cell |",						"\tcell := init.",						"\tself reverseDo: [ :each | cell := aBlock value: each value: cell ].",						"\t^ cell"					],					"body" : [						"| cell |",						"cell := init.",						"self reverseDo: [ :each | cell := aBlock value: each value: cell ].",						"^ cell"					],					"isTestMethod" : false,					"category" : "*Collections-Abstract-Extensions",					"comment" : [ ],					"hash" : 35991277,					"argumentNames" : [						"aBlock",						"init"					]				}			}		},		"asLinkedList" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTLinksValueLinkTest>>#testAsLinkedList",				"CTLinksValueLinkTest>>#testNilAsLinkedList",				"CTLinksValueLinkTest>>#testAsLinkedList4321",				"SequenceableCollection>>#asLinkedList",				"ValueLink>>#gtInspectorLinksUsingCanvas:"			],			"implementors" : {				"ValueLink" : {					"sourceCode" : [						"asLinkedList",						"",						"\t| list |",						"\tlist := LinkedList empty.",						"\tself do: [ :each | list addLast: each value ].",						"\t^ list"					],					"body" : [						"| list |",						"list := LinkedList empty.",						"self do: [ :each | list addLast: each value ].",						"^ list"					],					"isTestMethod" : false,					"category" : "*Collections-Support-Extensions",					"comment" : [ ],					"hash" : 2231626,					"argumentNames" : [ ]				},				"UndefinedObject" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ LinkedList empty"					],					"body" : [						"^ LinkedList empty"					],					"isTestMethod" : false,					"category" : "*Kernel-Extensions",					"comment" : [ ],					"hash" : 1580357,					"argumentNames" : [ ]				},				"SequenceableCollection" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ self asValueLink asLinkedList"					],					"body" : [						"^ self asValueLink asLinkedList"					],					"isTestMethod" : false,					"category" : "*Collections-Abstract-Extensions",					"comment" : [ ],					"hash" : 1648898,					"argumentNames" : [ ]				}			}		},		"topologicalSortByAssociations:onCycleDo:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CollectionTest>>#testTopologicalSortOnCycleDo1",				"CollectionTest>>#testTopologicalSortOnCycleDo",				"CollectionTest>>#testTopologicalSortOnCycleDo2",				"SequenceableCollection>>#topologicalSortByAssociations:acyclicDo:",				"SequenceableCollection>>#isAcyclicWithRespectToAssociations:"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"topologicalSortByAssociations: aRelation onCycleDo: cBlock",						"",						"\t^ TopologicalSortAlgorithm new",						"\t\t  size: self size;",						"\t\t  relation: aRelation;",						"\t\t  value: [ :ordering | ",						"\t\t\t  self species streamContents: [ :aStream | ",						"\t\t\t\t\t  ordering do: [ :anIndex | aStream nextPut: (self at: anIndex) ] ] ]",						"\t\t  onCycleDo: [ :cycle | ",						"\t\t\t  | sequence |",						"\t\t\t  sequence := Array streamContents: [ :aStream | ",						"\t\t\t\t\t              aStream nextPut: (self at: cycle first key).",						"\t\t\t\t\t              cycle reverseDo: [ :anAssoc | ",						"\t\t\t\t\t\t\t              aStream nextPut: (self at: anAssoc key) ] ].",						"\t\t\t  cBlock cull: sequence cull: cycle ]"					],					"body" : [						"^ TopologicalSortAlgorithm new",						"\t  size: self size;",						"\t  relation: aRelation;",						"\t  value: [ :ordering | ",						"\t\t  self species streamContents: [ :aStream | ",						"\t\t\t\t  ordering do: [ :anIndex | aStream nextPut: (self at: anIndex) ] ] ]",						"\t  onCycleDo: [ :cycle | ",						"\t\t  | sequence |",						"\t\t  sequence := Array streamContents: [ :aStream | ",						"\t\t\t\t              aStream nextPut: (self at: cycle first key).",						"\t\t\t\t              cycle reverseDo: [ :anAssoc | ",						"\t\t\t\t\t\t              aStream nextPut: (self at: anAssoc key) ] ].",						"\t\t  cBlock cull: sequence cull: cycle ]"					],					"isTestMethod" : false,					"category" : "*Containers-Links",					"comment" : [ ],					"hash" : 35729388,					"argumentNames" : [						"aRelation",						"cBlock"					]				}			}		},		"handleCycleInValueLinksTable:do:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"TopologicalSortAlgorithm>>#value:onCycleDo:"			],			"implementors" : {				"TopologicalSortAlgorithm" : {					"sourceCode" : [						"handleCycleInValueLinksTable: table do: cycleBlock",						"",						"\t| kk cycle qlink |",						"\t\"T9\"",						"\tqlink := Dictionary new.",						"\t1 to: size do: [ :k | ",						"\t\t| assoc p |",						"\t\tassoc := table at: k.",						"\t\tp := assoc value yourself: [ assoc value: 0 ].",						"",						"\t\t\"T10\"",						"\t\tp do: [ :each | qlink at: each value put: k ] ].",						"",						"\t\"T11\"",						"\tkk := qlink anyAssociation key.",						"",						"\t\"T12\"",						"\t[ ",						"\t(table at: kk) value: 1.",						"\tkk := qlink at: kk.",						"\t(table at: kk) value = 0 ] whileTrue.",						"",						"\t\"T13\"",						"\tcycle := Array streamContents: [ :aStream | ",						"\t\t         [ ",						"\t\t         aStream nextPut: kk.",						"\t\t         (table at: kk) value: 0.",						"\t\t         kk := qlink at: kk.",						"\t\t         (table at: kk) value = 1 ] whileTrue.",						"\t\t         aStream nextPut: kk ].",						"",						"\t\"Invoke the given block with the detected cycle.\"",						"\t^ cycleBlock value:",						"\t\t  (cycle overlappingPairsCollect: [ :a :b | b -> a ])"					],					"body" : [						"| kk cycle qlink |",						"\"T9\"",						"qlink := Dictionary new.",						"1 to: size do: [ :k | ",						"\t| assoc p |",						"\tassoc := table at: k.",						"\tp := assoc value yourself: [ assoc value: 0 ].",						"",						"\t\"T10\"",						"\tp do: [ :each | qlink at: each value put: k ] ].",						"",						"\"T11\"",						"kk := qlink anyAssociation key.",						"",						"\"T12\"",						"[ ",						"(table at: kk) value: 1.",						"kk := qlink at: kk.",						"(table at: kk) value = 0 ] whileTrue.",						"",						"\"T13\"",						"cycle := Array streamContents: [ :aStream | ",						"\t         [ ",						"\t         aStream nextPut: kk.",						"\t         (table at: kk) value: 0.",						"\t         kk := qlink at: kk.",						"\t         (table at: kk) value = 1 ] whileTrue.",						"\t         aStream nextPut: kk ].",						"",						"\"Invoke the given block with the detected cycle.\"",						"^ cycleBlock value:",						"\t  (cycle overlappingPairsCollect: [ :a :b | b -> a ])"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 44408940,					"argumentNames" : [						"table",						"cycleBlock"					]				}			}		},		"testTopologicalSortOnCycleDo1" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CollectionTest" : {					"sourceCode" : [						"testTopologicalSortOnCycleDo1",						"",						"\t\"This test stress four small cycles detection.\"",						"",						"\t| cycleBlock |",						"\tcycleBlock := [ :sequence :cycle | sequence , cycle ].",						"\tself",						"\t\tassert: ({ #a }",						"\t\t\t\t topologicalSortByAssociations: { (1 -> 1) }",						"\t\t\t\t onCycleDo: cycleBlock)",						"\t\tequals: { ",						"\t\t\t\t#a.",						"\t\t\t\t#a.",						"\t\t\t\t(1 -> 1) }.",						"\tself",						"\t\tassert: ({ #a. #b }",						"\t\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t\t (1 -> 2).",						"\t\t\t\t\t\t (2 -> 1) }",						"\t\t\t\t onCycleDo: cycleBlock)",						"\t\tequals: { ",						"\t\t\t\t#a.",						"\t\t\t\t#b.",						"\t\t\t\t#a.",						"\t\t\t\t(1 -> 2).",						"\t\t\t\t(2 -> 1) }.",						"\tself",						"\t\tassert: ({ #a. #b. #c }",						"\t\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t\t (1 -> 2).",						"\t\t\t\t\t\t (2 -> 3).",						"\t\t\t\t\t\t (3 -> 1) }",						"\t\t\t\t onCycleDo: cycleBlock)",						"\t\tequals: { ",						"\t\t\t\t#a.",						"\t\t\t\t#b.",						"\t\t\t\t#c.",						"\t\t\t\t#a.",						"\t\t\t\t(1 -> 2).",						"\t\t\t\t(3 -> 1).",						"\t\t\t\t(2 -> 3) }.",						"\tself",						"\t\tassert: ({ #a. #b. #c. #d. #e }",						"\t\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t\t (5 -> 1).",						"\t\t\t\t\t\t (1 -> 2).",						"\t\t\t\t\t\t (2 -> 3).",						"\t\t\t\t\t\t (3 -> 5).",						"\t\t\t\t\t\t (3 -> 4) }",						"\t\t\t\t onCycleDo: cycleBlock)",						"\t\tequals: { ",						"\t\t\t\t#c.",						"\t\t\t\t#e.",						"\t\t\t\t#a.",						"\t\t\t\t#b.",						"\t\t\t\t#c.",						"\t\t\t\t(3 -> 5).",						"\t\t\t\t(2 -> 3).",						"\t\t\t\t(1 -> 2).",						"\t\t\t\t(5 -> 1) }"					],					"body" : [						"| cycleBlock |",						"cycleBlock := [ :sequence :cycle | sequence , cycle ].",						"self",						"\tassert: ({ #a }",						"\t\t\t topologicalSortByAssociations: { (1 -> 1) }",						"\t\t\t onCycleDo: cycleBlock)",						"\tequals: { ",						"\t\t\t#a.",						"\t\t\t#a.",						"\t\t\t(1 -> 1) }.",						"self",						"\tassert: ({ #a. #b }",						"\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t (1 -> 2).",						"\t\t\t\t\t (2 -> 1) }",						"\t\t\t onCycleDo: cycleBlock)",						"\tequals: { ",						"\t\t\t#a.",						"\t\t\t#b.",						"\t\t\t#a.",						"\t\t\t(1 -> 2).",						"\t\t\t(2 -> 1) }.",						"self",						"\tassert: ({ #a. #b. #c }",						"\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t (1 -> 2).",						"\t\t\t\t\t (2 -> 3).",						"\t\t\t\t\t (3 -> 1) }",						"\t\t\t onCycleDo: cycleBlock)",						"\tequals: { ",						"\t\t\t#a.",						"\t\t\t#b.",						"\t\t\t#c.",						"\t\t\t#a.",						"\t\t\t(1 -> 2).",						"\t\t\t(3 -> 1).",						"\t\t\t(2 -> 3) }.",						"self",						"\tassert: ({ #a. #b. #c. #d. #e }",						"\t\t\t topologicalSortByAssociations: { ",						"\t\t\t\t\t (5 -> 1).",						"\t\t\t\t\t (1 -> 2).",						"\t\t\t\t\t (2 -> 3).",						"\t\t\t\t\t (3 -> 5).",						"\t\t\t\t\t (3 -> 4) }",						"\t\t\t onCycleDo: cycleBlock)",						"\tequals: { ",						"\t\t\t#c.",						"\t\t\t#e.",						"\t\t\t#a.",						"\t\t\t#b.",						"\t\t\t#c.",						"\t\t\t(3 -> 5).",						"\t\t\t(2 -> 3).",						"\t\t\t(1 -> 2).",						"\t\t\t(5 -> 1) }"					],					"isTestMethod" : true,					"category" : "*Containers-Links-Tests",					"comment" : [						"This test stress four small cycles detection."					],					"hash" : 5203093,					"argumentNames" : [ ]				}			}		},		"testAsLinkedList4321" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"testAsLinkedList4321",						"",						"\t^ self exportSlotsGraphOf: self test4321ValueLinks asLinkedList"					],					"body" : [						"^ self exportSlotsGraphOf: self test4321ValueLinks asLinkedList"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8495603,					"argumentNames" : [ ]				}			}		},		"~~>" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTLinksValueLinkTest>>#test43214ValueLinks",				"CTLinksValueLinkTest>>#testAsValueLinkInjectInto",				"CTLinksValueLinkTest>>#test21ValueLinks",				"CTLinksValueLinkTest>>#test321ValueLinks",				"CTLinksValueLinkTest>>#test4321ValueLinks",				"CTLinksValueLinkTest>>#testSimpleValueLink",				"CTLinksValueLinkTest>>#test11ValueLinksLoop",				"ContinuationTest>>#testTwoInARow",				"ContinuationTest>>#remove:oneStarWithTry:continuation:",				"ContinuationTest>>#intersectValueLink:withCollection:",				"ContinuationTest>>#remove:oneStar:sentinel:continuation:",				"ContinuationTest>>#remove:uptoLastValueLink:continuation:",				"ContinuationTest>>#testRemoveOneStar",				"ContinuationTest>>#testLeftmost",				"Integer>>#binaryCanonicalDenseRepresentation",				"Integer>>#skewBinaryCanonicalDenseRepresentation",				"Integer>>#binaryCanonicalDenseRepresentationWith:",				"Integer>>#skewBinaryCanonicalDenseRepresentationWeight:",				"Integer>>#skewBinaryCanonicalSparseRepresentation",				"SkewBinaryCanonicalNumber>>#cons:onto:",				"SkewBinaryCanonicalNumberTest>>#testIncrement",				"SkewBinaryCanonicalNumberUnaryFunctionDecrement>>#decrementBitZeroOrTwo:by:onto:",				"TopologicalSortAlgorithm>>#initializeValueLinksTable:",				"TopologicalSortAlgorithm>>#sinksOfValueLinksTable:",				"TopologicalSortAlgorithm>>#sortOn:sinksValueLink:valueLinksTable:",				"ValueLink>>#edges:parent:",				"ValueLink>>#reversed:"			],			"implementors" : {				"Object" : {					"sourceCode" : [						"~~> aValueLinkOrNil",						"",						"\t\"Answer a ValueLink between self and aValueLinkOrNil.",						"\tThis message allows the receiver to be inserted in a chain of objects, terminated by nil.\"",						"",						"\t\"Code of ValueLink>>#nextLink: and ValueLink>>#value: are inline here for speed.\"",						"",						"\t\"(1 ~~> nil) = ValueLink new value: 1\"",						"",						"\t\"(1 ~~> 'one') value >>> 1\"",						"",						"\t\"(1 ~~> nil) nextLink >>> nil\"",						"",						"\t\"Note that `value` can be ANY object; on the other hand, `nextLink` should be either another ",						"\tValueLink object or nil.\"",						"",						"\t^ ValueLink basicNew",						"\t\t  value: self;",						"\t\t  nextLink: aValueLinkOrNil;",						"\t\t  yourself"					],					"body" : [						"^ ValueLink basicNew",						"\t  value: self;",						"\t  nextLink: aValueLinkOrNil;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "associating",					"comment" : [						"Answer a ValueLink between self and aValueLinkOrNil.",						"\tThis message allows the receiver to be inserted in a chain of objects, terminated by nil."					],					"hash" : 18638817,					"argumentNames" : [						"aValueLinkOrNil"					]				}			}		},		"testAsLinkedList" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"testAsLinkedList",						"",						"\t^ self exportSlotsGraphOf: self testSimpleValueLink asLinkedList"					],					"body" : [						"^ self exportSlotsGraphOf: self testSimpleValueLink asLinkedList"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8495603,					"argumentNames" : [ ]				}			}		},		"test11ValueLinksLoop" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"test11ValueLinksLoop",						"",						"\t| l |",						"\tl := 1 ~~> nil.",						"\tl nextLink: l.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 1 ~~> nil.",						"l nextLink: l.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8758485,					"argumentNames" : [ ]				}			}		},		"test21ValueLinks" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTLinksValueLinkTest>>#test321ValueLinks"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"test21ValueLinks",						"",						"\t| l |",						"\tl := 2 ~~> self testSimpleValueLink.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := 2 ~~> self testSimpleValueLink.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8758090,					"argumentNames" : [ ]				}			}		},		"value:onCycleDo:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptTopologicalSortMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"SequenceableCollection>>#topologicalSortByAssociations:onCycleDo:"			],			"implementors" : {				"TopologicalSortAlgorithm" : {					"sourceCode" : [						"value: aBlock onCycleDo: cycleBlock",						"",						"\t| table sort qlink |",						"\ttable := self makeValueLinksTable.",						"",						"\t\"T1: initialize. T4: scan for zeros.\"",						"\tqlink := self",						"\t\t         initializeValueLinksTable: table;",						"\t\t         sinksOfValueLinksTable: table.",						"",						"\tsort := Array streamContents: [ :aStream | ",						"\t\t        self",						"\t\t\t        sortOn: aStream",						"\t\t\t        sinksValueLink: qlink",						"\t\t\t        valueLinksTable: table ].",						"",						"\t^ sort size < size",						"\t\t  ifTrue: [ self handleCycleInValueLinksTable: table do: cycleBlock ]",						"\t\t  ifFalse: [ aBlock value: sort ]"					],					"body" : [						"| table sort qlink |",						"table := self makeValueLinksTable.",						"",						"\"T1: initialize. T4: scan for zeros.\"",						"qlink := self",						"\t         initializeValueLinksTable: table;",						"\t         sinksOfValueLinksTable: table.",						"",						"sort := Array streamContents: [ :aStream | ",						"\t        self",						"\t\t        sortOn: aStream",						"\t\t        sinksValueLink: qlink",						"\t\t        valueLinksTable: table ].",						"",						"^ sort size < size",						"\t  ifTrue: [ self handleCycleInValueLinksTable: table do: cycleBlock ]",						"\t  ifFalse: [ aBlock value: sort ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 43361223,					"argumentNames" : [						"aBlock",						"cycleBlock"					]				}			}		},		"testAsValueLink" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc"			],			"implementors" : {				"CTLinksValueLinkTest" : {					"sourceCode" : [						"testAsValueLink",						"",						"\t^ self exportSlotsGraphOf: (4 to: 1 by: -1) asValueLink"					],					"body" : [						"^ self exportSlotsGraphOf: (4 to: 1 by: -1) asValueLink"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8495747,					"argumentNames" : [ ]				}			}		}	}}
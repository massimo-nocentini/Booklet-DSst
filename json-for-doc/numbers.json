{	"classes" : {		"SequenceableCollection" : {			"hash" : 856320,			"definition" : "Collection subclass: #SequenceableCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		},		"IntegerTest" : {			"hash" : 3905792,			"definition" : "TestCase subclass: #IntegerTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Tests-Numbers'",			"comment" : [				"SUnit tests for integers."			],			"category" : "Kernel-Tests-Numbers"		},		"Integer" : {			"hash" : 1011968,			"definition" : "Number subclass: #Integer\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		}	},	"messages" : {		"bitAverage:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testBitAverage"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"bitAverage: anInteger",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.7, Average without overflow.\"",						"",						"\t\"Use: x+y == (x^y) + ((x&y)<<1), that is: sum == sum_without_carries + carries.\"",						"",						"\t^ (self bitXor: anInteger) >> 1 + (self bitAnd: anInteger)"					],					"body" : [						"^ (self bitXor: anInteger) >> 1 + (self bitAnd: anInteger)"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.7, Average without overflow."					],					"hash" : 18846227,					"argumentNames" : [						"anInteger"					]				}			}		},		"testPreviousEven" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testPreviousEven",						"",						"\tself",						"\t\tassert: -2 previousEven equals: -4;",						"\t\tassert: -1 previousEven equals: -2;",						"\t\tassert: 0 previousEven equals: -2;",						"\t\tassert: 1 previousEven equals: 0;",						"\t\tassert: 2 previousEven equals: 0"					],					"body" : [						"self",						"\tassert: -2 previousEven equals: -4;",						"\tassert: -1 previousEven equals: -2;",						"\tassert: 0 previousEven equals: -2;",						"\tassert: 1 previousEven equals: 0;",						"\tassert: 2 previousEven equals: 0"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703392,					"argumentNames" : [ ]				}			}		},		"nextEvenOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testNextEvenOrSelf"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"nextEvenOrSelf",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ self + 1 bitAnd: 1 bitInvert"					],					"body" : [						"^ self + 1 bitAnd: 1 bitInvert"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806563,					"argumentNames" : [ ]				}			}		},		"nextOdd" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testNextOdd"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"nextOdd",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ self + 1 bitOr: 1"					],					"body" : [						"^ self + 1 bitOr: 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806418,					"argumentNames" : [ ]				}			}		},		"testNextOddOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testNextOddOrSelf",						"",						"\tself",						"\t\tassert: -2 nextOddOrSelf equals: -1;",						"\t\tassert: -1 nextOddOrSelf equals: -1;",						"\t\tassert: 0 nextOddOrSelf equals: 1;",						"\t\tassert: 1 nextOddOrSelf equals: 1;",						"\t\tassert: 2 nextOddOrSelf equals: 3"					],					"body" : [						"self",						"\tassert: -2 nextOddOrSelf equals: -1;",						"\tassert: -1 nextOddOrSelf equals: -1;",						"\tassert: 0 nextOddOrSelf equals: 1;",						"\tassert: 1 nextOddOrSelf equals: 1;",						"\tassert: 2 nextOddOrSelf equals: 3"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703398,					"argumentNames" : [ ]				}			}		},		"previousEvenOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testPreviousEvenOrSelf"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"previousEvenOrSelf",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ self bitAnd: 1 bitInvert"					],					"body" : [						"^ self bitAnd: 1 bitInvert"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806384,					"argumentNames" : [ ]				}			}		},		"testNextEvenOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testNextEvenOrSelf",						"",						"\tself",						"\t\tassert: -2 nextEvenOrSelf equals: -2;",						"\t\tassert: -1 nextEvenOrSelf equals: 0;",						"\t\tassert: 0 nextEvenOrSelf equals: 0;",						"\t\tassert: 1 nextEvenOrSelf equals: 2;",						"\t\tassert: 2 nextEvenOrSelf equals: 2"					],					"body" : [						"self",						"\tassert: -2 nextEvenOrSelf equals: -2;",						"\tassert: -1 nextEvenOrSelf equals: 0;",						"\tassert: 0 nextEvenOrSelf equals: 0;",						"\tassert: 1 nextEvenOrSelf equals: 2;",						"\tassert: 2 nextEvenOrSelf equals: 2"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703374,					"argumentNames" : [ ]				}			}		},		"previousEven" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testPreviousEven"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"previousEven",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ self - 1 bitAnd: 1 bitInvert"					],					"body" : [						"^ self - 1 bitAnd: 1 bitInvert"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806564,					"argumentNames" : [ ]				}			}		},		"horner:init:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"MTVisualizationsTest>>#testSequenceableCollectionHornerInit",				"SequenceableCollection>>#hornerBase2",				"SequenceableCollection>>#hornerBase10"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"horner: base init: init",						"",						"\t^ self",						"\t\t  inject: init",						"\t\t  into: [ :acc :each | (acc multiplyNumber: base) addNumber: each ]"					],					"body" : [						"^ self",						"\t  inject: init",						"\t  into: [ :acc :each | (acc multiplyNumber: base) addNumber: each ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 35729697,					"argumentNames" : [						"base",						"init"					]				}			}		},		"previousOdd" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testPreviousOdd"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"previousOdd",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ (self bitAnd: 1 bitInvert) - 1"					],					"body" : [						"^ (self bitAnd: 1 bitInvert) - 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806564,					"argumentNames" : [ ]				}			}		},		"testBitAverage" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testBitAverage",						"",						"\t| s n m slowBenchResult quickBenchResult seconds |",						"\ts := 2.",						"",						"\tself timeLimit: (s * 2 + 1) seconds.",						"",						"\tn := 38299527986758693756807879086754976930654.",						"\tm := 57483879867596837956739087695867359769587.",						"",						"\tseconds := s seconds.",						"",						"\tquickBenchResult := [ n bitAverage: m ] benchFor: seconds.",						"\tslowBenchResult := [ (n + m / 2) asInteger ] benchFor: seconds.",						"",						"\tself assert: (n bitAverage: m) equals: (n + m / 2) asInteger.",						"",						"\t\"For the sake of clarity, a run yields: 730482 < 3673262\"",						"\tself assert: slowBenchResult iterations < quickBenchResult iterations"					],					"body" : [						"| s n m slowBenchResult quickBenchResult seconds |",						"s := 2.",						"",						"self timeLimit: (s * 2 + 1) seconds.",						"",						"n := 38299527986758693756807879086754976930654.",						"m := 57483879867596837956739087695867359769587.",						"",						"seconds := s seconds.",						"",						"quickBenchResult := [ n bitAverage: m ] benchFor: seconds.",						"slowBenchResult := [ (n + m / 2) asInteger ] benchFor: seconds.",						"",						"self assert: (n bitAverage: m) equals: (n + m / 2) asInteger.",						"",						"\"For the sake of clarity, a run yields: 730482 < 3673262\"",						"self assert: slowBenchResult iterations < quickBenchResult iterations"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 6276061,					"argumentNames" : [ ]				}			}		},		"estrin:init:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"MTVisualizationsTest>>#testSequenceableCollectionEstrinInit",				"SequenceableCollection>>#estrin:init:",				"SequenceableCollection>>#estrin:"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"estrin: base init: init",						"",						"\t^ self ifEmpty: [ init ] ifNotEmpty: [ ",						"\t\t  self size = 1",						"\t\t\t  ifTrue: [ self first ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  | odd even squared |",						"\t\t\t\t  even := self class streamContents: [ :evenStream | ",						"\t\t\t\t\t          odd := self class streamContents: [ :oddStream | ",						"\t\t\t\t\t\t                 self withIndexDo: [ :each :i | ",						"\t\t\t\t\t\t\t                 (i - 1) even",						"\t\t\t\t\t\t\t\t                 ifTrue: [ evenStream nextPut: each ]",						"\t\t\t\t\t\t\t\t                 ifFalse: [ oddStream nextPut: each ] ] ] ].",						"",						"\t\t\t\t  squared := base squared.",						"",						"\t\t\t\t  (even estrin: squared init: init) addNumber:",						"\t\t\t\t\t  ((odd estrin: squared init: init) multiplyNumber: base) ] ]"					],					"body" : [						"^ self ifEmpty: [ init ] ifNotEmpty: [ ",						"\t  self size = 1",						"\t\t  ifTrue: [ self first ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | odd even squared |",						"\t\t\t  even := self class streamContents: [ :evenStream | ",						"\t\t\t\t          odd := self class streamContents: [ :oddStream | ",						"\t\t\t\t\t                 self withIndexDo: [ :each :i | ",						"\t\t\t\t\t\t                 (i - 1) even",						"\t\t\t\t\t\t\t                 ifTrue: [ evenStream nextPut: each ]",						"\t\t\t\t\t\t\t                 ifFalse: [ oddStream nextPut: each ] ] ] ].",						"",						"\t\t\t  squared := base squared.",						"",						"\t\t\t  (even estrin: squared init: init) addNumber:",						"\t\t\t\t  ((odd estrin: squared init: init) multiplyNumber: base) ] ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 35730036,					"argumentNames" : [						"base",						"init"					]				}			}		},		"nextEven" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testNextEven"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"nextEven",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ (self bitOr: 1) + 1"					],					"body" : [						"^ (self bitOr: 1) + 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806418,					"argumentNames" : [ ]				}			}		},		"nextOddOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testNextOddOrSelf"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"nextOddOrSelf",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ self bitOr: 1"					],					"body" : [						"^ self bitOr: 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806239,					"argumentNames" : [ ]				}			}		},		"testNextOdd" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testNextOdd",						"",						"\tself",						"\t\tassert: -2 nextOdd equals: -1;",						"\t\tassert: -1 nextOdd equals: 1;",						"\t\tassert: 0 nextOdd equals: 1;",						"\t\tassert: 1 nextOdd equals: 3;",						"\t\tassert: 2 nextOdd equals: 3"					],					"body" : [						"self",						"\tassert: -2 nextOdd equals: -1;",						"\tassert: -1 nextOdd equals: 1;",						"\tassert: 0 nextOdd equals: 1;",						"\tassert: 1 nextOdd equals: 3;",						"\tassert: 2 nextOdd equals: 3"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703400,					"argumentNames" : [ ]				}			}		},		"testNextEven" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testNextEven",						"",						"\tself",						"\t\tassert: -2 nextEven equals: 0;",						"\t\tassert: -1 nextEven equals: 0;",						"\t\tassert: 0 nextEven equals: 2;",						"\t\tassert: 1 nextEven equals: 2;",						"\t\tassert: 2 nextEven equals: 4"					],					"body" : [						"self",						"\tassert: -2 nextEven equals: 0;",						"\tassert: -1 nextEven equals: 0;",						"\tassert: 0 nextEven equals: 2;",						"\tassert: 1 nextEven equals: 2;",						"\tassert: 2 nextEven equals: 4"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703396,					"argumentNames" : [ ]				}			}		},		"bitToggle:do:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testBitToggleDo",				"IntegerTest>>#testBitToggleDo1"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"bitToggle: anInteger do: aBlock",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.8, Toggling between values.\"",						"",						"\t| t x |",						"\tt := self bitXor: anInteger.",						"\tx := anInteger.",						"",						"\t^ aBlock value: [ x := x bitXor: t ]"					],					"body" : [						"| t x |",						"t := self bitXor: anInteger.",						"x := anInteger.",						"",						"^ aBlock value: [ x := x bitXor: t ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.8, Toggling between values."					],					"hash" : 36410857,					"argumentNames" : [						"anInteger",						"aBlock"					]				}			}		},		"testPreviousEvenOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testPreviousEvenOrSelf",						"",						"\tself",						"\t\tassert: -2 previousEvenOrSelf equals: -2;",						"\t\tassert: -1 previousEvenOrSelf equals: -2;",						"\t\tassert: 0 previousEvenOrSelf equals: 0;",						"\t\tassert: 1 previousEvenOrSelf equals: 0;",						"\t\tassert: 2 previousEvenOrSelf equals: 2"					],					"body" : [						"self",						"\tassert: -2 previousEvenOrSelf equals: -2;",						"\tassert: -1 previousEvenOrSelf equals: -2;",						"\tassert: 0 previousEvenOrSelf equals: 0;",						"\tassert: 1 previousEvenOrSelf equals: 0;",						"\tassert: 2 previousEvenOrSelf equals: 2"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703370,					"argumentNames" : [ ]				}			}		},		"testPreviousOddOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testPreviousOddOrSelf",						"",						"\tself",						"\t\tassert: -2 previousOddOrSelf equals: -3;",						"\t\tassert: -1 previousOddOrSelf equals: -1;",						"\t\tassert: 0 previousOddOrSelf equals: -1;",						"\t\tassert: 1 previousOddOrSelf equals: 1;",						"\t\tassert: 2 previousOddOrSelf equals: 1"					],					"body" : [						"self",						"\tassert: -2 previousOddOrSelf equals: -3;",						"\tassert: -1 previousOddOrSelf equals: -1;",						"\tassert: 0 previousOddOrSelf equals: -1;",						"\tassert: 1 previousOddOrSelf equals: 1;",						"\tassert: 2 previousOddOrSelf equals: 1"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703402,					"argumentNames" : [ ]				}			}		},		"testBitToggleDo" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testBitToggleDo",						"",						"\t| n m |",						"\tn := 38299527986758693756807879086754976930654.",						"\tm := 57483879867596837956739087695867359769587.",						"",						"\tn bitToggle: m do: [ :toggle | ",						"\t\tself",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m;",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m;",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m;",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m ]"					],					"body" : [						"| n m |",						"n := 38299527986758693756807879086754976930654.",						"m := 57483879867596837956739087695867359769587.",						"",						"n bitToggle: m do: [ :toggle | ",						"\tself",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m;",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m;",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m;",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m ]"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 5225529,					"argumentNames" : [ ]				}			}		},		"testPreviousOdd" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testPreviousOdd",						"",						"\tself",						"\t\tassert: -2 previousOdd equals: -3;",						"\t\tassert: -1 previousOdd equals: -3;",						"\t\tassert: 0 previousOdd equals: -1;",						"\t\tassert: 1 previousOdd equals: -1;",						"\t\tassert: 2 previousOdd equals: 1"					],					"body" : [						"self",						"\tassert: -2 previousOdd equals: -3;",						"\tassert: -1 previousOdd equals: -3;",						"\tassert: 0 previousOdd equals: -1;",						"\tassert: 1 previousOdd equals: -1;",						"\tassert: 2 previousOdd equals: 1"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 4703355,					"argumentNames" : [ ]				}			}		},		"previousOddOrSelf" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"IntegerTest>>#testPreviousOddOrSelf"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"previousOddOrSelf",						"",						"\t\"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions.\"",						"",						"\t^ self - 1 bitOr: 1"					],					"body" : [						"^ self - 1 bitOr: 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"See 'Matters Computational' (ftxbook) section 1.1.9, ",						"\t Next or previous even or odd value, optimized versions."					],					"hash" : 1806419,					"argumentNames" : [ ]				}			}		},		"estrin:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc",				"MTVisualizationsTest>>#sutSequenceableCollectionEstrinInit"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"estrin: x",						"",						"\t^ self reversed estrin: x init: 0"					],					"body" : [						"^ self reversed estrin: x init: 0"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18690228,					"argumentNames" : [						"x"					]				}			}		},		"testBitToggleDo1" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptNumbersForDoc"			],			"implementors" : {				"IntegerTest" : {					"sourceCode" : [						"testBitToggleDo1",						"",						"\t| n m |",						"\tn := 1.",						"\tm := 0.",						"",						"\tn bitToggle: m do: [ :toggle | ",						"\t\tself",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m;",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m;",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m;",						"\t\t\tassert: toggle value equals: n;",						"\t\t\tassert: toggle value equals: m ]"					],					"body" : [						"| n m |",						"n := 1.",						"m := 0.",						"",						"n bitToggle: m do: [ :toggle | ",						"\tself",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m;",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m;",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m;",						"\t\tassert: toggle value equals: n;",						"\t\tassert: toggle value equals: m ]"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 5225587,					"argumentNames" : [ ]				}			}		}	}}
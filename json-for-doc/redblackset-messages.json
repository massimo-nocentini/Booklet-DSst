{	"classes" : {		"MetacelloScriptEngine" : {			"hash" : 1487104,			"definition" : "Object subclass: #MetacelloScriptEngine\r\tinstanceVariableNames: 'root projectSpec options'\r\tclassVariableNames: 'DefaultRepositoryDescription DefaultVersionString'\r\tpackage: 'Metacello-Core-Scripts'",			"comment" : [				"MetacelloScriptEngine runs the execution of the script for one projectSpec"			],			"category" : "Metacello-Core-Scripts"		},		"CTSplayHeapTest" : {			"hash" : 2379264,			"definition" : "CTBinaryTreeAbstractTest subclass: #CTSplayHeapTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-SplayHeap-Tests'",			"comment" : [				"A CTSplayHeapTest is a test class for testing the behavior of CTSplayHeap"			],			"category" : "Containers-SplayHeap-Tests"		},		"TSequencedConcatenationTest" : {			"hash" : 3593984,			"definition" : "Trait named: #TSequencedConcatenationTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TCloneTest" : {			"hash" : 3574016,			"definition" : "Trait named: #TCloneTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"CTLeftistHeapTest" : {			"hash" : 2376960,			"definition" : "CTBinaryTreeAbstractTest subclass: #CTLeftistHeapTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-LeftistHeap-Tests'",			"comment" : [				"A CTLeftistHeapTest is a test class for testing the behavior of CTLeftistHeap"			],			"category" : "Containers-LeftistHeap-Tests"		},		"MWHandlerProfiling" : {			"hash" : 3384576,			"definition" : "MWHandlerPrePostPlugging subclass: #MWHandlerProfiling\r\tinstanceVariableNames: 'tree runWithInMethod timedReturns orphans'\r\tclassVariableNames: ''\r\tpackage: 'MethodWrappers'",			"comment" : [				"I am a variant that waits a delay before returning from the hook notification message."			],			"category" : "MethodWrappers"		},		"Collection" : {			"hash" : 850688,			"definition" : "Object subclass: #Collection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am the abstract superclass of all classes that represent a group of elements.",				"",				"To get more information you read the explanation on Pharo by Example book in the next link: [Pharo by Example - Collections](https://github.com/SquareBracketAssociates/UpdatedPharoByExample/blob/pharo5/Collections/Collections.pillar).",				"",				"Or if you want to read in PDF format, download it from [Pharo by Example](https://github.com/SquareBracketAssociates/PharoByExample80/releases/tag/continuous) and look for Chapter 13: Collections. "			],			"category" : "Collections-Abstract-Base"		},		"MCSnapshotTest" : {			"hash" : 3240192,			"definition" : "MCTestCase subclass: #MCSnapshotTest\r\tinstanceVariableNames: 'snapshot'\r\tclassVariableNames: ''\r\tpackage: 'Monticello-Tests-Snapshots'",			"comment" : [				"This class contains tests"			],			"category" : "Monticello-Tests-Snapshots"		},		"CTBinomialHeapTest" : {			"hash" : 2360064,			"definition" : "CTBinaryTreeAbstractTest subclass: #CTBinomialHeapTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinomialHeap-Tests'",			"comment" : [				"A BinomialHeapTest is a test class for testing the behavior of BinomialHeap"			],			"category" : "Containers-BinomialHeap-Tests"		},		"MorphTreeMorphSingleSelection" : {			"hash" : 1848064,			"definition" : "MorphTreeMorphSelection subclass: #MorphTreeMorphSingleSelection\r\tinstanceVariableNames: 'selectedNodePath'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Widgets-Tree'",			"comment" : [				"Single selections in a morphic based tree"			],			"category" : "Morphic-Widgets-Tree"		},		"CTLeftistHeap" : {			"hash" : 2380032,			"definition" : "CTBinaryTreeAbstract subclass: #CTLeftistHeap\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-LeftistHeap'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LeftistHeap"		},		"CTLinkedStoragePoolQueue" : {			"hash" : 2364160,			"definition" : "CTLinkedStoragePoolStack subclass: #CTLinkedStoragePoolQueue\r\tinstanceVariableNames: 'bottom'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tbottom:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"AbstractEnumerationVisitorTest" : {			"hash" : 3730944,			"definition" : "SingleTreeTest subclass: #AbstractEnumerationVisitorTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'FileSystem-Tests-Core-Visitors'",			"comment" : [				"SUnit tests for AbstractEnumerationVisitor"			],			"category" : "FileSystem-Tests-Core-Visitors"		},		"Collection class" : {			"hash" : 850432,			"definition" : "Collection class\r\tinstanceVariableNames: ''",			"comment" : [				"I am the abstract superclass of all classes that represent a group of elements.",				"",				"To get more information you read the explanation on Pharo by Example book in the next link: [Pharo by Example - Collections](https://github.com/SquareBracketAssociates/UpdatedPharoByExample/blob/pharo5/Collections/Collections.pillar).",				"",				"Or if you want to read in PDF format, download it from [Pharo by Example](https://github.com/SquareBracketAssociates/PharoByExample80/releases/tag/continuous) and look for Chapter 13: Collections. "			],			"category" : "Collections-Abstract-Base"		},		"ComplexTest" : {			"hash" : 2863104,			"definition" : "TestCase subclass: #ComplexTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Essentials-Tests"		},		"MCClassDefinitionTest" : {			"hash" : 3232512,			"definition" : "MCTestCase subclass: #MCClassDefinitionTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Monticello-Tests-Base'",			"comment" : [				"This class contains tests"			],			"category" : "Monticello-Tests-Base"		},		"UUIDPrimitivesTest" : {			"hash" : 3539456,			"definition" : "TestCase subclass: #UUIDPrimitivesTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Network-Tests-UUID'",			"comment" : [				"SUnit tests for UUIDPrimitives "			],			"category" : "Network-Tests-UUID"		},		"TIncludesTest" : {			"hash" : 3585280,			"definition" : "Trait named: #TIncludesTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"MCSnapshot class" : {			"hash" : 293120,			"definition" : "MCSnapshot class\r\tinstanceVariableNames: ''",			"comment" : [				"MCSnapshot represents a list of entities compared to a given base entities. ",				"",				"It holds a list of definitions (instances of MCDefinition subclasses). It can install these entities or update a package."			],			"category" : "Monticello-Base"		},		"ArrayedCollection" : {			"hash" : 855808,			"definition" : "SequenceableCollection subclass: #ArrayedCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys."			],			"category" : "Collections-Abstract-Base"		},		"CTLinkedStoragePoolCircularDoubly" : {			"hash" : 2362624,			"definition" : "CTLinkedStoragePoolCircular subclass: #CTLinkedStoragePoolCircularDoubly\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"SpAbstractPresenter" : {			"hash" : 2204416,			"definition" : "Model subclass: #SpAbstractPresenter\r\tuses: TObservable\r\tinstanceVariableNames: 'owner adapter needRebuild eventHandler'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Base'",			"comment" : [				"I'm a base for all presenters. ",				"I define common behaviours for widget presenters and also for composable presenters (the ones an user regularly uses).",				"",				"From a Spec2 users, my key methods are ",				"- `SpAbstractPresenter>>#application` to get access to the application into which I play.",				"- `SpAbstractPresenter>>#initializeDialogWindow:` defines the default buttons that decorated a dialog. Subclasses can override it to be able to customize how dialog get decorated.",				"- `SpAbstractPresenter>>#initializeWindow:` is a hook to define the window title and extend.",				"- `SpAbstractPresenter>>#openWithSpec` to open the receiver with the default layout. ",				"- `SpAbstractPresenter>>#openWithSpec: aSelector` to open the receiver with the specified layout."			],			"category" : "Spec2-Core-Base"		},		"MorphTreeMorphMultipleSelection" : {			"hash" : 1847552,			"definition" : "MorphTreeMorphSelection subclass: #MorphTreeMorphMultipleSelection\r\tinstanceVariableNames: 'selectedNodePathList'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Widgets-Tree'",			"comment" : [				"Multiple selections in a morphic based tree"			],			"category" : "Morphic-Widgets-Tree"		},		"CTBinaryTreeAbstract class" : {			"hash" : 2369536,			"definition" : "CTBinaryTreeAbstract class\r\tinstanceVariableNames: ''",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinaryTreeAbstract"		},		"LinkedListTest" : {			"hash" : 3601408,			"definition" : "TestCase subclass: #LinkedListTest\r\tuses: TAddTest - {#testTAddWithOccurrences. #testTAddTwice. #testTWriteTwice} + TEmptyTest + TIterateTest + TIterateSequencedReadableTest + TPrintTest + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + TSequencedElementAccessTest + TSubCollectionAccess + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + (TCopyPartOfSequenceable - {#testCopyEmptyMethod}) + (TCopySequenceableSameContents - {#testSortBy. #integerCollection}) + TCopySequenceableWithOrWithoutSpecificElements + TCopyTest + (TCopySequenceableWithReplacement - {#testCopyReplaceAllWithManyOccurrence. #collectionWith2TimeSubcollection}) + TBeginsEndsWith + TRemoveTest + TSetArithmetic + TIncludesWithIdentityCheckTest + TStructuralEqualityTest + TOccurrencesTest + TSortTest\r\tinstanceVariableNames: 'nextLink n list link1 link2 link3 link4 nonEmpty otherList link collectionWithoutNil nonEmpty1Element collectionWithoutEqualElements elementNotIn elementIn collection5Elements collectResult unsortedCollection sortedCollection'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Base'",			"comment" : [				"A set of test cases which thoroughly test functionality of the LinkedList class."			],			"category" : "Collections-Sequenceable-Tests-Base"		},		"TCopySequenceableWithReplacementForSorted" : {			"hash" : 3580672,			"definition" : "Trait named: #TCopySequenceableWithReplacementForSorted\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TOccurrencesForMultiplinessTest" : {			"hash" : 3589376,			"definition" : "Trait named: #TOccurrencesForMultiplinessTest\r\tuses: TOccurrencesTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"CTBinaryTreeNodeSplayHeap" : {			"hash" : 2378752,			"definition" : "CTBinaryTreeNode subclass: #CTBinaryTreeNodeSplayHeap\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-SplayHeap'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SplayHeap"		},		"Protocol class" : {			"hash" : 846080,			"definition" : "Protocol class\r\tinstanceVariableNames: ''",			"comment" : [				"A Protocol is a simple value holder representing a protocol.",				"It's composed of a name and a set of method selectors"			],			"category" : "Kernel-Protocols"		},		"Morph" : {			"hash" : 1651968,			"definition" : "Object subclass: #Morph\r\tinstanceVariableNames: 'bounds owner submorphs fullBounds color extension'\r\tclassVariableNames: 'CmdGesturesEnabled CycleHalosBothDirections DefaultYellowButtonMenuEnabled EmptyArray EventDispatcher HalosEnabled ShortcutsHandler'\r\tpackage: 'Morphic-Core-Kernel'",			"comment" : [				"A Morph (from the Greek \"shape\" or \"form\") is an interactive graphical object. General information on the Morphic system can be found at http://minnow.cc.gatech.edu/squeak/30. ",				"",				"Morphs exist in a tree, rooted at a World (generally a PasteUpMorph). The morphs owned by a morph are its submorphs. Morphs are drawn recursively; if a Morph has no owner it never gets drawn. To hide a Morph and its submorphs, set its #visible property to false using the #visible: method. ",				"",				"The World (screen) coordinate system is used for most coordinates, but can be changed if there is a TransformMorph somewhere in the owner chain. ",				"",				"My instance variables have accessor methods (e.g., #bounds, #bounds:). Most users should use the accessor methods instead of using the instance variables directly.",				"",				"Structure:",				"instance var \tType \t\t\tDescription ",				"bounds \t\t\tRectangle \t\tA Rectangle indicating my position and a size that will enclose \t\t\t\t\t\t\t\t\tme. ",				"owner \t\t\tMorph\t\t \tMy parent Morph, or nil for the top-level Morph, which is a",				" \t\t\t\tor nil\t\t\tworld, typically a PasteUpMorph.",				"submorphs \t\tArray \t\t\tMy child Morphs. ",				"fullBounds \t\tRectangle \t\tA Rectangle minimally enclosing me and my submorphs. ",				"color \t\t\tColor \t\t\tMy primary color. Subclasses can use this in different ways. ",				"extension \t\tMorphExtension Allows extra properties to be stored without adding a",				"\t\t\t\tor nil  \t\t\t\tstorage burden to all morphs. ",				"",				"By default, Morphs do not position their submorphs. Morphs may position their submorphs directly or use a LayoutPolicy to automatically control their submorph positioning.",				"",				"Although Morph has some support for BorderStyle, most users should use BorderedMorph if they want borders."			],			"category" : "Morphic-Core-Kernel"		},		"DTTreeNode class" : {			"hash" : 2951424,			"definition" : "DTTreeNode class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a node from a tree used to show results in DrTestUI."			],			"category" : "DrTests-Model"		},		"TRemoveByIndexTest" : {			"hash" : 3591936,			"definition" : "Trait named: #TRemoveByIndexTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"CTUnbalancedSetTest" : {			"hash" : 2376704,			"definition" : "CTBinaryTreeAbstractTest subclass: #CTUnbalancedSetTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-RedBlackSet-Tests'",			"comment" : [				"A CTUnbalancedSetTest is a test class for testing the behavior of CTUnbalancedSet"			],			"category" : "Containers-RedBlackSet-Tests"		},		"IntervalTest" : {			"hash" : 3604480,			"definition" : "CollectionRootTest subclass: #IntervalTest\r\tuses: TSortTest - {#testSort. #testSortUsingSortBlock} + TCloneTest + TIncludesWithIdentityCheckTest + TSequencedElementAccessTest + TIterateSequencedReadableTest + TSequencedConcatenationTest + TSubCollectionAccess + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + TPrintOnSequencedTest + TConvertTest + (TCopySequenceableWithReplacement - {#testCopyReplaceAllWithManyOccurrence. #collectionWith2TimeSubcollection}) + TCopySequenceableWithOrWithoutSpecificElements + (TCopySequenceableSameContents - {#testShuffled}) + (TCopyPartOfSequenceable - {#testCopyEmptyMethod}) + TCopyTest + TBeginsEndsWith + TConvertAsSortedTest + TSequencedStructuralEqualityTest + TOccurrencesTest\r\tinstanceVariableNames: 'empty nonEmpty one elementIn elementNotIn subCollectionNotIn collectionOfFloat anotherCollection nonEmpty1Element subCollection collectionWithSubCollection subCollectionInNonEmpty collectionWithoutNil collectResult collectionOfLargeIntegers'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Base'",			"comment" : [				"SUnit tests for intervals"			],			"category" : "Collections-Sequenceable-Tests-Base"		},		"TIncludesWithIdentityCheckTest" : {			"hash" : 3585792,			"definition" : "Trait named: #TIncludesWithIdentityCheckTest\r\tuses: TIncludesTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"CTBinaryTreeEmptyUnbalanced" : {			"hash" : 2374144,			"definition" : "CTBinaryTreeEmpty subclass: #CTBinaryTreeEmptyUnbalanced\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-RedBlackSet'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-RedBlackSet"		},		"Stack" : {			"hash" : 1144832,			"definition" : "LinkedList subclass: #Stack\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Stack-Base'",			"comment" : [				"I implement a simple Stack. #push: adds a new object of any kind on top of the stack. #pop returns the first element and remove it from the stack. #top answer the first element of the stack without removing it."			],			"category" : "Collections-Stack-Base"		},		"CTHeapQ" : {			"hash" : 2366976,			"definition" : "Object subclass: #CTHeapQ\r\tinstanceVariableNames: 'heap indexes tally'\r\tclassVariableNames: ''\r\tpackage: 'Containers-HeapQ'",			"comment" : [				"I am a binary heap and mimic the one found in the Python standard library.",				"! Heapify",				"Consider the following shuffled array of 63 elements:",				"${example:name=CTHeapQTest>>#test100ShuffledInterval|previewShow=#gtBoxesFor:|noCode=}$",				"that can be heapified as ${example:name=CTHeapQTest>>#test100ShuffledIntervalRawHeapSlot|previewShow=#gtBoxesFor:|noCode=}$",				"and visualized as a tree",				"${example:name=CTHeapQTest>>#test100ShuffledIntervalHeapified|noCode=|previewShow=#gtLiveFor:|previewHeight=800}$",				"and the same heap can also be visualized as \"bubbles\" in order to emphasize the __heap invariant__:",				"${example:name=CTHeapQTest>>#test100ShuffledIntervalHeapified|noCode=|previewShow=#gtBubblesLiveFor:|previewHeight=800}$",				""			],			"category" : "Containers-HeapQ"		},		"CTLinkedStoragePoolCircular" : {			"hash" : 2362112,			"definition" : "CTLinkedStoragePool subclass: #CTLinkedStoragePoolCircular\r\tinstanceVariableNames: 'head'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\thead:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"SmallDictionary" : {			"hash" : 1135616,			"definition" : "Collection subclass: #SmallDictionary\r\tinstanceVariableNames: 'keys values size'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Dictionaries'",			"comment" : [				"`SmallDictionary` is a special dictionary optimized for small collections. In addition to the normal dictionary protocol, it also supports an `#empty` message which \"empties\" the collection but may hang on to the original elements (so it could collect garbage). Without `#empty` we would either need to create a new dictionary or explicitly remove everything from the dictionary. Both of these take more time and `#empty`. Be careful, I cannot have *nil* as key. ",				"",				"### Public API and Key Messages",				"",				"- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue \t\tallow to add an element.  ",				"- #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock \t\tallow to access my values.",				"- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: \t\tallow to iterate on me effectively",				"",				"### Examples ",				"",				"",				"To create a dictiony with indexes as key: ",				"",				"```",				"SmallDictionary withAll: #(7 3 1 3)   \t\t",				"\">>>  a SmallDictionaryDictionary(1->7 2->3 3->1 4->3 \"",				"```",				"To use Objects as key (here symbols): ",				"",				"```",				"\tcolors := SmallDictionary new ",				"\t\t\t\tat: #yellow put: Color yellow; ",				"\t\t\t\tat: #blue put: Color blue;",				"\t\t\t\tat: #red put: Color red;",				"\t\t\t\tyourself.",				"\t\t\t\t",				"\tcolors at: #yellow. \t\"returns:  Color yellow\"",				"\tcolors keys          \t\t\"returns: a Set(#blue #yellow #red)\"",				"\tcolors values     \t\t\"returns:  {Color blue. Color yellow. Color red}\"",				"",				"\tcolors empty \t\"a SmallDictionary()\"",				"```",				"",				"### Internal Representation and Key Implementation Points.",				"Instance Variables",				"- keys:\t\t<Array>\t\tArray of keys (we don't use Associations for our key value pairs)",				"- size:\t\t\t<Integer>\tSize of the dictionary",				"- values:\t\t<Array>\t\tArray of our values",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Unordered-Dictionaries"		},		"TCopyTest" : {			"hash" : 3581184,			"definition" : "Trait named: #TCopyTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"Tests whether a copied object contains the same elements than its source.",				"Note that the order is not garanteed -- see TEqualityTest for that. ",				""			],			"category" : "Collections-Abstract-Tests-Traits"		},		"CTLinkedStoragePoolStack" : {			"hash" : 2363648,			"definition" : "CTLinkedStoragePool subclass: #CTLinkedStoragePoolStack\r\tinstanceVariableNames: 'top'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\ttop:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"FLSimpleStack" : {			"hash" : 549120,			"definition" : "Object subclass: #FLSimpleStack\r\tinstanceVariableNames: 'array slotIndex'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Collections'",			"comment" : [				"FLSimpleStack is a simple stack used in Fuel to avoid a recursion while traversing the graph to serialize. While analizing the content of an object (inst vars) we can encounter simple objects (direct string representation) or complex objects (composite). In the latter case we start analizing those instVars.",				"",				"So... Imagine object X with two instVars Y and Z. Imagine the method of the traverse is called #analye:.  So you do #analize: X.  Then, in such method you check whether X has regular pointers to regular objects, and if true, you analize them. So in this case you would send #analyze: Y and #analize: Z, generating the recursion. Right ?  Notice that the time between analyse: Y and analyse: Z is dependent on the graph that is attached to Y. Y can have objects that have further objects etc. So leaving X aside, Y can be the first object to serialize and Z the last.",				"",				"With this FLSimpleStack, instead of sending #analyze: Y and #analize: Z  what Fuel does is just to do a push on a stack:   #push: Y  and #push: Z. And then we are done with X, so we pop from the stack and we continue with the next object (at some point in the future we will pop Y and Z) When there are no more objects in the stack it means we are done. "			],			"category" : "Fuel-Core-Collections"		},		"TCopyPartOfSequenceable" : {			"hash" : 3577600,			"definition" : "Trait named: #TCopyPartOfSequenceable\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TIterateTest" : {			"hash" : 3587840,			"definition" : "Trait named: #TIterateTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"I'm testing that high-order iterators are working.",				"Note however that I do not pay attention to the order of the elements.",				"Hence, my doTest is designed to not checking that. ",				"TIterateSequenceableTest is about this distinction and as such will not be applicable to test",				"Set, Bag, Dictionary. ",				"",				""			],			"category" : "Collections-Abstract-Tests-Traits"		},		"ZnDefaultServerDelegate class" : {			"hash" : 1409536,			"definition" : "ZnDefaultServerDelegate class\r\tinstanceVariableNames: ''",			"comment" : [				"I am ZnDefaultServerDelegate.",				"I function as a delegate for ZnServer, implementing #handleRequest:",				"",				"I implement responses to the following prefixes:",				"",				"/echo - an echo text of request information for debugging purposes",				"/dw-bench - a dynamic html page for benchmarking purposes",				"/unicode - a unicode test page",				"/random - a random string (/random/32 for a specific size)",				"/bytes - bytes according to a pattern (/bytes/32 for a specific size)",				"/favicon.ico - a Zn favicon",				"/status - a server status page",				"/error - force server errors",				"/session - a simpler session based counter",				"/help - lists all page prefixes",				"/ - an html welcome page",				"",				"Without any matches, I respond with a page not found.",				"",				"I can be reused without any default handlers mapped using #empty and configured using #map:to: where the second argument can be a block.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Client-Server"		},		"CTBinomialHeap class" : {			"hash" : 2371072,			"definition" : "CTBinomialHeap class\r\tinstanceVariableNames: ''",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinomialHeap"		},		"FloatArrayTest" : {			"hash" : 3649280,			"definition" : "CollectionRootTest subclass: #FloatArrayTest\r\tuses: TCreationWithTest + TSequencedStructuralEqualityTest + TSequencedConcatenationTest + TSetArithmetic + TAsStringCommaAndDelimiterSequenceableTest + TPrintOnSequencedTest + TBeginsEndsWith + TCloneTest + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + TConvertAsSortedTest + (TConvertAsSetForMultiplinessIdentityTest - {#testAsIdentitySetWithEqualsElements. #testAsIdentitySetWithIdentityEqualsElements. #testAsIdentitySetWithoutIdentityEqualsElements. #test0FixtureAsSetForIdentityMultiplinessTest}) + TCopyPartOfSequenceable + TCopyPartOfSequenceableForMultipliness + TCopySequenceableSameContents + TCopySequenceableWithOrWithoutSpecificElements + TCopySequenceableWithReplacement + TCopyTest + (TIncludesWithIdentityCheckTest - {#testIdentityIncludesNonSpecificComportement. #testIdentityIncludes. #test0FixtureIncludeWithIdentityTest}) + (TIndexAccess - {#testIdentityIndexOf. #testIdentityIndexOfIAbsent}) + (TIndexAccessForMultipliness - {#testIdentityIndexOfIAbsentDuplicate. #testIdentityIndexOfDuplicate}) + TIterateSequencedReadableTest + TPutTest + TPutBasicTest + TReplacementSequencedTest + TSequencedElementAccessTest + TSortTest + TSubCollectionAccess\r\tinstanceVariableNames: 'nonEmpty5ElementsNoDuplicate empty elementNotIn elementTwiceIn collectionWithEqualElements nonEmpty1Element collectionWithSameAtEndAndBegining collectionWith1TimeSubcollection collectionWith2TimeSubcollection collectionNotIncluded nonEmptySubcollection elementInNonEmpty replacementCollectionSameSize sortedCollection'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Tests-Arrayed'",			"comment" : [				"These tests are used to assert that FloatArrayPlugin has same results as Float asIEEE32BitWord"			],			"category" : "Collections-Tests-Arrayed"		},		"MorphTreeMorphSelection" : {			"hash" : 1847040,			"definition" : "Object subclass: #MorphTreeMorphSelection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Widgets-Tree'",			"comment" : [				"Superclass for selections in a morphic based tree"			],			"category" : "Morphic-Widgets-Tree"		},		"TIterateSequencedReadableTest" : {			"hash" : 3587328,			"definition" : "Trait named: #TIterateSequencedReadableTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"ZnRequest class" : {			"hash" : 1417216,			"definition" : "ZnRequest class\r\tinstanceVariableNames: ''",			"comment" : [				"I am ZnRequest, representing an HTTP Request, ",				"consisting of a request line, headers and an optional entity (body).",				"I am a ZnMessage.",				"I can be used for generating and parsing.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Core"		},		"SetTest" : {			"hash" : 3631872,			"definition" : "CollectionRootTest subclass: #SetTest\r\tuses: TAddForUniquenessTest + TIncludesWithIdentityCheckTest + TCloneTest + TCopyTest + TRemoveTest + TGrowableTest + TStructuralEqualityTest + TPrintTest + TAsStringCommaAndDelimiterTest + TConvertTest + TConvertAsSortedTest + TConcatenationEqualElementsRemovedTest + TOccurrencesTest + (TCreationWithTest - {#testOfSize. #collectionClass}) + (TSetArithmetic - {#collectionClass})\r\tinstanceVariableNames: 'full empty collectResult emptyButAllocatedWith20 elementNotIn collectionOfFloat collectionIncluded nonEmpty1element withoutEqualElements collection5Elements collectionWith3Elements collectionOfNonIdentical'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Tests-Sets'",			"comment" : [				"This is the unit test for the class Set. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: ",				"\t- http://www.c2.com/cgi/wiki?UnitTest",				"\t- there is a chapter in the PharoByExample book (http://pharobyexample.org/)",				"\t- the sunit class category"			],			"category" : "Collections-Unordered-Tests-Sets"		},		"MethodDictionaryTest" : {			"hash" : 3626752,			"definition" : "TestCase subclass: #MethodDictionaryTest\r\tuses: TIncludesTest + TDictionaryKeysValuesAssociationsAccess + TDictionaryRemovingTest\r\tinstanceVariableNames: 'nonEmptyDict'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Tests-Dictionaries'",			"comment" : [				"SUnit tests for MethodDictionary"			],			"category" : "Collections-Unordered-Tests-Dictionaries"		},		"ClyDataSource class" : {			"hash" : 5087232,			"definition" : "ClyDataSource class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a root of fast table data source classes which adopt Calypso query result to FastTable interface.",				"",				"My subclasses represent concrete kind of underlying tree structure: all items can be initialy expanded or initialy collapsed.",				"To create my instances use following expression:",				"\tdataSource := ClyCollapsedDataSource on: aQuery.",				"It just creates instance of data source without executing given query.",				"Query is opened by ClyQueryView when you pass data source to it: ",				"\tqueryView dataSource: aDataSource ",				"It ask data source to open for itself:",				"\tdataSource openOn: queryView",				"It executes the query and retrieves cursor to access result items in optimized way.",				"Also it subscribes on result changes. So the query view is updated when result is changed.",				"When data source is not needed anymore it should be closed:",				"\tdataSource close",				"",				"I represent actual elements of fast table by ClyDataSourceItem.",				"\tdataSource elementAt: 1 \"=>aDataSourceItem\"  ",				"Management of children is implemented by my subclasses. According to type of tree structure they implement following methods: ",				"- numberOfRows",				"- elementAt: rowIndex",				"- globalPositionOf: childDataSourceItem",				"- countChildrenOf: aDataSourceItem",				"- isItemHasChildren: aDataSourceItem",				"- definesChildren",				"- collapse: aDataSourceItem",				"- expand: aDataSourceItem",				"- isExpanded: aDataSourceItem",				"- updateExpandingItems",				"Children are represented by data sources too. My parentItem and depth variables point to the position in full tree.",				"You can ask global position in the tree using: ",				"\tdataSource globalPositionOf: childDataSourceItem",				"It should return global row index in the table of given children item.",				"",				"I implement query interface to find items",				"- findItemsWhere: conditionBlock ",				"- findItemsWith: actualObjects ",				"- findItemsSimilarTo: dataSourceItems",				"",				"My instances are subscribed on ClyEnvironmentChanged event which happen when underlying query result is changed.",				"In case of the event I update my children structure and refresh table:",				"- itemsChanged",				"Update is performed in special logic to prevent multiple updates during complex system changes.",				"First I check if I am already dirty. In that case I do nothing.",				"Otherwise I mark myself as dirty and defer actual update using UpdateScheduler which performs update in low priority process when there is a time. So if complex system change is initiated from UI operation (which is common scenario) I will be updated only when full operation will be finished. And it will be always single update independently how many changes operation produces with the system. ",				"For details look at ClyDataSourceUpdateScheduler comments.",				"",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tquery:\t\t<ClyQuery>",				"\tqueryView:\t\t<ClyQueryView>",				"\titemCursor:\t\t<ClyBrowserQueryCursor>",				"\tparentItem:\t\t<ClyDataSourceItem>",				"\tdepth:\t\t<Integer>",				"\tdirty: <Boolean>",				"\tlastFilteredDataSource: <ClyDataSource>"			],			"category" : "Calypso-Browser-DataSource"		},		"RBCondition class" : {			"hash" : 3128320,			"definition" : "RBCondition class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a refactoring condition for doing a precondition check for refactoring operations.",				"",				"A precondition check returns true or false and is used by refactoring operations to check whether the operation is applicable to the target entity (class or method refactoring).",				"",				"You can set the block code used for testing the condition (#withBlock:).",				"And I define some factory methods on my class side for creating instances of me, for some typically usage. ",				"",				"For example: ",				"This creates a condition checking if the class named #Morph implements a selector named #drawOn:",				"(RBCondition definesSelector:#drawOn: in: (RBClass existingNamed:#Morph)).",				"",				"Most users of me are refactoring operations and use my methods on the class side for creating instances."			],			"category" : "Refactoring-Core-Conditions"		},		"MetacelloAbstractVersionConstructor" : {			"hash" : 1475840,			"definition" : "MetacelloAbstractConstructor subclass: #MetacelloAbstractVersionConstructor\r\tinstanceVariableNames: 'root configuration project attributeMap attributeOrder symbolicVersion currentContext'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Constructors'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tattributeMap:\t\t<Object>",				"\tattributeOrder:\t\t<Object>",				"\tconfiguration:\t\t<Object>",				"\tcurrentContext:\t\t<Object>",				"\tproject:\t\t<Object>",				"\troot:\t\t<Object>",				"\tsymbolicVersion:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-Core-Constructors"		},		"FileLocator class" : {			"hash" : 1274112,			"definition" : "FileLocator class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a late-bound reference. I refer to a file or directory in relation to a well-known location on the filesystem, called an origin. When asked to perform a concrete operation, I look up the current location of my origin, and resolve my path against it. To add your own origin(s), see FileSystemResolver.",				"",				"Usage",				"----------",				"FileLocator vmDirectory parent pathString",				"\t> '/Applications'",				"",				"",				"FileLocator desktop.",				"FileLocator desktop basename.",				"",				"FileLocator home basename.",				"FileLocator image.",				"FileLocator vmBinary asAbsolute pathString ",				"\t>  '/Applications/CogVM.app/Contents/MacOS/CogVM'",				"FileLocator vmBinary pathString ",				"\t> '/Applications/CogVM.app/Contents/MacOS/CogVM'",				"\t\t",				"",				"",				"",				"",				"Implementation",				"------------------------",				"origin ",				"\tA symbolic name for base reference I use to resolve myself.",				"",				"path",				"\tA relative path that is resolved against my origin\"",				"\t",				"\t"			],			"category" : "FileSystem-Core-Public"		},		"RSTextExtents" : {			"hash" : 5692160,			"definition" : "RSObject subclass: #RSTextExtents\r\tinstanceVariableNames: 'width height x_advance y_advance x_bearing y_bearing'\r\tclassVariableNames: 'empty'\r\tpackage: 'Roassal3-Shapes-Text'",			"comment" : [				"Extents for RSLabel"			],			"category" : "Roassal3-Shapes-Text"		},		"CTBinomialHeap" : {			"hash" : 2371328,			"definition" : "Object subclass: #CTBinomialHeap\r\tinstanceVariableNames: 'representation'\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinomialHeap'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\trepresentation:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinomialHeap"		},		"HeapTest" : {			"hash" : 3603968,			"definition" : "CollectionRootTest subclass: #HeapTest\r\tuses: TAddTest + TGrowableTest + TConvertTest + TConvertAsSortedTest + TConvertAsSetForMultiplinessIdentityTest + TCopyTest + TSetArithmetic + TRemoveForMultiplenessTest + TOccurrencesForMultiplinessTest + (TCreationWithTest - {#testOfSize}) + TIncludesWithIdentityCheckTest\r\tinstanceVariableNames: 'collectionWithElement otherCollection nonEmpty empty elementNotIn collectResult expectedElementByDetect speciesClass elementTwiceIn doWithoutNumber element expectedSizeAfterReject collectionNotIncluded nonEmpty5ElementsWithoutDuplicate sameAtEndAndBegining nonEmpty1Element indexArray subCollection duplicateElement collectionWithDuplicateElement collectionWith4Elements stringCollection'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Base'",			"comment" : [				"SUnit tests for heap collections"			],			"category" : "Collections-Sequenceable-Tests-Base"		},		"TEmptyTest" : {			"hash" : 3582720,			"definition" : "Trait named: #TEmptyTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"I group a set of tests testing whether a collection is empty.",				"I do not do any assymption on the elements being added since it would",				"bind me to know how to access it. "			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TDictionaryCopyingTest" : {			"hash" : 3627776,			"definition" : "Trait named: #TDictionaryCopyingTest\r\tuses: TCloneTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Unordered-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Unordered-Tests-Traits"		},		"TAsStringCommaAndDelimiterSequenceableTest" : {			"hash" : 3572992,			"definition" : "Trait named: #TAsStringCommaAndDelimiterSequenceableTest\r\tuses: TAsStringCommaAndDelimiterTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"MailMessage class" : {			"hash" : 3119616,			"definition" : "MailMessage class\r\tinstanceVariableNames: ''",			"comment" : [				"I represent an Internet mail or news message.",				"",				"\ttext - the raw text of my message",				"\tbody - the body of my message, as a MIMEDocument",				"\tfields - a dictionary mapping lowercased field names into collections of MIMEHeaderValue's",				"\tparts - if I am a multipart message, then this is a cache of my parts"			],			"category" : "Network-Mail"		},		"CTBinomialTree" : {			"hash" : 2371840,			"definition" : "Object subclass: #CTBinomialTree\r\tinstanceVariableNames: 'content children'\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinomialHeap'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tchildren:\t\t<Object>",				"\tcontent:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinomialHeap"		},		"CTBinaryTreeAbstract" : {			"hash" : 2369792,			"definition" : "Object subclass: #CTBinaryTreeAbstract\r\tinstanceVariableNames: 'representation'\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinaryTreeAbstract'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\trepresentation:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinaryTreeAbstract"		},		"RBMethodNameTest" : {			"hash" : 4142592,			"definition" : "TestCase subclass: #RBMethodNameTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Refactoring-Tests-Core-Base'",			"comment" : [				"This class contains tests"			],			"category" : "Refactoring-Tests-Core-Base"		},		"CTBinaryTreeEmpty" : {			"hash" : 2368768,			"definition" : "CTBinaryTreeElement subclass: #CTBinaryTreeEmpty\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinaryTreeAbstract'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinaryTreeAbstract"		},		"CoFilter class" : {			"hash" : 5314048,			"definition" : "CoFilter class\r\tinstanceVariableNames: ''",			"comment" : [				"The filters are first class objects that knows what is the filter operation and also can compare with each other to see if they are narrowing or not the search. ",				"This information is used to know if the fetcher should be reset or not, if we are just narrowing the same query, we don't need to renarrow the fetcher."			],			"category" : "HeuristicCompletion-Model-Core"		},		"Context" : {			"hash" : 9216,			"definition" : "Object variableSubclass: #Context\r\tinstanceVariableNames: 'sender pc stackp method closureOrNil receiver'\r\tclassVariableNames: 'PrimitiveFailToken SpecialPrimitiveSimulators TryNamedPrimitiveTemplateMethod'\r\tpackage: 'Kernel-Methods'",			"comment" : [				"Instance variables:",				"\treceiver: <Object> (self)",				"\tclosureOrNil: <BlockClosure|nil> ",				"\t\tnil if I'm a method context",				"\t\tthe blockClosure being executed if I'm a block context",				"\tmethod <CompiledMethod> ",				"\t\tmethod being executed if I'm a method context",				"\t\tmethod holding the block if I'm a block context",				"\tvariable fields: <Object> temporary variables (including arguments)",				"",				"My instances hold all the dynamic state associated with the execution of either a method activation resulting from a message send or a block activation resulting from a block evaluation.",				"\t",				"MethodContexts, though normal in their variable size, are actually only used in two sizes, small and large, which are determined by the temporary space required by the method being executed.",				"",				"MethodContexts must only be created using the method newForMethod:.  Note that it is impossible to determine the real object size of a MethodContext except by asking for the frameSize of its method.  Any fields above the stack pointer (stackp) are truly invisible -- even (and especially!) to the garbage collector.  Any store into stackp other than by the primitive method stackp: is potentially fatal."			],			"category" : "Kernel-Methods"		},		"StackTest" : {			"hash" : 3607552,			"definition" : "TestCase subclass: #StackTest\r\tuses: TEmptyTest - {#testIfNotEmptyifEmpty. #testIfEmpty. #testNotEmpty} + (TCloneTest - {#testCopyNonEmpty})\r\tinstanceVariableNames: 'empty nonEmpty'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Stack-Tests-Base'",			"comment" : [				"SUnit tests for stacks"			],			"category" : "Collections-Stack-Tests-Base"		},		"BagTest" : {			"hash" : 3628288,			"definition" : "CollectionRootTest subclass: #BagTest\r\tuses: TAddTest + TIncludesWithIdentityCheckTest + TCloneTest + TCopyTest + TSetArithmetic + TConvertTest + TAsStringCommaAndDelimiterTest + TRemoveForMultiplenessTest + TPrintTest + TConvertAsSortedTest + TConvertAsSetForMultiplinessTest + TConcatenationTest + TStructuralEqualityTest + (TCreationWithTest - {#testOfSize}) + TOccurrencesForMultiplinessTest\r\tinstanceVariableNames: 'empty nonEmpty collectResult emptyButAllocatedWith20 collectionWithElement collectionIn collectionNotIn collectionOfString elementNotIn collectionWithCharacters otherCollectionWithoutEqualElements collectionWithoutNilMoreThan5'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Tests-Bags'",			"comment" : [				"SUnit tests for bags"			],			"category" : "Collections-Unordered-Tests-Bags"		},		"OrderedCollectionTest" : {			"hash" : 3604992,			"definition" : "CollectionRootTest subclass: #OrderedCollectionTest\r\tuses: TSortTest + TEmptySequenceableTest + TAddTest + TSequencedElementAccessTest + TIncludesWithIdentityCheckTest + TCloneTest + TSetArithmetic + TRemoveForMultiplenessTest + TCreationWithTest + TCopyTest + TPutBasicTest + TIterateSequencedReadableTest + TSubCollectionAccess + TIndexAccess + TCopySequenceableWithReplacement + TCopyPartOfSequenceable + TCopySequenceableSameContents + (TCopySequenceableWithOrWithoutSpecificElements - {#testForceToPaddingWith. #testForceToPaddingStartWith}) + TPrintOnSequencedTest + TAsStringCommaAndDelimiterSequenceableTest + TConvertTest + TConvertAsSetForMultiplinessIdentityTest + TSequencedConcatenationTest + TBeginsEndsWith + TReplacementSequencedTest + TIndexAccessForMultipliness + TCopyPartOfSequenceableForMultipliness + TConvertAsSortedTest + TPutTest + TSequencedStructuralEqualityTest + TOccurrencesForMultiplinessTest + TEnumeratingTest\r\tinstanceVariableNames: 'empty nonEmpty collectResult emptyButAllocatedWith20 otherCollection indexCollection collectionWithElement collectionOfFloat elementNotIn indexArray withoutEqualElements duplicateElement collectionWithDuplicateElement collection5Elements collectionWith4Elements collectionOfCollectionsOfInts collectionOfCollectionsOfStrings withCharacters simpleCollection collectionOfString collectionWithSameBeginingEnd'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Ordered'",			"comment" : [				"These test cases demonstrate addition of items into an OrderedCollection as well as item removal.",				"",				"Some of the assertions are quite complicated and use a lot of collection protocol. Such methods do not test one single method, but protocol in general."			],			"category" : "Collections-Sequenceable-Tests-Ordered"		},		"FLIndexStreamTest" : {			"hash" : 4271872,			"definition" : "TestCase subclass: #FLIndexStreamTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Tests-Core-Streams'",			"comment" : [				"SUnit tests for index streams"			],			"category" : "Fuel-Tests-Core-Streams"		},		"TAsStringCommaAndDelimiterTest" : {			"hash" : 3572480,			"definition" : "Trait named: #TAsStringCommaAndDelimiterTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"CTBinaryTreeEmptySplayHeap" : {			"hash" : 2378240,			"definition" : "CTBinaryTreeEmpty subclass: #CTBinaryTreeEmptySplayHeap\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-SplayHeap'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SplayHeap"		},		"FLSerialization" : {			"hash" : 548096,			"definition" : "Object subclass: #FLSerialization\r\tinstanceVariableNames: 'encoder root clusters analyzer'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Base'",			"comment" : [				"I implement the algorithm for serializing an object graph on a stream. FLSerializer known how to build instances of me."			],			"category" : "Fuel-Core-Base"		},		"CTBinaryTreeNodeBalanced" : {			"hash" : 2372608,			"definition" : "CTBinaryTreeNodeUnbalanced subclass: #CTBinaryTreeNodeBalanced\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-RedBlackSet'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-RedBlackSet"		},		"GVector class" : {			"hash" : 5608448,			"definition" : "GVector class\r\tuses: TGWithCoordinates classTrait\r\tinstanceVariableNames: ''",			"comment" : [				"Description",				"--------------------",				"",				"I represent a geometric vector. I have a state close to the state of a GPoint but a vector only represent a direction and a length.",				"",				"My direction will go from the origin of the plan ( (0, 0) in a 2D plan) to my coordinates. My length will be defined by my coordinates.",				"",				"Examples",				"--------------------",				"",				"\t\"Instance creation\"",				"\tGVector withCollection: #(1 2).\t \"a GVector(1,2)\"",				"\t",				"\tGVector coordinates: (GCoordinates withCollection: #(1 3)). \t\"a GVector(1,3)\"",				"\t",				"\t(GCoordinates withCollection: #(1 3)) asGVector.\t\"a GVector(1,3)\"",				"\t",				"\t#(1 2) asGVector.\t\"a GVector(1,2)\"\t",				"\t\t\t",				"\t\"Arithmetic\"\t",				"\t#(3 5) asGVector length.\t\"5.830951894845301\"",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------",				"",				"    Instance Variables",				"\tcoordinates:\t\t<GCoordinates> \tCoordinates defining my direction and length."			],			"category" : "Geometry-Core"		},		"String class" : {			"hash" : 806400,			"definition" : "String class\r\tinstanceVariableNames: ''",			"comment" : [				"A String is an indexed collection of Characters. Class String provides the abstract super class for ByteString (that represents an array of 8-bit Characters) and WideString (that represents an array of  32-bit characters).  In the similar manner of LargeInteger and SmallInteger, those subclasses are chosen accordingly for a string; namely as long as the system can figure out so, the String is used to represent the given string.",				"",				"Strings support a vast array of useful methods, which can best be learned by browsing and trying out examples as you find them in the code.",				"",				"## Substrings and slicing",				"",				"A number of selectors can be used to get substrings. `String>>#lines` will return a colection containing substrings separated by `\\\\n`, `\\\\r`, or `\\\\r\\\\n`; `String>>#trim` will return a substring with whitespace removed from the beginning and end. ",				"",				"Obtaining parts of a string can also be achieved using numbered indices, also known as slicing. There are shortcut methods for some common operations that are often inherited from `SequenceableCollection` inclusing `allButFirst`, `allButLast`, `first`, or `last`.",				"",				"```",				"s := 'abcdefg'.",				"",				"s first. \"$a\"",				"s allButFirst.  \"bcdefg\"",				"",				"s last.  \"$g\"",				"s allButLast.  \"abcdef\"",				"",				"\"pass a number argument to change the number of characters removed/kept\"",				"",				"s first: 2.  \"ab\"  ",				"s allButFirst: 2.  \"cdefg\"",				"",				"s last: 2.  \"fg\"",				"s allButLast: 2.  \"abcde\"",				"```",				"",				"To get the middle of a string use `SequenceableCollection>>#copyFrom:to:`",				"",				"```",				"s := 'abcdefg'.",				"s copyFrom: 2 to: 6. \"bcdef\"",				"```",				"",				"To count back from the end of the string use the `size` selector",				"```",				"s := 'abcdefg'",				"s copyFrom: 2 to: s size - 1 ",				"```",				"",				"## Formatting",				"",				"Strings have a `String>>#format:` selector that can be used for interpolating other objects.",				"The \"string template\" can either have numbers between curly bracket characters (`{` and `}`)",				"where the argument to format is a collection where values are indexed by number. Or pass in",				"a `HashedCollection` where the placeholders are the keys of the collection",				"```",				"'ab {1} ef {2}' format: {'cd'. 'gh'}.  \"ab cd ef gh\"",				"",				"'ab {one} ef {two}' format: ",				"    (Dictionary with: #one -> 'cd' with: #two -> 'gh').",				"```",				"",				"`String>>#contractTo:` is also useful for shortening strings to a particular length by replacing ",				"middle characters.",				"",				"## Copying and Streaming",				"As well as the `format:` selector it is possible to build up a string using contatenation with",				"`SequenceableCollection>>#,` ",				"",				"```",				"a := 'abc'.",				"b := ' easy as '.",				"c := '123'.",				"a , b , c.  \"abc easy as 123\"",				"```",				"Or alternatively, construct a string from a stream using `SequenceableCollection class>>#streamContents:`.",				"",				"```",				"s := String streamContents: [ :stream |",				"\t  stream nextPutAll: 'abcdefg';",				"\t  space;",				"\t  nextPutAll: '123456';",				"\t  space.",				"\t  '7890' putOn: stream. ].  \"abcdefg 123456 7890\"",				"```",				"",				"## Finding/Searching",				"",				"Simple reqular expression type searching can be performed using `String>>#match:`, which has similar",				"symantics as \"globbing\" in a shell. The reciever is a template string where the `#` character matches any single character and the `*` character matches any number of characters. A `Boolean` object is returned. ",				"```",				"'#abb*cdch' match: '4abbadskfakjdfadiadfnvcdch'  \"true\"",				"```",				"",				"For more complex matching use `String>>#matchesRegex:` which is an extension method implmented by `RxMatcher`. See the help documentation on regular expressions `HelpBrowser openOn: RegexHelp.`"			],			"category" : "Collections-Strings-Base"		},		"TSequencedStructuralEqualityTest" : {			"hash" : 3597056,			"definition" : "Trait named: #TSequencedStructuralEqualityTest\r\tuses: TStructuralEqualityTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"CTOrderPreservingTreeTest" : {			"hash" : 2329088,			"definition" : "TestCase subclass: #CTOrderPreservingTreeTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-OrderPreservingTree-Tests'",			"comment" : [				"A CTOrderPreservingTreeTest is a test class for testing the behavior of CTOrderPreservingTree"			],			"category" : "Containers-OrderPreservingTree-Tests"		},		"CTUnbalancedSet" : {			"hash" : 2375168,			"definition" : "CTBinaryTreeAbstract subclass: #CTUnbalancedSet\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-RedBlackSet'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-RedBlackSet"		},		"CTBinaryTreeElement" : {			"hash" : 2368256,			"definition" : "CTDoubleValueLink subclass: #CTBinaryTreeElement\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinaryTreeAbstract'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinaryTreeAbstract"		},		"CTRedBlackSet" : {			"hash" : 2375680,			"definition" : "CTUnbalancedSet subclass: #CTRedBlackSet\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-RedBlackSet'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-RedBlackSet"		},		"CTBinaryTreeNodeLeftistHeap" : {			"hash" : 2381056,			"definition" : "CTBinaryTreeNode subclass: #CTBinaryTreeNodeLeftistHeap\r\tinstanceVariableNames: 'rank'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LeftistHeap'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\trank:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LeftistHeap"		},		"CTSplayHeap" : {			"hash" : 2377728,			"definition" : "CTBinaryTreeAbstract subclass: #CTSplayHeap\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-SplayHeap'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SplayHeap"		},		"ArrayTest" : {			"hash" : 3603456,			"definition" : "CollectionRootTest subclass: #ArrayTest\r\tuses: TEmptySequenceableTest + TSequencedElementAccessTest + TCloneTest + TIncludesWithIdentityCheckTest + TCopyTest + TCreationWithTest + TPutBasicTest + TConvertTest + TOccurrencesForMultiplinessTest + TIterateSequencedReadableTest + TSequencedConcatenationTest + TReplacementSequencedTest + TAsStringCommaAndDelimiterSequenceableTest + TBeginsEndsWith + TPrintOnSequencedTest + TIndexAccess + TSubCollectionAccess + TConvertAsSetForMultiplinessIdentityTest + TCopyPartOfSequenceable + TCopySequenceableSameContents + TCopySequenceableWithOrWithoutSpecificElements + TCopySequenceableWithReplacement + TIndexAccessForMultipliness + TCopyPartOfSequenceableForMultipliness + TConvertAsSortedTest + TPutTest + TSequencedStructuralEqualityTest + TSortTest + TSetArithmetic + TEnumeratingTest\r\tinstanceVariableNames: 'example1 literalArray selfEvaluatingArray nonSEArray1 nonSEarray2 example2 empty collectResult withoutEqualElements withEqualElements withCharacters unsortedCollection sortedInAscendingOrderCollection collectionNotIncluded removedCollection elementInForCopy elementNotInForCopy firstIndex secondIndex replacementCollection indexArray valueArray nonEmptyMoreThan1Element subCollectionNotIn replacementCollectionSameSize oldSubCollection nonEmpty1Element collectionOfCollection collectionOfFloatWithEqualElements collectionWithoutNil duplicateElement collection5Elements collectionWith4Elements collectionOfCollectionsOfStrings collectionOfCollectionsOfInts simpleCollection stringCollectionWithSameBeginingAnEnd collectionOfFloat'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Base'",			"comment" : [				"This is the unit test for the class Array. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: ",				"\t- http://www.c2.com/cgi/wiki?UnitTest",				"\t- there is a chapter in the PharoByExample book (http://pharobyexample.org/)\t",				"\t- the sunit class category"			],			"category" : "Collections-Sequenceable-Tests-Base"		},		"TEmptySequenceableTest" : {			"hash" : 3582208,			"definition" : "Trait named: #TEmptySequenceableTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TRemoveTest" : {			"hash" : 3592448,			"definition" : "Trait named: #TRemoveTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"IRStackCount" : {			"hash" : 1244416,			"definition" : "Object subclass: #IRStackCount\r\tinstanceVariableNames: 'start position length'\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-Bytecode'",			"comment" : [				"This keeps track of the stack count for the BytecodeGenerator."			],			"category" : "OpalCompiler-Core-Bytecode"		},		"DictionaryTest" : {			"hash" : 3629312,			"definition" : "CollectionRootTest subclass: #DictionaryTest\r\tuses: TIncludesTest + TDictionaryAddingTest + TDictionaryComparingTest + TDictionaryCopyingTest + TDictionaryEnumeratingTest + (TDictionaryPrintingTest - {#testPrintElementsOn. #testStoreOn}) + TDictionaryRemovingTest + (TPutBasicTest - {#testAtPutOutOfBounds}) + TAsStringCommaAndDelimiterTest + TPrintTest + TConvertTest + TConvertAsSortedTest + (TCopyTest - {#testCopyEmptyWithout. #testCopyNonEmptyWithout. #testCopyNonEmptyWithoutNotIncluded}) + TSetArithmetic + TDictionaryIncludesWithIdentityCheckTest + TDictionaryValueAccessTest + TDictionaryKeysValuesAssociationsAccess + TDictionaryKeyAccessTest + TDictionaryAssociationAccessTest + TStructuralEqualityTest + TOccurrencesForMultiplinessTest\r\tinstanceVariableNames: 'emptyDict nonEmptyDict nonEmpty5ElementsNoDuplicates indexArray valueArray nonEmpty1Element collectionNotIncluded collectionIncluded associationNotIn valueNotIn keyNotIn dictionaryNotIncluded dictionaryWithDuplicateValues duplicateValue nonEmptyWithString'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Tests-Dictionaries'",			"comment" : [				"SUnit tests for dictionaries"			],			"category" : "Collections-Unordered-Tests-Dictionaries"		},		"ClyTypedScope class" : {			"hash" : 4859648,			"definition" : "ClyTypedScope class\r\tinstanceVariableNames: ''",			"comment" : [				"My subclasses represent the scope of concrete typed objects.",				"I do not require them to implement any specific methods. They just define logically what objects they represent. And they should provide methods to assess information from them.",				"",				"For example there is ClyClassScope which is based on set of classes. And there is ClyPackageScope which is based on set of packages.",				"And they provide methods which queries are using to retrieve required objects: ",				"\taClassScope classesDo: aBlock",				"\taClassScope methodsDo: aBlock ",				"\taPackageScope packagesDo: aBlock ",				"\taPackageScope classesDo: aBlock ",				"\taPackageScope methodsDo: aBlock",				"",				"I provide several methods to instantiate typed scopes:",				"",				"\tClyClassScope of: String.",				"\tClyClassScope of: String in: ClyNavigationEnvironment currentImage.",				"\tClyClassScope of: String in: ClyNavigationEnvironment currentImage named: 'String scope'.",				"",				"They create class scopes based on single basis object String.",				"",				"\tClyClassScope ofAll: {String. Point}.",				"\tClyClassScope of: {String. Point} in: ClyNavigationEnvironment currentImage.",				"\tClyClassScope of: {String. Point} in: ClyNavigationEnvironment currentImage named: 'String and Point'.",				"",				"They create scopes of two classes String and Point.",				"",				"Also users can ask for empty scope: ",				"",				"\tClyClassScope empty.",				"\tClyClassScope emptyIn: ClyNavigationEnvironment.",				"\t",				"I implement several methods convert existing scopes to new one with modified basis:",				"",				"- withNewBasisObjects: newBasisObjects",				"It returns new scope similar to receiver but with basis.",				"",				"- withExtraBasisObject: extraBasisObject ",				"It returnes new scope similar to receiver but with basis extended by given extraBasisObject.",				"",				"- withExtraBasisObjects: extraBasisObjects ",				"It returnes new scope similar to receiver but with basis extended by all extraBasisObjects.",				"",				"- withoutBasisObject: existingBasisObject ",				"It returnes new scope similar to receiver but with basis which excludes existingBasisObject. It ignores the case when given object is not in the basis of receiver scope.",				"",				"- withoutBasisObjects: existingBasisObjects ",				"It returnes new scope similar to receiver but with basis which excludes all existingBasisObjects. It ignores the case when some of given objects are not in the basis of receiver scope.",				"",				"- restrictedBy: anotherScope",				"It returnes new scope similar to receiver but with basis of given anotherScope",				"",				"Also I provide scope composition method which merges two scopes: ",				"\t",				"\t(ClyClassScope of: String) , (ClyClassScope of: Array)",				"\t",				"It returns ClyCompositeScope instance. ",				"",				"To support composite scope and query I introduce method #asUnifiedInstance which supposed to return similar scope with same kind of scope class and internal parameters but with empty basis.",				"So any possible instance of my subclass should produce equal unified instance with this method. It is used to merge subqueries and their scopes when ClyUnionQuery is built. ",				"\t",				"Also I implement my superclass abstract methods like: ",				"- supportsQuery: aQuery. It returns true for any kind of ClyTypedQuery.",				"- representsScope: aScopeClass. It just checks if receiver is kind of given scope class.",				"- adoptQuery: aQuery. It just assigns receiver to the aQuery to be it scope."			],			"category" : "Calypso-NavigationModel-Model"		},		"CollectionRootTest" : {			"hash" : 3598592,			"definition" : "ClassTestCase subclass: #CollectionRootTest\r\tuses: TIterateTest + TEmptyTest + TSizeTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Base'",			"comment" : [				"I'm the root of the hierarchy of the collection tests."			],			"category" : "Collections-Abstract-Tests-Base"		},		"GPoint class" : {			"hash" : 5603328,			"definition" : "GPoint class\r\tuses: TGWithCoordinates classTrait\r\tinstanceVariableNames: ''",			"comment" : [				"Description",				"--------------------",				"",				"I represent a geometric point. In the contrary of default Pharo point, I implement only the point logic and cannot be used as a vector. ",				"",				"Vectors can be used with GVector.",				"",				"I am based on a set of coordinates and my API should be independent from the number of dimensions of the current space. The computations will rely on coordinates.",				"",				"Examples",				"--------------------",				"",				"\t\"Instance creation\"",				"\t",				"\tGPoint withCollection: #(1 2).\t \"a GPoint(1,2)\"",				"\t",				"\tGPoint withCollection: #(1 4 2). \"a GPoint(1,4,2)\"",				"\t",				"\tGPoint coordinates: (GCoordinates withCollection: #(1 3)). \t\"a GPoint(1,3)\"",				"\t",				"\t(GCoordinates withCollection: #(1 3)) asGPoint.\t\"a GPoint(1,3)\"",				"\t",				"\t#(1 2) asGPoint.\t\"a GPoint(1,2)\"",				"\t\t",				"\t1 , 2.\t\t\"a GPoint(1,2)\"\t\t",				"\t\t",				"\t\"Arithmetic\"",				"\t(1 , 2) + (2 , 3). \"a GPoint(3,5) <= This will be a new instance.\"",				"\t",				"\t(1, 2) translateBy: (2 , 3).\t\"a GPoint(3,5) <= This will be the same instance than the receiver\" ",				"\t\t",				"\t(4, 2) - (1, 1).\t\"a GVector(3,1)\"",				"\t\t",				"\t(3, 5) middlePointTo: (9, 15).\t\"a GPoint(6,10)\"",				"\t",				"\t(3, 5) distanceTo: (9, 15).\t\"11.661903789690601\"",				"\t",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------",				"",				"    Instance Variables",				"\tcoordinates:\t\t<aGCoordinates> \tI represent the coordinates of the point."			],			"category" : "Geometry-Core"		},		"StringTest" : {			"hash" : 3613952,			"definition" : "CollectionRootTest subclass: #StringTest\r\tuses: TIncludesTest + TCloneTest + TCopyTest + TSetArithmetic + TIterateSequencedReadableTest + TPrintOnSequencedTest + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + TSequencedElementAccessTest + TSubCollectionAccess + TPutBasicTest + TCopySequenceableSameContents + TCopyPartOfSequenceable + TCopyPartOfSequenceableForMultipliness + TCopySequenceableWithOrWithoutSpecificElements + TCopySequenceableWithReplacement + TReplacementSequencedTest + (TConvertTest - {#testAsByteArray}) + TConvertAsSortedTest + TBeginsEndsWith + (TIndexAccessForMultipliness - {#testIdentityIndexOfIAbsentDuplicate. #testIdentityIndexOfDuplicate. #collectionWithNonIdentitySameAtEndAndBegining}) + TSequencedConcatenationTest + TPutTest + TConvertAsSetForMultiplinessTest + TSortTest + TSequencedStructuralEqualityTest + TOccurrencesForMultiplinessTest + TCreationWithTest\r\tinstanceVariableNames: 'string emptyString elementInNonEmpty notIn nonEmpty1element withoutEqualElements collectionNotIncluded indexInNonEmptyArray sameAtEndAndBegining nonEmpty5ElementsSorted unsortedCollection subcollection3ElementsSorted arrayWithCharacters'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Strings-Tests-Base'",			"comment" : [				"This is the unit test for the class String. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: ",				"\t- http://www.c2.com/cgi/wiki?UnitTest",				"\t- there is a chapter in the PharoByExample book (http://pharobyexample.org/)",				"\t- the sunit class category"			],			"category" : "Collections-Strings-Tests-Base"		},		"LGitCommitBuilder" : {			"hash" : 6048512,			"definition" : "LGitRepositoryObject subclass: #LGitCommitBuilder\r\tinstanceVariableNames: 'author committer tree parents message updateReference messageEncoding commitId'\r\tclassVariableNames: ''\r\tpackage: 'LibGit-Core-HelperObjects'",			"comment" : [				"A commit builder for git"			],			"category" : "LibGit-Core-HelperObjects"		},		"HashedCollection class" : {			"hash" : 849920,			"definition" : "HashedCollection class\r\tinstanceVariableNames: ''",			"comment" : [				"I am an abstract collection of objects that implement hash and equality in a consistent way. This means that whenever two objects are equal, their hashes have to be equal too. If two objects are equal then I can only store one of them. Hashes are expected to be integers (preferably SmallIntegers). I also expect that the objects contained by me do not change their hashes. If that happens, hash invariants have to be re-established, which can be done by #rehash.",				"",				"Since I'm abstract, no instances of me should exist. My subclasses should implement #scanFor:, #fixCollisionsFrom: and #noCheckNoGrowFillFrom:.",				"",				"Instance Variables",				"\tarray:\t\t<ArrayedCollection> (typically Array or WeakArray)",				"\ttally:\t\t<Integer> (non-negative)",				"",				"array",				"\t- An array whose size is a prime number, it's non-nil elements are the elements of the collection, and whose nil elements are empty slots. There is always at least one nil. In fact I try to keep my \"load\" at 75% or less so that hashing will work well.",				"",				"tally",				"\t- The number of elements in the collection. The array size is always greater than this.",				"",				"Implementation details:",				"I implement a hash table which uses open addressing with linear probing as the method of collision resolution. Searching for an element or a free slot for an element is done by #scanFor: which should return the index of the slot in array corresponding to it's argument. When an element is removed #fixCollisionsFrom: should rehash all elements in array between the original index of the removed element, wrapping around after the last slot until reaching an empty slot. My maximum load factor (75%) is hardcoded in #atNewIndex:put:, so it can only be changed by overriding that method. When my load factor reaches this limit I replace my array with a larger one (see #grow) ensuring that my load factor will be less than or equal to 50%. The new array is filled by #noCheckNoGrowFillFrom: which should use #scanForEmptySlotFor: instead of #scanFor: for better performance. I do not shrink."			],			"category" : "Collections-Abstract-Base"		},		"ZnRequestLine class" : {			"hash" : 1419264,			"definition" : "ZnRequestLine class\r\tinstanceVariableNames: ''",			"comment" : [				"I am an HTTP Request Line.",				"I consist of an HTTP method, an URI and an HTTP protocol version.",				"I can be used for generating and parsing.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Core"		},		"TSizeTest" : {			"hash" : 3595520,			"definition" : "Trait named: #TSizeTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"DATarjanAlgorithm" : {			"hash" : 1789184,			"definition" : "Object subclass: #DATarjanAlgorithm\r\tinstanceVariableNames: 'runningIndex stack stronglyConnectedComponents'\r\tclassVariableNames: ''\r\tpackage: 'Tool-DependencyAnalyser-Core'",			"comment" : [				"A class to do Tarjan Algorithm on a PDPackageRelation, in order to detect strongly connected components.",				"Give a package dependency graph (PDPackageRelationGraph)  in entry of the message run to run the Tarjan algorithm and retrieve all the strongly connected components graph."			],			"category" : "Tool-DependencyAnalyser-Core"		},		"CTBinaryTreeNode" : {			"hash" : 2369280,			"definition" : "CTBinaryTreeElement subclass: #CTBinaryTreeNode\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinaryTreeAbstract'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-BinaryTreeAbstract"		},		"Path class" : {			"hash" : 833024,			"definition" : "Path class\r\tinstanceVariableNames: ''",			"comment" : [				"I'm a private and abstract filesystem path, independent of the string representation used to describe paths on a specific filesystem. I provide methods for navigating the filesystem hierarchy and working with absolute and relative paths. I only refer to a concrete file or directory with regard to a specific filesystem. Normally users should not use me directly. ",				"",				"API instance creation:",				"",				"- #from: parses the supplied string using the default delimeter",				"- #from:delimiter: parses the supplied string using the supplied delimiter.",				"- #/ creates an absolute path from the supplied string",				"- #* creates a relative path from the supplied string",				"",				"API path manipulation:",				"",				"- #/ adds the supplied string to the receiver"			],			"category" : "FileSystem-Path-Base"		},		"TPutBasicTest" : {			"hash" : 3590912,			"definition" : "Trait named: #TPutBasicTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TConcatenationEqualElementsRemovedTest" : {			"hash" : 3575040,			"definition" : "Trait named: #TConcatenationEqualElementsRemovedTest\r\tuses: TConcatenationTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"SortedCollectionTest" : {			"hash" : 3605504,			"definition" : "CollectionRootTest subclass: #SortedCollectionTest\r\tuses: TIterateSequencedReadableTest + TPrintOnSequencedTest + TAsStringCommaAndDelimiterSequenceableTest + TIncludesWithIdentityCheckTest + (TSequencedElementAccessTest - {#testAtAll}) + TSubCollectionAccess + TIndexAccessForMultipliness + TRemoveTest + TConvertTest + TConvertAsSetForMultiplinessIdentityTest + TAddTest + TBeginsEndsWith + (TCopySequenceableSameContents - {#testShuffled}) + TSetArithmetic + TRemoveByIndexTest + TCopyPartOfSequenceable + TCopyPartOfSequenceableForMultipliness + (TCopySequenceableWithOrWithoutSpecificElements - {#testForceToPaddingStartWith. #testForceToPaddingWith. #testCopyWithFirst. #testCopyWithoutIndex}) + TCopySequenceableWithReplacementForSorted + TCopyTest + TConvertAsSortedTest + TSequencedStructuralEqualityTest + TCreationWithTest + TOccurrencesForMultiplinessTest\r\tinstanceVariableNames: 'nonEmpty elementExistsTwice empty collectResult nonEmpty1Element collectionOfFloat accessCollection elementNoteIn oldSubcollection withoutEqualElements collectionOfFloatWithDuplicate collectionIncluded collectionNotIncluded collectionWithoutNil duplicateFloat nonEmpty5Elements collectionWith4Elements collectionOfString stringCollectionSameEndAndBegining'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Ordered'",			"comment" : [				"SUnit tests for sorted collections"			],			"category" : "Collections-Sequenceable-Tests-Ordered"		},		"CTRedBlackSetTest" : {			"hash" : 2376192,			"definition" : "CTBinaryTreeAbstractTest subclass: #CTRedBlackSetTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-RedBlackSet-Tests'",			"comment" : [				"A CTRedBlackSetTest is a test class for testing the behavior of CTRedBlackSet"			],			"category" : "Containers-RedBlackSet-Tests"		},		"TStructuralEqualityTest" : {			"hash" : 3596544,			"definition" : "Trait named: #TStructuralEqualityTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"Tests whether two objects are equals: they contain the same objects in the same order."			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TBeginsEndsWith" : {			"hash" : 3573504,			"definition" : "Trait named: #TBeginsEndsWith\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"FileSystem class" : {			"hash" : 1272576,			"definition" : "FileSystem class\r\tinstanceVariableNames: ''",			"comment" : [				"I present a low-level protocol for interacting with filesystems. I hold a reference to",				"a store (a subinstance of FileSystemStore) which takes care of the details of performing ",				"file and directory operations on the filesystem I represent. ",				"",				"I am responsible for resolving all paths that",				"I pass into my store. My store acts as a factory and offers platform specific actions.",				"",				"",				"FileSystem instances know two methods that return a Reference object: workingDirectory and root.",				"",				"FileSystem disk workingDirectory",				"FileSystem disk root",				""			],			"category" : "FileSystem-Core-Public"		},		"KMShortcutTest" : {			"hash" : 4446208,			"definition" : "AbstractKeymappingTest subclass: #KMShortcutTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-Tests'",			"comment" : [				"SUnit tests for key mapping shortcuts"			],			"category" : "Keymapping-Tests"		},		"TConcatenationTest" : {			"hash" : 3574528,			"definition" : "Trait named: #TConcatenationTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TOccurrencesTest" : {			"hash" : 3588864,			"definition" : "Trait named: #TOccurrencesTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"TGrowableTest" : {			"hash" : 3583744,			"definition" : "Trait named: #TGrowableTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"MemoryStore" : {			"hash" : 1434880,			"definition" : "FileSystemStore subclass: #MemoryStore\r\tinstanceVariableNames: 'root'\r\tclassVariableNames: 'CurrentFS'\r\tpackage: 'FileSystem-Memory-Store'",			"comment" : [				"I'm a specific store for memory file system"			],			"category" : "FileSystem-Memory-Store"		},		"WideCharacterSetTest" : {			"hash" : 3618048,			"definition" : "TestCase subclass: #WideCharacterSetTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Tests-CharacterSets'",			"comment" : [				"WideCharacterSetTest holds tests for WideCharacterSet"			],			"category" : "Collections-Support-Tests-CharacterSets"		},		"SymbolTest" : {			"hash" : 3614464,			"definition" : "CollectionRootTest subclass: #SymbolTest\r\tuses: TSortTest - {#testSort. #testSortUsingSortBlock} + TIncludesTest + (TCloneTest - {#testCopyCreatesNewObject}) + TCopyPreservingIdentityTest + TCopyTest + (TSetArithmetic - {#testDifferenceWithNonNullIntersection}) + TIterateSequencedReadableTest + TSequencedConcatenationTest + TPrintOnSequencedTest + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + (TIndexAccessForMultipliness - {#testIdentityIndexOfIAbsentDuplicate. #testIdentityIndexOfDuplicate. #collectionWithNonIdentitySameAtEndAndBegining}) + TSequencedElementAccessTest + TSubCollectionAccess + (TCopySequenceableSameContents - {#testShuffled}) + (TCopyPartOfSequenceable - {#testCopyEmptyMethod. #integerCollectionWithoutEqualElements}) + TCopyPartOfSequenceableForMultipliness + TCopySequenceableWithReplacement + TBeginsEndsWith + TConvertAsSortedTest + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + TCopySequenceableWithOrWithoutSpecificElements + TConvertAsSetForMultiplinessTest + TSequencedStructuralEqualityTest + TOccurrencesForMultiplinessTest\r\tinstanceVariableNames: 'emptySymbol nonEmptySymbol5ElementsNoDuplicates notIn collectionNotIncluded collectionSize4 collection1Element sameAtEndAndBegining with2timeSubcollection subcollection3ElementsSorted'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Strings-Tests-Base'",			"comment" : [				"This is the unit test for the class Symbol. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: ",				"\t- http://www.c2.com/cgi/wiki?UnitTest",				"\t- there is a chapter in the PharoByExample book (http://pharobyexample.org/)",				"\t- the sunit class category"			],			"category" : "Collections-Strings-Tests-Base"		},		"CompiledMethodTrailer class" : {			"hash" : 914688,			"definition" : "CompiledMethodTrailer class\r\tinstanceVariableNames: ''",			"comment" : [				"I am responsible for encoding and decoding various kinds of compiled method trailer data.",				"I should not expose any binary data outside of myself, so all tools which working with compiled methods",				"should ask me to encode the meta-data, they want to be added to the compiled method trailer, as well as retrieve it.",				"",				"To add a new kind of trailer, you should give it a proper name and define it in the #trailerKinds method at my class side.",				"Then you need to implement a corresponding #encode<your name> and #decode<your name> methods at instance side. Then add any public accessor methods, which will use a newly introduced trailer kind for communicating with outer layer(s).",				"",				"An encodeXXX methods should store result (byte array) into encodedData instance variable.",				"",				"A decodeXXX methods should read the data from compiled method instance, held by 'method' ivar,",				"and always set 'size' ivar (denoting a total length of trailer in compiled method) and optionally 'data' ivar which should keep a decoded data, ready to be used by outer layer(s) using accessor method(s) you providing.",				"",				"The kind of compiled method trailer is determined by the last byte of compiled method.",				"",				"The byte format used is following: ",				"\t\"2rkkkkkkdd\"",				"",				"where 'k' bits stands for 'kind' , allowing totally 64 different kinds of method trailer",				"and 'd' bits is data.",				"",				"Following is the list of currently defined trailer kinds:",				"",				"NoTrailer , k = 000000, dd unused",				"method has no trailer, and total trailer size bytes is always 1",				"",				"ClearedTrailer, k = 000001, ",				"method has cleared trailer (it was set to something else, but then cleared) ",				"dd+1  determines the number of bytes for size field, and size is a total length of trailer bytes",				"So a total length of trailer is: 1 + (dd + 1) + size",				"",				"TempsNamesQCompress, k = 000010",				"the trailer contains a list of method temp names,  compressed using qCompress: method. ",				"dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed buffer.",				"So a total length of trailer is:  1 + (dd + 1) + size",				"",				"TempsNamesZip, k = 000011",				"the trailer contains a list of method temp names,  compressed using GZIP compression method. ",				"dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed buffer",				"So a total length of trailer is: 1 + (dd + 1) + size",				"",				"SourceBySelector, k = 000100",				"the trailer indicates , that method source is determined by a class + selector where it is installed to. ",				"Trailer size = 1.",				"",				"SourceByStringIdentifier, k = 000101",				"the trailer indicates , that method source is determined by a class + some ByteString identifier. ",				"dd+1  determines the number of bytes for size of ByteString identifier, and size is number of bytes of string.",				"A total length of trailer is:  1 + (dd + 1) + size",				"",				"EmbeddedSourceQCompress, k = 000110",				"the trailer contains an utf-8 encoded method source code, compressed using qCompress method",				"dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed source code",				"A total length of trailer is:  1 + (dd + 1) + size",				"",				"EmbeddedSourceZip, k = 000111",				"the trailer contains an utf-8 encoded method source code, comressed using GZIP ",				"dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed buffer",				"A total length of trailer is:  1 + (dd + 1) + size",				"",				"VarLengthSourcePointer, k = 001000",				"the trailer is variable-length encoded source pointer. ",				"dd bits is unused.",				"",				"ExtendedKind, k = 001001",				"the next byte of trailer (one that prepends the last byte of compiled method)",				"denotes an extended kind of trailer, allowing to use additional 256 kinds of encoding method's trailer in future. ",				"",				"SourcePointer, k = 111111 ",				"the trailer is encoded source pointer. Total trailer size is 4-bytes ",				"(this kind of encoding is backwards compatible with most of existing compiled methods)",				""			],			"category" : "Kernel-Methods"		},		"FileSystemGuide" : {			"hash" : 1280768,			"definition" : "Object subclass: #FileSystemGuide\r\tinstanceVariableNames: 'visitor work selectChildren'\r\tclassVariableNames: ''\r\tpackage: 'FileSystem-Core-Base-Guide'",			"comment" : [				"I am an abstract superclass for objects that fulfill the Guide role in the Guide/Visitor pattern. My subclasses know how to traverse a filesystem in a specific order, \"showing\" the files and directories they encounter to a visitor.",				"",				"visitor",				"\tAn object that fulfills the Visitor role and implements the visitor protocol.",				"\t",				"work",				"\tAn OrderedCollection, used to keep track of filesystem nodes that have not yet been visited"			],			"category" : "FileSystem-Core-Base-Guide"		},		"TCopySequenceableSameContents" : {			"hash" : 3579136,			"definition" : "Trait named: #TCopySequenceableSameContents\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		},		"FileSystem" : {			"hash" : 1282048,			"definition" : "Object subclass: #FileSystem\r\tinstanceVariableNames: 'store'\r\tclassVariableNames: ''\r\tpackage: 'FileSystem-Core-Public'",			"comment" : [				"I present a low-level protocol for interacting with filesystems. I hold a reference to",				"a store (a subinstance of FileSystemStore) which takes care of the details of performing ",				"file and directory operations on the filesystem I represent. ",				"",				"I am responsible for resolving all paths that",				"I pass into my store. My store acts as a factory and offers platform specific actions.",				"",				"",				"FileSystem instances know two methods that return a Reference object: workingDirectory and root.",				"",				"FileSystem disk workingDirectory",				"FileSystem disk root",				""			],			"category" : "FileSystem-Core-Public"		},		"CTBinaryTreeAbstractTest" : {			"hash" : 2370304,			"definition" : "TestCase subclass: #CTBinaryTreeAbstractTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-BinaryTreeAbstract-Tests'",			"comment" : [				"A CTBinaryTreeAbstractTest is a test class for testing the behavior of CTBinaryTreeAbstract"			],			"category" : "Containers-BinaryTreeAbstract-Tests"		},		"RSTextExtents class" : {			"hash" : 5691904,			"definition" : "RSTextExtents class\r\tinstanceVariableNames: ''",			"comment" : [				"Extents for RSLabel"			],			"category" : "Roassal3-Shapes-Text"		},		"Array class" : {			"hash" : 791552,			"definition" : "Array class\r\tinstanceVariableNames: ''",			"comment" : [				"Array is a fixed-sized collection of elements accessed by integer indices. Contrary to the C convention, the first element of a Pharo array is at position 1 and not 0. The main protocol to access array elements is the method `at:` and `at:put:`. ",				"",				"- `at: anInteger` returns the element at index anInteger. ",				"- `at: anInteger put: anObject` puts `anObject` at index `anInteger`. ",				"",				"Arrays are fixed-size collections therefore we cannot add or remove elements at the end of an array. ",				"",				"The following code creates an array of size 5, puts values in the first 3 locations and returns the first element.",				"",				"``` ",				"| anArray |",				"anArray := Array new: 5. ",				"anArray at: 1 put: 4. ",				"anArray at: 2 put: 3/2. ",				"anArray at: 3 put: 'ssss'. ",				"anArray at: 1\t\t\t",				">>> 4",				"```",				"",				"`#()` creates literal arrays with static (or “literal”) elements that have to be known when the expression is compiled, and not when it is executed. ",				"",				"The following code creates an array of size 2 where the first element is the (literal) number 1 and the second the (literal) string 'here'.",				"",				"``` ",				"#(1 'here') size ",				"> 2",				"```",				"",				"`{ }` is a way to create arrays in a more dynamic manner.",				"",				"``` ",				"| array |",				"array := (Array new: 2). ",				"array",				"\tat: 1 put: (Point x: 10 y: 20);",				"\tat: 2 put: (Point x: 10 y: 20). ",				"\tarray\t\t\t",				"```",				"",				"is equivalent to ",				"",				"```",				"{(10@20) . (10@20)}",				"{Point x: 10 y: 20 . Point x: 10 y: 20}",				"```"			],			"category" : "Collections-Sequenceable-Base"		},		"FLMaterialization" : {			"hash" : 546560,			"definition" : "Object subclass: #FLMaterialization\r\tinstanceVariableNames: 'clusterCount clusters root decoder header'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Base'",			"comment" : [				"I implement the algorithm for materializing an object graph on a stream. FLMaterializer known how to build instances of me."			],			"category" : "Fuel-Core-Base"		},		"GAngleTest" : {			"hash" : 5611776,			"definition" : "GTestCase subclass: #GAngleTest\r\tinstanceVariableNames: 'angle'\r\tclassVariableNames: ''\r\tpackage: 'Geometry-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Geometry-Tests"		},		"GCoordinates class" : {			"hash" : 5599744,			"definition" : "GCoordinates class\r\tinstanceVariableNames: ''",			"comment" : [				"Description",				"--------------------",				"",				"I represent a set of coordinates that will be used by other geometric elements.",				"",				"My subclass will represent sets of a certain amount of coordinates. In the long terme we would like to remove all the subclasses and that everything manage myself as a n-dimensions coordinates set, but for now we prefer to begin with simple sets like 2D or 3D.",				"",				"I implement basic arithmetic that can be done with coordinates.",				"",				"Examples",				"--------------------",				"\t",				"\t\"Instance creation\"",				"\tGCoordinates withCollection: #(1 3). \t\"(1,3)\"",				"\t",				"\t#(1 3) asGCoordinates.\t\"(1,3)\"",				"\t",				"\t\"Arithmetic\"\t\t",				"\t(GCoordinates withCollection: #(1 3)) + (GCoordinates withCollection: #(5 1)). \t\"(6,4)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) - (GCoordinates withCollection: #(5 1)). \t\"(-4,2)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) * 2. \t\"(2,6)\"",				"\t\t",				"\t(GCoordinates withCollection: #(1 3)) / 2. \t\"((1/2),(3/2))\"",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------",				"",				"    Instance Variables",				"\tcoordinates:\t\t<aCollection> \tA collection of all the coordinates I contains."			],			"category" : "Geometry-Core"		},		"CTBinaryTreeNodeUnbalanced" : {			"hash" : 2372096,			"definition" : "CTBinaryTreeNode subclass: #CTBinaryTreeNodeUnbalanced\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-RedBlackSet'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-RedBlackSet"		},		"TwoInARowStar" : {			"hash" : 3657216,			"definition" : "Object subclass: #TwoInARowStar\r\tinstanceVariableNames: 'leave fill'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Tests-Methods'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tfill:\t\t<Object>",				"\tleave:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Kernel-Tests-Methods"		},		"LIFOQueue" : {			"hash" : 1093888,			"definition" : "AtomicCollection subclass: #LIFOQueue\r\tinstanceVariableNames: 'head'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Atomic-Base'",			"comment" : [				"This is a thread-safe LIFO (last-in-first-out) queue (also known as stack) implementation,",				"based on atomic operations."			],			"category" : "Collections-Atomic-Base"		},		"TRemoveForMultiplenessTest" : {			"hash" : 3592960,			"definition" : "Trait named: #TRemoveForMultiplenessTest\r\tuses: TRemoveTest\r\tinstanceVariableNames: ''\r\tpackage: 'Collections-Abstract-Tests-Traits'",			"comment" : [				"A trait for test purposes"			],			"category" : "Collections-Abstract-Tests-Traits"		}	},	"messages" : {		"testPushOrderedInterval" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc"			],			"implementors" : {				"CTBinaryTreeAbstractTest" : {					"sourceCode" : [						"testPushOrderedInterval",						"",						"\t^ self exportSlotsGraphOf: (self tree: (1 to: 20) asArray)"					],					"body" : [						"^ self exportSlotsGraphOf: (self tree: (1 to: 20) asArray)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3165232,					"argumentNames" : [ ]				}			}		},		"push:witness:continuation:inSet:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeNodeBalanced>>#push:witness:continuation:inSet:",				"CTBinaryTreeNodeUnbalanced>>#push:witness:continuation:inSet:",				"CTUnbalancedSet>>#push:"			],			"implementors" : {				"CTBinaryTreeEmptyUnbalanced" : {					"sourceCode" : [						"push: anObject witness: aWitness continuation: aContinuation inSet: aSet",						"",						"\t^ (aSet is: anObject equalTo: aWitness)",						"\t\t  ifTrue: [ ",						"\t\t  aSet pushingAlreadyIncluded: anObject continuation: aContinuation ]",						"\t\t  ifFalse: [ aSet binaryTreeElementLeaf: anObject ]"					],					"body" : [						"^ (aSet is: anObject equalTo: aWitness)",						"\t  ifTrue: [ ",						"\t  aSet pushingAlreadyIncluded: anObject continuation: aContinuation ]",						"\t  ifFalse: [ aSet binaryTreeElementLeaf: anObject ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 71327030,					"argumentNames" : [						"anObject",						"aWitness",						"aContinuation",						"aSet"					]				},				"CTBinaryTreeNodeUnbalanced" : {					"sourceCode" : [						"push: anObject witness: aWitness continuation: aContinuation inSet: aBinaryTree",						"",						"\t^ (aBinaryTree is: anObject lessThan: value)",						"\t\t  ifTrue: [ ",						"\t\t\t  | link |",						"\t\t\t  link := previousLink",						"\t\t\t\t          push: anObject",						"\t\t\t\t          witness: aWitness",						"\t\t\t\t          continuation: aContinuation",						"\t\t\t\t          inSet: aBinaryTree.",						"",						"\t\t\t  self class new",						"\t\t\t\t  previousLink: link;",						"\t\t\t\t  value: value;",						"\t\t\t\t  nextLink: nextLink;",						"\t\t\t\t  yourself ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | link |",						"\t\t\t  link := nextLink",						"\t\t\t\t          push: anObject",						"\t\t\t\t          witness: value",						"\t\t\t\t          continuation: aContinuation",						"\t\t\t\t          inSet: aBinaryTree.",						"",						"\t\t\t  self class new",						"\t\t\t\t  previousLink: previousLink;",						"\t\t\t\t  value: value;",						"\t\t\t\t  nextLink: link;",						"\t\t\t\t  yourself ]"					],					"body" : [						"^ (aBinaryTree is: anObject lessThan: value)",						"\t  ifTrue: [ ",						"\t\t  | link |",						"\t\t  link := previousLink",						"\t\t\t          push: anObject",						"\t\t\t          witness: aWitness",						"\t\t\t          continuation: aContinuation",						"\t\t\t          inSet: aBinaryTree.",						"",						"\t\t  self class new",						"\t\t\t  previousLink: link;",						"\t\t\t  value: value;",						"\t\t\t  nextLink: nextLink;",						"\t\t\t  yourself ]",						"\t  ifFalse: [ ",						"\t\t  | link |",						"\t\t  link := nextLink",						"\t\t\t          push: anObject",						"\t\t\t          witness: value",						"\t\t\t          continuation: aContinuation",						"\t\t\t          inSet: aBinaryTree.",						"",						"\t\t  self class new",						"\t\t\t  previousLink: previousLink;",						"\t\t\t  value: value;",						"\t\t\t  nextLink: link;",						"\t\t\t  yourself ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 71588461,					"argumentNames" : [						"anObject",						"aWitness",						"aContinuation",						"aBinaryTree"					]				},				"CTBinaryTreeNodeBalanced" : {					"sourceCode" : [						"push: anObject witness: aWitness continuation: aContinuation inSet: aBinaryTree",						"",						"\t| repr |",						"\trepr := super",						"\t\t        push: anObject",						"\t\t        witness: aWitness",						"\t\t        continuation: aContinuation",						"\t\t        inSet: aBinaryTree.",						"\t^ self balance: repr inSet: aBinaryTree"					],					"body" : [						"| repr |",						"repr := super",						"\t        push: anObject",						"\t        witness: aWitness",						"\t        continuation: aContinuation",						"\t        inSet: aBinaryTree.",						"^ self balance: repr inSet: aBinaryTree"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 71587399,					"argumentNames" : [						"anObject",						"aWitness",						"aContinuation",						"aBinaryTree"					]				}			}		},		"withArrayedCollection:" : {			"senders" : [				"ArrayedCollection>>#asBinaryTree:",				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc"			],			"implementors" : {				"CTBinaryTreeAbstract class" : {					"sourceCode" : [						"withArrayedCollection: aCollection",						"",						"\t^ aCollection ifEmpty: [ self empty ] ifNotEmpty: [ ",						"\t\t  self new yourself: [ :tree | ",						"\t\t\t  tree representation: (aCollection",						"\t\t\t\t\t   bisect: [ :l :r | ",						"\t\t\t\t\t   l mergeBinaryTreeElement: r inBinaryTree: tree ]",						"\t\t\t\t\t   baseBlock: [ :each | tree binaryTreeElementLeaf: each ]) ] ]"					],					"body" : [						"^ aCollection ifEmpty: [ self empty ] ifNotEmpty: [ ",						"\t  self new yourself: [ :tree | ",						"\t\t  tree representation: (aCollection",						"\t\t\t\t   bisect: [ :l :r | ",						"\t\t\t\t   l mergeBinaryTreeElement: r inBinaryTree: tree ]",						"\t\t\t\t   baseBlock: [ :each | tree binaryTreeElementLeaf: each ]) ] ]"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 20203746,					"argumentNames" : [						"aCollection"					]				},				"CTBinomialHeap class" : {					"sourceCode" : [						"withArrayedCollection: aCollection",						"",						"\t^ aCollection ifEmpty: [ self empty ] ifNotEmpty: [ ",						"\t\t  self new yourself: [ :tree | ",						"\t\t\t  tree representation: (aCollection",						"\t\t\t\t\t   bisect: [ :l :r | tree merge: l with: r ]",						"\t\t\t\t\t   baseBlock: [ :each | 0 -> (CTBinomialTree leaf: each) ~~> nil ]) ] ]"					],					"body" : [						"^ aCollection ifEmpty: [ self empty ] ifNotEmpty: [ ",						"\t  self new yourself: [ :tree | ",						"\t\t  tree representation: (aCollection",						"\t\t\t\t   bisect: [ :l :r | tree merge: l with: r ]",						"\t\t\t\t   baseBlock: [ :each | 0 -> (CTBinomialTree leaf: each) ~~> nil ]) ] ]"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 20205282,					"argumentNames" : [						"aCollection"					]				}			}		},		"binaryTreeElementNode" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstract>>#leftBinaryTreeElement:value:rightBinaryTreeElement:"			],			"implementors" : {				"CTBinaryTreeAbstract" : {					"sourceCode" : [						"binaryTreeElementNode",						"",						"\t^ CTBinaryTreeNode new"					],					"body" : [						"^ CTBinaryTreeNode new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3163951,					"argumentNames" : [ ]				},				"CTUnbalancedSet" : {					"sourceCode" : [						"binaryTreeElementNode",						"",						"\t^ CTBinaryTreeNodeUnbalanced new"					],					"body" : [						"^ CTBinaryTreeNodeUnbalanced new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3169327,					"argumentNames" : [ ]				},				"CTSplayHeap" : {					"sourceCode" : [						"binaryTreeElementNode",						"",						"\t^ CTBinaryTreeNodeSplayHeap new"					],					"body" : [						"^ CTBinaryTreeNodeSplayHeap new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3171887,					"argumentNames" : [ ]				},				"CTRedBlackSet" : {					"sourceCode" : [						"binaryTreeElementNode",						"",						"\t^ CTBinaryTreeNodeBalancedRed new"					],					"body" : [						"^ CTBinaryTreeNodeBalancedRed new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3169839,					"argumentNames" : [ ]				},				"CTLeftistHeap" : {					"sourceCode" : [						"binaryTreeElementNode",						"",						"\t^ CTBinaryTreeNodeLeftistHeap new"					],					"body" : [						"^ CTBinaryTreeNodeLeftistHeap new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3174191,					"argumentNames" : [ ]				}			}		},		"asLeftistHeap" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTLeftistHeapTest>>#tree:"			],			"implementors" : {				"Collection" : {					"sourceCode" : [						"asLeftistHeap",						"",						"\t^ self asBinaryTree: CTLeftistHeap"					],					"body" : [						"^ self asBinaryTree: CTLeftistHeap"					],					"isTestMethod" : false,					"category" : "*Containers-LeftistHeap",					"comment" : [ ],					"hash" : 1644962,					"argumentNames" : [ ]				}			}		},		"pop" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"BaselineOfBookletDSst>>#scriptStoragePoolsForDoc",				"CTBinaryTreeNodeSplayHeap>>#popInBinaryTree:",				"CTHeapQTest>>#testPushPop",				"CTLinkedStoragePoolTest>>#testPopFromEmptyStack",				"CTLinkedStoragePoolTest>>#testRemoveAllFromQueue",				"CTLinkedStoragePoolTest>>#testRemoveAllFromStack",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnCircular",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnStack",				"CTLinkedStoragePoolTest>>#testPopFromEmptyCircular",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnQueue",				"CTLinkedStoragePoolTest>>#testPopFromEmptyQueue",				"CTLinkedStoragePoolTest>>#testPolynomialAdditionIsCommutativeFromKnuthTextbook",				"CTLinkedStoragePoolTest>>#testPolynomialAdditionFromKnuthTextbook",				"ConfigurableHistoryIterator>>#redoIfEmpty:",				"ConfigurableHistoryIterator>>#undoIfEmpty:",				"Context>>#popIntoLiteralVariable:",				"Context>>#pushConsArrayWithElements:",				"Context>>#blockReturnTop",				"Context>>#popIntoRemoteTemp:inVectorAt:",				"Context>>#jump",				"Context>>#doPop",				"Context>>#runSimulated:contextAtEachStep:",				"Context>>#popIntoTemporaryVariable:",				"Context>>#popIntoReceiverVariable:",				"Context>>#send:super:numArgs:",				"Context>>#jump:if:withInterpreter:",				"Context>>#methodReturnTop",				"Context>>#directedSuperSend:numArgs:",				"Context>>#pushFullClosure:numCopied:receiverOnStack:ignoreOuterContext:",				"DATarjanAlgorithm>>#popStackAndUpdateCurrentSCC:until:",				"FFIFunctionResolutionTest>>#testResolveConstantNULLShouldSetConstantNullLoader",				"FFIFunctionResolutionTest>>#testResolveConstantTrueShouldSetConstantOneLoader",				"FFIFunctionResolutionTest>>#testResolveConstantIntegerShouldSetConstantLoader",				"FFIFunctionResolutionTest>>#testResolveConstantSelfOfExternalObjectShouldSetConstantFirstInstanceVariableLoader",				"FFIFunctionResolutionTest>>#testResolveConstantSelfStringShouldSetConstantLoader",				"FFIFunctionResolutionTest>>#testResolveInstanceVariableShouldSetInstanceVariableLoader",				"FFIFunctionResolutionTest>>#testResolveConstantNilShouldSetConstantNullLoader",				"FFIFunctionResolutionTest>>#testResolveArgumentVariableShouldSetArgumentVariableLoader",				"FFIFunctionResolutionTest>>#testResolveConstantFalseShouldSetConstantZeroLoader",				"FFIFunctionResolutionTest>>#testResolveClassVariableShouldSetClassVariableLoader",				"FLAnalysis>>#run",				"FLSimpleStackTest>>#testPop",				"HiRulerBuilder>>#buildLinksStartingAt:",				"IRBuilder>>#popScope",				"IRBytecodeDecompiler>>#popScope",				"IRBytecodeGenerator>>#returnTop",				"IRBytecodeGenerator>>#storePopTemp:",				"IRBytecodeGenerator>>#storePopIntoLiteralVariable:",				"IRBytecodeGenerator>>#if:goto:otherwise:",				"IRBytecodeGenerator>>#storePopRemoteTemp:inVectorAt:",				"IRBytecodeGenerator>>#popTop",				"IRBytecodeGenerator>>#storePopInstVar:",				"IRBytecodeGenerator>>#pushFullBlockClosure:",				"IRTranslator>>#popScope",				"MCScanner>>#next",				"MalTarjan>>#popStackAndUpdateCurrentScc:until:",				"MicInlineParser>>#popFrom:to:",				"MicrodownStyleHelpBuilder>>#helpTopicFromFormattedString:title:",				"OupsDebuggerSelector>>#nextDebugger",				"POP3Client class>>#logFlag",				"PostorderGuide>>#show:",				"PreorderGuide>>#show:",				"RBRefactoryChangeManager>>#lastUndoPointer",				"RBRefactoryChangeManager>>#undoChange",				"SindarinDebugger>>#skipMessageNodeWith:",				"SindarinDebugger>>#skipAssignmentNodeWith:",				"SpMenuPresenterBuilder>>#visitCommandGroup:",				"StackTest>>#testEmptyError",				"StackTest>>#testPop",				"StackTest>>#testSize",				"TFRunner>>#returnCallback:",				"TypingVisitor>>#visitBlockNode:",				"WikiStyleHelpBuilder>>#helpTopicFromFormattedString:title:"			],			"implementors" : {				"CTBinomialHeap" : {					"sourceCode" : [						"pop",						"",						"\t^ self ifEmpty: [ CollectionIsEmpty signal ] ifNotEmpty: [ :trees | ",						"\t\t  | tuple tree min |",						"\t\t  tuple := self min: trees.",						"\t\t  tree := tuple first.",						"\t\t  min := tree value content.",						"\t\t  representation := self",						"\t\t\t                    merge:",						"\t\t\t\t                    ((tree key - 1 to: 0 by: -1) asValueLink",						"\t\t\t\t\t                     with: tree value children",						"\t\t\t\t\t                     collect: #->) reversed",						"\t\t\t                    with: tuple second.",						"\t\t  min ]"					],					"body" : [						"^ self ifEmpty: [ CollectionIsEmpty signal ] ifNotEmpty: [ :trees | ",						"\t  | tuple tree min |",						"\t  tuple := self min: trees.",						"\t  tree := tuple first.",						"\t  min := tree value content.",						"\t  representation := self",						"\t\t                    merge: ((tree key - 1 to: 0 by: -1) asValueLink",						"\t\t\t\t                     with: tree value children",						"\t\t\t\t                     collect: #->) reversed",						"\t\t                    with: tuple second.",						"\t  min ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 3166124,					"argumentNames" : [ ]				},				"CTLinkedStoragePoolCircular" : {					"sourceCode" : [						"pop",						"",						"\t^ self isEmpty",						"\t\t  ifTrue: [ CollectionIsEmpty signal ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | removingLink |",						"\t\t\t  removingLink := head nextLink.",						"\t\t\t  head",						"\t\t\t\t  value: head value - 1;",						"\t\t\t\t  nextLink: removingLink nextLink.",						"\t\t\t  removingLink value yourself: [ self releaseLink: removingLink ] ]"					],					"body" : [						"^ self isEmpty",						"\t  ifTrue: [ CollectionIsEmpty signal ]",						"\t  ifFalse: [ ",						"\t\t  | removingLink |",						"\t\t  removingLink := head nextLink.",						"\t\t  head",						"\t\t\t  value: head value - 1;",						"\t\t\t  nextLink: removingLink nextLink.",						"\t\t  removingLink value yourself: [ self releaseLink: removingLink ] ]"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 3421501,					"argumentNames" : [ ]				},				"CTHeapQ" : {					"sourceCode" : [						"pop",						"",						"\t^ self isEmpty",						"\t\t  ifTrue: [ CollectionIsEmpty signal ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | lastelt |",						"\t\t\t  lastelt := heap at: tally.",						"\t\t\t  tally := tally - 1.",						"\t\t\t  self isEmpty",						"\t\t\t\t  ifTrue: [ ",						"\t\t\t\t\t  indexes",						"\t\t\t\t\t\t  removeKey: lastelt;",						"\t\t\t\t\t\t  itself: lastelt ]",						"\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t  | returnElt |",						"\t\t\t\t\t  returnElt := heap first.",						"\t\t\t\t\t  indexes removeKey: returnElt.",						"\t\t\t\t\t  self",						"\t\t\t\t\t\t  at: 1 put: lastelt;",						"\t\t\t\t\t\t  siftUp: 1;",						"\t\t\t\t\t\t  itself: returnElt ] ]"					],					"body" : [						"^ self isEmpty",						"\t  ifTrue: [ CollectionIsEmpty signal ]",						"\t  ifFalse: [ ",						"\t\t  | lastelt |",						"\t\t  lastelt := heap at: tally.",						"\t\t  tally := tally - 1.",						"\t\t  self isEmpty",						"\t\t\t  ifTrue: [ ",						"\t\t\t\t  indexes",						"\t\t\t\t\t  removeKey: lastelt;",						"\t\t\t\t\t  itself: lastelt ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  | returnElt |",						"\t\t\t\t  returnElt := heap first.",						"\t\t\t\t  indexes removeKey: returnElt.",						"\t\t\t\t  self",						"\t\t\t\t\t  at: 1 put: lastelt;",						"\t\t\t\t\t  siftUp: 1;",						"\t\t\t\t\t  itself: returnElt ] ]"					],					"isTestMethod" : false,					"category" : "removing",					"comment" : [ ],					"hash" : 3688255,					"argumentNames" : [ ]				},				"IRStackCount" : {					"sourceCode" : [						"pop",						"",						"\t^ self pop: 1"					],					"body" : [						"^ self pop: 1"					],					"isTestMethod" : false,					"category" : "affecting",					"comment" : [ ],					"hash" : 2038737,					"argumentNames" : [ ]				},				"Context" : {					"sourceCode" : [						"pop",						"",						"\t\"Answer the top of the receiver's stack and remove the top of the stack.\"",						"",						"\t| value |",						"\tvalue := self at: stackp.",						"\tself stackp: stackp - 1.",						"\t^ value"					],					"body" : [						"| value |",						"value := self at: stackp.",						"self stackp: stackp - 1.",						"^ value"					],					"isTestMethod" : false,					"category" : "controlling",					"comment" : [						"Answer the top of the receiver's stack and remove the top of the stack."					],					"hash" : 1066920,					"argumentNames" : [ ]				},				"FLSimpleStack" : {					"sourceCode" : [						"pop",						"",						"\t\"Returns the first element and remove it from the stack.\"",						"",						"\tslotIndex := slotIndex - 1.",						"\t^ array at: slotIndex"					],					"body" : [						"slotIndex := slotIndex - 1.",						"^ array at: slotIndex"					],					"isTestMethod" : false,					"category" : "removing",					"comment" : [						"Returns the first element and remove it from the stack."					],					"hash" : 1343620,					"argumentNames" : [ ]				},				"CTLinkedStoragePoolStack" : {					"sourceCode" : [						"pop",						"",						"\t^ top ifNil: [ CollectionIsEmpty signal ] ifNotNil: [ ",						"\t\t  | p |",						"\t\t  p := top.",						"\t\t  top := top nextLink.",						"\t\t  p value yourself: [ self releaseLink: p ] ]"					],					"body" : [						"^ top ifNil: [ CollectionIsEmpty signal ] ifNotNil: [ ",						"\t  | p |",						"\t  p := top.",						"\t  top := top nextLink.",						"\t  p value yourself: [ self releaseLink: p ] ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 3421892,					"argumentNames" : [ ]				},				"FileSystemGuide" : {					"sourceCode" : [						"pop",						"",						"\t^ work removeLast"					],					"body" : [						"^ work removeLast"					],					"isTestMethod" : false,					"category" : "removing",					"comment" : [ ],					"hash" : 2074916,					"argumentNames" : [ ]				},				"Stack" : {					"sourceCode" : [						"pop",						"",						"\t\"Returns the first element and remove it from the stack.\"",						"",						"\t^ self removeFirst"					],					"body" : [						"^ self removeFirst"					],					"isTestMethod" : false,					"category" : "removing",					"comment" : [						"Returns the first element and remove it from the stack."					],					"hash" : 1939055,					"argumentNames" : [ ]				},				"CTLinkedStoragePoolQueue" : {					"sourceCode" : [						"pop",						"",						"\t^ top ifNil: [ CollectionIsEmpty signal ] ifNotNil: [ ",						"\t\t  | p |",						"\t\t  p := top.",						"\t\t  top := top nextLink.",						"\t\t  p value yourself: [ ",						"\t\t\t  self releaseLink: p.",						"\t\t\t  top ifNil: [ bottom := top ] ] ]"					],					"body" : [						"^ top ifNil: [ CollectionIsEmpty signal ] ifNotNil: [ ",						"\t  | p |",						"\t  p := top.",						"\t  top := top nextLink.",						"\t  p value yourself: [ ",						"\t\t  self releaseLink: p.",						"\t\t  top ifNil: [ bottom := top ] ] ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 3422404,					"argumentNames" : [ ]				},				"CTBinaryTreeAbstract" : {					"sourceCode" : [						"pop",						"",						"\t^ self root yourself: [ ",						"\t\t  representation := representation popInBinaryTree: self ]"					],					"body" : [						"^ self root yourself: [ ",						"\t  representation := representation popInBinaryTree: self ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 3164449,					"argumentNames" : [ ]				},				"CTLinkedStoragePoolCircularDoubly" : {					"sourceCode" : [						"pop",						"",						"\t^ head nextLink == head",						"\t\t  ifTrue: [ CollectionIsEmpty signal ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | removingLink |",						"\t\t\t  removingLink := head nextLink.",						"\t\t\t  removingLink previousLink nextLink: removingLink nextLink.",						"\t\t\t  removingLink nextLink previousLink: removingLink previousLink.",						"\t\t\t  removingLink value yourself: [ ",						"\t\t\t\t  head value: head value - 1.",						"\t\t\t\t  self releaseLink: removingLink ] ]"					],					"body" : [						"^ head nextLink == head",						"\t  ifTrue: [ CollectionIsEmpty signal ]",						"\t  ifFalse: [ ",						"\t\t  | removingLink |",						"\t\t  removingLink := head nextLink.",						"\t\t  removingLink previousLink nextLink: removingLink nextLink.",						"\t\t  removingLink nextLink previousLink: removingLink previousLink.",						"\t\t  removingLink value yourself: [ ",						"\t\t\t  head value: head value - 1.",						"\t\t\t  self releaseLink: removingLink ] ]"					],					"isTestMethod" : false,					"category" : "API-remotes",					"comment" : [ ],					"hash" : 3422297,					"argumentNames" : [ ]				},				"LIFOQueue" : {					"sourceCode" : [						"pop",						"",						"\t^ self nextIfNone: [ self errorEmptyStack ]"					],					"body" : [						"^ self nextIfNone: [ self errorEmptyStack ]"					],					"isTestMethod" : false,					"category" : "stack-compliant protocol",					"comment" : [ ],					"hash" : 1888397,					"argumentNames" : [ ]				}			}		},		"mergeBinaryTreeElement:inBinaryTree:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstract>>#push:",				"CTBinaryTreeAbstract class>>#withArrayedCollection:",				"CTBinaryTreeNode>>#popInBinaryTree:",				"CTBinaryTreeNode>>#mergeBinaryTreeElement:inBinaryTree:",				"CTBinaryTreeNodeBalanced>>#mergeBinaryTreeElement:inBinaryTree:",				"CTBinaryTreeNodeLeftistHeap>>#mergeBinaryTreeElement:inBinaryTree:",				"CTBinaryTreeNodeSplayHeap>>#mergeBinaryTreeElement:inBinaryTree:",				"CTBinaryTreeNodeUnbalanced>>#mergeBinaryTreeElement:inBinaryTree:"			],			"implementors" : {				"CTBinaryTreeElement" : {					"sourceCode" : [						"mergeBinaryTreeElement: aBTElement inBinaryTree: aBinaryTree",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 37241412,					"argumentNames" : [						"aBTElement",						"aBinaryTree"					]				},				"CTBinaryTreeNodeLeftistHeap" : {					"sourceCode" : [						"mergeBinaryTreeElement: aBTElement inBinaryTree: aBinaryTree",						"",						"\t^ aBTElement ifEmpty: [ self ] ifNotEmpty: [ ",						"\t\t  | y |",						"\t\t  y := aBTElement value.",						"\t\t  ((aBinaryTree is: value lessThan: y) or: [ ",						"\t\t\t   aBinaryTree is: value equalTo: y ])",						"\t\t\t  ifTrue: [ ",						"\t\t\t\t  | r |",						"\t\t\t\t  r := nextLink",						"\t\t\t\t\t       mergeBinaryTreeElement: aBTElement",						"\t\t\t\t\t       inBinaryTree: aBinaryTree.",						"\t\t\t\t  self",						"\t\t\t\t\t  insert: value",						"\t\t\t\t\t  left: previousLink",						"\t\t\t\t\t  right: r",						"\t\t\t\t\t  inBinaryTree: aBinaryTree ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  | r |",						"\t\t\t\t  r := self",						"\t\t\t\t\t       mergeBinaryTreeElement: aBTElement nextLink",						"\t\t\t\t\t       inBinaryTree: aBinaryTree.",						"\t\t\t\t  self",						"\t\t\t\t\t  insert: y",						"\t\t\t\t\t  left: aBTElement previousLink",						"\t\t\t\t\t  right: r",						"\t\t\t\t\t  inBinaryTree: aBinaryTree ] ]"					],					"body" : [						"^ aBTElement ifEmpty: [ self ] ifNotEmpty: [ ",						"\t  | y |",						"\t  y := aBTElement value.",						"\t  ((aBinaryTree is: value lessThan: y) or: [ ",						"\t\t   aBinaryTree is: value equalTo: y ])",						"\t\t  ifTrue: [ ",						"\t\t\t  | r |",						"\t\t\t  r := nextLink",						"\t\t\t\t       mergeBinaryTreeElement: aBTElement",						"\t\t\t\t       inBinaryTree: aBinaryTree.",						"\t\t\t  self",						"\t\t\t\t  insert: value",						"\t\t\t\t  left: previousLink",						"\t\t\t\t  right: r",						"\t\t\t\t  inBinaryTree: aBinaryTree ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | r |",						"\t\t\t  r := self",						"\t\t\t\t       mergeBinaryTreeElement: aBTElement nextLink",						"\t\t\t\t       inBinaryTree: aBinaryTree.",						"\t\t\t  self",						"\t\t\t\t  insert: y",						"\t\t\t\t  left: aBTElement previousLink",						"\t\t\t\t  right: r",						"\t\t\t\t  inBinaryTree: aBinaryTree ] ]"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 37254693,					"argumentNames" : [						"aBTElement",						"aBinaryTree"					]				},				"CTBinaryTreeNodeUnbalanced" : {					"sourceCode" : [						"mergeBinaryTreeElement: aBTElement inBinaryTree: aBinaryTree",						"",						"\t| lesserTree greaterTree tree |",						"\tself value < aBTElement value",						"\t\tifTrue: [ ",						"\t\t\tlesserTree := self.",						"\t\t\tgreaterTree := aBTElement ]",						"\t\tifFalse: [ ",						"\t\t\tlesserTree := aBTElement.",						"\t\t\tgreaterTree := self ].",						"",						"\ttree := lesserTree nextLink",						"\t\t        mergeBinaryTreeElement: greaterTree",						"\t\t        inBinaryTree: aBinaryTree.",						"",						"\t^ aBinaryTree",						"\t\t  leftBinaryTreeElement: lesserTree previousLink",						"\t\t  value: lesserTree value",						"\t\t  rightBinaryTreeElement: tree"					],					"body" : [						"| lesserTree greaterTree tree |",						"self value < aBTElement value",						"\tifTrue: [ ",						"\t\tlesserTree := self.",						"\t\tgreaterTree := aBTElement ]",						"\tifFalse: [ ",						"\t\tlesserTree := aBTElement.",						"\t\tgreaterTree := self ].",						"",						"tree := lesserTree nextLink",						"\t        mergeBinaryTreeElement: greaterTree",						"\t        inBinaryTree: aBinaryTree.",						"",						"^ aBinaryTree",						"\t  leftBinaryTreeElement: lesserTree previousLink",						"\t  value: lesserTree value",						"\t  rightBinaryTreeElement: tree"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 38034815,					"argumentNames" : [						"aBTElement",						"aBinaryTree"					]				},				"CTBinaryTreeNodeBalanced" : {					"sourceCode" : [						"mergeBinaryTreeElement: aBTElement inBinaryTree: aBinaryTree",						"",						"\t| repr |",						"\trepr := super",						"\t\t        mergeBinaryTreeElement: aBTElement",						"\t\t        inBinaryTree: aBinaryTree.",						"\t^ self balance: repr inSet: aBinaryTree"					],					"body" : [						"| repr |",						"repr := super",						"\t        mergeBinaryTreeElement: aBTElement",						"\t        inBinaryTree: aBinaryTree.",						"^ self balance: repr inSet: aBinaryTree"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 37508536,					"argumentNames" : [						"aBTElement",						"aBinaryTree"					]				},				"CTBinaryTreeNodeSplayHeap" : {					"sourceCode" : [						"mergeBinaryTreeElement: aBTElement inBinaryTree: aBinaryTree",						"",						"\t^ aBTElement",						"\t\t  partition: value",						"\t\t  inSplayHeap: aBinaryTree",						"\t\t  do: [ :l :r | ",						"\t\t\t  | lMerged rMerged |",						"\t\t\t  lMerged := l",						"\t\t\t\t             mergeBinaryTreeElement: previousLink",						"\t\t\t\t             inBinaryTree: aBinaryTree.",						"\t\t\t  rMerged := r",						"\t\t\t\t             mergeBinaryTreeElement: nextLink",						"\t\t\t\t             inBinaryTree: aBinaryTree.",						"\t\t\t  aBinaryTree",						"\t\t\t\t  leftBinaryTreeElement: lMerged",						"\t\t\t\t  value: value",						"\t\t\t\t  rightBinaryTreeElement: rMerged ]"					],					"body" : [						"^ aBTElement partition: value inSplayHeap: aBinaryTree do: [ :l :r | ",						"\t  | lMerged rMerged |",						"\t  lMerged := l",						"\t\t             mergeBinaryTreeElement: previousLink",						"\t\t             inBinaryTree: aBinaryTree.",						"\t  rMerged := r",						"\t\t             mergeBinaryTreeElement: nextLink",						"\t\t             inBinaryTree: aBinaryTree.",						"\t  aBinaryTree",						"\t\t  leftBinaryTreeElement: lMerged",						"\t\t  value: value",						"\t\t  rightBinaryTreeElement: rMerged ]"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 37252205,					"argumentNames" : [						"aBTElement",						"aBinaryTree"					]				},				"CTBinaryTreeNode" : {					"sourceCode" : [						"mergeBinaryTreeElement: aBTElement inBinaryTree: aBinaryTree",						"",						"\t^ (Random seed: 13) fairCoin",						"\t\t  ifHead: [ ",						"\t\t\t  | link |",						"\t\t\t  link := previousLink",						"\t\t\t\t          mergeBinaryTreeElement: aBTElement",						"\t\t\t\t          inBinaryTree: aBinaryTree.",						"",						"\t\t\t  aBinaryTree",						"\t\t\t\t  leftBinaryTreeElement: link",						"\t\t\t\t  value: value",						"\t\t\t\t  rightBinaryTreeElement: nextLink ]",						"\t\t  ifTail: [ ",						"\t\t\t  | link |",						"\t\t\t  link := nextLink",						"\t\t\t\t          mergeBinaryTreeElement: aBTElement",						"\t\t\t\t          inBinaryTree: aBinaryTree.",						"",						"\t\t\t  aBinaryTree",						"\t\t\t\t  leftBinaryTreeElement: previousLink",						"\t\t\t\t  value: value",						"\t\t\t\t  rightBinaryTreeElement: link ]"					],					"body" : [						"^ (Random seed: 13) fairCoin",						"\t  ifHead: [ ",						"\t\t  | link |",						"\t\t  link := previousLink",						"\t\t\t          mergeBinaryTreeElement: aBTElement",						"\t\t\t          inBinaryTree: aBinaryTree.",						"",						"\t\t  aBinaryTree",						"\t\t\t  leftBinaryTreeElement: link",						"\t\t\t  value: value",						"\t\t\t  rightBinaryTreeElement: nextLink ]",						"\t  ifTail: [ ",						"\t\t  | link |",						"\t\t  link := nextLink",						"\t\t\t          mergeBinaryTreeElement: aBTElement",						"\t\t\t          inBinaryTree: aBinaryTree.",						"",						"\t\t  aBinaryTree",						"\t\t\t  leftBinaryTreeElement: previousLink",						"\t\t\t  value: value",						"\t\t\t  rightBinaryTreeElement: link ]"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 37243395,					"argumentNames" : [						"aBTElement",						"aBinaryTree"					]				},				"CTBinaryTreeEmpty" : {					"sourceCode" : [						"mergeBinaryTreeElement: aBTElement inBinaryTree: aBinaryTree",						"",						"\t^ aBTElement"					],					"body" : [						"^ aBTElement"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 37241553,					"argumentNames" : [						"aBTElement",						"aBinaryTree"					]				}			}		},		"root" : {			"senders" : [				"AbsolutePath>>#withParents",				"AbsolutePath class>>#from:delimiter:",				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstract>>#root",				"CTBinaryTreeAbstract>>#pop",				"CTBinaryTreeNodeSplayHeap>>#root",				"CTSlotDescriptorsVisitor>>#visitCTBinaryTreeAbstract:",				"CollectVisitorTest>>#testPreorder",				"CollectVisitorTest>>#testPostorder",				"CollectVisitorTest>>#testBreadthFirst",				"DirectoryEntryTest>>#testRootEntry",				"DiskStore>>#rootEntry",				"FLDebuggerStackSerializer>>#serializeStackFromContext:toFileNamed:",				"FLMaterializer>>#decodeHeaderWith:",				"FLMaterializer class>>#materializeFromByteArray:",				"FLMaterializer class>>#materializeFromFileNamed:",				"FLSerializationTest>>#materialized",				"FLUserGuidesTest>>#testFileStream",				"FLUserGuidesTest>>#testGZip",				"FLUserGuidesTest>>#testConsiderGlobal",				"FLUserGuidesTest>>#testPluggableSubstitution",				"FileDialogWindow>>#initialDirectories",				"FileList>>#initialDirectoryList",				"FileList>>#volumeListIndex:",				"FileLocator class>>#root",				"FileReferenceTest>>#testRootReference",				"FileReferenceTest>>#testChildDirectories",				"FileReferenceTest>>#testChildFiles",				"FileReferenceTest>>#testBasenameWithoutExtension",				"FileReferenceTest>>#testLastFilesForExtensionNegativeTesting",				"FileReferenceTest>>#testIsRoot",				"FileReferenceTest>>#testLastFilesForExtensionBrokenPattern",				"FileReferenceTest>>#testRootParent",				"FileReferenceTest>>#testBasename",				"FileReferenceTest>>#testNextNameForExtensionBrokenPattern",				"FileReferenceTest>>#testGlob",				"FileReferenceTest>>#testLastFilesForExtension",				"FileReferenceTest>>#testNextNameForExtensionNegativeTesting",				"FileSystem>>#/",				"FileSystem>>#root",				"FileSystem class>>#root",				"FileSystemStore>>#defaultWorkingDirectory",				"FileSystemTest>>#testRootIsDirectory",				"FileSystemTest>>#testRootIsNotAFile",				"FileSystemTest>>#testRoot",				"FileSystemTest>>#testRootExists",				"IceGitCommit>>#fileSystem",				"IceNoCommit>>#fileSystem",				"IceUnknownCommit>>#fileSystem",				"IceWorkingCopy>>#fileSystem",				"MCFileTreeRepository class>>#urlAsFileReference:",				"MacOSResolver>>#systemLibrary",				"MemoryFileSystemTest>>#testCopyFromto",				"MemoryFileSystemTest>>#testEnsureCreateFileDoesNotOverwriteExistingContent",				"MemoryStore>>#nodeAt:ifPresent:ifAbsent:",				"MemoryStore>>#nodeAt:",				"MetacelloAbstractVersionConstructor>>#project:copyFrom:with:",				"MetacelloAbstractVersionConstructor>>#includes:",				"MetacelloAbstractVersionConstructor>>#setAuthorWithBlock:",				"MetacelloAbstractVersionConstructor>>#setBlessingWithString:",				"MetacelloAbstractVersionConstructor>>#supplyingAnswersForPackage:",				"MetacelloAbstractVersionConstructor>>#author:",				"MetacelloAbstractVersionConstructor>>#importForVersion:",				"MetacelloAbstractVersionConstructor>>#group:overrides:",				"MetacelloAbstractVersionConstructor>>#projectPackage:",				"MetacelloAbstractVersionConstructor>>#repositoryForSpec:username:password:",				"MetacelloAbstractVersionConstructor>>#package:with:",				"MetacelloAbstractVersionConstructor>>#project:overrides:",				"MetacelloAbstractVersionConstructor>>#setConfiguration:withBlock:",				"MetacelloAbstractVersionConstructor>>#project:",				"MetacelloAbstractVersionConstructor>>#import:",				"MetacelloAbstractVersionConstructor>>#setBlessingWithBlock:",				"MetacelloAbstractVersionConstructor>>#supplyingAnswers:",				"MetacelloAbstractVersionConstructor>>#configuration:with:",				"MetacelloAbstractVersionConstructor>>#setProject:withBlock:",				"MetacelloAbstractVersionConstructor>>#repository:",				"MetacelloAbstractVersionConstructor>>#postLoadDoItForSpec:",				"MetacelloAbstractVersionConstructor>>#removePackageForVersion:",				"MetacelloAbstractVersionConstructor>>#className:",				"MetacelloAbstractVersionConstructor>>#versionString:",				"MetacelloAbstractVersionConstructor>>#value:",				"MetacelloAbstractVersionConstructor>>#loadsForProject:",				"MetacelloAbstractVersionConstructor>>#project:with:",				"MetacelloAbstractVersionConstructor>>#setTimestampWithString:",				"MetacelloAbstractVersionConstructor>>#version:",				"MetacelloAbstractVersionConstructor>>#packageForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#package:",				"MetacelloAbstractVersionConstructor>>#repositoryForSpec:",				"MetacelloAbstractVersionConstructor>>#description:",				"MetacelloAbstractVersionConstructor>>#projectForVersion:copyFrom:with:",				"MetacelloAbstractVersionConstructor>>#fileForPackage:",				"MetacelloAbstractVersionConstructor>>#removeProject:",				"MetacelloAbstractVersionConstructor>>#setDescriptionWithBlock:",				"MetacelloAbstractVersionConstructor>>#setPackage:withString:",				"MetacelloAbstractVersionConstructor>>#requiresForPackage:",				"MetacelloAbstractVersionConstructor>>#blessing:",				"MetacelloAbstractVersionConstructor>>#baseline:with:",				"MetacelloAbstractVersionConstructor>>#file:",				"MetacelloAbstractVersionConstructor>>#preLoadDoIt:",				"MetacelloAbstractVersionConstructor>>#removeProjectForVersion:",				"MetacelloAbstractVersionConstructor>>#repositoriesForSpec:",				"MetacelloAbstractVersionConstructor>>#setBaseline:",				"MetacelloAbstractVersionConstructor>>#packageForVersion:",				"MetacelloAbstractVersionConstructor>>#loads:",				"MetacelloAbstractVersionConstructor>>#package:overrides:",				"MetacelloAbstractVersionConstructor>>#setTimestampWithBlock:",				"MetacelloAbstractVersionConstructor>>#baseline:",				"MetacelloAbstractVersionConstructor>>#setPackage:withBlock:",				"MetacelloAbstractVersionConstructor>>#name:",				"MetacelloAbstractVersionConstructor>>#requires:",				"MetacelloAbstractVersionConstructor>>#setProject:withString:",				"MetacelloAbstractVersionConstructor>>#fileForProject:",				"MetacelloAbstractVersionConstructor>>#operatorForProject:",				"MetacelloAbstractVersionConstructor>>#setDescriptionWithString:",				"MetacelloAbstractVersionConstructor>>#timestamp:",				"MetacelloAbstractVersionConstructor>>#valueForValueHolder:",				"MetacelloAbstractVersionConstructor>>#groupForVersion:with:",				"MetacelloAbstractVersionConstructor>>#projectForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#removeGroupForVersion:",				"MetacelloAbstractVersionConstructor>>#repositories:",				"MetacelloAbstractVersionConstructor>>#group:with:",				"MetacelloAbstractVersionConstructor>>#classNameForProject:",				"MetacelloAbstractVersionConstructor>>#import:provides:",				"MetacelloAbstractVersionConstructor>>#projectPackageForProject:",				"MetacelloAbstractVersionConstructor>>#groupForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#includesForPackage:",				"MetacelloAbstractVersionConstructor>>#preLoadDoItForSpec:",				"MetacelloAbstractVersionConstructor>>#removeGroup:",				"MetacelloAbstractVersionConstructor>>#removePackage:",				"MetacelloAbstractVersionConstructor>>#with:during:",				"MetacelloAbstractVersionConstructor>>#importForVersion:provides:",				"MetacelloAbstractVersionConstructor>>#setAuthorWithString:",				"MetacelloAbstractVersionConstructor>>#versionStringForProject:",				"MetacelloAbstractVersionConstructor>>#operator:",				"MetacelloAbstractVersionConstructor>>#nameForProject:",				"MetacelloAbstractVersionConstructor>>#repository:username:password:",				"MetacelloAbstractVersionConstructor>>#postLoadDoIt:",				"MetacelloScriptExecutor>>#execute:",				"Morph>>#root",				"OmFuelEntryReader>>#nextEntry",				"Path>>#parentUpTo:",				"Path class>>#from:delimiter:",				"PathTest>>#testAbsolutePath",				"PathTest>>#testRootParent",				"PathTest>>#testRootPrintString",				"PathTest>>#testWithParentsOnRootReturnRoot",				"PathTest>>#testParentUpTo",				"PathTest>>#testIsRoot",				"RSInspectableInteraction>>#inspectShape:",				"SelectVisitorTest>>#testPreorder",				"SelectVisitorTest>>#testBreadthFirstSelect",				"SelectVisitorTest>>#testBreadthFirst",				"SelectVisitorTest>>#testPreorderSelect",				"SelectVisitorTest>>#testPostorderSelect",				"SelectVisitorTest>>#testPostorder",				"SettingsStonWriterTest>>#setUp",				"SourceFileArrayTest>>#testWriteSourceWritesInGivenSourceFileArrayWithFlushDefering",				"SourceFileArrayTest>>#testWriteToChangesFileInGivenSourceFileArray",				"SourceFileArrayTest>>#testRemoteStringReadsInGivenSourceFileArray",				"SourceFileArrayTest>>#testWriteSourceWritesInGivenSourceFileArray",				"SourceFileArrayTest>>#testRemoteStringWritesInGivenSourceFileArray",				"SpAbstractPresenter>>#window",				"SpAbstractPresenter>>#root",				"SpAbstractPresenter>>#hasWindow",				"SpAbstractPresenter>>#withWindowDo:",				"SpPresenter>>#isDisplayed",				"SystemSettingsPersistenceTest>>#setUp",				"TonelReaderTest>>#newMemoryFileSystemSnapshot:",				"TonelReaderTraitCompositionTest>>#readDefinitionOfClass:fromPackage:whitContent:",				"TonelRepositoryTest>>#newMemoryFileSystem",				"TonelWriterTest>>#testWriteSnapshotWithoutOrganization",				"TonelWriterTest>>#testWriteSnapshot",				"ZipArchiveTest>>#testAddTreeWhenNoContentInFileShouldSucceed",				"ZipArchiveTest>>#setUp",				"ZipArchiveTest>>#testCanUnzipFromFileName",				"ZipArchiveTest>>#testAddTreeWithSubDirectoriesShouldSucceed",				"ZipArchiveTest>>#testAddTreeWithContentInFileShouldSucceed",				"ZipStore>>#close",				"ZnFileUrlTest>>#testSpaces",				"ZnFileUrlTest>>#testRoot",				"ZnFileUrlTest>>#testAsZnUrl",				"ZnUrl>>#asFileReference",				"ZnUrl>>#asFileReferenceWithRelativePath",				"ZnUrlCopy>>#asFileReference"			],			"implementors" : {				"CTBinaryTreeEmpty" : {					"sourceCode" : [						"root",						"",						"\tCollectionIsEmpty signal"					],					"body" : [						"CollectionIsEmpty signal"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 3163162,					"argumentNames" : [ ]				},				"FLMaterialization" : {					"sourceCode" : [						"root",						"",						"\t^ root"					],					"body" : [						"^ root"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1406361,					"argumentNames" : [ ]				},				"MetacelloScriptEngine" : {					"sourceCode" : [						"root",						"",						"\t^ root"					],					"body" : [						"^ root"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2346901,					"argumentNames" : [ ]				},				"AbstractEnumerationVisitorTest" : {					"sourceCode" : [						"root",						"",						"\t^ filesystem / 'alpha'"					],					"body" : [						"^ filesystem / 'alpha'"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 4525103,					"argumentNames" : [ ]				},				"FileSystem class" : {					"sourceCode" : [						"root",						"",						"\t^ self disk root"					],					"body" : [						"^ self disk root"					],					"isTestMethod" : false,					"category" : "*Filesystem-Disk",					"comment" : [ ],					"hash" : 2066946,					"argumentNames" : [ ]				},				"FileLocator class" : {					"sourceCode" : [						"root",						"",						"\t^ FileSystem disk root"					],					"body" : [						"^ FileSystem disk root"					],					"isTestMethod" : false,					"category" : "origins",					"comment" : [ ],					"hash" : 2068441,					"argumentNames" : [ ]				},				"Path class" : {					"sourceCode" : [						"root",						"",						"\t\"Answer the root path - ie, / on unix\"",						"",						"\t^ AbsolutePath new"					],					"body" : [						"^ AbsolutePath new"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"Answer the root path - ie, / on unix"					],					"hash" : 1627183,					"argumentNames" : [ ]				},				"CTBinaryTreeAbstract" : {					"sourceCode" : [						"root",						"",						"\t^ representation root"					],					"body" : [						"^ representation root"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 3163939,					"argumentNames" : [ ]				},				"CTBinaryTreeElement" : {					"sourceCode" : [						"root",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 3162692,					"argumentNames" : [ ]				},				"MetacelloAbstractVersionConstructor" : {					"sourceCode" : [						"root",						"",						"\t^ root"					],					"body" : [						"^ root"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2335637,					"argumentNames" : [ ]				},				"FLSerialization" : {					"sourceCode" : [						"root",						"",						"\t^ root"					],					"body" : [						"^ root"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1407895,					"argumentNames" : [ ]				},				"CTBinaryTreeNode" : {					"sourceCode" : [						"root",						"",						"\t^ self value"					],					"body" : [						"^ self value"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 3163479,					"argumentNames" : [ ]				},				"MemoryStore" : {					"sourceCode" : [						"root",						"",						"\t^ root"					],					"body" : [						"^ root"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2294677,					"argumentNames" : [ ]				},				"CTBinaryTreeNodeSplayHeap" : {					"sourceCode" : [						"root",						"",						"\t^ previousLink ifEmpty: [ value ] ifNotEmpty: [ previousLink root ]"					],					"body" : [						"^ previousLink ifEmpty: [ value ] ifNotEmpty: [ previousLink root ]"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 3173474,					"argumentNames" : [ ]				},				"FileSystem" : {					"sourceCode" : [						"root",						"",						"\t\"Returns the root of the receiver filesystem, i.e. / on unix\"",						"",						"\t^ self referenceTo: Path root"					],					"body" : [						"^ self referenceTo: Path root"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Returns the root of the receiver filesystem, i.e. / on unix"					],					"hash" : 2076470,					"argumentNames" : [ ]				},				"SpAbstractPresenter" : {					"sourceCode" : [						"root",						"",						"\t\"Answer root presenter of this composition.\"",						"",						"\t^ self owner",						"\t\t  ifNotNil: [ :presenter | presenter root ]",						"\t\t  ifNil: [ self ]"					],					"body" : [						"^ self owner ifNotNil: [ :presenter | presenter root ] ifNil: [ self ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer root presenter of this composition."					],					"hash" : 3261899,					"argumentNames" : [ ]				},				"Morph" : {					"sourceCode" : [						"root",						"",						"\t\"Return the root of the composite morph containing the receiver. The owner of the root is either nil, a WorldMorph, or a HandMorph. If the receiver's owner is nil, the root is the receiver itself. This method always returns a morph.\"",						"",						"\t(owner isNil or: [ owner isWorldOrHandMorph ]) ifTrue: [ ^ self ].",						"\t^ owner root"					],					"body" : [						"(owner isNil or: [ owner isWorldOrHandMorph ]) ifTrue: [ ^ self ].",						"^ owner root"					],					"isTestMethod" : false,					"category" : "structure",					"comment" : [						"Return the root of the composite morph containing the receiver. The owner of the root is either nil, a WorldMorph, or a HandMorph. If the receiver's owner is nil, the root is the receiver itself. This method always returns a morph."					],					"hash" : 2447181,					"argumentNames" : [ ]				}			}		},		"partition:inSplayHeap:do:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeNodeSplayHeap>>#partitionLessThan:inSplayHeap:do:",				"CTBinaryTreeNodeSplayHeap>>#mergeBinaryTreeElement:inBinaryTree:",				"CTBinaryTreeNodeSplayHeap>>#partitionGreaterThanOrEqualTo:inSplayHeap:do:",				"CTSplayHeap>>#push:"			],			"implementors" : {				"CTBinaryTreeEmptySplayHeap" : {					"sourceCode" : [						"partition: pivot inSplayHeap: aHeap do: aBlock",						"",						"\t^ aBlock",						"\t\t  value: aHeap binaryTreeElementEmpty",						"\t\t  value: aHeap binaryTreeElementEmpty"					],					"body" : [						"^ aBlock",						"\t  value: aHeap binaryTreeElementEmpty",						"\t  value: aHeap binaryTreeElementEmpty"					],					"isTestMethod" : false,					"category" : "partitioning",					"comment" : [ ],					"hash" : 54290973,					"argumentNames" : [						"pivot",						"aHeap",						"aBlock"					]				},				"CTBinaryTreeNodeSplayHeap" : {					"sourceCode" : [						"partition: pivot inSplayHeap: aHeap do: aBlock",						"",						"\t^ (aHeap is: value lessThan: pivot)",						"\t\t  ifTrue: [ ",						"\t\t  self partitionLessThan: pivot inSplayHeap: aHeap do: aBlock ]",						"\t\t  ifFalse: [ ",						"\t\t\t  self",						"\t\t\t\t  partitionGreaterThanOrEqualTo: pivot",						"\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t  do: aBlock ]"					],					"body" : [						"^ (aHeap is: value lessThan: pivot)",						"\t  ifTrue: [ ",						"\t  self partitionLessThan: pivot inSplayHeap: aHeap do: aBlock ]",						"\t  ifFalse: [ ",						"\t\t  self",						"\t\t\t  partitionGreaterThanOrEqualTo: pivot",						"\t\t\t  inSplayHeap: aHeap",						"\t\t\t  do: aBlock ]"					],					"isTestMethod" : false,					"category" : "partitioning",					"comment" : [ ],					"hash" : 54292627,					"argumentNames" : [						"pivot",						"aHeap",						"aBlock"					]				}			}		},		"leftBinaryTreeElement:value:rightBinaryTreeElement:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstract>>#binaryTreeElementLeaf:",				"CTBinaryTreeNode>>#mergeBinaryTreeElement:inBinaryTree:",				"CTBinaryTreeNodeBalanced>>#balance:inSet:",				"CTBinaryTreeNodeLeftistHeap>>#insert:left:right:inBinaryTree:",				"CTBinaryTreeNodeSplayHeap>>#popInBinaryTree:",				"CTBinaryTreeNodeSplayHeap>>#partitionLessThan:inSplayHeap:do:",				"CTBinaryTreeNodeSplayHeap>>#mergeBinaryTreeElement:inBinaryTree:",				"CTBinaryTreeNodeSplayHeap>>#partitionGreaterThanOrEqualTo:inSplayHeap:do:",				"CTBinaryTreeNodeUnbalanced>>#mergeBinaryTreeElement:inBinaryTree:",				"CTSplayHeap>>#push:"			],			"implementors" : {				"CTBinaryTreeAbstract" : {					"sourceCode" : [						"leftBinaryTreeElement: l value: v rightBinaryTreeElement: r",						"",						"\t^ self binaryTreeElementNode",						"\t\t  previousLink: l;",						"\t\t  value: v;",						"\t\t  nextLink: r;",						"\t\t  yourself"					],					"body" : [						"^ self binaryTreeElementNode",						"\t  previousLink: l;",						"\t  value: v;",						"\t  nextLink: r;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 54283795,					"argumentNames" : [						"l",						"v",						"r"					]				}			}		},		"withCollection:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"Collection>>#asGPoint",				"Collection>>#asGVector",				"Collection>>#asGCoordinates",				"Collection>>#asBinaryTree:",				"GCoordinatesTest>>#newInstance",				"GCoordinatesTest>>#testCoordinates",				"GPoint class>>#withCollection:",				"GPointTest>>#testWithCollection",				"GVector class>>#withCollection:"			],			"implementors" : {				"GVector class" : {					"sourceCode" : [						"withCollection: aCollection",						"",						"\t^ self coordinates: (GCoordinates withCollection: aCollection)"					],					"body" : [						"^ self coordinates: (GCoordinates withCollection: aCollection)"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 23442311,					"argumentNames" : [						"aCollection"					]				},				"CTBinomialHeap class" : {					"sourceCode" : [						"withCollection: aCollection",						"",						"\t^ aCollection",						"\t\t  inject: self empty",						"\t\t  into: [ :aBinaryTree :each | aBinaryTree push: each ]"					],					"body" : [						"^ aCollection",						"\t  inject: self empty",						"\t  into: [ :aBinaryTree :each | aBinaryTree push: each ]"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 20205170,					"argumentNames" : [						"aCollection"					]				},				"CTBinaryTreeAbstract class" : {					"sourceCode" : [						"withCollection: aCollection",						"",						"\t^ aCollection",						"\t\t  inject: self empty",						"\t\t  into: [ :aBinaryTree :each | aBinaryTree push: each ]"					],					"body" : [						"^ aCollection",						"\t  inject: self empty",						"\t  into: [ :aBinaryTree :each | aBinaryTree push: each ]"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 20203634,					"argumentNames" : [						"aCollection"					]				},				"GPoint class" : {					"sourceCode" : [						"withCollection: aCollection",						"",						"\t^ self coordinates: (GCoordinates withCollection: aCollection)"					],					"body" : [						"^ self coordinates: (GCoordinates withCollection: aCollection)"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 23437191,					"argumentNames" : [						"aCollection"					]				},				"GCoordinates class" : {					"sourceCode" : [						"withCollection: aCollection",						"",						"\t^ self allSubclasses",						"\t\t  detect: [ :e | e numberOfDimensions = aCollection size ]",						"\t\t  ifFound: [ :class | ",						"\t\t\t  class basicNew",						"\t\t\t\t  initializeWith: aCollection asArray;",						"\t\t\t\t  yourself ]",						"\t\t  ifNone: [ ",						"\t\t  self error: 'This amount of coordinated is not yet managed.' ]"					],					"body" : [						"^ self allSubclasses",						"\t  detect: [ :e | e numberOfDimensions = aCollection size ]",						"\t  ifFound: [ :class | ",						"\t\t  class basicNew",						"\t\t\t  initializeWith: aCollection asArray;",						"\t\t\t  yourself ]",						"\t  ifNone: [ ",						"\t  self error: 'This amount of coordinated is not yet managed.' ]"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 23434560,					"argumentNames" : [						"aCollection"					]				}			}		},		"partitionLessThan:inSplayHeap:do:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeNodeSplayHeap>>#partition:inSplayHeap:do:"			],			"implementors" : {				"CTBinaryTreeNodeSplayHeap" : {					"sourceCode" : [						"partitionLessThan: pivot inSplayHeap: aHeap do: aBlock",						"",						"\t^ nextLink",						"\t\t  ifEmpty: [ aBlock value: self value: aHeap binaryTreeElementEmpty ]",						"\t\t  ifNotEmpty: [ ",						"\t\t\t  | y |",						"\t\t\t  y := nextLink value.",						"\t\t\t  (aHeap is: y lessThan: pivot)",						"\t\t\t\t  ifTrue: [ ",						"\t\t\t\t\t  nextLink nextLink",						"\t\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t\t  | ll l |",						"\t\t\t\t\t\t\t  ll := aHeap",						"\t\t\t\t\t\t\t\t        leftBinaryTreeElement: previousLink",						"\t\t\t\t\t\t\t\t        value: value",						"\t\t\t\t\t\t\t\t        rightBinaryTreeElement: nextLink previousLink.",						"\t\t\t\t\t\t\t  l := aHeap",						"\t\t\t\t\t\t\t\t       leftBinaryTreeElement: ll",						"\t\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t\t       rightBinaryTreeElement: s.",						"\t\t\t\t\t\t\t  aBlock value: l value: b ] ]",						"\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t  nextLink previousLink",						"\t\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t\t  | r l |",						"\t\t\t\t\t\t\t  l := aHeap",						"\t\t\t\t\t\t\t\t       leftBinaryTreeElement: previousLink",						"\t\t\t\t\t\t\t\t       value: value",						"\t\t\t\t\t\t\t\t       rightBinaryTreeElement: s.",						"\t\t\t\t\t\t\t  r := aHeap",						"\t\t\t\t\t\t\t\t       leftBinaryTreeElement: b",						"\t\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t\t       rightBinaryTreeElement: nextLink nextLink.",						"\t\t\t\t\t\t\t  aBlock value: l value: r ] ] ]"					],					"body" : [						"^ nextLink",						"\t  ifEmpty: [ aBlock value: self value: aHeap binaryTreeElementEmpty ]",						"\t  ifNotEmpty: [ ",						"\t\t  | y |",						"\t\t  y := nextLink value.",						"\t\t  (aHeap is: y lessThan: pivot)",						"\t\t\t  ifTrue: [ ",						"\t\t\t\t  nextLink nextLink",						"\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t  | ll l |",						"\t\t\t\t\t\t  ll := aHeap",						"\t\t\t\t\t\t\t        leftBinaryTreeElement: previousLink",						"\t\t\t\t\t\t\t        value: value",						"\t\t\t\t\t\t\t        rightBinaryTreeElement: nextLink previousLink.",						"\t\t\t\t\t\t  l := aHeap",						"\t\t\t\t\t\t\t       leftBinaryTreeElement: ll",						"\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t       rightBinaryTreeElement: s.",						"\t\t\t\t\t\t  aBlock value: l value: b ] ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  nextLink previousLink",						"\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t  | r l |",						"\t\t\t\t\t\t  l := aHeap",						"\t\t\t\t\t\t\t       leftBinaryTreeElement: previousLink",						"\t\t\t\t\t\t\t       value: value",						"\t\t\t\t\t\t\t       rightBinaryTreeElement: s.",						"\t\t\t\t\t\t  r := aHeap",						"\t\t\t\t\t\t\t       leftBinaryTreeElement: b",						"\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t       rightBinaryTreeElement: nextLink nextLink.",						"\t\t\t\t\t\t  aBlock value: l value: r ] ] ]"					],					"isTestMethod" : false,					"category" : "partitioning",					"comment" : [ ],					"hash" : 54291888,					"argumentNames" : [						"pivot",						"aHeap",						"aBlock"					]				}			}		},		"merge:with:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinomialHeap>>#merge:with:",				"CTBinomialHeap>>#pop",				"CTBinomialHeap class>>#withArrayedCollection:"			],			"implementors" : {				"CTBinomialHeap" : {					"sourceCode" : [						"merge: trees with: otherTrees",						"",						"\t^ trees ifNil: [ otherTrees ] ifNotNil: [ ",						"\t\t  otherTrees ifNil: [ trees ] ifNotNil: [ ",						"\t\t\t  | aTree anotherTree allButFirstTrees allButFirstOtherTrees aRank anotherRank |",						"\t\t\t  \"Getting rests of both collections of trees to merge.\"",						"\t\t\t  allButFirstTrees := trees nextLink.",						"\t\t\t  allButFirstOtherTrees := otherTrees nextLink.",						"",						"\t\t\t  \"Getting current topmost trees.\"",						"\t\t\t  aTree := trees value.",						"\t\t\t  anotherTree := otherTrees value.",						"",						"\t\t\t  \"Getting ranks.\"",						"\t\t\t  aRank := aTree key.",						"\t\t\t  anotherRank := anotherTree key.",						"",						"\t\t\t  \"Rank comparison via `#key`.\"",						"\t\t\t  aRank < anotherRank",						"\t\t\t\t  ifTrue: [ ",						"\t\t\t\t  aTree ~~> (self merge: allButFirstTrees with: otherTrees) ]",						"\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t  anotherRank < aRank",						"\t\t\t\t\t\t  ifTrue: [ ",						"\t\t\t\t\t\t  anotherTree",						"\t\t\t\t\t\t  ~~> (self merge: trees with: allButFirstOtherTrees) ]",						"\t\t\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t\t\t  | binomialTree mergedTrees |",						"\t\t\t\t\t\t\t  \"Invariant: both `aTree` and `anotherTree` have the *same* rank.\"",						"\t\t\t\t\t\t\t  binomialTree := aTree value linkBinomialTree:",						"\t\t\t\t\t\t\t\t                  anotherTree value.",						"\t\t\t\t\t\t\t  mergedTrees := self",						"\t\t\t\t\t\t\t\t                 merge: allButFirstTrees",						"\t\t\t\t\t\t\t\t                 with: allButFirstOtherTrees.",						"\t\t\t\t\t\t\t  self pushTree: aRank + 1 -> binomialTree onTrees: mergedTrees ] ] ] ]"					],					"body" : [						"^ trees ifNil: [ otherTrees ] ifNotNil: [ ",						"\t  otherTrees ifNil: [ trees ] ifNotNil: [ ",						"\t\t  | aTree anotherTree allButFirstTrees allButFirstOtherTrees aRank anotherRank |",						"\t\t  \"Getting rests of both collections of trees to merge.\"",						"\t\t  allButFirstTrees := trees nextLink.",						"\t\t  allButFirstOtherTrees := otherTrees nextLink.",						"",						"\t\t  \"Getting current topmost trees.\"",						"\t\t  aTree := trees value.",						"\t\t  anotherTree := otherTrees value.",						"",						"\t\t  \"Getting ranks.\"",						"\t\t  aRank := aTree key.",						"\t\t  anotherRank := anotherTree key.",						"",						"\t\t  \"Rank comparison via `#key`.\"",						"\t\t  aRank < anotherRank",						"\t\t\t  ifTrue: [ ",						"\t\t\t  aTree ~~> (self merge: allButFirstTrees with: otherTrees) ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  anotherRank < aRank",						"\t\t\t\t\t  ifTrue: [ ",						"\t\t\t\t\t  anotherTree ~~> (self merge: trees with: allButFirstOtherTrees) ]",						"\t\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t\t  | binomialTree mergedTrees |",						"\t\t\t\t\t\t  \"Invariant: both `aTree` and `anotherTree` have the *same* rank.\"",						"\t\t\t\t\t\t  binomialTree := aTree value linkBinomialTree:",						"\t\t\t\t\t\t\t                  anotherTree value.",						"\t\t\t\t\t\t  mergedTrees := self",						"\t\t\t\t\t\t\t                 merge: allButFirstTrees",						"\t\t\t\t\t\t\t                 with: allButFirstOtherTrees.",						"\t\t\t\t\t\t  self pushTree: aRank + 1 -> binomialTree onTrees: mergedTrees ] ] ] ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 39344411,					"argumentNames" : [						"trees",						"otherTrees"					]				}			}		},		"testPushOrderedCollection" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc"			],			"implementors" : {				"CTBinaryTreeAbstractTest" : {					"sourceCode" : [						"testPushOrderedCollection",						"",						"\t^ self exportSlotsGraphOf:",						"\t\t  (self tree: (1 to: 20) asOrderedCollection)"					],					"body" : [						"^ self exportSlotsGraphOf: (self tree: (1 to: 20) asOrderedCollection)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3165232,					"argumentNames" : [ ]				}			}		},		"testPushDoubledObject" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc"			],			"implementors" : {				"CTUnbalancedSetTest" : {					"sourceCode" : [						"testPushDoubledObject",						"",						"\t| set representation |",						"\tset := (1 to: 10) shuffled asUnbalancedSet.",						"\trepresentation := set representation.",						"",						"\tself exportSlotsGraphOf: set pathSuffix: 'original'.",						"",						"\tset",						"\t\tpush: 1;",						"\t\tpush: 5;",						"\t\tpush: 10.",						"",						"\tself assert: set representation equals: representation.",						"",						"\tset push: 0.",						"",						"\tself deny: set representation equals: representation.",						"",						"\t^ self exportSlotsGraphOf: set pathSuffix: 'augmented'"					],					"body" : [						"| set representation |",						"set := (1 to: 10) shuffled asUnbalancedSet.",						"representation := set representation.",						"",						"self exportSlotsGraphOf: set pathSuffix: 'original'.",						"",						"set",						"\tpush: 1;",						"\tpush: 5;",						"\tpush: 10.",						"",						"self assert: set representation equals: representation.",						"",						"set push: 0.",						"",						"self deny: set representation equals: representation.",						"",						"^ self exportSlotsGraphOf: set pathSuffix: 'augmented'"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3697959,					"argumentNames" : [ ]				}			}		},		"asBinaryTree" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstractTest>>#tree:"			],			"implementors" : {				"Collection" : {					"sourceCode" : [						"asBinaryTree",						"",						"\t^ self asBinaryTree: CTBinaryTreeAbstract"					],					"body" : [						"^ self asBinaryTree: CTBinaryTreeAbstract"					],					"isTestMethod" : false,					"category" : "*Containers-RedBlackSet",					"comment" : [ ],					"hash" : 1644962,					"argumentNames" : [ ]				}			}		},		"insert:left:right:inBinaryTree:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeNodeLeftistHeap>>#mergeBinaryTreeElement:inBinaryTree:"			],			"implementors" : {				"CTBinaryTreeNodeLeftistHeap" : {					"sourceCode" : [						"insert: aValue left: leftHeap right: rightHeap inBinaryTree: aBinaryTree",						"",						"\t| v w t |",						"\tv := leftHeap rank.",						"\tw := rightHeap rank.",						"\t(aBinaryTree is: v lessThan: w)",						"\t\tifTrue: [ ",						"\t\t\tt := aBinaryTree",						"\t\t\t\t     leftBinaryTreeElement: rightHeap",						"\t\t\t\t     value: aValue",						"\t\t\t\t     rightBinaryTreeElement: leftHeap.",						"\t\t\tt rank: v + 1 ]",						"\t\tifFalse: [ ",						"\t\t\tt := aBinaryTree",						"\t\t\t\t     leftBinaryTreeElement: leftHeap",						"\t\t\t\t     value: aValue",						"\t\t\t\t     rightBinaryTreeElement: rightHeap.",						"\t\t\tt rank: w + 1 ].",						"\t^ t"					],					"body" : [						"| v w t |",						"v := leftHeap rank.",						"w := rightHeap rank.",						"(aBinaryTree is: v lessThan: w)",						"\tifTrue: [ ",						"\t\tt := aBinaryTree",						"\t\t\t     leftBinaryTreeElement: rightHeap",						"\t\t\t     value: aValue",						"\t\t\t     rightBinaryTreeElement: leftHeap.",						"\t\tt rank: v + 1 ]",						"\tifFalse: [ ",						"\t\tt := aBinaryTree",						"\t\t\t     leftBinaryTreeElement: leftHeap",						"\t\t\t     value: aValue",						"\t\t\t     rightBinaryTreeElement: rightHeap.",						"\t\tt rank: w + 1 ].",						"^ t"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 72121232,					"argumentNames" : [						"aValue",						"leftHeap",						"rightHeap",						"aBinaryTree"					]				}			}		},		"testPushShuffledCollection" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc"			],			"implementors" : {				"CTBinaryTreeAbstractTest" : {					"sourceCode" : [						"testPushShuffledCollection",						"",						"\t| shuffled |",						"\tshuffled := (1 to: 20) asOrderedCollection shuffleBy:",						"\t\t            (Random seed: 13).",						"",						"\tself",						"\t\tassert: shuffled",						"\t\tequals: #( 8 16 20 3 6 5 4 19 7 12 2 10 11 9 13 18 17 15 14 1 )",						"\t\t\t\tasOrderedCollection.",						"",						"\t^ self exportSlotsGraphOf: (self tree: shuffled)"					],					"body" : [						"| shuffled |",						"shuffled := (1 to: 20) asOrderedCollection shuffleBy:",						"\t            (Random seed: 13).",						"",						"self",						"\tassert: shuffled",						"\tequals: #( 8 16 20 3 6 5 4 19 7 12 2 10 11 9 13 18 17 15 14 1 )",						"\t\t\tasOrderedCollection.",						"",						"^ self exportSlotsGraphOf: (self tree: shuffled)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3428821,					"argumentNames" : [ ]				}			}		},		"binaryTreeElementEmpty" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstract>>#binaryTreeElementLeaf:",				"CTBinaryTreeAbstract class>>#empty",				"CTBinaryTreeEmptySplayHeap>>#partition:inSplayHeap:do:",				"CTBinaryTreeNodeSplayHeap>>#partitionLessThan:inSplayHeap:do:",				"CTBinaryTreeNodeSplayHeap>>#partitionGreaterThanOrEqualTo:inSplayHeap:do:"			],			"implementors" : {				"CTBinaryTreeAbstract" : {					"sourceCode" : [						"binaryTreeElementEmpty",						"",						"\t^ CTBinaryTreeEmpty new"					],					"body" : [						"^ CTBinaryTreeEmpty new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3163951,					"argumentNames" : [ ]				},				"CTUnbalancedSet" : {					"sourceCode" : [						"binaryTreeElementEmpty",						"",						"\t^ CTBinaryTreeEmptyUnbalanced new"					],					"body" : [						"^ CTBinaryTreeEmptyUnbalanced new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3169327,					"argumentNames" : [ ]				},				"CTSplayHeap" : {					"sourceCode" : [						"binaryTreeElementEmpty",						"",						"\t^ CTBinaryTreeEmptySplayHeap new"					],					"body" : [						"^ CTBinaryTreeEmptySplayHeap new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3171887,					"argumentNames" : [ ]				},				"CTRedBlackSet" : {					"sourceCode" : [						"binaryTreeElementEmpty",						"",						"\t^ CTBinaryTreeEmptyBalanced new"					],					"body" : [						"^ CTBinaryTreeEmptyBalanced new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3169839,					"argumentNames" : [ ]				},				"CTLeftistHeap" : {					"sourceCode" : [						"binaryTreeElementEmpty",						"",						"\t^ CTBinaryTreeEmptyLeftistHeap new"					],					"body" : [						"^ CTBinaryTreeEmptyLeftistHeap new"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 3174191,					"argumentNames" : [ ]				}			}		},		"asUnbalancedSet" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTUnbalancedSetTest>>#tree:",				"CTUnbalancedSetTest>>#testPushDoubledObject"			],			"implementors" : {				"Collection" : {					"sourceCode" : [						"asUnbalancedSet",						"",						"\t^ self asBinaryTree: CTUnbalancedSet"					],					"body" : [						"^ self asBinaryTree: CTUnbalancedSet"					],					"isTestMethod" : false,					"category" : "*Containers-RedBlackSet",					"comment" : [ ],					"hash" : 1644962,					"argumentNames" : [ ]				}			}		},		"asBinaryTree:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"Collection>>#asRedBlackSet",				"Collection>>#asUnbalancedSet",				"Collection>>#asBinaryTree",				"Collection>>#asSplayHeap",				"Collection>>#asBinomialHeap",				"Collection>>#asLeftistHeap"			],			"implementors" : {				"ArrayedCollection" : {					"sourceCode" : [						"asBinaryTree: aClass",						"",						"\t^ aClass withArrayedCollection: self"					],					"body" : [						"^ aClass withArrayedCollection: self"					],					"isTestMethod" : false,					"category" : "*Containers-BinaryTreeAbstract",					"comment" : [ ],					"hash" : 18689472,					"argumentNames" : [						"aClass"					]				},				"Collection" : {					"sourceCode" : [						"asBinaryTree: aClass",						"",						"\t^ aClass withCollection: self"					],					"body" : [						"^ aClass withCollection: self"					],					"isTestMethod" : false,					"category" : "*Containers-BinaryTreeAbstract",					"comment" : [ ],					"hash" : 18684352,					"argumentNames" : [						"aClass"					]				}			}		},		"push:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"BaselineOfBookletDSst>>#scriptStoragePoolsForDoc",				"BreadthFirstGuide>>#show:",				"CTBinaryTreeAbstract class>>#withCollection:",				"CTBinomialHeap class>>#withCollection:",				"CTHeapQTest>>#testPushPop",				"CTLinkedStoragePoolArray2D>>#at:at:put:",				"CTLinkedStoragePoolCircularDoubly>>#push:",				"CTLinkedStoragePoolPolynomial class>>#termAssociations:",				"CTLinkedStoragePoolTest>>#testPopFromEmptyStack",				"CTLinkedStoragePoolTest>>#testRemoveAllFromQueue",				"CTLinkedStoragePoolTest>>#testRemoveAllFromStack",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnCircular",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnStack",				"CTLinkedStoragePoolTest>>#testPopFromEmptyCircular",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnQueue",				"CTLinkedStoragePoolTest>>#testPopFromEmptyQueue",				"CTRedBlackSet>>#push:",				"CTUnbalancedSetTest>>#testPushDoubledObject",				"CodeSimulationTest>>#testErrorCodeNotFound",				"CodeSimulationTest>>#testErrorCodeNotFoundIndexed",				"ConfigurableHistoryIterator>>#redoIfEmpty:",				"ConfigurableHistoryIterator>>#register:",				"ConfigurableHistoryIterator>>#undoIfEmpty:",				"Context>>#pushConstant:",				"Context>>#doPrimitive:method:receiver:args:",				"Context>>#pushConsArrayWithElements:",				"Context>>#pushRemoteTemp:inVectorAt:",				"Context>>#return:to:",				"Context>>#pushNewArrayOfSize:",				"Context>>#jump",				"Context>>#doDup",				"Context>>#pushTemporaryVariable:",				"Context>>#pushReceiverVariable:",				"Context>>#pushActiveContext",				"Context>>#pushReceiver",				"Context>>#callPrimitive:",				"Context>>#pushClosureTemps:",				"Context>>#return:from:",				"Context>>#pushActiveProcess",				"Context>>#pushFullClosure:numCopied:receiverOnStack:ignoreOuterContext:",				"Context>>#pushLiteralVariable:",				"Context class>>#contextOn:do:",				"Context class>>#contextEnsure:",				"DATarjanAlgorithm>>#traverse:",				"DATarjanAlgorithm>>#push:",				"DATarjanAlgorithmTest>>#testPush",				"FFIFunctionResolutionTest>>#pushReceiver",				"FFIFunctionResolutionTest>>#pushLiteral:",				"FFIFunctionResolutionTest>>#pushTemp:",				"FFIFunctionResolutionTest>>#pushInstVar:",				"FFIFunctionResolutionTest>>#pushLiteralVariable:",				"FLAnalysis>>#privateTrace:",				"FLAnalysis>>#trace:",				"FLAnalysis>>#run",				"FLSimpleStackTest>>#testPush",				"FLSimpleStackTest>>#testPop",				"FLSimpleStackTest>>#testGrow",				"FileSystemGuide>>#pushAll:",				"HiRulerBuilder>>#stackLinksFrom:in:",				"IRBuilder>>#pushScope:",				"IRBytecodeDecompiler>>#pushScope:numArgs:",				"IRStackCount>>#push",				"IRTranslator>>#pushScope:",				"IRTranslator>>#visitTempVector:",				"IRTranslator>>#pushOuterVectors:",				"LzwGifDecoder>>#handleCode:withPreviousCode:on:",				"MCScanner>>#next",				"MalTarjan>>#putOnStack:",				"MicInlineParser>>#pushNewOpener",				"MicrodownStyleHelpBuilder>>#helpTopicFromFormattedString:title:",				"PostorderGuide>>#pushTraverse:",				"PostorderGuide>>#pushVisit:",				"PreorderGuide>>#show:",				"Process>>#stepToHome:",				"RBRefactoryChangeManager>>#addUndo:",				"RBRefactoryChangeManager>>#addUndoPointer:",				"SindarinDebugger>>#skipMessageNodeWith:",				"SindarinDebugger>>#skipAssignmentNodeWith:",				"SpMenuPresenterBuilder>>#initialize",				"SpMenuPresenterBuilder>>#visitCommandGroup:",				"StackTest>>#testPush",				"StackTest>>#testEmptyError",				"StackTest>>#testPop",				"StackTest>>#setUp",				"StackTest>>#testTop",				"StackTest>>#testSize",				"TFRunner>>#executeCallback:",				"TypingVisitor>>#visitBlockNode:",				"TypingVisitor>>#initialize",				"WikiStyleHelpBuilder>>#helpTopicFromFormattedString:title:"			],			"implementors" : {				"Context" : {					"sourceCode" : [						"push: value",						"",						"\t\"Push value on the receiver's stack.\"",						"",						"\tself stackp: stackp + 1.",						"\tself at: stackp put: value"					],					"body" : [						"self stackp: stackp + 1.",						"self at: stackp put: value"					],					"isTestMethod" : false,					"category" : "controlling",					"comment" : [						"Push value on the receiver's stack."					],					"hash" : 17844140,					"argumentNames" : [						"value"					]				},				"CTSplayHeap" : {					"sourceCode" : [						"push: anObject",						"",						"\trepresentation := representation",						"\t\t                  partition: anObject",						"\t\t                  inSplayHeap: self",						"\t\t                  do: [ :l :r | ",						"\t\t\t                  self",						"\t\t\t\t                  leftBinaryTreeElement: l",						"\t\t\t\t                  value: anObject",						"\t\t\t\t                  rightBinaryTreeElement: r ]"					],					"body" : [						"representation := representation",						"\t                  partition: anObject",						"\t                  inSplayHeap: self",						"\t                  do: [ :l :r | ",						"\t\t                  self",						"\t\t\t                  leftBinaryTreeElement: l",						"\t\t\t                  value: anObject",						"\t\t\t                  rightBinaryTreeElement: r ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20212027,					"argumentNames" : [						"anObject"					]				},				"FileSystemGuide" : {					"sourceCode" : [						"push: anObject",						"",						"\twork add: anObject"					],					"body" : [						"work add: anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19114570,					"argumentNames" : [						"anObject"					]				},				"CTRedBlackSet" : {					"sourceCode" : [						"push: anObject",						"",						"\tsuper push: anObject.",						"\trepresentation := representation asBlackNode"					],					"body" : [						"super push: anObject.",						"representation := representation asBlackNode"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20209999,					"argumentNames" : [						"anObject"					]				},				"LIFOQueue" : {					"sourceCode" : [						"push: anObject",						"",						"\t^ self nextPut: anObject"					],					"body" : [						"^ self nextPut: anObject"					],					"isTestMethod" : false,					"category" : "stack-compliant protocol",					"comment" : [ ],					"hash" : 18927507,					"argumentNames" : [						"anObject"					]				},				"CTLinkedStoragePoolCircular" : {					"sourceCode" : [						"push: anObject",						"",						"\t| p |",						"\tp := self allocateOrReuseLink",						"\t\t     value: anObject;",						"\t\t     nextLink: head nextLink;",						"\t\t     yourself.",						"\thead",						"\t\tvalue: head value + 1;",						"\t\tnextLink: p.",						"\t^ p"					],					"body" : [						"| p |",						"p := self allocateOrReuseLink",						"\t     value: anObject;",						"\t     nextLink: head nextLink;",						"\t     yourself.",						"head",						"\tvalue: head value + 1;",						"\tnextLink: p.",						"^ p"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 20460526,					"argumentNames" : [						"anObject"					]				},				"Stack" : {					"sourceCode" : [						"push: anObject",						"",						"\t\"Adds a new object of any kind on top of the stack.\"",						"",						"\tself addFirst: anObject.",						"\t^ anObject"					],					"body" : [						"self addFirst: anObject.",						"^ anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Adds a new object of any kind on top of the stack."					],					"hash" : 18978778,					"argumentNames" : [						"anObject"					]				},				"CTHeapQ" : {					"sourceCode" : [						"push: anObject",						"",						"\ttally = heap size ifTrue: [ heap := heap grownBy: tally ].",						"\ttally := tally + 1.",						"\t^ self",						"\t\t  at: tally put: anObject;",						"\t\t  siftDown: 1 to: tally;",						"\t\t  itself: anObject"					],					"body" : [						"tally = heap size ifTrue: [ heap := heap grownBy: tally ].",						"tally := tally + 1.",						"^ self",						"\t  at: tally put: anObject;",						"\t  siftDown: 1 to: tally;",						"\t  itself: anObject"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 20202877,					"argumentNames" : [						"anObject"					]				},				"CTBinaryTreeAbstract" : {					"sourceCode" : [						"push: anObject",						"",						"\t| leaf |",						"\tleaf := self binaryTreeElementLeaf: anObject.",						"",						"\trepresentation := leaf",						"\t\t                  mergeBinaryTreeElement: representation",						"\t\t                  inBinaryTree: self"					],					"body" : [						"| leaf |",						"leaf := self binaryTreeElementLeaf: anObject.",						"",						"representation := leaf",						"\t                  mergeBinaryTreeElement: representation",						"\t                  inBinaryTree: self"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20466330,					"argumentNames" : [						"anObject"					]				},				"DATarjanAlgorithm" : {					"sourceCode" : [						"push: aPDPackage",						"",						"\tstack push: aPDPackage.",						"\taPDPackage inStack: true \"use a flag to avoid stack access\""					],					"body" : [						"stack push: aPDPackage.",						"aPDPackage inStack: true \"use a flag to avoid stack access\""					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19623509,					"argumentNames" : [						"aPDPackage"					]				},				"CTBinomialHeap" : {					"sourceCode" : [						"push: x",						"",						"\trepresentation := self",						"\t\t                  pushTree: 0 -> (CTBinomialTree leaf: x)",						"\t\t                  onTrees: representation"					],					"body" : [						"representation := self",						"\t                  pushTree: 0 -> (CTBinomialTree leaf: x)",						"\t                  onTrees: representation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20205651,					"argumentNames" : [						"x"					]				},				"CTLinkedStoragePoolQueue" : {					"sourceCode" : [						"push: anObject",						"",						"\t| p |",						"\tp := self allocateOrReuseLink",						"\t\t     value: anObject;",						"\t\t     nextLink: nil;",						"\t\t     yourself.",						"\ttop ifNil: [ top := p ] ifNotNil: [ bottom nextLink: p ].",						"\tbottom := p"					],					"body" : [						"| p |",						"p := self allocateOrReuseLink",						"\t     value: anObject;",						"\t     nextLink: nil;",						"\t     yourself.",						"top ifNil: [ top := p ] ifNotNil: [ bottom nextLink: p ].",						"bottom := p"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20462836,					"argumentNames" : [						"anObject"					]				},				"CTUnbalancedSet" : {					"sourceCode" : [						"push: anObject",						"",						"\trepresentation := [ :hop | ",						"\t                  representation",						"\t\t                  push: anObject",						"\t\t                  witness: Object new",						"\t\t                  continuation: hop",						"\t\t                  inSet: self ] valueWithArgumentedExit"					],					"body" : [						"representation := [ :hop | ",						"                  representation",						"\t                  push: anObject",						"\t                  witness: Object new",						"\t                  continuation: hop",						"\t                  inSet: self ] valueWithArgumentedExit"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20209207,					"argumentNames" : [						"anObject"					]				},				"CTLinkedStoragePoolStack" : {					"sourceCode" : [						"push: anObject",						"",						"\ttop := self allocateOrReuseLink",						"\t\t       value: anObject;",						"\t\t       nextLink: top;",						"\t\t       yourself"					],					"body" : [						"top := self allocateOrReuseLink",						"\t       value: anObject;",						"\t       nextLink: top;",						"\t       yourself"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20198532,					"argumentNames" : [						"anObject"					]				},				"IRStackCount" : {					"sourceCode" : [						"push: n",						"",						"\t(position := position + n) > length ifTrue: [ length := position ]"					],					"body" : [						"(position := position + n) > length ifTrue: [ length := position ]"					],					"isTestMethod" : false,					"category" : "affecting",					"comment" : [ ],					"hash" : 19078701,					"argumentNames" : [						"n"					]				},				"CTLinkedStoragePoolCircularDoubly" : {					"sourceCode" : [						"push: anObject",						"",						"\t| p |",						"\t\"p := self allocateOrReuseLink",						"\t\t     value: anObject;",						"\t\t     previousLink: head;",						"\t\t     nextLink: head nextLink;",						"\t\t     yourself.",						"\thead nextLink previousLink: p.",						"\thead nextLink: p.",						"\t^ p\"",						"\tp := (super push: anObject)",						"\t\t     previousLink: head;",						"\t\t     yourself.",						"\thead nextLink nextLink previousLink: p.",						"\t^ p"					],					"body" : [						"| p |",						"\"p := self allocateOrReuseLink",						"\t\t     value: anObject;",						"\t\t     previousLink: head;",						"\t\t     nextLink: head nextLink;",						"\t\t     yourself.",						"\thead nextLink previousLink: p.",						"\thead nextLink: p.",						"\t^ p\"",						"p := (super push: anObject)",						"\t     previousLink: head;",						"\t     yourself.",						"head nextLink nextLink previousLink: p.",						"^ p"					],					"isTestMethod" : false,					"category" : "API-remotes",					"comment" : [ ],					"hash" : 20460127,					"argumentNames" : [						"anObject"					]				},				"FLSimpleStack" : {					"sourceCode" : [						"push: anObject",						"",						"\t\"Adds a new object of any kind on top of the stack.\"",						"",						"\tarray at: slotIndex put: anObject.",						"\tarray size = slotIndex ifTrue: [ self grow ].",						"\tslotIndex := slotIndex + 1.",						"\t^ anObject"					],					"body" : [						"array at: slotIndex put: anObject.",						"array size = slotIndex ifTrue: [ self grow ].",						"slotIndex := slotIndex + 1.",						"^ anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Adds a new object of any kind on top of the stack."					],					"hash" : 18384200,					"argumentNames" : [						"anObject"					]				}			}		},		"tree:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstractTest>>#testPushShuffledInterval",				"CTBinaryTreeAbstractTest>>#testPushShuffledCollection",				"CTBinaryTreeAbstractTest>>#testCreation",				"CTBinaryTreeAbstractTest>>#testPushOrderedInterval",				"CTBinaryTreeAbstractTest>>#testPushOrderedCollection",				"ContinuationTest>>#testTwoInARow",				"IceGitIndex>>#commitWithMessage:andParents:",				"MWHandlerTest>>#testSequenceableCollectionMergeSort",				"MWHandlerTest>>#testSequenceableCollectionMergeSortCopyingDetailed",				"MWHandlerTest>>#testSelfSendsSimpleUsingPlus",				"MWHandlerTest>>#testHeapWithAll",				"MWHandlerTest>>#testAddWithinDoª",				"MWHandlerTest>>#testSelfSendsSimpleWithOutlinerShapes",				"MWHandlerTest>>#testAddWithinDoObjectCentric",				"MWHandlerTest>>#testProfileSlowFibonacciMemoing",				"MWHandlerTest>>#testSelfSendBeforeRising",				"MWHandlerTest>>#testSelfSendsSimple",				"MWHandlerTest>>#exampleOpalCompiler",				"MWHandlerTest>>#testProfileSlowFactorial",				"MWHandlerTest>>#testSequenceableCollectionMergeSortPlugging",				"MWHandlerTest>>#testTimingSlowFibonacciMemoing",				"MWHandlerTest>>#testSequenceableCollectionMergeSortCopying",				"MWHandlerTest>>#testProfileSlowFibonacci",				"MWVisualizationsTest>>#testProfileSlowFibonacciWithAddOnly",				"MWVisualizationsTest>>#testSequenceableCollectionEstrinInit",				"MWVisualizationsTest>>#testInspectFactorialRecursive",				"MWVisualizationsTest>>#testInspectKaratsuba42FactorialSquaredProfiled",				"MWVisualizationsTest>>#testSequenceableCollectionHornerInit",				"MWVisualizationsTest>>#testProfileSlowFibonacciTailWithAdd",				"MWVisualizationsTest>>#testProfileSlowFibonacciMemoingWithAdd",				"MWVisualizationsTest>>#testInspectLargeIntegerProfiled",				"MWVisualizationsTest>>#testInspectLargeIntegerQuickProfiled",				"MWVisualizationsTest>>#testInspectLargeIntegerSlowProfiled",				"MWVisualizationsTest>>#testInspectProductTo",				"MWVisualizationsTest>>#testProfileSlowFibonacciWithAdd",				"MethodsTemperaturesPresenter>>#runInstallMethodTemperatureWrappersStCommand:"			],			"implementors" : {				"TwoInARowStar" : {					"sourceCode" : [						"tree: aTree",						"",						"\t| fst |",						"\tfst := Continuation currentDo: [ :here | ",						"\t\t       leave := here.",						"\t\t       self waddle: aTree.",						"\t\t       leave value: nil ].",						"\t^ fst isSymbol",						"\t\t  ifTrue: [ self T: fst ]",						"\t\t  ifFalse: [ false ]"					],					"body" : [						"| fst |",						"fst := Continuation currentDo: [ :here | ",						"\t       leave := here.",						"\t       self waddle: aTree.",						"\t       leave value: nil ].",						"^ fst isSymbol",						"\t  ifTrue: [ self T: fst ]",						"\t  ifFalse: [ false ]"					],					"isTestMethod" : false,					"category" : "API",					"comment" : [ ],					"hash" : 21754457,					"argumentNames" : [						"aTree"					]				},				"CTSplayHeapTest" : {					"sourceCode" : [						"tree: aCollection",						"",						"\t^ aCollection asSplayHeap"					],					"body" : [						"^ aCollection asSplayHeap"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 20212835,					"argumentNames" : [						"aCollection"					]				},				"MWHandlerProfiling" : {					"sourceCode" : [						"tree: aTree",						"",						"\ttree := aTree"					],					"body" : [						"tree := aTree"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 21218198,					"argumentNames" : [						"aTree"					]				},				"CTBinaryTreeAbstractTest" : {					"sourceCode" : [						"tree: aCollection",						"",						"\t^ aCollection asBinaryTree"					],					"body" : [						"^ aCollection asBinaryTree"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 20203875,					"argumentNames" : [						"aCollection"					]				},				"CTUnbalancedSetTest" : {					"sourceCode" : [						"tree: aCollection",						"",						"\t^ aCollection asUnbalancedSet"					],					"body" : [						"^ aCollection asUnbalancedSet"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 20210275,					"argumentNames" : [						"aCollection"					]				},				"CTBinomialHeapTest" : {					"sourceCode" : [						"tree: aCollection",						"",						"\t^ aCollection asBinomialHeap"					],					"body" : [						"^ aCollection asBinomialHeap"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 20193635,					"argumentNames" : [						"aCollection"					]				},				"CTLeftistHeapTest" : {					"sourceCode" : [						"tree: aCollection",						"",						"\t^ aCollection asLeftistHeap"					],					"body" : [						"^ aCollection asLeftistHeap"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 20210531,					"argumentNames" : [						"aCollection"					]				},				"CTRedBlackSetTest" : {					"sourceCode" : [						"tree: aCollection",						"",						"\t^ aCollection asRedBlackSet"					],					"body" : [						"^ aCollection asRedBlackSet"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 20209763,					"argumentNames" : [						"aCollection"					]				},				"LGitCommitBuilder" : {					"sourceCode" : [						"tree: anLGitTree",						"",						"\ttree := anLGitTree"					],					"body" : [						"tree := anLGitTree"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 23882138,					"argumentNames" : [						"anLGitTree"					]				}			}		},		"testCreation" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc"			],			"implementors" : {				"ComplexTest" : {					"sourceCode" : [						"testCreation",						"",						"\t\"self run: #testCreation\"",						"",						"\t| c |",						"\tc := 5 i.",						"\tself assert: c real = 0.",						"\tself assert: c imaginary = 5.",						"",						"\tc := 6 + 7 i.",						"\tself assert: c real = 6.",						"\tself assert: c imaginary = 7.",						"",						"\tc := 5.6 - 8 i.",						"\tself assert: c real = 5.6.",						"\tself assert: c imaginary = -8.",						"",						"\tc := Complex real: 10 imaginary: 5.",						"\tself assert: c real = 10.",						"\tself assert: c imaginary = 5.",						"",						"\tc := Complex abs: 5 arg: Float pi / 2.",						"\tself assert: c real rounded = 0.",						"\tself assert: c imaginary = 5"					],					"body" : [						"| c |",						"c := 5 i.",						"self assert: c real = 0.",						"self assert: c imaginary = 5.",						"",						"c := 6 + 7 i.",						"self assert: c real = 6.",						"self assert: c imaginary = 7.",						"",						"c := 5.6 - 8 i.",						"self assert: c real = 5.6.",						"self assert: c imaginary = -8.",						"",						"c := Complex real: 10 imaginary: 5.",						"self assert: c real = 10.",						"self assert: c imaginary = 5.",						"",						"c := Complex abs: 5 arg: Float pi / 2.",						"self assert: c real rounded = 0.",						"self assert: c imaginary = 5"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"self run: #testCreation"					],					"hash" : 3922113,					"argumentNames" : [ ]				},				"MCClassDefinitionTest" : {					"sourceCode" : [						"testCreation",						"",						"\t| d |",						"\td := self mockClassA asClassDefinition.",						"\tself assert: d className equals: #MCMockClassA.",						"\tself assert: d superclassName equals: #MCMock.",						"\tself assert: d type equals: #normal.",						"\tself assert: d category equals: self mockCategoryName.",						"\tself assert: d instVarNames asArray equals: #( 'ivar' ).",						"\tself",						"\t\tassert: d classVarNames asArray",						"\t\tequals: #( 'CVar' 'InitializationOrder' ).",						"\tself assert: d classInstVarNames asArray equals: #(  ).",						"\tself assert: d comment isString.",						"\tself assert: d comment equals: self classAComment.",						"\tself",						"\t\tassert: d commentStamp",						"\t\tequals: self mockClassA organization commentStamp"					],					"body" : [						"| d |",						"d := self mockClassA asClassDefinition.",						"self assert: d className equals: #MCMockClassA.",						"self assert: d superclassName equals: #MCMock.",						"self assert: d type equals: #normal.",						"self assert: d category equals: self mockCategoryName.",						"self assert: d instVarNames asArray equals: #( 'ivar' ).",						"self",						"\tassert: d classVarNames asArray",						"\tequals: #( 'CVar' 'InitializationOrder' ).",						"self assert: d classInstVarNames asArray equals: #(  ).",						"self assert: d comment isString.",						"self assert: d comment equals: self classAComment.",						"self",						"\tassert: d commentStamp",						"\tequals: self mockClassA organization commentStamp"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4291631,					"argumentNames" : [ ]				},				"MCSnapshotTest" : {					"sourceCode" : [						"testCreation",						"",						"\t| d |",						"\td := self mockSnapshot definitions.",						"\tself assert: (d anySatisfy: [ :ea | ",						"\t\t\t ea isClassDefinition and: [ ea className = #MCMockClassA ] ]).",						"\tself assert: (d anySatisfy: [ :ea | ",						"\t\t\t ea isMethodDefinition and: [ ea selector = #mockClassExtension ] ]).",						"\tself assert: (d allSatisfy: [ :ea | ",						"\t\t\t ea isClassDefinition not or: [ ea category endsWith: 'Mocks' ] ])"					],					"body" : [						"| d |",						"d := self mockSnapshot definitions.",						"self assert: (d anySatisfy: [ :ea | ",						"\t\t ea isClassDefinition and: [ ea className = #MCMockClassA ] ]).",						"self assert: (d anySatisfy: [ :ea | ",						"\t\t ea isMethodDefinition and: [ ea selector = #mockClassExtension ] ]).",						"self assert: (d allSatisfy: [ :ea | ",						"\t\t ea isClassDefinition not or: [ ea category endsWith: 'Mocks' ] ])"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4299754,					"argumentNames" : [ ]				},				"CTOrderPreservingTreeTest" : {					"sourceCode" : [						"testCreation",						"",						"\tself assertEmpty: CTOrderPreservingTree new"					],					"body" : [						"self assertEmpty: CTOrderPreservingTree new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3123700,					"argumentNames" : [ ]				},				"RBMethodNameTest" : {					"sourceCode" : [						"testCreation",						"",						"\t\"Yes this is stupid test but it would have save time to understand what should be passed as argument!\"",						"",						"\t| rbmethod |",						"\trbmethod := RBMethodName selector: #foo: arguments: #( 'x' ).",						"\tself assert: rbmethod selector equals: #foo:.",						"\tself assert: rbmethod arguments equals: #( 'x' )"					],					"body" : [						"| rbmethod |",						"rbmethod := RBMethodName selector: #foo: arguments: #( 'x' ).",						"self assert: rbmethod selector equals: #foo:.",						"self assert: rbmethod arguments equals: #( 'x' )"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"Yes this is stupid test but it would have save time to understand what should be passed as argument!"					],					"hash" : 5200697,					"argumentNames" : [ ]				},				"CTBinaryTreeAbstractTest" : {					"sourceCode" : [						"testCreation",						"",						"\t^ self exportSlotsGraphOf: (self tree: {  })"					],					"body" : [						"^ self exportSlotsGraphOf: (self tree: {  })"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3165144,					"argumentNames" : [ ]				},				"BagTest" : {					"sourceCode" : [						"testCreation",						"",						"\t| bag |",						"\tbag := Bag new.",						"\tself assert: bag size equals: 0.",						"\tself assertEmpty: bag"					],					"body" : [						"| bag |",						"bag := Bag new.",						"self assert: bag size equals: 0.",						"self assertEmpty: bag"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4686053,					"argumentNames" : [ ]				},				"FLIndexStreamTest" : {					"sourceCode" : [						"testCreation",						"",						"\tself indexStreamOn: #(  ) writeStream digits: 2"					],					"body" : [						"self indexStreamOn: #(  ) writeStream digits: 2"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 5066592,					"argumentNames" : [ ]				},				"UUIDPrimitivesTest" : {					"sourceCode" : [						"testCreation",						"",						"\t| uuid |",						"\tuuid := UUID new.",						"\tself assert: uuid size equals: 16.",						"\tself deny: uuid isNilUUID.",						"\tself assert: uuid asString size equals: 36"					],					"body" : [						"| uuid |",						"uuid := UUID new.",						"self assert: uuid size equals: 16.",						"self deny: uuid isNilUUID.",						"self assert: uuid asString size equals: 36"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4598187,					"argumentNames" : [ ]				},				"GAngleTest" : {					"sourceCode" : [						"testCreation",						"",						"\tangle := 90 degrees.",						"\tself assert: angle equals: (GAngle degrees: 90).",						"",						"\tangle := 1 π radians.",						"\tself assert: angle equals: (GAngle radians: 1 π)"					],					"body" : [						"angle := 90 degrees.",						"self assert: angle equals: (GAngle degrees: 90).",						"",						"angle := 1 π radians.",						"self assert: angle equals: (GAngle radians: 1 π)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 6408339,					"argumentNames" : [ ]				},				"SortedCollectionTest" : {					"sourceCode" : [						"testCreation",						"",						"\t| collection |",						"\tcollection := #( 10 9 3 6 1 8 7 5 4 2 ) asSortedCollection.",						"\tself assert: collection equals: (1 to: 10) asSortedCollection"					],					"body" : [						"| collection |",						"collection := #( 10 9 3 6 1 8 7 5 4 2 ) asSortedCollection.",						"self assert: collection equals: (1 to: 10) asSortedCollection"					],					"isTestMethod" : true,					"category" : "tests - basic",					"comment" : [ ],					"hash" : 4663020,					"argumentNames" : [ ]				},				"KMShortcutTest" : {					"sourceCode" : [						"testCreation",						"",						"\tself assert: ($e asKeyCombination isKindOf: KMSingleKeyCombination).",						"\tself assert: ($e ctrl isKindOf: KMModifiedKeyCombination).",						"\tself assert:",						"\t\t($e ctrl alt shift command isKindOf: KMModifiedKeyCombination)"					],					"body" : [						"self assert: ($e asKeyCombination isKindOf: KMSingleKeyCombination).",						"self assert: ($e ctrl isKindOf: KMModifiedKeyCombination).",						"self assert:",						"\t($e ctrl alt shift command isKindOf: KMModifiedKeyCombination)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 5243120,					"argumentNames" : [ ]				},				"WideCharacterSetTest" : {					"sourceCode" : [						"testCreation",						"",						"\t\"By now, only creation method is newFrom:\"",						"",						"\t| cs1 wcs1 cs2 wcs2 byteString wideString |",						"\tbyteString := 'aeiouy'.",						"\twideString := 'aeiouy' copyWith: 340 asCharacter.",						"",						"\tcs1 := CharacterSet newFrom: byteString.",						"\twcs1 := WideCharacterSet newFrom: byteString.",						"\tself assert: wcs1 equals: cs1.",						"\tself assert: wcs1 size equals: byteString size.",						"",						"\tcs2 := CharacterSet newFrom: wideString.",						"\twcs2 := WideCharacterSet newFrom: wideString.",						"\tself assert: wcs2 equals: cs2.",						"\tself assert: wcs2 size equals: wideString size.",						"",						"\tself",						"\t\tshould: [ (byteString indexOfAnyOf: wcs1) = 1 ]",						"\t\tdescription: 'This should used optimized byteArrayMap method'.",						"\tself",						"\t\tshould: [ (byteString indexOfAnyOf: wcs2) = 1 ]",						"\t\tdescription: 'This should used optimized byteArrayMap method'.",						"",						"\tself",						"\t\tshould: [ ('bcd' indexOfAnyOf: wcs1) = 0 ]",						"\t\tdescription: 'This should used optimized byteArrayMap method'.",						"\tself",						"\t\tshould: [ ('bcd' indexOfAnyOf: wcs2) = 0 ]",						"\t\tdescription: 'This should used optimized byteArrayMap method'"					],					"body" : [						"| cs1 wcs1 cs2 wcs2 byteString wideString |",						"byteString := 'aeiouy'.",						"wideString := 'aeiouy' copyWith: 340 asCharacter.",						"",						"cs1 := CharacterSet newFrom: byteString.",						"wcs1 := WideCharacterSet newFrom: byteString.",						"self assert: wcs1 equals: cs1.",						"self assert: wcs1 size equals: byteString size.",						"",						"cs2 := CharacterSet newFrom: wideString.",						"wcs2 := WideCharacterSet newFrom: wideString.",						"self assert: wcs2 equals: cs2.",						"self assert: wcs2 size equals: wideString size.",						"",						"self",						"\tshould: [ (byteString indexOfAnyOf: wcs1) = 1 ]",						"\tdescription: 'This should used optimized byteArrayMap method'.",						"self",						"\tshould: [ (byteString indexOfAnyOf: wcs2) = 1 ]",						"\tdescription: 'This should used optimized byteArrayMap method'.",						"",						"self",						"\tshould: [ ('bcd' indexOfAnyOf: wcs1) = 0 ]",						"\tdescription: 'This should used optimized byteArrayMap method'.",						"self",						"\tshould: [ ('bcd' indexOfAnyOf: wcs2) = 0 ]",						"\tdescription: 'This should used optimized byteArrayMap method'"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"By now, only creation method is newFrom:"					],					"hash" : 5986877,					"argumentNames" : [ ]				}			}		},		"testPushShuffledInterval" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc"			],			"implementors" : {				"CTBinaryTreeAbstractTest" : {					"sourceCode" : [						"testPushShuffledInterval",						"",						"\t| shuffled |",						"\tshuffled := (1 to: 20) asArray shuffleBy: (Random seed: 13).",						"",						"\tself",						"\t\tassert: shuffled",						"\t\tequals: #( 8 16 20 3 6 5 4 19 7 12 2 10 11 9 13 18 17 15 14 1 ).",						"",						"\t^ self exportSlotsGraphOf: (self tree: shuffled)"					],					"body" : [						"| shuffled |",						"shuffled := (1 to: 20) asArray shuffleBy: (Random seed: 13).",						"",						"self",						"\tassert: shuffled",						"\tequals: #( 8 16 20 3 6 5 4 19 7 12 2 10 11 9 13 18 17 15 14 1 ).",						"",						"^ self exportSlotsGraphOf: (self tree: shuffled)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3428690,					"argumentNames" : [ ]				}			}		},		"pushingAlreadyIncluded:continuation:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeEmptyUnbalanced>>#push:witness:continuation:inSet:"			],			"implementors" : {				"CTUnbalancedSet" : {					"sourceCode" : [						"pushingAlreadyIncluded: anObject continuation: aContinuation",						"",						"\t^ aContinuation value: representation"					],					"body" : [						"^ aContinuation value: representation"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 37248078,					"argumentNames" : [						"anObject",						"aContinuation"					]				}			}		},		"empty" : {			"senders" : [				"ArrayTest>>#testKeysAndValuesDoEmpty",				"ArrayTest>>#testHasEqualElements",				"ArrayTest>>#testAsStringOnDelimiterLastEmpty",				"ArrayTest>>#testsBeginsWithEmpty",				"ArrayTest>>#testCopySameClass",				"ArrayTest>>#test0FixtureCopyPartOfSequenceableTest",				"ArrayTest>>#testCopyEmptyWith",				"ArrayTest>>#testEqualSignOfIdenticalCollectionObjects",				"ArrayTest>>#testFlatCollectAsWithEmptyCollection",				"ArrayTest>>#testIncludesAnyNoneThere",				"ArrayTest>>#testCopyEmptyWithoutAll",				"ArrayTest>>#test0FixtureIncludeTest",				"ArrayTest>>#testReverseDoEmpty",				"ArrayTest>>#testWithCollectError",				"ArrayTest>>#testsEndsWithEmpty",				"ArrayTest>>#testAsCommaStringEmpty",				"ArrayTest>>#testUnionOfEmpties",				"ArrayTest>>#testUnion",				"ArrayTest>>#testShallowCopyEmpty",				"ArrayTest>>#testWithDoError",				"ArrayTest>>#test0CopyTest",				"ArrayTest>>#testCopyAfterEmpty",				"ArrayTest>>#testDifference",				"ArrayTest>>#test0FixtureCloneTest",				"ArrayTest>>#test0FixturePutOneOrMoreElementsTest",				"ArrayTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"ArrayTest>>#testCopyEmptyWithout",				"ArrayTest>>#testGroupsOfAtATimeCollect",				"ArrayTest>>#testFindFirstNotIn",				"ArrayTest>>#testAsStringOnDelimiterEmpty",				"ArrayTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"ArrayTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"ArrayTest>>#testAtPutOutOfBounds",				"ArrayTest>>#test0FixtureBeginsEndsWithTest",				"ArrayTest>>#testCopyEmpty",				"ArrayTest>>#testOccurrencesOfNotIn",				"ArrayTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"ArrayTest>>#test0FixtureSequencedConcatenationTest",				"ArrayTest>>#test0FixtureCopySameContentsTest",				"ArrayTest>>#test0TStructuralEqualityTest",				"ArrayTest>>#testIncludesAnyAllThere",				"ArrayTest>>#test0FixtureOccurrencesTest",				"ArrayTest>>#testCopyUpToLastEmpty",				"ArrayTest>>#testIntersectionEmpty",				"ArrayTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"ArrayTest>>#testFindLastNotIn",				"ArrayTest>>#testEqualSign",				"ArrayTest>>#testOccurrencesOfEmpty",				"ArrayTest>>#test0FixturePutTest",				"ArrayTest>>#testCopyUpToEmpty",				"ArrayTest>>#test0FixtureIterateSequencedReadableTest",				"ArrayTest>>#testIncludesElementIsNotThere",				"ArrayTest>>#testIncludesAllNoneThere",				"ArrayTest>>#testConcatenationWithEmpty",				"ArrayTest>>#test0FixtureEmptySequenceableTest",				"ArrayTest>>#testCopyAfterLastEmpty",				"BagTest>>#test0FixtureCloneTest",				"BagTest>>#testAsStringOnDelimiterLastEmpty",				"BagTest>>#testRemoveElementFromEmpty",				"BagTest>>#testCopyEmptyWithout",				"BagTest>>#testCopySameClass",				"BagTest>>#testCopyEmptyWith",				"BagTest>>#testEqualSignOfIdenticalCollectionObjects",				"BagTest>>#testIncludesAnyNoneThere",				"BagTest>>#testCopyEmptyWithoutAll",				"BagTest>>#testAsStringOnDelimiterEmpty",				"BagTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"BagTest>>#testCopyEmpty",				"BagTest>>#test0FixtureIncludeTest",				"BagTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"BagTest>>#test0FixtureTRemoveTest",				"BagTest>>#test0TStructuralEqualityTest",				"BagTest>>#test0FixtureConcatenationTest",				"BagTest>>#testIncludesAnyAllThere",				"BagTest>>#test0FixtureOccurrencesTest",				"BagTest>>#testIntersectionEmpty",				"BagTest>>#testAsCommaStringEmpty",				"BagTest>>#testEqualSign",				"BagTest>>#testOccurrencesOfEmpty",				"BagTest>>#testUnionOfEmpties",				"BagTest>>#testUnion",				"BagTest>>#testIncludesElementIsNotThere",				"BagTest>>#testIncludesAllNoneThere",				"BagTest>>#testConcatenationWithEmpty",				"BagTest>>#test0CopyTest",				"BagTest>>#testDifference",				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeAbstract class>>#withArrayedCollection:",				"CTBinaryTreeAbstract class>>#withCollection:",				"CTBinomialHeap class>>#withArrayedCollection:",				"CTBinomialHeap class>>#withCollection:",				"CTSccDfsPainter>>#layoutTuples:lineBuilder:",				"CTSlotDescriptorsVisitor>>#visitArray2D:",				"CTSlotDescriptorsVisitor>>#visitHeap:",				"CTTopologicalSortDfsPainter>>#layoutTuples:lineBuilder:",				"CharacterSet class>>#separators",				"CharacterSet class>>#allCharacters",				"ClyBrowserQueryCache>>#initialize",				"ClyCompositeQueryTest>>#testIsExecutedFromEmptyScope",				"ClyCompositeQueryTest>>#testNotExecutedFromMultipleScopeWhenAllSubqueriesAreFromEmptyScope",				"ClyCompositeQueryTest>>#testNotExecutedFromSingleScopeWhenAllSubqueriesAreFromEmptyScope",				"ClyCompositeQueryTest>>#testNotExecutedFromMultipleScopeWhenSingleSubqueryIsFromEmptyScope",				"ClyNavigationEnvironmentTest>>#testCheckEmptyQueryWhenThereIsNoResultButItWouldBeEmpty",				"ClyNavigationEnvironmentTest>>#testCheckEmptyQueryWhenThereIsEmptyResult",				"ClyQueryViewMorph>>#initialize",				"ClyUnionQueryTest>>#testIsEmptyWhenAllSubqueriesAreEmpty",				"ClyUnionQueryTest>>#testNotEmptyWhenThereIsNotEmptySubquery",				"CoFetcher>>#initialize",				"CoResultSet>>#initialize",				"CoResultSet>>#resetFilter",				"Collection class>>#with:",				"CollectionRootTest>>#testIfEmpty",				"CollectionRootTest>>#testIfEmptyifNotEmpty",				"CollectionRootTest>>#testIfNotEmpty",				"CollectionRootTest>>#testCollectOnEmpty",				"CollectionRootTest>>#testSelectOnEmpty",				"CollectionRootTest>>#testAllSatisfyEmpty",				"CollectionRootTest>>#testIsEmpty",				"CollectionRootTest>>#testNotEmpty",				"CollectionRootTest>>#test0FixtureEmptyTest",				"CollectionRootTest>>#testIsEmptyOrNil",				"CollectionRootTest>>#testNoneSatisfyEmpty",				"CollectionRootTest>>#testBasicCollectEmpty",				"CollectionRootTest>>#testCollectThenDoOnEmpty",				"CollectionRootTest>>#testSelectThenDoOnEmpty",				"CollectionRootTest>>#testRejectThenCollectEmpty",				"CollectionRootTest>>#testSize",				"CollectionRootTest>>#testCollectThenSelectOnEmpty",				"CollectionRootTest>>#testRejectEmpty",				"CollectionRootTest>>#testSelectThenCollectOnEmpty",				"CollectionRootTest>>#test0TSizeTest",				"CollectionRootTest>>#testRejectThenDoOnEmpty",				"CollectionRootTest>>#testIfNotEmptyifEmpty",				"CompilationContext>>#compiledMethodTrailer",				"CompiledMethod>>#isEqualRegardlessTrailerTo:",				"CompiledMethod class>>#toReturnSelf",				"DTDefaultPluginPresenter>>#initializeResultsTreeAndLabel",				"DTResultTreeView>>#resultTreeFor:",				"DictionaryTest>>#testAsStringOnDelimiterLastEmpty",				"DictionaryTest>>#testCopySameClass",				"DictionaryTest>>#testCopyEmptyWith",				"DictionaryTest>>#testEqualSignOfIdenticalCollectionObjects",				"DictionaryTest>>#testIncludesAnyNoneThere",				"DictionaryTest>>#testCopyEmptyWithoutAll",				"DictionaryTest>>#test0FixtureIncludeTest",				"DictionaryTest>>#testAsCommaStringEmpty",				"DictionaryTest>>#testUnionOfEmpties",				"DictionaryTest>>#testUnion",				"DictionaryTest>>#test0CopyTest",				"DictionaryTest>>#testDifference",				"DictionaryTest>>#test0FixtureCloneTest",				"DictionaryTest>>#testOtherDictionaryEquality",				"DictionaryTest>>#testAsStringOnDelimiterEmpty",				"DictionaryTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"DictionaryTest>>#testCopyEmpty",				"DictionaryTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"DictionaryTest>>#test0TStructuralEqualityTest",				"DictionaryTest>>#testIncludesAnyAllThere",				"DictionaryTest>>#test0FixtureOccurrencesTest",				"DictionaryTest>>#testIntersectionEmpty",				"DictionaryTest>>#testEqualSign",				"DictionaryTest>>#testOccurrencesOfEmpty",				"DictionaryTest>>#test0FixturePutTest",				"DictionaryTest>>#testIncludesElementIsNotThere",				"DictionaryTest>>#testIncludesAllNoneThere",				"Exception>>#messageText",				"FBDDecompiler>>#recompile:from:",				"FFICalloutMethodBuilderTestContext>>#trailer",				"FFIMockCalloutMethodBuilder>>#methodTrailer",				"FLCompiledMethodCluster class>>#setTrailerWithNoSource",				"FloatArrayTest>>#testKeysAndValuesDoEmpty",				"FloatArrayTest>>#testHasEqualElements",				"FloatArrayTest>>#testAsStringOnDelimiterLastEmpty",				"FloatArrayTest>>#testsBeginsWithEmpty",				"FloatArrayTest>>#testCopySameClass",				"FloatArrayTest>>#test0FixtureCopyPartOfSequenceableTest",				"FloatArrayTest>>#testCopyEmptyWith",				"FloatArrayTest>>#testEqualSignOfIdenticalCollectionObjects",				"FloatArrayTest>>#testIncludesAnyNoneThere",				"FloatArrayTest>>#testCopyEmptyWithoutAll",				"FloatArrayTest>>#test0FixtureIncludeTest",				"FloatArrayTest>>#testReverseDoEmpty",				"FloatArrayTest>>#testWithCollectError",				"FloatArrayTest>>#testsEndsWithEmpty",				"FloatArrayTest>>#testAsCommaStringEmpty",				"FloatArrayTest>>#testUnionOfEmpties",				"FloatArrayTest>>#testUnion",				"FloatArrayTest>>#testShallowCopyEmpty",				"FloatArrayTest>>#testWithDoError",				"FloatArrayTest>>#test0CopyTest",				"FloatArrayTest>>#testCopyAfterEmpty",				"FloatArrayTest>>#testDifference",				"FloatArrayTest>>#test0FixtureCloneTest",				"FloatArrayTest>>#test0FixturePutOneOrMoreElementsTest",				"FloatArrayTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"FloatArrayTest>>#testCopyEmptyWithout",				"FloatArrayTest>>#testGroupsOfAtATimeCollect",				"FloatArrayTest>>#testFindFirstNotIn",				"FloatArrayTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"FloatArrayTest>>#testAsStringOnDelimiterEmpty",				"FloatArrayTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"FloatArrayTest>>#testAtPutOutOfBounds",				"FloatArrayTest>>#test0FixtureBeginsEndsWithTest",				"FloatArrayTest>>#testCopyEmpty",				"FloatArrayTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"FloatArrayTest>>#test0FixtureSequencedConcatenationTest",				"FloatArrayTest>>#test0TStructuralEqualityTest",				"FloatArrayTest>>#test0FixtureCopySameContentsTest",				"FloatArrayTest>>#testIncludesAnyAllThere",				"FloatArrayTest>>#testCopyUpToLastEmpty",				"FloatArrayTest>>#testIntersectionEmpty",				"FloatArrayTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"FloatArrayTest>>#testEqualSign",				"FloatArrayTest>>#testFindLastNotIn",				"FloatArrayTest>>#test0FixturePutTest",				"FloatArrayTest>>#testCopyUpToEmpty",				"FloatArrayTest>>#test0FixtureIterateSequencedReadableTest",				"FloatArrayTest>>#testIncludesElementIsNotThere",				"FloatArrayTest>>#testIncludesAllNoneThere",				"FloatArrayTest>>#testConcatenationWithEmpty",				"FloatArrayTest>>#testCopyAfterLastEmpty",				"GoferOperationTest>>#testCleanup",				"HDChangeReport>>#changesFor:",				"HeapTest>>#testRemoveElementFromEmpty",				"HeapTest>>#testCopyEmptyWithout",				"HeapTest>>#testCopySameClass",				"HeapTest>>#testCopyEmptyWith",				"HeapTest>>#testAddEmptyGrows",				"HeapTest>>#testIncludesAnyNoneThere",				"HeapTest>>#testCopyEmptyWithoutAll",				"HeapTest>>#test0FixtureIncludeTest",				"HeapTest>>#test0FixtureRequirementsOfTGrowableTest",				"HeapTest>>#test0FixtureTRemoveTest",				"HeapTest>>#testIncludesAnyAllThere",				"HeapTest>>#test0FixtureOccurrencesTest",				"HeapTest>>#testIntersectionEmpty",				"HeapTest>>#testOccurrencesOfEmpty",				"HeapTest>>#testUnionOfEmpties",				"HeapTest>>#testUnion",				"HeapTest>>#testIncludesElementIsNotThere",				"HeapTest>>#testIncludesAllNoneThere",				"HeapTest>>#test0CopyTest",				"HeapTest>>#testDifference",				"IRBytecodeGenerator>>#compiledMethod",				"IRMethod>>#compiledBlock:",				"IRMethod>>#generate",				"IRMethod>>#compiledMethod",				"IRTranslator class>>#new",				"IceCommit>>#mcPackageSnapshotsOfPackages:",				"IceCommitish>>#snapshotForPackage:",				"IceGitCommit>>#snapshotFor:",				"IceGitWorkingCopyUpdateVisitor>>#visitPackage:",				"IceNoCommit>>#snapshotFor:",				"IceUnbornBranch>>#snapshotFor:",				"Integer>>#catalanNumbers",				"IntervalTest>>#testKeysAndValuesDoEmpty",				"IntervalTest>>#testHasEqualElements",				"IntervalTest>>#testAsStringOnDelimiterLastEmpty",				"IntervalTest>>#testsBeginsWithEmpty",				"IntervalTest>>#testCopySameClass",				"IntervalTest>>#test0FixtureCopyPartOfSequenceableTest",				"IntervalTest>>#testCopyEmptyWith",				"IntervalTest>>#testEqualSignOfIdenticalCollectionObjects",				"IntervalTest>>#testIncludesAnyNoneThere",				"IntervalTest>>#testCopyEmptyWithoutAll",				"IntervalTest>>#test0FixtureIncludeTest",				"IntervalTest>>#testReverseDoEmpty",				"IntervalTest>>#testWithCollectError",				"IntervalTest>>#testsEndsWithEmpty",				"IntervalTest>>#testAsCommaStringEmpty",				"IntervalTest>>#testShallowCopyEmpty",				"IntervalTest>>#testWithDoError",				"IntervalTest>>#test0CopyTest",				"IntervalTest>>#testCopyAfterEmpty",				"IntervalTest>>#test0FixtureCloneTest",				"IntervalTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"IntervalTest>>#testCopyEmptyWithout",				"IntervalTest>>#testGroupsOfAtATimeCollect",				"IntervalTest>>#testFindFirstNotIn",				"IntervalTest>>#testAsStringOnDelimiterEmpty",				"IntervalTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"IntervalTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"IntervalTest>>#test0FixtureBeginsEndsWithTest",				"IntervalTest>>#testCopyEmpty",				"IntervalTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"IntervalTest>>#test0FixtureSequencedConcatenationTest",				"IntervalTest>>#test0FixtureCopySameContentsTest",				"IntervalTest>>#test0TStructuralEqualityTest",				"IntervalTest>>#testIncludesAnyAllThere",				"IntervalTest>>#test0FixtureOccurrencesTest",				"IntervalTest>>#testCopyUpToLastEmpty",				"IntervalTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"IntervalTest>>#testFindLastNotIn",				"IntervalTest>>#testEqualSign",				"IntervalTest>>#testOccurrencesOfEmpty",				"IntervalTest>>#testCopyUpToEmpty",				"IntervalTest>>#test0FixtureIterateSequencedReadableTest",				"IntervalTest>>#testIncludesElementIsNotThere",				"IntervalTest>>#testIncludesAllNoneThere",				"IntervalTest>>#testConcatenationWithEmpty",				"IntervalTest>>#testCopyAfterLastEmpty",				"LinkedListTest>>#testKeysAndValuesDoEmpty",				"LinkedListTest>>#testAsStringOnDelimiterLastEmpty",				"LinkedListTest>>#testsBeginsWithEmpty",				"LinkedListTest>>#testRemoveElementFromEmpty",				"LinkedListTest>>#testCopySameClass",				"LinkedListTest>>#test0FixtureEmptyTest",				"LinkedListTest>>#testIsEmptyOrNil",				"LinkedListTest>>#test0FixtureCopyPartOfSequenceableTest",				"LinkedListTest>>#testBasicCollectEmpty",				"LinkedListTest>>#testCollectThenDoOnEmpty",				"LinkedListTest>>#testSelectThenDoOnEmpty",				"LinkedListTest>>#testCopyEmptyWith",				"LinkedListTest>>#testEqualSignOfIdenticalCollectionObjects",				"LinkedListTest>>#testIncludesAnyNoneThere",				"LinkedListTest>>#testSelectThenCollectOnEmpty",				"LinkedListTest>>#testCopyEmptyWithoutAll",				"LinkedListTest>>#test0FixtureIncludeTest",				"LinkedListTest>>#testIfEmptyifNotEmpty",				"LinkedListTest>>#test0FixtureTRemoveTest",				"LinkedListTest>>#testIfNotEmpty",				"LinkedListTest>>#testCollectOnEmpty",				"LinkedListTest>>#testReverseDoEmpty",				"LinkedListTest>>#testWithCollectError",				"LinkedListTest>>#testsEndsWithEmpty",				"LinkedListTest>>#testAsCommaStringEmpty",				"LinkedListTest>>#testUnionOfEmpties",				"LinkedListTest>>#testUnion",				"LinkedListTest>>#testShallowCopyEmpty",				"LinkedListTest>>#testWithDoError",				"LinkedListTest>>#testRejectThenDoOnEmpty",				"LinkedListTest>>#test0CopyTest",				"LinkedListTest>>#testCopyAfterEmpty",				"LinkedListTest>>#testDifference",				"LinkedListTest>>#testIfEmpty",				"LinkedListTest>>#testAllSatisfyEmpty",				"LinkedListTest>>#testNotEmpty",				"LinkedListTest>>#testCopyEmptyWithout",				"LinkedListTest>>#testGroupsOfAtATimeCollect",				"LinkedListTest>>#testFindFirstNotIn",				"LinkedListTest>>#testCollectThenSelectOnEmpty",				"LinkedListTest>>#testRejectEmpty",				"LinkedListTest>>#testAsStringOnDelimiterEmpty",				"LinkedListTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"LinkedListTest>>#test0FixtureBeginsEndsWithTest",				"LinkedListTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"LinkedListTest>>#testSelectOnEmpty",				"LinkedListTest>>#test0FixtureCopySameContentsTest",				"LinkedListTest>>#test0TStructuralEqualityTest",				"LinkedListTest>>#testIsEmpty",				"LinkedListTest>>#testIncludesAnyAllThere",				"LinkedListTest>>#test0FixtureOccurrencesTest",				"LinkedListTest>>#testCopyUpToLastEmpty",				"LinkedListTest>>#testNoneSatisfyEmpty",				"LinkedListTest>>#testIntersectionEmpty",				"LinkedListTest>>#testFindLastNotIn",				"LinkedListTest>>#testEqualSign",				"LinkedListTest>>#testOccurrencesOfEmpty",				"LinkedListTest>>#testRejectThenCollectEmpty",				"LinkedListTest>>#testCopyUpToEmpty",				"LinkedListTest>>#test0FixtureIterateSequencedReadableTest",				"LinkedListTest>>#testIncludesElementIsNotThere",				"LinkedListTest>>#testIncludesAllNoneThere",				"LinkedListTest>>#testIfNotEmptyifEmpty",				"LinkedListTest>>#testCopyAfterLastEmpty",				"MCPackageLoader>>#unloadPackage:",				"MCPackageLoader>>#installSnapshot:",				"MCSmalltalkhubRepository class>>#owner:project:",				"MCWorkingCopy>>#findSnapshotWithVersionInfo:",				"MCWorkingCopy>>#merge:",				"MailAddressTokenizer class>>#initialize",				"MailMessage>>#makeMultipart",				"MailMessage>>#addAttachmentFrom:withName:",				"MailMessage>>#addMixedPart:contentType:",				"MailMessage>>#addAlternativePart:contentType:",				"MailMessageTest>>#testMultiPartAlternative",				"MailMessageTest>>#testAttachment",				"MailMessageTest>>#testMultiPartMixed",				"MethodDictionaryTest>>#emptyDict",				"MethodDictionaryTest>>#test0FixtureIncludeTest",				"MethodDictionaryTest>>#testIncludesAnyAllThere",				"MethodDictionaryTest>>#testIncludesAnyNoneThere",				"MethodDictionaryTest>>#testIncludesElementIsNotThere",				"MethodDictionaryTest>>#testIncludesAllNoneThere",				"MethodsTemperaturesPresenter>>#initializePresenters",				"MicAnnotationBlock class>>#tag",				"MicFormatBlock>>#closeMe",				"MicInlineBlockWithUrl class>>#from:to:withKind:withSubstring:withURL:",				"MicInlineElement class>>#from:to:withSubstring:",				"MicInlineParser>>#insertBasicText:withFinalArray:from:to:",				"MicInlineParser>>#parse:",				"MicInlineParser>>#newBasicInlineBlockFrom:to:",				"NECMenuMorph>>#drawLine:on:rectangle:",				"OrderedCollectionTest>>#testKeysAndValuesDoEmpty",				"OrderedCollectionTest>>#testHasEqualElements",				"OrderedCollectionTest>>#testAsStringOnDelimiterLastEmpty",				"OrderedCollectionTest>>#testsBeginsWithEmpty",				"OrderedCollectionTest>>#testRemoveElementFromEmpty",				"OrderedCollectionTest>>#testCopySameClass",				"OrderedCollectionTest>>#test0FixtureCopyPartOfSequenceableTest",				"OrderedCollectionTest>>#testCopyEmptyWith",				"OrderedCollectionTest>>#testEqualSignOfIdenticalCollectionObjects",				"OrderedCollectionTest>>#testFlatCollectAsWithEmptyCollection",				"OrderedCollectionTest>>#testIncludesAnyNoneThere",				"OrderedCollectionTest>>#testCopyEmptyWithoutAll",				"OrderedCollectionTest>>#test0FixtureIncludeTest",				"OrderedCollectionTest>>#test0FixtureTRemoveTest",				"OrderedCollectionTest>>#testReverseDoEmpty",				"OrderedCollectionTest>>#testWithCollectError",				"OrderedCollectionTest>>#testsEndsWithEmpty",				"OrderedCollectionTest>>#testAsCommaStringEmpty",				"OrderedCollectionTest>>#testUnionOfEmpties",				"OrderedCollectionTest>>#testUnion",				"OrderedCollectionTest>>#testShallowCopyEmpty",				"OrderedCollectionTest>>#testWithDoError",				"OrderedCollectionTest>>#test0CopyTest",				"OrderedCollectionTest>>#testCopyAfterEmpty",				"OrderedCollectionTest>>#testDifference",				"OrderedCollectionTest>>#test0FixtureCloneTest",				"OrderedCollectionTest>>#test0FixturePutOneOrMoreElementsTest",				"OrderedCollectionTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"OrderedCollectionTest>>#testCopyEmptyWithout",				"OrderedCollectionTest>>#testGroupsOfAtATimeCollect",				"OrderedCollectionTest>>#testFindFirstNotIn",				"OrderedCollectionTest>>#testAsStringOnDelimiterEmpty",				"OrderedCollectionTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"OrderedCollectionTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"OrderedCollectionTest>>#testAtPutOutOfBounds",				"OrderedCollectionTest>>#test0FixtureBeginsEndsWithTest",				"OrderedCollectionTest>>#testCopyEmpty",				"OrderedCollectionTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"OrderedCollectionTest>>#test0FixtureSequencedConcatenationTest",				"OrderedCollectionTest>>#test0FixtureCopySameContentsTest",				"OrderedCollectionTest>>#test0TStructuralEqualityTest",				"OrderedCollectionTest>>#testIncludesAnyAllThere",				"OrderedCollectionTest>>#test0FixtureOccurrencesTest",				"OrderedCollectionTest>>#testCopyUpToLastEmpty",				"OrderedCollectionTest>>#testIntersectionEmpty",				"OrderedCollectionTest>>#testFindLastNotIn",				"OrderedCollectionTest>>#testEqualSign",				"OrderedCollectionTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"OrderedCollectionTest>>#testOccurrencesOfEmpty",				"OrderedCollectionTest>>#test0FixturePutTest",				"OrderedCollectionTest>>#testCopyUpToEmpty",				"OrderedCollectionTest>>#test0FixtureIterateSequencedReadableTest",				"OrderedCollectionTest>>#testIncludesElementIsNotThere",				"OrderedCollectionTest>>#testIncludesAllNoneThere",				"OrderedCollectionTest>>#test0FixtureEmptySequenceableTest",				"OrderedCollectionTest>>#testConcatenationWithEmpty",				"OrderedCollectionTest>>#testCopyAfterLastEmpty",				"ProtocolOrganizer>>#protocolNamed:",				"RBCondition class>>#empty",				"RBMethodNode>>#generate",				"RBParseTreeRule>>#performOn:",				"RBRefactoring>>#emptyCondition",				"RBRefactoryDefinitionChange class>>#definition:for:",				"RBRemoveClassTransformation>>#preconditions",				"RBTRefactoringBuilder>>#emptyCondition",				"RBTransformation>>#emptyCondition",				"RSHorizontalVanDerPloegTreeLayout>>#initialize:associations:",				"RSLabel>>#computeTextExtents",				"RSTWalkBasedRegularTreeLayout>>#initialize:associations:",				"RSTextExtents class>>#empty",				"RSVanDerPloegTreeLayout>>#initialize:associations:",				"SetTest>>#test0FixtureCloneTest",				"SetTest>>#testMax",				"SetTest>>#testAsStringOnDelimiterLastEmpty",				"SetTest>>#testRemoveElementFromEmpty",				"SetTest>>#testCopyEmptyWithout",				"SetTest>>#testCopySameClass",				"SetTest>>#testCopyEmptyWith",				"SetTest>>#testMaxIfNil",				"SetTest>>#testEqualSignOfIdenticalCollectionObjects",				"SetTest>>#testAddEmptyGrows",				"SetTest>>#testIncludesAnyNoneThere",				"SetTest>>#testCopyEmptyWithoutAll",				"SetTest>>#testAsStringOnDelimiterEmpty",				"SetTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"SetTest>>#testCopyEmpty",				"SetTest>>#test0FixtureIncludeTest",				"SetTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"SetTest>>#test0FixtureRequirementsOfTGrowableTest",				"SetTest>>#test0FixtureTRemoveTest",				"SetTest>>#test0TStructuralEqualityTest",				"SetTest>>#test0FixtureConcatenationTest",				"SetTest>>#testIncludesAnyAllThere",				"SetTest>>#test0FixtureOccurrencesTest",				"SetTest>>#testIntersectionEmpty",				"SetTest>>#testAsCommaStringEmpty",				"SetTest>>#testEqualSign",				"SetTest>>#testOccurrencesOfEmpty",				"SetTest>>#testUnionOfEmpties",				"SetTest>>#testIncludesElementIsNotThere",				"SetTest>>#testIncludesAllNoneThere",				"SetTest>>#testConcatenationWithEmpty",				"SetTest>>#test0CopyTest",				"SetTest>>#testDifference",				"SortedCollectionTest>>#testKeysAndValuesDoEmpty",				"SortedCollectionTest>>#testHasEqualElements",				"SortedCollectionTest>>#testAsStringOnDelimiterLastEmpty",				"SortedCollectionTest>>#testsBeginsWithEmpty",				"SortedCollectionTest>>#testRemoveElementFromEmpty",				"SortedCollectionTest>>#testCopySameClass",				"SortedCollectionTest>>#testRemoveAtNotPresent",				"SortedCollectionTest>>#testCopyFromToWithForSorted",				"SortedCollectionTest>>#testRemoveFirstNotPresent",				"SortedCollectionTest>>#test0FixtureCopyPartOfSequenceableTest",				"SortedCollectionTest>>#testCopyEmptyWith",				"SortedCollectionTest>>#testEqualSignOfIdenticalCollectionObjects",				"SortedCollectionTest>>#testIncludesAnyNoneThere",				"SortedCollectionTest>>#testCopyEmptyWithoutAll",				"SortedCollectionTest>>#test0FixtureIncludeTest",				"SortedCollectionTest>>#test0FixtureTRemoveTest",				"SortedCollectionTest>>#testRemoveFirstNElementsNotPresent",				"SortedCollectionTest>>#testReverseDoEmpty",				"SortedCollectionTest>>#testWithCollectError",				"SortedCollectionTest>>#testsEndsWithEmpty",				"SortedCollectionTest>>#testAsCommaStringEmpty",				"SortedCollectionTest>>#testUnionOfEmpties",				"SortedCollectionTest>>#testRemoveLastNotPresent",				"SortedCollectionTest>>#testUnion",				"SortedCollectionTest>>#testShallowCopyEmpty",				"SortedCollectionTest>>#testWithDoError",				"SortedCollectionTest>>#test0CopyTest",				"SortedCollectionTest>>#testRemoveLastNElementsNElements",				"SortedCollectionTest>>#testCopyAfterEmpty",				"SortedCollectionTest>>#testDifference",				"SortedCollectionTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"SortedCollectionTest>>#testCopyEmptyWithout",				"SortedCollectionTest>>#testGroupsOfAtATimeCollect",				"SortedCollectionTest>>#testFindFirstNotIn",				"SortedCollectionTest>>#testAsStringOnDelimiterEmpty",				"SortedCollectionTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"SortedCollectionTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"SortedCollectionTest>>#test0FixtureBeginsEndsWithTest",				"SortedCollectionTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"SortedCollectionTest>>#testCopyReplaceAllWithForSorted",				"SortedCollectionTest>>#test0FixtureCopySameContentsTest",				"SortedCollectionTest>>#test0TStructuralEqualityTest",				"SortedCollectionTest>>#testIncludesAnyAllThere",				"SortedCollectionTest>>#test0FixtureOccurrencesTest",				"SortedCollectionTest>>#testCopyUpToLastEmpty",				"SortedCollectionTest>>#testIntersectionEmpty",				"SortedCollectionTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"SortedCollectionTest>>#testFindLastNotIn",				"SortedCollectionTest>>#testEqualSign",				"SortedCollectionTest>>#testOccurrencesOfEmpty",				"SortedCollectionTest>>#testCopyUpToEmpty",				"SortedCollectionTest>>#test0FixtureIterateSequencedReadableTest",				"SortedCollectionTest>>#test0FixtureCopyWithReplacementForSorted",				"SortedCollectionTest>>#testIncludesElementIsNotThere",				"SortedCollectionTest>>#testIncludesAllNoneThere",				"SortedCollectionTest>>#testCopyAfterLastEmpty",				"StackTest>>#testIsEmpty",				"StackTest>>#test0FixtureCloneTest",				"StackTest>>#test0FixtureEmptyTest",				"StackTest>>#testIsEmptyOrNil",				"StackTest>>#testIfEmptyifNotEmpty",				"StackTest>>#testIfNotEmpty",				"StackTest>>#testCopyEmpty",				"StringTest>>#testKeysAndValuesDoEmpty",				"StringTest>>#testHasEqualElements",				"StringTest>>#testsBeginsWithEmpty",				"StringTest>>#testCopyEmptyWith",				"StringTest>>#testEqualSignOfIdenticalCollectionObjects",				"StringTest>>#testIncludesAnyNoneThere",				"StringTest>>#testCopyEmptyWithoutAll",				"StringTest>>#testsEndsWithEmpty",				"StringTest>>#testUnionOfEmpties",				"StringTest>>#testUnion",				"StringTest>>#test0CopyTest",				"StringTest>>#test0FixtureCloneTest",				"StringTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"StringTest>>#testAsStringOnDelimiterEmpty",				"StringTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"StringTest>>#test0FixtureBeginsEndsWithTest",				"StringTest>>#testCopyEmpty",				"StringTest>>#test0FixtureCopySameContentsTest",				"StringTest>>#testEqualSign",				"StringTest>>#testOccurrencesOfEmpty",				"StringTest>>#testIncludesAllNoneThere",				"StringTest>>#testCopyAfterLastEmpty",				"StringTest>>#testAsStringOnDelimiterLastEmpty",				"StringTest>>#testCopySameClass",				"StringTest>>#test0FixtureCopyPartOfSequenceableTest",				"StringTest>>#test0FixtureIncludeTest",				"StringTest>>#testReverseDoEmpty",				"StringTest>>#testWithCollectError",				"StringTest>>#testAsCommaStringEmpty",				"StringTest>>#testShallowCopyEmpty",				"StringTest>>#testWithDoError",				"StringTest>>#testCopyAfterEmpty",				"StringTest>>#testDifference",				"StringTest>>#test0FixturePutOneOrMoreElementsTest",				"StringTest>>#testCopyEmptyWithout",				"StringTest>>#testGroupsOfAtATimeCollect",				"StringTest>>#testFindFirstNotIn",				"StringTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"StringTest>>#testAtPutOutOfBounds",				"StringTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"StringTest>>#test0FixtureSequencedConcatenationTest",				"StringTest>>#test0TStructuralEqualityTest",				"StringTest>>#testIncludesAnyAllThere",				"StringTest>>#test0FixtureOccurrencesTest",				"StringTest>>#testCopyUpToLastEmpty",				"StringTest>>#testIntersectionEmpty",				"StringTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"StringTest>>#testFindLastNotIn",				"StringTest>>#test0FixturePutTest",				"StringTest>>#testCopyUpToEmpty",				"StringTest>>#test0FixtureIterateSequencedReadableTest",				"StringTest>>#testIncludesElementIsNotThere",				"StringTest>>#testConcatenationWithEmpty",				"SymbolTest>>#testKeysAndValuesDoEmpty",				"SymbolTest>>#testHasEqualElements",				"SymbolTest>>#testAsStringOnDelimiterLastEmpty",				"SymbolTest>>#testsBeginsWithEmpty",				"SymbolTest>>#testCopySameClass",				"SymbolTest>>#test0FixtureCopyPartOfSequenceableTest",				"SymbolTest>>#testCopyEmptyWith",				"SymbolTest>>#testEqualSignOfIdenticalCollectionObjects",				"SymbolTest>>#testIncludesAnyNoneThere",				"SymbolTest>>#testCopyEmptyWithoutAll",				"SymbolTest>>#test0FixtureIncludeTest",				"SymbolTest>>#testReverseDoEmpty",				"SymbolTest>>#testWithCollectError",				"SymbolTest>>#testsEndsWithEmpty",				"SymbolTest>>#testAsCommaStringEmpty",				"SymbolTest>>#testUnionOfEmpties",				"SymbolTest>>#testUnion",				"SymbolTest>>#testShallowCopyEmpty",				"SymbolTest>>#testWithDoError",				"SymbolTest>>#test0CopyTest",				"SymbolTest>>#testCopyAfterEmpty",				"SymbolTest>>#testDifference",				"SymbolTest>>#test0FixtureCloneTest",				"SymbolTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"SymbolTest>>#testCopyEmptyWithout",				"SymbolTest>>#testGroupsOfAtATimeCollect",				"SymbolTest>>#testFindFirstNotIn",				"SymbolTest>>#testAsStringOnDelimiterEmpty",				"SymbolTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"SymbolTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"SymbolTest>>#test0FixtureBeginsEndsWithTest",				"SymbolTest>>#testCopyEmpty",				"SymbolTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"SymbolTest>>#test0FixtureSequencedConcatenationTest",				"SymbolTest>>#test0FixtureCopySameContentsTest",				"SymbolTest>>#test0TStructuralEqualityTest",				"SymbolTest>>#testIncludesAnyAllThere",				"SymbolTest>>#test0FixtureOccurrencesTest",				"SymbolTest>>#testCopyUpToLastEmpty",				"SymbolTest>>#testIntersectionEmpty",				"SymbolTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"SymbolTest>>#testFindLastNotIn",				"SymbolTest>>#testEqualSign",				"SymbolTest>>#testOccurrencesOfEmpty",				"SymbolTest>>#testCopyUpToEmpty",				"SymbolTest>>#test0FixtureIterateSequencedReadableTest",				"SymbolTest>>#testIncludesElementIsNotThere",				"SymbolTest>>#testIncludesAllNoneThere",				"SymbolTest>>#testConcatenationWithEmpty",				"SymbolTest>>#testCopyAfterLastEmpty",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsCommaStringEmpty",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterEmpty",				"TAsStringCommaAndDelimiterSequenceableTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterLastEmpty",				"TAsStringCommaAndDelimiterTest>>#testAsCommaStringEmpty",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterEmpty",				"TAsStringCommaAndDelimiterTest>>#test0FixtureAsStringCommaAndDelimiterTest",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterLastEmpty",				"TBeginsEndsWith>>#testsBeginsWithEmpty",				"TBeginsEndsWith>>#testsEndsWithEmpty",				"TBeginsEndsWith>>#test0FixtureBeginsEndsWithTest",				"TCloneTest>>#test0FixtureCloneTest",				"TCloneTest>>#testCopyEmpty",				"TConcatenationEqualElementsRemovedTest>>#test0FixtureConcatenationTest",				"TConcatenationEqualElementsRemovedTest>>#testConcatenationWithEmpty",				"TConcatenationTest>>#test0FixtureConcatenationTest",				"TConcatenationTest>>#testConcatenationWithEmpty",				"TCopyPartOfSequenceable>>#testCopyUpToLastEmpty",				"TCopyPartOfSequenceable>>#testCopyAfterEmpty",				"TCopyPartOfSequenceable>>#testCopyUpToEmpty",				"TCopyPartOfSequenceable>>#testCopyAfterLastEmpty",				"TCopyPartOfSequenceable>>#test0FixtureCopyPartOfSequenceableTest",				"TCopySequenceableSameContents>>#testShallowCopyEmpty",				"TCopySequenceableSameContents>>#test0FixtureCopySameContentsTest",				"TCopySequenceableWithReplacementForSorted>>#test0FixtureCopyWithReplacementForSorted",				"TCopySequenceableWithReplacementForSorted>>#testCopyReplaceAllWithForSorted",				"TCopySequenceableWithReplacementForSorted>>#testCopyFromToWithForSorted",				"TCopyTest>>#testCopyEmptyWithoutAll",				"TCopyTest>>#testCopyEmptyWith",				"TCopyTest>>#testCopyEmptyWithout",				"TCopyTest>>#testCopySameClass",				"TCopyTest>>#test0CopyTest",				"TDictionaryCopyingTest>>#test0FixtureCloneTest",				"TDictionaryCopyingTest>>#testCopyEmpty",				"TEmptySequenceableTest>>#test0FixtureEmptySequenceableTest",				"TEmptyTest>>#testIsEmpty",				"TEmptyTest>>#testIfEmpty",				"TEmptyTest>>#testIfEmptyifNotEmpty",				"TEmptyTest>>#testNotEmpty",				"TEmptyTest>>#testIfNotEmpty",				"TEmptyTest>>#testIsEmptyOrNil",				"TEmptyTest>>#test0FixtureEmptyTest",				"TEmptyTest>>#testIfNotEmptyifEmpty",				"TEnumeratingTest>>#testFlatCollectAsWithEmptyCollection",				"TGrowableTest>>#testAddEmptyGrows",				"TGrowableTest>>#test0FixtureRequirementsOfTGrowableTest",				"TIncludesTest>>#testIncludesAllNoneThere",				"TIncludesTest>>#test0FixtureIncludeTest",				"TIncludesTest>>#testIncludesAnyAllThere",				"TIncludesTest>>#testIncludesAnyNoneThere",				"TIncludesTest>>#testIncludesElementIsNotThere",				"TIncludesWithIdentityCheckTest>>#testIncludesAllNoneThere",				"TIncludesWithIdentityCheckTest>>#test0FixtureIncludeTest",				"TIncludesWithIdentityCheckTest>>#testIncludesAnyAllThere",				"TIncludesWithIdentityCheckTest>>#testIncludesAnyNoneThere",				"TIncludesWithIdentityCheckTest>>#testIncludesElementIsNotThere",				"TIterateSequencedReadableTest>>#testFindLastNotIn",				"TIterateSequencedReadableTest>>#testFindFirstNotIn",				"TIterateSequencedReadableTest>>#testKeysAndValuesDoEmpty",				"TIterateSequencedReadableTest>>#test0FixtureIterateSequencedReadableTest",				"TIterateSequencedReadableTest>>#testWithDoError",				"TIterateSequencedReadableTest>>#testReverseDoEmpty",				"TIterateSequencedReadableTest>>#testGroupsOfAtATimeCollect",				"TIterateSequencedReadableTest>>#testWithCollectError",				"TIterateTest>>#testBasicCollectEmpty",				"TIterateTest>>#testCollectThenDoOnEmpty",				"TIterateTest>>#testSelectThenDoOnEmpty",				"TIterateTest>>#testRejectThenCollectEmpty",				"TIterateTest>>#testCollectOnEmpty",				"TIterateTest>>#testSelectOnEmpty",				"TIterateTest>>#testAllSatisfyEmpty",				"TIterateTest>>#testCollectThenSelectOnEmpty",				"TIterateTest>>#testRejectEmpty",				"TIterateTest>>#testSelectThenCollectOnEmpty",				"TIterateTest>>#testRejectThenDoOnEmpty",				"TIterateTest>>#testNoneSatisfyEmpty",				"TOccurrencesForMultiplinessTest>>#testOccurrencesOfEmpty",				"TOccurrencesForMultiplinessTest>>#test0FixtureOccurrencesTest",				"TOccurrencesTest>>#testOccurrencesOfEmpty",				"TOccurrencesTest>>#test0FixtureOccurrencesTest",				"TPutBasicTest>>#test0FixturePutTest",				"TPutBasicTest>>#testAtPutOutOfBounds",				"TPutTest>>#test0FixturePutOneOrMoreElementsTest",				"TRemoveByIndexTest>>#testRemoveLastNotPresent",				"TRemoveByIndexTest>>#testRemoveAtNotPresent",				"TRemoveByIndexTest>>#testRemoveLastNElementsNElements",				"TRemoveByIndexTest>>#testRemoveFirstNElementsNotPresent",				"TRemoveByIndexTest>>#testRemoveFirstNotPresent",				"TRemoveForMultiplenessTest>>#testRemoveElementFromEmpty",				"TRemoveForMultiplenessTest>>#test0FixtureTRemoveTest",				"TRemoveTest>>#testRemoveElementFromEmpty",				"TRemoveTest>>#test0FixtureTRemoveTest",				"TSequencedConcatenationTest>>#testConcatenationWithEmpty",				"TSequencedConcatenationTest>>#test0FixtureSequencedConcatenationTest",				"TSequencedStructuralEqualityTest>>#testEqualSign",				"TSequencedStructuralEqualityTest>>#testHasEqualElementsIsTrueForNonIdenticalButEqualCollections",				"TSequencedStructuralEqualityTest>>#testHasEqualElements",				"TSequencedStructuralEqualityTest>>#test0TStructuralEqualityTest",				"TSequencedStructuralEqualityTest>>#testEqualSignIsTrueForEmptyButNonIdenticalCollections",				"TSequencedStructuralEqualityTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"TSequencedStructuralEqualityTest>>#testEqualSignOfIdenticalCollectionObjects",				"TSequencedStructuralEqualityTest>>#testHasEqualElementsOfIdenticalCollectionObjects",				"TSetArithmetic>>#testUnionOfEmpties",				"TSetArithmetic>>#testUnion",				"TSetArithmetic>>#testIntersectionEmpty",				"TSetArithmetic>>#testDifference",				"TSizeTest>>#test0TSizeTest",				"TSizeTest>>#testSize",				"TStructuralEqualityTest>>#testEqualSign",				"TStructuralEqualityTest>>#testEqualSignIsTrueForNonIdenticalButEqualCollections",				"TStructuralEqualityTest>>#testEqualSignOfIdenticalCollectionObjects",				"TStructuralEqualityTest>>#test0TStructuralEqualityTest",				"TestResource>>#description",				"UndefinedObject>>#asLinkedList",				"ValueLink>>#asLinkedList",				"ZnClient>>#initialize",				"ZnMimePart>>#fieldValueString",				"ZnRequest class>>#empty",				"ZnServerTest>>#testCustomDefaultDelegate"			],			"implementors" : {				"DictionaryTest" : {					"sourceCode" : [						"empty",						"",						"\t^ emptyDict"					],					"body" : [						"^ emptyDict"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4489115,					"argumentNames" : [ ]				},				"TIterateTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4382276,					"argumentNames" : [ ]				},				"TEmptyTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4376943,					"argumentNames" : [ ]				},				"IntervalTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4464283,					"argumentNames" : [ ]				},				"TStructuralEqualityTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "tests - equality",					"comment" : [ ],					"hash" : 4390767,					"argumentNames" : [ ]				},				"TIncludesWithIdentityCheckTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4380015,					"argumentNames" : [ ]				},				"MethodDictionaryTest" : {					"sourceCode" : [						"empty",						"",						"\t^ MethodDictionary new"					],					"body" : [						"^ MethodDictionary new"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4420911,					"argumentNames" : [ ]				},				"TDictionaryCopyingTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "helper",					"comment" : [ ],					"hash" : 4421999,					"argumentNames" : [ ]				},				"Array class" : {					"sourceCode" : [						"empty",						"",						"\t\"A canonicalized empty Array instance.\"",						"",						"\t^ #(  )"					],					"body" : [						"^ #(  )"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"A canonicalized empty Array instance."					],					"hash" : 1585602,					"argumentNames" : [ ]				},				"OrderedCollectionTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "setup",					"comment" : [ ],					"hash" : 4464795,					"argumentNames" : [ ]				},				"TBeginsEndsWith" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4367940,					"argumentNames" : [ ]				},				"TAsStringCommaAndDelimiterSequenceableTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4367215,					"argumentNames" : [ ]				},				"Collection class" : {					"sourceCode" : [						"empty",						"",						"\t^ self new"					],					"body" : [						"^ self new"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 1644634,					"argumentNames" : [ ]				},				"TConcatenationTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4368964,					"argumentNames" : [ ]				},				"LinkedListTest" : {					"sourceCode" : [						"empty",						"",						"\t^ list"					],					"body" : [						"^ list"					],					"isTestMethod" : false,					"category" : "tests - empty",					"comment" : [ ],					"hash" : 4461213,					"argumentNames" : [ ]				},				"ZnRequestLine class" : {					"sourceCode" : [						"empty",						"",						"\t^ self new",						"\t\t  version: ZnConstants defaultHTTPVersion;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  version: ZnConstants defaultHTTPVersion;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 2214261,					"argumentNames" : [ ]				},				"MailMessage class" : {					"sourceCode" : [						"empty",						"",						"\t\"return a message with no text and no header\"",						"",						"\t^ self new"					],					"body" : [						"^ self new"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"return a message with no text and no header"					],					"hash" : 3913818,					"argumentNames" : [ ]				},				"TRemoveByIndexTest" : {					"sourceCode" : [						"empty",						"",						"\t\" return an empty collection\"",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [						" return an empty collection"					],					"hash" : 4386372,					"argumentNames" : [ ]				},				"TRemoveTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4386884,					"argumentNames" : [ ]				},				"StackTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 4467353,					"argumentNames" : [ ]				},				"ArrayTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 4463271,					"argumentNames" : [ ]				},				"CompiledMethodTrailer class" : {					"sourceCode" : [						"empty",						"",						"\t\"answer the empty trailer\"",						"",						"\t^ self new"					],					"body" : [						"^ self new"					],					"isTestMethod" : false,					"category" : "kinds",					"comment" : [						"answer the empty trailer"					],					"hash" : 1708890,					"argumentNames" : [ ]				},				"TConcatenationEqualElementsRemovedTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4369476,					"argumentNames" : [ ]				},				"TEmptySequenceableTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4376431,					"argumentNames" : [ ]				},				"TSequencedConcatenationTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4388420,					"argumentNames" : [ ]				},				"TIncludesTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4379503,					"argumentNames" : [ ]				},				"MCSnapshot class" : {					"sourceCode" : [						"empty",						"",						"\t^ self fromDefinitions: #(  )"					],					"body" : [						"^ self fromDefinitions: #(  )"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 1087410,					"argumentNames" : [ ]				},				"CTBinaryTreeAbstract class" : {					"sourceCode" : [						"empty",						"",						"\t^ self new yourself: [ :aTree | ",						"\t\t  aTree representation: aTree binaryTreeElementEmpty ]"					],					"body" : [						"^ self new yourself: [ :aTree | ",						"\t  aTree representation: aTree binaryTreeElementEmpty ]"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 3164170,					"argumentNames" : [ ]				},				"TOccurrencesTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4383300,					"argumentNames" : [ ]				},				"TCopyTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4375407,					"argumentNames" : [ ]				},				"TCloneTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "helper",					"comment" : [ ],					"hash" : 4368239,					"argumentNames" : [ ]				},				"SortedCollectionTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4465311,					"argumentNames" : [ ]				},				"CoFilter class" : {					"sourceCode" : [						"empty",						"",						"\t^ CoCaseSensitiveBeginsWithFilter filterString: ''"					],					"body" : [						"^ CoCaseSensitiveBeginsWithFilter filterString: ''"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 6108297,					"argumentNames" : [ ]				},				"TPutBasicTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4385135,					"argumentNames" : [ ]				},				"TSequencedStructuralEqualityTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "tests - equality",					"comment" : [ ],					"hash" : 4391279,					"argumentNames" : [ ]				},				"BagTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "setup",					"comment" : [ ],					"hash" : 4488091,					"argumentNames" : [ ]				},				"TRemoveForMultiplenessTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4387396,					"argumentNames" : [ ]				},				"ClyDataSource class" : {					"sourceCode" : [						"empty",						"",						"\t^ ClyCollapsedDataSource on: ClyUnknownQuery instance"					],					"body" : [						"^ ClyCollapsedDataSource on: ClyUnknownQuery instance"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 5881614,					"argumentNames" : [ ]				},				"MorphTreeMorphSingleSelection" : {					"sourceCode" : [						"empty",						"",						"\tself selectedNodePath: nil"					],					"body" : [						"self selectedNodePath: nil"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2642596,					"argumentNames" : [ ]				},				"ZnRequest class" : {					"sourceCode" : [						"empty",						"",						"\t^ self new",						"\t\t  requestLine: ZnRequestLine empty;",						"\t\t  headers: ZnHeaders defaultRequestHeaders;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  requestLine: ZnRequestLine empty;",						"\t  headers: ZnHeaders defaultRequestHeaders;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 2212871,					"argumentNames" : [ ]				},				"RSTextExtents class" : {					"sourceCode" : [						"empty",						"",						"\t^ empty ifNil: [ empty := self new empty ]"					],					"body" : [						"^ empty ifNil: [ empty := self new empty ]"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 6487248,					"argumentNames" : [ ]				},				"StringTest" : {					"sourceCode" : [						"empty",						"",						"\t^ emptyString"					],					"body" : [						"^ emptyString"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4473757,					"argumentNames" : [ ]				},				"TCopyPartOfSequenceable" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4372036,					"argumentNames" : [ ]				},				"HashedCollection class" : {					"sourceCode" : [						"empty",						"",						"\t^ self basicNew",						"\t\t  initialize: 1;",						"\t\t  yourself"					],					"body" : [						"^ self basicNew",						"\t  initialize: 1;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 1644837,					"argumentNames" : [ ]				},				"String class" : {					"sourceCode" : [						"empty",						"",						"\t\"A canonicalized empty String instance.\"",						"",						"\t^ ''"					],					"body" : [						"^ ''"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"A canonicalized empty String instance."					],					"hash" : 1600450,					"argumentNames" : [ ]				},				"RBCondition class" : {					"sourceCode" : [						"empty",						"",						"\t\"Returns an empty condition\"",						"",						"\t^ self new",						"\t\t  type: (Array with: #empty)",						"\t\t  block: [ true ]",						"\t\t  errorString: 'Empty'"					],					"body" : [						"^ self new",						"\t  type: (Array with: #empty)",						"\t  block: [ true ]",						"\t  errorString: 'Empty'"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"Returns an empty condition"					],					"hash" : 3923393,					"argumentNames" : [ ]				},				"MorphTreeMorphSelection" : {					"sourceCode" : [						"empty",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2641476,					"argumentNames" : [ ]				},				"TOccurrencesForMultiplinessTest" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4383812,					"argumentNames" : [ ]				},				"MorphTreeMorphMultipleSelection" : {					"sourceCode" : [						"empty",						"",						"\tself selectedNodePathList: OrderedCollection new"					],					"body" : [						"self selectedNodePathList: OrderedCollection new"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2642164,					"argumentNames" : [ ]				},				"SmallDictionary" : {					"sourceCode" : [						"empty",						"",						"\t1 to: size do: [ :index | ",						"\t\tkeys at: index put: nil.",						"\t\tvalues at: index put: nil ].",						"\tsize := 0"					],					"body" : [						"1 to: size do: [ :index | ",						"\tkeys at: index put: nil.",						"\tvalues at: index put: nil ].",						"size := 0"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2457562,					"argumentNames" : [ ]				},				"CTBinomialHeap class" : {					"sourceCode" : [						"empty",						"",						"\t^ self new",						"\t\t  representation: nil;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  representation: nil;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 3165964,					"argumentNames" : [ ]				},				"TSizeTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4389743,					"argumentNames" : [ ]				},				"TIterateSequencedReadableTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4381551,					"argumentNames" : [ ]				},				"CollectionRootTest" : {					"sourceCode" : [						"empty",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4393028,					"argumentNames" : [ ]				},				"ZnDefaultServerDelegate class" : {					"sourceCode" : [						"empty",						"",						"\t^ self basicNew"					],					"body" : [						"^ self basicNew"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 2203759,					"argumentNames" : [ ]				},				"Protocol class" : {					"sourceCode" : [						"empty",						"",						"\t^ self name: #''"					],					"body" : [						"^ self name: #''"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 1640370,					"argumentNames" : [ ]				},				"RSTextExtents" : {					"sourceCode" : [						"empty",						"",						"\tself",						"\t\twidth: 0;",						"\t\theight: 0;",						"\t\tx_advance: 0;",						"\t\ty_advance: 0;",						"\t\tx_bearing: 0;",						"\t\ty_bearing: 0"					],					"body" : [						"self",						"\twidth: 0;",						"\theight: 0;",						"\tx_advance: 0;",						"\ty_advance: 0;",						"\tx_bearing: 0;",						"\ty_bearing: 0"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [ ],					"hash" : 6489428,					"argumentNames" : [ ]				},				"TCopySequenceableWithReplacementForSorted" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4375108,					"argumentNames" : [ ]				},				"FloatArrayTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4509085,					"argumentNames" : [ ]				},				"ClyTypedScope class" : {					"sourceCode" : [						"empty",						"",						"\t^ self ofAll: #(  )"					],					"body" : [						"^ self ofAll: #(  )"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 5653938,					"argumentNames" : [ ]				},				"TAsStringCommaAndDelimiterTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4366703,					"argumentNames" : [ ]				},				"SetTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "tests - empty",					"comment" : [ ],					"hash" : 4491677,					"argumentNames" : [ ]				},				"SymbolTest" : {					"sourceCode" : [						"empty",						"",						"\t^ emptySymbol"					],					"body" : [						"^ emptySymbol"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4474267,					"argumentNames" : [ ]				},				"DTTreeNode class" : {					"sourceCode" : [						"empty",						"",						"\t^ self new",						"\t\t  subResults: #(  );",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  subResults: #(  );",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 3746288,					"argumentNames" : [ ]				},				"HeapTest" : {					"sourceCode" : [						"empty",						"",						"\t^ empty"					],					"body" : [						"^ empty"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4463777,					"argumentNames" : [ ]				},				"TCopySequenceableSameContents" : {					"sourceCode" : [						"empty",						"",						"\tself explicitRequirement"					],					"body" : [						"self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4373572,					"argumentNames" : [ ]				},				"TGrowableTest" : {					"sourceCode" : [						"empty",						"",						"\t^ self explicitRequirement"					],					"body" : [						"^ self explicitRequirement"					],					"isTestMethod" : false,					"category" : "requirements",					"comment" : [ ],					"hash" : 4377967,					"argumentNames" : [ ]				}			}		},		"linkBinomialTree:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinomialHeap>>#merge:with:",				"CTBinomialHeap>>#pushTree:onTrees:"			],			"implementors" : {				"CTBinomialTree" : {					"sourceCode" : [						"linkBinomialTree: aTree",						"",						"\t| x |",						"\tx := aTree content.",						"\t^ content < x",						"\t\t  ifTrue: [ self class node: content children: aTree ~~> children ]",						"\t\t  ifFalse: [ self class node: x children: self ~~> aTree children ]"					],					"body" : [						"| x |",						"x := aTree content.",						"^ content < x",						"\t  ifTrue: [ self class node: content children: aTree ~~> children ]",						"\t  ifFalse: [ self class node: x children: self ~~> aTree children ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 20469845,					"argumentNames" : [						"aTree"					]				}			}		},		"asBinomialHeap" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinomialHeapTest>>#tree:"			],			"implementors" : {				"Collection" : {					"sourceCode" : [						"asBinomialHeap",						"",						"\t^ self asBinaryTree: CTBinomialHeap"					],					"body" : [						"^ self asBinaryTree: CTBinomialHeap"					],					"isTestMethod" : false,					"category" : "*Containers-BinomialHeap",					"comment" : [ ],					"hash" : 1644962,					"argumentNames" : [ ]				}			}		},		"asRedBlackSet" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTRedBlackSetTest>>#tree:"			],			"implementors" : {				"Collection" : {					"sourceCode" : [						"asRedBlackSet",						"",						"\t^ self asBinaryTree: CTRedBlackSet"					],					"body" : [						"^ self asBinaryTree: CTRedBlackSet"					],					"isTestMethod" : false,					"category" : "*Containers-RedBlackSet",					"comment" : [ ],					"hash" : 1644962,					"argumentNames" : [ ]				}			}		},		"pushTree:onTrees:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinomialHeap>>#merge:with:",				"CTBinomialHeap>>#pushTree:onTrees:",				"CTBinomialHeap>>#push:"			],			"implementors" : {				"CTBinomialHeap" : {					"sourceCode" : [						"pushTree: anAssociation onTrees: trees",						"",						"\t^ trees ifNil: [ anAssociation ~~> trees ] ifNotNil: [ ",						"\t\t  | carAssociation rank |",						"\t\t  rank := anAssociation key.",						"\t\t  carAssociation := trees value.",						"\t\t  rank < carAssociation key",						"\t\t\t  ifTrue: [ anAssociation ~~> trees ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  self",						"\t\t\t\t\t  pushTree: rank + 1",						"\t\t\t\t\t\t  ->",						"\t\t\t\t\t\t  (anAssociation value linkBinomialTree: carAssociation value)",						"\t\t\t\t\t  onTrees: trees nextLink ] ]"					],					"body" : [						"^ trees ifNil: [ anAssociation ~~> trees ] ifNotNil: [ ",						"\t  | carAssociation rank |",						"\t  rank := anAssociation key.",						"\t  carAssociation := trees value.",						"\t  rank < carAssociation key",						"\t\t  ifTrue: [ anAssociation ~~> trees ]",						"\t\t  ifFalse: [ ",						"\t\t\t  self",						"\t\t\t\t  pushTree: rank + 1",						"\t\t\t\t\t  -> (anAssociation value linkBinomialTree: carAssociation value)",						"\t\t\t\t  onTrees: trees nextLink ] ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 37772733,					"argumentNames" : [						"anAssociation",						"trees"					]				}			}		},		"asSplayHeap" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTSplayHeapTest>>#tree:"			],			"implementors" : {				"Collection" : {					"sourceCode" : [						"asSplayHeap",						"",						"\t^ self asBinaryTree: CTSplayHeap"					],					"body" : [						"^ self asBinaryTree: CTSplayHeap"					],					"isTestMethod" : false,					"category" : "*Containers-SplayHeap",					"comment" : [ ],					"hash" : 1644962,					"argumentNames" : [ ]				}			}		},		"partitionGreaterThanOrEqualTo:inSplayHeap:do:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptRedBlackSetMessagesForDoc",				"CTBinaryTreeNodeSplayHeap>>#partition:inSplayHeap:do:"			],			"implementors" : {				"CTBinaryTreeNodeSplayHeap" : {					"sourceCode" : [						"partitionGreaterThanOrEqualTo: pivot inSplayHeap: aHeap do: aBlock",						"",						"\t^ previousLink",						"\t\t  ifEmpty: [ aBlock value: aHeap binaryTreeElementEmpty value: self ]",						"\t\t  ifNotEmpty: [ ",						"\t\t\t  | y |",						"\t\t\t  y := previousLink value.",						"\t\t\t  (aHeap is: y lessThan: pivot)",						"\t\t\t\t  ifTrue: [ ",						"\t\t\t\t\t  previousLink nextLink",						"\t\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t\t  | r l |",						"\t\t\t\t\t\t\t  l := aHeap",						"\t\t\t\t\t\t\t\t       leftBinaryTreeElement: previousLink previousLink",						"\t\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t\t       rightBinaryTreeElement: s.",						"\t\t\t\t\t\t\t  r := aHeap",						"\t\t\t\t\t\t\t\t       leftBinaryTreeElement: b",						"\t\t\t\t\t\t\t\t       value: value",						"\t\t\t\t\t\t\t\t       rightBinaryTreeElement: nextLink.",						"\t\t\t\t\t\t\t  aBlock value: l value: r ] ]",						"\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t  previousLink previousLink",						"\t\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t\t  | r rr |",						"\t\t\t\t\t\t\t  rr := aHeap",						"\t\t\t\t\t\t\t\t        leftBinaryTreeElement: previousLink nextLink",						"\t\t\t\t\t\t\t\t        value: value",						"\t\t\t\t\t\t\t\t        rightBinaryTreeElement: nextLink.",						"\t\t\t\t\t\t\t  r := aHeap",						"\t\t\t\t\t\t\t\t       leftBinaryTreeElement: b",						"\t\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t\t       rightBinaryTreeElement: rr.",						"\t\t\t\t\t\t\t  aBlock value: s value: r ] ] ]"					],					"body" : [						"^ previousLink",						"\t  ifEmpty: [ aBlock value: aHeap binaryTreeElementEmpty value: self ]",						"\t  ifNotEmpty: [ ",						"\t\t  | y |",						"\t\t  y := previousLink value.",						"\t\t  (aHeap is: y lessThan: pivot)",						"\t\t\t  ifTrue: [ ",						"\t\t\t\t  previousLink nextLink",						"\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t  | r l |",						"\t\t\t\t\t\t  l := aHeap",						"\t\t\t\t\t\t\t       leftBinaryTreeElement: previousLink previousLink",						"\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t       rightBinaryTreeElement: s.",						"\t\t\t\t\t\t  r := aHeap",						"\t\t\t\t\t\t\t       leftBinaryTreeElement: b",						"\t\t\t\t\t\t\t       value: value",						"\t\t\t\t\t\t\t       rightBinaryTreeElement: nextLink.",						"\t\t\t\t\t\t  aBlock value: l value: r ] ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  previousLink previousLink",						"\t\t\t\t\t  partition: pivot",						"\t\t\t\t\t  inSplayHeap: aHeap",						"\t\t\t\t\t  do: [ :s :b | ",						"\t\t\t\t\t\t  | r rr |",						"\t\t\t\t\t\t  rr := aHeap",						"\t\t\t\t\t\t\t        leftBinaryTreeElement: previousLink nextLink",						"\t\t\t\t\t\t\t        value: value",						"\t\t\t\t\t\t\t        rightBinaryTreeElement: nextLink.",						"\t\t\t\t\t\t  r := aHeap",						"\t\t\t\t\t\t\t       leftBinaryTreeElement: b",						"\t\t\t\t\t\t\t       value: y",						"\t\t\t\t\t\t\t       rightBinaryTreeElement: rr.",						"\t\t\t\t\t\t  aBlock value: s value: r ] ] ]"					],					"isTestMethod" : false,					"category" : "partitioning",					"comment" : [ ],					"hash" : 54291890,					"argumentNames" : [						"pivot",						"aHeap",						"aBlock"					]				}			}		}	}}
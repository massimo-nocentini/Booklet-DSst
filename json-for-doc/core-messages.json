{	"classes" : {		"String" : {			"hash" : 806656,			"definition" : "ArrayedCollection << #String\r\tslots: {};\r\tsharedVariables: { #CaseSensitiveOrder . #CSSeparators . #CSNonSeparators . #UppercasingTable . #CSLineEnders . #LowercasingTable . #CaseInsensitiveOrder . #TypeTable . #Tokenish . #AsciiOrder };\r\ttag: 'Base';\r\tpackage: 'Collections-Strings'",			"comment" : [				"A String is an indexed collection of Characters. Class String provides the abstract super class for ByteString (that represents an array of 8-bit Characters) and WideString (that represents an array of  32-bit characters).  In the similar manner of LargeInteger and SmallInteger, those subclasses are chosen accordingly for a string; namely as long as the system can figure out so, the String is used to represent the given string.",				"",				"Strings support a vast array of useful methods, which can best be learned by browsing and trying out examples as you find them in the code.",				"",				"## Substrings and slicing",				"",				"A number of selectors can be used to get substrings. `String>>#lines` will return a colection containing substrings separated by `\\\\n`, `\\\\r`, or `\\\\r\\\\n`; `String>>#trim` will return a substring with whitespace removed from the beginning and end. ",				"",				"Obtaining parts of a string can also be achieved using numbered indices, also known as slicing. There are shortcut methods for some common operations that are often inherited from `SequenceableCollection` inclusing `allButFirst`, `allButLast`, `first`, or `last`.",				"",				"```",				"s := 'abcdefg'.",				"",				"s first. \"$a\"",				"s allButFirst.  \"bcdefg\"",				"",				"s last.  \"$g\"",				"s allButLast.  \"abcdef\"",				"",				"\"pass a number argument to change the number of characters removed/kept\"",				"",				"s first: 2.  \"ab\"  ",				"s allButFirst: 2.  \"cdefg\"",				"",				"s last: 2.  \"fg\"",				"s allButLast: 2.  \"abcde\"",				"```",				"",				"To get the middle of a string use `SequenceableCollection>>#copyFrom:to:`",				"",				"```",				"s := 'abcdefg'.",				"s copyFrom: 2 to: 6. \"bcdef\"",				"```",				"",				"To count back from the end of the string use the `size` selector",				"```",				"s := 'abcdefg'",				"s copyFrom: 2 to: s size - 1 ",				"```",				"",				"## Formatting",				"",				"Strings have a `String>>#format:` selector that can be used for interpolating other objects.",				"The \"string template\" can either have numbers between curly bracket characters (`{` and `}`)",				"where the argument to format is a collection where values are indexed by number. Or pass in",				"a `HashedCollection` where the placeholders are the keys of the collection",				"```",				"'ab {1} ef {2}' format: {'cd'. 'gh'}.  \"ab cd ef gh\"",				"",				"'ab {one} ef {two}' format: ",				"    (Dictionary with: #one -> 'cd' with: #two -> 'gh').",				"```",				"",				"`String>>#contractTo:` is also useful for shortening strings to a particular length by replacing ",				"middle characters.",				"",				"## Copying and Streaming",				"As well as the `format:` selector it is possible to build up a string using contatenation with",				"`SequenceableCollection>>#,` ",				"",				"```",				"a := 'abc'.",				"b := ' easy as '.",				"c := '123'.",				"a , b , c.  \"abc easy as 123\"",				"```",				"Or alternatively, construct a string from a stream using `SequenceableCollection class>>#streamContents:`.",				"",				"```",				"s := String streamContents: [ :stream |",				"\t  stream nextPutAll: 'abcdefg';",				"\t  space;",				"\t  nextPutAll: '123456';",				"\t  space.",				"\t  '7890' putOn: stream. ].  \"abcdefg 123456 7890\"",				"```",				"",				"## Finding/Searching",				"",				"Simple reqular expression type searching can be performed using `String>>#match:`, which has similar",				"symantics as \"globbing\" in a shell. The reciever is a template string where the `#` character matches any single character and the `*` character matches any number of characters. A `Boolean` object is returned. ",				"```",				"'#abb*cdch' match: '4abbadskfakjdfadiadfnvcdch'  \"true\"",				"```",				"",				"For more complex matching use `String>>#matchesRegex:` which is an extension method implmented by `RxMatcher`. See the help documentation on regular expressions `HelpBrowser openOn: RegexHelp.`"			],			"category" : "Collections-Strings-Base"		},		"BlockClosure" : {			"hash" : 9472,			"definition" : "Object << #BlockClosure\r\tlayout: VariableLayout;\r\tslots: { #outerContext . #startpc . #numArgs };\r\ttag: 'Methods';\r\tpackage: 'Kernel'",			"comment" : [				"I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.",				"",				"examples :",				"[ 1 + 2 ] value",				"[ :arg | ",				"\t| temp | ",				"\ttemp := arg. ",				"\ttemp ] value: 5",				"[ ^ 5 ] value",				"",				"My return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. ",				"",				"Implementation:",				"",				"Instance variables:",				"\touterContext <Context|nil> context that defined me",				"\tstartpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  ",				"\tnumArgs: <SmallInteger> my number of arguments",				"",				"I am created at runtime through a special bytecode:",				"closureNumCopied: x numArgs: y bytes z1 to z2",				"On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.",				"",				"I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.",				"",				"Accessing variables of the my enclosing context is different depending on variables because of various optimizations:",				"- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.",				"- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. ",				"- full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.",				"",				"Optimized block closures: ",				"Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."			],			"category" : "Kernel-Methods"		},		"AthensTextDisplayCommand" : {			"hash" : 1668608,			"definition" : "Object << #AthensTextDisplayCommand\r\tslots: { #next };\r\tpackage: 'Athens-Text'",			"comment" : [				"An abstract base class for all text rendering commands.",				"",				"A text rendered takes a stream (or list) of my (sub)instances and in that way it renders the text"			],			"category" : "Athens-Text"		},		"CoASTNodeFetcherHeuristic" : {			"hash" : 5462528,			"definition" : "Object << #CoASTNodeFetcherHeuristic\r\tslots: { #next };\r\ttag: 'Heuristics';\r\tpackage: 'HeuristicCompletion-Model'",			"comment" : [				"I implement a fetcher heuristic for an AST node.",				"My responsibility is to build a fetcher for a given node in a given context.",				"I am implemented as a chain of responsibility: I treat the build request if possible, otherwise I forward the request to the next heuristic.",				"",				"My main method #fetcherFor:inContext: is a template method.",				"My subclasses should redefine:",				" - #appliesForNode:inContext: returning a boolean if the heuristic applies for context/node",				" - #buildFetcherFor:inContext: returning the effective heuristic built"			],			"category" : "HeuristicCompletion-Model-Heuristics"		},		"HistoryIterator" : {			"hash" : 559872,			"definition" : "Object << #HistoryIterator\r\tslots: { #index . #plugged . #recorder . #maxSize };\r\ttag: 'Iterators';\r\tpackage: 'System-History'",			"comment" : [				"A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.",				"See HistoryIteratorTest for examples.",				"",				"Instance Variables",				"\tindex:\t\t<Integer>",				"\tmaxSize:\t\t<Integer>",				"\tplugged:\t\t<Boolean>",				"\trecorder:\t\t<UndoRedoGroup>",				"",				"index",				"\t- the iterator cursor",				"",				"maxSize",				"\t- the maximum number of records that can be added in the root group.",				"",				"plugged",				"\t- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).",				"",				"recorder",				"\t- The root of the history tree which records undo/redo commands"			],			"category" : "System-History-Iterators"		},		"ZdcAbstractSocketStream" : {			"hash" : 306944,			"definition" : "Object << #ZdcAbstractSocketStream\r\tslots: { #socket . #readBuffer . #writeBuffer . #timeout . #debug };\r\tpackage: 'Zodiac-Core'",			"comment" : [				"I am ZdcAbstractSocketStream, a binary read/write stream for socket communication.",				"",				"Interally, IO is done through a read and a write ZdcIOBuffer.",				"",				"I am abstract, my subclasses should implement actual IO through a delegate."			],			"category" : "Zodiac-Core"		},		"Integer" : {			"hash" : 1011968,			"definition" : "Number << #Integer\r\tslots: {};\r\ttag: 'Numbers';\r\tpackage: 'Kernel'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		},		"ReadStream" : {			"hash" : 1106688,			"definition" : "PositionableStream << #ReadStream\r\tslots: {};\r\ttag: 'Base';\r\tpackage: 'Collections-Streams'",			"comment" : [				"I represent an accessor for a sequence of objects that can only read objects from the sequence."			],			"category" : "Collections-Streams-Base"		},		"ChunkReadStream" : {			"hash" : 885760,			"definition" : "DecoratorStream << #ChunkReadStream\r\tslots: { #nextChar };\r\ttag: 'Utilities';\r\tpackage: 'System-Sources'",			"comment" : [				"I am a read stream that reads and returns chunks of code. That is, pieces of text separated by",				"",				"!!",				"",				"symbols"			],			"category" : "System-Sources-Utilities"		},		"ProfStef class" : {			"hash" : 3323136,			"definition" : "Model class << ProfStef class",			"comment" : [				"ProfStef is the Pharo teacher. To start the tutorial, evaluate:",				"",				"[[[ ",				"ProfStef go.",				"]]]",				"To go to the next lesson evaluate:",				"",				"[[[",				"ProfStef next.",				"]]]",				"",				"To execute your own tutorial:",				"[[[",				"ProfStef goOn: MyOwnTutorial",				"]]]",				"",				"MyOwnTutorial should be a subclass of AbstractTutorial.",				"",				"To see a table of contents with all defined tutorials:",				"",				"[[[",				"ProfStef contents ",				"",				"Metacello Configuration Tutorial Part1",				"\tProfStef goOn: MetacelloConfigurationTutorialPart1",				"",				"Metacello Configuration Tutorial Part2",				"\tProfStef goOn: MetacelloConfigurationTutorialPart2",				"",				"Metacello Development Cycle",				"\tProfStef goOn: MetacelloDevelopmentProcess",				"",				"Inside Metacello Toolbox API",				"\tProfStef goOn: MetacelloToolBoxTutorial",				"",				"Pharo Syntax Tutorial",				"\tProfStef goOn: PharoSyntaxTutorial",				"",				"'",				"]]]",				"",				"Metacello Configuration Tutorial Part1",				"\tProfStef goOn: MetacelloConfigurationTutorialPart1",				"",				"Metacello Configuration Tutorial Part2",				"\tProfStef goOn: MetacelloConfigurationTutorialPart2",				"",				"Metacello Development Cycle",				"\tProfStef goOn: MetacelloDevelopmentProcess",				"",				"Inside Metacello Toolbox API",				"\tPharoTutorial goOn: MetacelloToolBoxTutorial",				"",				"Pharo Syntax Tutorial",				"\tProfStef goOn: PharoSyntaxTutorial",				"'",				"]]]",				"",				"ProfStef is interacting with a tutorial player (which encapsulate the logic of navigating within lessons) and lessonView (a dead simple little UI).",				""			],			"category" : "ProfStef-Core"		},		"Character" : {			"hash" : 512,			"definition" : "Magnitude << #Character\r\tlayout: ImmediateLayout;\r\tslots: {};\r\tsharedVariables: { #DigitValues . #CharSet . #CharacterTable };\r\ttag: 'BasicObjects';\r\tpackage: 'Kernel'",			"comment" : [				"I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.",				"",				"The code point is based on Unicode. Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called \"encoding tag\" or neutrally \"leading char\", but the bits rigidly denotes the concept of languages.",				"",				"The other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false.",				"",				"I represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."			],			"category" : "Kernel-BasicObjects"		},		"UnicodeTestRNG" : {			"hash" : 3926784,			"definition" : "TestResource << #UnicodeTestRNG\r\tslots: { #generator };\r\ttag: 'Charset';\r\tpackage: 'Kernel-Tests-Extended'",			"comment" : [				"The random number generator used by the UnicodeTest"			],			"category" : "Kernel-Tests-Extended-Charset"		},		"RandomTestDistributions" : {			"hash" : 2374144,			"definition" : "TestCase << #RandomTestDistributions\r\ttraits: {TIceImagesExporting};\r\tslots: {};\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Essentials-Tests"		},		"LGitRevwalk" : {			"hash" : 2166016,			"definition" : "LGitRepositoryObject << #LGitRevwalk\r\tslots: { #currentCommit . #hasNext . #sorting };\r\ttag: 'HelperObjects';\r\tpackage: 'LibGit-Core'",			"comment" : [				"See [https://libgit2.org/libgit2/#HEAD/group/revwalk](https://libgit2.org/libgit2/#HEAD/group/revwalk)"			],			"category" : "LibGit-Core-HelperObjects"		},		"TutorialPlayer" : {			"hash" : 3308032,			"definition" : "Object << #TutorialPlayer\r\tslots: { #tutorialPosition . #tutorial };\r\tpackage: 'ProfStef-Core'",			"comment" : [				"I can navigate through an AbstractTutorial subclass (which defines lessons). With #next and #previous, you can go forward and backward through the tutorial. "			],			"category" : "ProfStef-Core"		},		"ByteArray" : {			"hash" : 12800,			"definition" : "ArrayedCollection << #ByteArray\r\tlayout: ByteLayout;\r\tslots: {};\r\ttag: 'Base';\r\tpackage: 'Collections-Native'",			"comment" : [				"I represent an ArrayedCollection whose elements are integers between 0 and 255.",				"",				"For further comments read comments of `WordArray`."			],			"category" : "Collections-Native-Base"		},		"WeakFinalizerItem" : {			"hash" : 1177344,			"definition" : "Object << #WeakFinalizerItem\r\tlayout: WeakLayout;\r\tslots: { #list . #next . #executor };\r\ttag: 'Base';\r\tpackage: 'System-Finalization'",			"comment" : [				"My instances is used by weak registry to hold a single weak reference",				"and executor(s).",				"",				"Once object, referenced weakly by my instance become garbage, a weak registry triggers its execution",				"by sending #finalizeValues to my instance.",				"",				"Note, that a new VM finalization scheme does not implies to use this particular class",				"in order to implement finalization scheme. VM refers only to WeakFinalizationList class. ",				"",				"In this way, my class and its implementation can serve as an example for implementing various finalization actions, which may differ from this one, provided by default for use by weak registry.",				"",				"Once initialized, my instance should:",				" - point to particular list (an instance of WeakFinalizationList),",				" - next should be nil",				" - executor or multiple executors initialized",				" - weak reference slot should point to some object of interest",				"",				"At the moment, when object, referenced weakly, become garbage, VM checks if its fist instance variable is an instance of WeakFinalizationList.",				"If it so, then it adds a given object to this list, and also links the tail of list through 'next' instance variable. ",				"",				"So, as a result of garbage collection, a list will contain all objects, which had weak references to garbage collected objects. ",				"It is a responsibility of application to manage the instances of WeakFinalizationList's , as well as clear this list before the next garbage collection.",				"As a consequence of that you can:",				" - use multiple different lists and manage them differently in order to react differently when some objects became garbage",				" - you are not obliged to handle/clear the list(s) immediately after GC. You can clean up them periodically.",				" - you can implement own kind of weak referencing object(s), which could use same finalization, provided by newer VMs.",				"",				"VM requires only that an object with weak reference having at least two instance variables,",				"and its first instance variable points to instance of WeakFinalizationList. Everything else is optional."			],			"category" : "System-Finalization-Base"		},		"UUIDGenerator class" : {			"hash" : 1159424,			"definition" : "Object class << UUIDGenerator class",			"comment" : [				"I am UUIDGenerator, I generate UUIDs.",				"",				"An RFC4122 Universally Unique Identifier (UUID) is an opaque 128-bit number that can be used for identification purposes. Concretely, a UUID is a 16 element byte array.",				"",				"The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. In this context the word unique should be taken to mean \"practically unique\" rather than \"guaranteed unique\".",				" ",				"I generate UUIDs similar, in spirit, to those defined in RFC4122, though I use version 0 to indicate that I follow none of the defined versions. This does not matter much, if at all, in practice.",				"",				"I try to conform to the following aspects:",				" - each 'node' (machine, image, instance) should generate unique UUIDs",				" - even when generating UUIDs at a very fast rate, they should remain unique",				" - be fast and efficient",				"",				"To achieve this goal, I",				"- take several aspects into account to generate a unique node ID",				"- combine a clock, a counter and some random bits",				"- hold a state, protected for multi user access",				"",				"I can generate about 500K UUIDs per second.",				"",				"Implementation:",				"",				"Although a UUID should be seen as totally opaque, here is the concrete way I generate one:",				"- the first 8 bytes are the microsecond clock value with the smallest quantity first; this means that the later of these 8 bytes will be identical when generated with small(er) timespans; within the same clock resolution interval, the full first 8 bytes will be identical",				"- the next 2 bytes represent a counter with safe overflow, held as protected state inside me; after 2*16 this value will repeat; the counter initalizes with a random value",				"- the next 2 bytes are simply random, based on the system PRNG, Random",				"- the final 4 bytes represent the node ID; the node ID is unique per instance of me, across OS environments where the image might run; the node ID is the MD5 hash of a string that is the concatenation of several elements (see #computeNodeIdentifier)",				" ",				"Some bits are set to some predefined value, to indicate the variant and version (see #setVariantAndVersion:)",				"",				"Usage:",				"",				"  UUIDGenerator next.",				"  UUIDGenerator current next.",				"  UUIDGenerator new next.",				"",				"Sharing an instance is more efficient and correct.",				"Instances should be reset whenever the image comes up.",				"",				"See also:",				"",				"  http://en.wikipedia.org/wiki/UUID",				"  https://tools.ietf.org/html/rfc4122"			],			"category" : "Network-UUID-Base"		},		"ArrayedCollection" : {			"hash" : 855808,			"definition" : "SequenceableCollection << #ArrayedCollection\r\tslots: {};\r\ttag: 'Base';\r\tpackage: 'Collections-Abstract'",			"comment" : [				"I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys."			],			"category" : "Collections-Abstract-Base"		},		"Fraction" : {			"hash" : 971520,			"definition" : "Number << #Fraction\r\tslots: { #numerator . #denominator };\r\ttag: 'Numbers';\r\tpackage: 'Kernel'",			"comment" : [				"Fraction provides methods for dealing with fractions like 1/3 as fractions (not as 0.33333...).  All public arithmetic operations answer reduced fractions (see examples).",				"",				"instance variables: 'numerator denominator '",				"",				"Examples: (note the parentheses required to get the right answers in Smalltalk and Pharo):",				"",				"(2/3) + (2/3)",				"(2/3) + (1/2)\t\t \"answers shows the reduced fraction\" ",				"(2/3) raisedToInteger: 5\t\t \"fractions also can have exponents\""			],			"category" : "Kernel-Numbers"		},		"RandomBinomial" : {			"hash" : 2536192,			"definition" : "RandomBernoulli << #RandomBinomial\r\tslots: { #n };\r\ttag: 'Random';\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tn:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Random"		},		"ZdcIOBuffer" : {			"hash" : 310016,			"definition" : "Object << #ZdcIOBuffer\r\tslots: { #buffer . #readPointer . #writePointer };\r\tpackage: 'Zodiac-Core'",			"comment" : [				"I am ZdcIOBuffer.",				"",				"I manage a fixed SequenceableCollection buffer for simultaneous input and output.",				"I maintain a readPointer and a writePointer.",				"",				"When data is written to me, it is stored at the end, past my writePointer.",				"When data is read from me, it is retrieved from the front, past my readPointer.",				"",				"Invariant: readPointer <= writePointer",				"",				"My valid contents for reading is defined from contentsStart to contentsEnd, from readPointer + 1 to writePointer.",				"Data can be added to the free space defined from freeSpaceStart to freeSpaceEnd, from writePointer + 1 to the buffer's' size.",				"",				"There can be a gap at my front. Compacting moves data if necessary to make (more) room at the end."			],			"category" : "Zodiac-Core"		},		"RandomBernoulli" : {			"hash" : 2535680,			"definition" : "Random << #RandomBernoulli\r\tslots: { #p };\r\ttag: 'Random';\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tp:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Random"		},		"True" : {			"hash" : 788224,			"definition" : "Boolean << #True\r\tslots: {};\r\ttag: 'Objects';\r\tpackage: 'Kernel'",			"comment" : [				"True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.",				"",				"Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."			],			"category" : "Kernel-Objects"		},		"StGenericGenerator" : {			"hash" : 5640192,			"definition" : "StIterator << #StGenericGenerator\r\tslots: { #generator };\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I wrap a generator to provide the same API than the iterators.",				"My subclasses should implement #elementsDo: to iterate the collection or implement the values.",				"In this method, each of the generated values should be used with the valuable pased.",				"",				"",				"Ex:",				"elementsDo: aValuable",				"\t[ true ] whileTrue: [ aValuable value: 42  ].",				"\t",				"This example generates an infinite iterator always returning 42.",				"Using the generator will produce that the method is only executed on demand.",				"",				"This Iterator can also wrap collections, iterating one element at the time.",				"",				"Ex:",				"elementsDo: aValuable",				"\tSystemNavigation default allBehaviorsDo: aValuable"			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"ZnChunkedReadStream" : {			"hash" : 1403648,			"definition" : "Stream << #ZnChunkedReadStream\r\tslots: { #stream . #chunk . #position . #limit . #atEnd . #totalSize . #chunkCount . #extraHeaders };\r\ttag: 'Streaming';\r\tpackage: 'Zinc-HTTP'",			"comment" : [				"I am ZnChunkedReadStream, implementing HTTP 1.1 chunked transfer encoding on a wrapped streams.",				"",				"Clients should read me until I am atEnd.",				"",				"After I am completely read, I can tell you my totalSize and optional extraHeaders.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Streaming"		},		"SequenceableCollection" : {			"hash" : 856320,			"definition" : "Collection << #SequenceableCollection\r\tslots: {};\r\ttag: 'Base';\r\tpackage: 'Collections-Abstract'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		},		"STONReader" : {			"hash" : 341760,			"definition" : "Object << #STONReader\r\tslots: { #readStream . #objects . #classes . #unresolvedReferences . #stringStream . #acceptUnknownClasses . #newLine . #convertNewLines };\r\ttag: 'Reader';\r\tpackage: 'STON-Core'",			"comment" : [				"STONReader materializes objects using the Smalltalk Object Notation format.",				"",				"This parser is backwards compatible with standard JSON.",				"",				"Customization options are:",				"",				"- acceptUnknownClasses <Boolean> default is false",				"\tif true, unknown class names are allowed, the standard #mapClass (Dictionary) is instanciated and the class name is added under #classNameKey (#className)",				"\tif false, unknown class names result in a NotFound error",				"- convertNewLines <Boolean> default is false",				"\tif true, any unescaped EOL sequence CR, LF or CRLF inside strings or symbols is read and converted as the chosen EOL sequence",				"\tif false, CR, LF and CRLF are read unmodified",				"- newLine <String> default is String cr",				"\tsequence to use as EOL"			],			"category" : "STON-Core-Reader"		},		"IceSemanticVersion" : {			"hash" : 6545408,			"definition" : "Magnitude << #IceSemanticVersion\r\tslots: { #major . #minor . #patch };\r\ttag: 'Core';\r\tpackage: 'Iceberg-Libgit'",			"comment" : [				"I represent the semver (http://semver.org) of libgit2. ",				"Since I exist just to be able to compare versions, I'm limited (reason why I'm not promoted to a more general package)."			],			"category" : "Iceberg-Libgit-Core"		},		"ZnPositionableReadStream" : {			"hash" : 1216000,			"definition" : "Object << #ZnPositionableReadStream\r\tslots: { #stream . #buffer . #count . #index . #delta };\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnPositionableReadStream.",				"I am polymorphic with (the most used/important methods of) ReadStream and PositionableStream.",				"",				"I wrap another read stream and store the elements that I read in a sliding circular buffer so that I am able to go back to any position inside that buffer. ",				"",				"Essentially, I implement #position and #position: to be used to back out of reading ahead.",				"",				"Note that the size of my buffer limits how far I can go backwards. A SubscriptOutOfBounds exception will be signalled when an attempt is made to go too far backwards.",				"",				"The index returned by #position should be considered abstract, without concrete meaning, but it is currently implemented as the count of elements read by #next on the wrapped stream. On a simple stream over an in memory collection, that will be equivalent to an integer index into that collection. But on network streams or streams that were already further along, this will no longer be the case.",				"",				"The most elementary example of my capabilities can be seen in my implementation of #peek. See also the unit tests #testPlainExcursion and #testSearch",				"",				"Of course, backing out of an excursion is only possible within the window of the buffer size.",				"",				"Implementation",				"",				"- stream <ReadStream> the read stream that I wrap and add positioning to",				"- buffer <String|ByteArray> sliding, circular buffer",				"- index <PositiveInteger> zero based index into buffer, where next will be stored",				"- count <PositiveInteger> number of next operations done on wrapped stream",				"- delta <PositiveInteger> number of positions that I was moved backwards",				"",				"The real core methods are #next, #atEnd, #position and #position: and are used to implement the rest.",				"",				"Part of Zinc HTTP Components"			],			"category" : "Zinc-Character-Encoding-Core"		},		"RxParser" : {			"hash" : 1437952,			"definition" : "Object << #RxParser\r\tslots: { #input . #lookahead };\r\tsharedVariables: { #BackslashSpecials . #BackslashConstants };\r\ttag: 'Base';\r\tpackage: 'Regex-Core'",			"comment" : [				"-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov",				"--",				"The regular expression parser. Translates a regular expression read from a stream into a parse tree. ('accessing' protocol). The tree can later be passed to a matcher initialization method.  All other classes in this category implement the tree. Refer to their comments for any details.",				"",				"Instance variables:",				"\tinput\t\t<Stream> A stream with the regular expression being parsed.",				"\tlookahead\t<Character>"			],			"category" : "Regex-Core-Base"		},		"Random" : {			"hash" : 1105152,			"definition" : "Object << #Random\r\tslots: { #seed . #a . #m . #q . #r };\r\ttag: 'Base';\r\tpackage: 'Random-Core'",			"comment" : [				"This Random Number Generator graciously contributed by David N. Smith.  It is an adaptation of the Park-Miller RNG [1] which uses Floats to avoid the need for LargeInteger arithmetic.",				"",				"If you just want a quick random integer, use:",				"\t\t10 atRandom",				"Every integer interval can give a random number:",				"\t\t(6 to: 12) atRandom",				"SequenceableCollections can give randomly selected elements:",				"\t\t'pick one of these letters randomly' atRandom",				"SequenceableCollections also respond to shuffled, as in:",				"\t\t($A to: $Z) shuffled",				"",				"The correct way to use class Random is to store one in an instance or class variable:",				"\t\tmyGenerator := Random new.",				"Then use it every time you need another number between 0.0 and 1.0 (excluding)",				"\t\tmyGenerator next",				"You can also generate a positive integer",				"\t\tmyGenerator nextInt: 10",				"\t\t",				"[1] 'Random Number Generators:  Good Ones Are Hard to Find' ",				"by Stephen K. Park and Keith W. Miller ",				"(Comm. Asso. Comp. Mach., 31(10):1192--1201, 1988). http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf"			],			"category" : "Random-Core-Base"		},		"FTGlyphSlotRec" : {			"hash" : 1035264,			"definition" : "FFIExternalStructure << #FTGlyphSlotRec\r\tslots: {};\r\tsharedVariables: { #OFFSET_FACE . #OFFSET_CONTROL_LEN . #OFFSET_METRICS . #OFFSET_GENERIC . #OFFSET_BITMAP . #OFFSET_SUBGLYPHS . #OFFSET_CONTROL_DATA . #OFFSET_LIBRARY . #OFFSET_RESERVED . #OFFSET_OUTLINE . #OFFSET_RSB_DELTA . #OFFSET_LINEARHORIADVANCE . #OFFSET_OTHER . #OFFSET_LINEARVERTADVANCE . #OFFSET_NUM_SUBGLYPHS . #OFFSET_BITMAP_TOP . #OFFSET_ADVANCE . #OFFSET_LSB_DELTA . #OFFSET_BITMAP_LEFT . #OFFSET_FORMAT . #OFFSET_NEXT . #OFFSET_INTERNAL };\r\tsharedPools: { FT2Types };\r\ttag: 'Bindings';\r\tpackage: 'FreeType'",			"comment" : [				"I Implement the `FT_GlyphSlot_Rec`, I am the structure where the glyphs are stored when reading from a font."			],			"category" : "FreeType-Bindings"		},		"MailAddressTokenizer" : {			"hash" : 3311616,			"definition" : "Stream << #MailAddressTokenizer\r\tslots: { #cachedToken . #text . #pos };\r\tsharedVariables: { #CSNonSeparators . #CSParens . #CSNonAtom . #CSSpecials };\r\tpackage: 'Network-Mail'",			"comment" : [				"Divides an address into tokens, as specified in RFC 822.  Used by MailAddressParser."			],			"category" : "Network-Mail"		},		"SourceFileBufferedReadWriteStream" : {			"hash" : 1141760,			"definition" : "Object << #SourceFileBufferedReadWriteStream\r\tslots: { #innerStream . #buffer . #bufferLength . #streamSize . #bufferOffset . #nextPosition . #isDirty };\r\ttag: 'Streams';\r\tpackage: 'System-Sources'",			"comment" : [				"I am Buffered Read Write Stream.",				"I should only be used in the SourceFile implementation"			],			"category" : "System-Sources-Streams"		},		"SocketStream" : {			"hash" : 1367296,			"definition" : "Object << #SocketStream\r\tslots: {\r\t\t\t #recentlyRead .\r\t\t\t #socket .\r\t\t\t #inBuffer .\r\t\t\t #outBuffer .\r\t\t\t #inNextToWrite .\r\t\t\t #outNextToWrite .\r\t\t\t #lastRead .\r\t\t\t #timeout .\r\t\t\t #autoFlush .\r\t\t\t #bufferSize .\r\t\t\t #binary .\r\t\t\t #shouldSignal };\r\ttag: 'Base';\r\tpackage: 'Network-Kernel'",			"comment" : [				"SocketStream is a wrapper for class Socket making it easy to write networking code by giving the programmer a stream-like protocol. A Socket is a two way communication link with two logically separate channels - input and output. The Socket class is the lowest level in Pharo for network communication and using it directly can be difficult and bug prone.",				"",				"A SocketStream can be in binary or ascii mode, ascii is the default which means you are transmitting and receiving Strings. Most Internet protocols are in clear text ascii, like for example HTTP. Another setting is what timeout you want to use - default is the standardTimeout from Socket. More settings can be found in the method category 'configuration'.",				"",				"Simplest example of connecting, sending/receiving and closing:",				"",				"| stream result |",				"stream := SocketStream openConnectionToHostNamed: 'www.pharo-project.org' port: 80.",				"[[stream nextPutAll: 'GET / HTTP/1.0'; crlf; crlf; flush.",				"result := stream upToEnd. \"Give us all data until the socket is closed.\"",				"Transcript show: result; cr.]",				"\tensure: [stream close]]",				"\t\ton: ConnectionTimedOut",				"\t\tdo: [:ex | Transcript show: ex asString;cr. ex resume]",				"",				"There are two important things to note above:",				"\t- The methods in category \"stream in\" can signal two exceptions (unless turned off with #shouldSignal:):",				"\t\tConnectionClosed and ConnectionTimedOut",				"\t- We close the stream using #ensure:, that is to make sure it isn't left opened.",				"\t- We use #on:do: to catch any signal. In this case we do not need to catch ConnectionClosed since #upToEnd does that for us intrinsically.",				"",				"----------------",				"SocketStream (below called SS) is a reimplementation of 'Old'-SocketStream (below called OSS) - the class that originates from the original Comanche implementation but now is included in standard Squeak. SS has the same protocol as OSS and is meant to replace it. SS is faster, more flexible, is better documented and adds a few features:",				"",				"1. #shouldSignal:, which decides if SS should signal low level Socket exceptions (true) or if it should swallow them like original OSS did. Default is true. The only reason I added this is for backwards compatibility - not signalling causes problems - see bug 4 below.",				"",				"2. #nextAllInBuffer, #nextInBuffer:, #skip:, #receiveData:, #nextPutAllFlush: and #recentlyRead are new additions to the public protocol.",				"",				"",				"It also fixes various bugs:",				"",				"1. #isDataAvailable could theoretically answer false, when there actually is some in the buffer in OSS. If #receiveDataIfAvailable reads the last byte then the following \"socket dataAvailable\" would answer false. So the last byte would be sitting in the inStream missed.",				"",				"2. #upToAll: in OSS has several problems, for example - #positionOfSubCollection:ifAbsent: which was introduced answers one position too low. This was compensated in upToAll:, but only in the pushBack: call, not the actual result being returned which was cut short 1 byte. Amusingly this makes KomHttpServer not use \"Keep-Alive\" since the last $e in 'Alive' was cut short. :)",				"",				"3. SS doesn't inherit from PositionableStream since that just breaks various inherited messages, like for example #skip:. OSS should IMHO be changed to inherit from Object - or of course, replaced in full with SS. :)",				"",				"4. Since SocketStream by default signals closes and timeouts the SocketStreamTest now passes. The reason for SocketStream to fail is that while it does timeout on a low level (#SocketStream>>receiveData doesn't hang forever) - the callers of #receiveData sometimes loop - like in #next:, and thus eliminates the timeout. SS warns about some methods (in their method comments) not honouring timeouts if shouldSignal is false, I really don't know what they should do in that case:",				"\t#next:, #upTo:, #upToAll: and #upToEnd (and #receiveData:)",				"",				"",				"The primary reason for the SS implementation is optimal performance. The main differences in implementation with the old OSS are:",				"",				"1. SS uses two buffers directly (inBuffer and outBuffer) with pointers marking start and stop within the buffer. OSS instead uses two regular streams, a ReadStream and a WriteStream. Using internal buffers makes it possible to avoid copying and reallocation in various ways, it also makes SS be able to have specialized growing/buffer moving behaviour.",				"",				"2. #upTo:, #upToAll: and #peekForAll: uses selectged String messages that in turn uses fast primitives for searching. OSS used other messages that fell back on byte per byte reading.",				"",				"3. #receiveData in OSS creates a temporary buffer stream for each call! During a long read operation, like say #upToAll: (which for example is used when uploading files using HTTP POST forms), this is devastating - especially since the default size is only 2000 bytes - and leads to a very high number of low level read operations on the Socket, typically 100 times more calls than with OSS. The buffer in OSS is held in an instvar (not recreated for each call), is larger from the start and above all - grows dynamically by doubling. OSS can also avoid a grow/reallocation by doing a \"move down\" if data has been read from the SS as it comes in and through that making room in the lower part of the inBuffer. The net result is that upToAll: for large files is about 10 times faster.",				"",				"4. The implementation of upTo: and upToAll: tries to avoid doing unnecessary find operations in the buffer and is greedy by default, which means it favors reading more data - if available - before searching for the stop sequence. If we had #findString:startingAt:stoppingAt: this wouldn't have to be greedy and we wouldn't be needlessly scanning dead buffer area. VM hackers? Also, while you are at it - make it work for ByteArrays too. :)",				"",				"",				"SS can not be run unbuffered, since that seems unneeded. The option to autoFlush is still available, with it set to true SocketStream (just like OSS) will flush on its own on each nextPut:/nextPutAll:, otherwise flushing it will have to be done manually but is done on close.",				"",				"The first performance tests shows that, as noted above, receiving large amounts of data using #upToAll: is greatly improved - factor of 10. Serving HTTP with small payloads seemed at first not be faster at all - but this is due to the high overhead of Socket connect/close and other things. Increasing payloads show a difference and especially with keep alive on - where the new SS roughly doubles the throughput!"			],			"category" : "Network-Kernel-Base"		},		"StTransformation" : {			"hash" : 5647360,			"definition" : "StIteratorBlockDecorator << #StTransformation\r\tslots: {};\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I implement the collect: operation on the iterator.",				"I apply the block and transform the elements returned by myself."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"ExternalAddress" : {			"hash" : 957952,			"definition" : "ByteArray << #ExternalAddress\r\tlayout: ByteLayout;\r\tslots: {};\r\tpackage: 'FFI-Kernel'",			"comment" : [				"An ExternalAddress is an opaque handle to objects outside Pharo memory (e.g., a pointer)."			],			"category" : "FFI-Kernel"		},		"AtomicQueueItem" : {			"hash" : 1092352,			"definition" : "Object << #AtomicQueueItem\r\tslots: { #next . #object };\r\ttag: 'Elements';\r\tpackage: 'Collections-Atomic'",			"comment" : [				"I am a queue item, used by atomic queues.",				"All my new instances are circular i.e. next = self"			],			"category" : "Collections-Atomic-Elements"		},		"SharedQueue" : {			"hash" : 1128960,			"definition" : "Stream << #SharedQueue\r\tslots: { #monitor . #items };\r\ttag: 'Base';\r\tpackage: 'Collections-Sequenceable'",			"comment" : [				"An implementation of a shared queue based on class Monitor.  Clients may may place items on the queue using nextPut: or remove them using methods like next or nextOrNil.  Items are removed in first-in first-out (FIFO) order.  It is safe for multiple threads to access the same shared queue, which is why this is a \"shared\" queue.",				"",				"[monitor] is used to synchronize access from multiple threads.",				"",				"[items] is an ordered collection holding the items that are in the queue.  New items are added  at the end, and old items are removed from the beginning.",				"",				"All methods must hold the monitor while they run."			],			"category" : "Collections-Sequenceable-Base"		},		"DecoratorStream" : {			"hash" : 886272,			"definition" : "Stream << #DecoratorStream\r\tslots: { #decoratedStream };\r\ttag: 'Base';\r\tpackage: 'Collections-Streams'",			"comment" : [				"I am a basic decorator stream that will wrap a stream and forward messages to my decoree.",				"",				"Subclass me to write a decorator that reuses some methods."			],			"category" : "Collections-Streams-Base"		},		"FileSystemResolver" : {			"hash" : 1282048,			"definition" : "Object << #FileSystemResolver\r\tslots: { #next };\r\ttag: 'Base-Resolver';\r\tpackage: 'FileSystem-Core'",			"comment" : [				"I am an abstract superclass for objects that can resolve origins into references. Such objects use the Chain of Responsibility pattern, and when unable to resolve a particular origin, delegate that resolution request to the next resolver in the list.",				"",				"To add your own origin, implement a method in one of my subclasses, which is annotated with <origin> and returns aFileReference. See my subclasses' \"origin\" procotol for examples. If necessary, you could also create your own subclass and add it to the list with something like this:",				"",				"",				"```",				"MyCustomFileSystemResolver class >> initialize [",				"\tSessionManager default registerSystemClassNamed: self name atPriority: 100. \"After FileLocator\"",				"\tself startUp: true.",				"\t]",				"```",				"",				"```\t",				"MyCustomFileSystemResolver class >> startUp: resuming [",				"\tresuming ifFalse: [ ^ self ].",				"\tFileLocator addResolver: self new",				"\t]",				"```",				"",				"### Implementation",				"",				"next",				"\tThe next resolver in the list, or nil"			],			"category" : "FileSystem-Core-Base-Resolver"		},		"EssentialsObjectTest" : {			"hash" : 2374656,			"definition" : "ObjectTest << #EssentialsObjectTest\r\ttraits: {TIceImagesExporting};\r\tslots: {};\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Essentials-Tests"		},		"RubParagraphDecorator" : {			"hash" : 614144,			"definition" : "Object << #RubParagraphDecorator\r\tslots: { #next };\r\ttag: 'Editing-Core';\r\tpackage: 'Rubric'",			"comment" : [				"I am a decorator for the paragraph of a text area. I can be used to draw something on the paragraph "			],			"category" : "Rubric-Editing-Core"		},		"OpenToolTest" : {			"hash" : 4642816,			"definition" : "AbstractUITestCase << #OpenToolTest\r\tslots: {};\r\ttag: 'Base';\r\tpackage: 'Tools-Tests'",			"comment" : [				"SUnit tests for opening of tools"			],			"category" : "Tools-Tests-Base"		},		"Stream" : {			"hash" : 835328,			"definition" : "Object << #Stream\r\tslots: {};\r\ttag: 'Base';\r\tpackage: 'Collections-Streams'",			"comment" : [				"I am an abstract class that represents an accessor for a sequence of objects. This sequence is referred to as my \"contents\"."			],			"category" : "Collections-Streams-Base"		},		"STONCStyleCommentsSkipStream" : {			"hash" : 340736,			"definition" : "Object << #STONCStyleCommentsSkipStream\r\tslots: { #stream . #peekedCharacter . #delimiter . #escape };\r\ttag: 'Reader';\r\tpackage: 'STON-Core'",			"comment" : [				"I am STONCStyleCommentsSkipStream, a character ReadStream wrapping another character ReadStream. I skip C style comments, much like a classic C preprocessor.",				"",				"C, C++, Java, JavaScript style comments are either the multiline",				"",				"\t/* a comment */",				"\t",				"or the single line, up to end of line",				"",				"\t// a comment ",				"\t",				"I deal with any end of line convention. Multiline comments cannot be nested. ",				"",				"You create me #on: another character ReadStream. ",				"",				"Here is an example:",				"",				"\t(STONCStyleCommentsSkipStream on: 'abc/*comment*/def' readStream) upToEnd.",				"\t",				"Comments inside single and double quote delimited strings are ignored. Backslash escapes for single and double quotes inside strings are honored."			],			"category" : "STON-Core-Reader"		},		"StSpotterCandidateLink" : {			"hash" : 5664768,			"definition" : "DoubleLink << #StSpotterCandidateLink\r\tslots: { #processorLink . #weight . #renderingProcessorLink };\r\ttag: 'Model';\r\tpackage: 'NewTools-Spotter'",			"comment" : [				"a link with a `StSpotterCandidateLink>>#candidate`.",				"it is intended to work as element of a linked list."			],			"category" : "NewTools-Spotter-Model"		},		"AbstractBinaryFileStream" : {			"hash" : 834816,			"definition" : "Stream << #AbstractBinaryFileStream\r\tslots: { #file . #handle . #forWrite . #semaphore . #semaphoreIndex };\r\ttag: 'Streams';\r\tpackage: 'Files'",			"comment" : [				"Provides a simple, platform-independent, file stream. I am ",				"- binary",				"- not buffered",				"- provide no encoding/conversions",				"",				"### Examples of usage",				"```",				"\"Creating a file\"",				"stream := (File named: 'asd.txt' asFileReference fullName) readStream.",				"",				"\"Accessing the stream properties\"",				"stream position.",				"stream atEnd.",				"",				"\"Writing\"",				"stream nextPut: 17.",				"stream nextPutAll: 'sdd'.",				"",				"\"Reading\"",				"stream next.",				"stream next: 2.",				"",				"\"Skipping\"",				"stream skip: 2. ",				"",				"\"reading up to something\"",				"stream upTo: 23.",				"stream upToAnyOf: #[ 13 30 ].",				"",				"\"peeking\"",				"stream peek.",				"```"			],			"category" : "Files-Streams"		},		"UUIDGenerator" : {			"hash" : 1159680,			"definition" : "Object << #UUIDGenerator\r\tslots: { #node . #random . #counter . #lock };\r\tsharedVariables: { #Default };\r\ttag: 'Base';\r\tpackage: 'Network-UUID'",			"comment" : [				"I am UUIDGenerator, I generate UUIDs.",				"",				"An RFC4122 Universally Unique Identifier (UUID) is an opaque 128-bit number that can be used for identification purposes. Concretely, a UUID is a 16 element byte array.",				"",				"The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. In this context the word unique should be taken to mean \"practically unique\" rather than \"guaranteed unique\".",				" ",				"I generate UUIDs similar, in spirit, to those defined in RFC4122, though I use version 0 to indicate that I follow none of the defined versions. This does not matter much, if at all, in practice.",				"",				"I try to conform to the following aspects:",				" - each 'node' (machine, image, instance) should generate unique UUIDs",				" - even when generating UUIDs at a very fast rate, they should remain unique",				" - be fast and efficient",				"",				"To achieve this goal, I",				"- take several aspects into account to generate a unique node ID",				"- combine a clock, a counter and some random bits",				"- hold a state, protected for multi user access",				"",				"I can generate about 500K UUIDs per second.",				"",				"Implementation:",				"",				"Although a UUID should be seen as totally opaque, here is the concrete way I generate one:",				"- the first 8 bytes are the microsecond clock value with the smallest quantity first; this means that the later of these 8 bytes will be identical when generated with small(er) timespans; within the same clock resolution interval, the full first 8 bytes will be identical",				"- the next 2 bytes represent a counter with safe overflow, held as protected state inside me; after 2*16 this value will repeat; the counter initalizes with a random value",				"- the next 2 bytes are simply random, based on the system PRNG, Random",				"- the final 4 bytes represent the node ID; the node ID is unique per instance of me, across OS environments where the image might run; the node ID is the MD5 hash of a string that is the concatenation of several elements (see #computeNodeIdentifier)",				" ",				"Some bits are set to some predefined value, to indicate the variant and version (see #setVariantAndVersion:)",				"",				"Usage:",				"",				"  UUIDGenerator next.",				"  UUIDGenerator current next.",				"  UUIDGenerator new next.",				"",				"Sharing an instance is more efficient and correct.",				"Instances should be reset whenever the image comes up.",				"",				"See also:",				"",				"  http://en.wikipedia.org/wiki/UUID",				"  https://tools.ietf.org/html/rfc4122"			],			"category" : "Network-UUID-Base"		},		"RSNiceStepSizeGenerator" : {			"hash" : 5969920,			"definition" : "RSObject << #RSNiceStepSizeGenerator\r\tslots: {\r\t\t\t #qvar .\r\t\t\t #i .\r\t\t\t #io .\r\t\t\t #j .\r\t\t\t #q .\r\t\t\t #ss .\r\t\t\t #ovar .\r\t\t\t #ssOffMap .\r\t\t\t #resetRequired .\r\t\t\t #base .\r\t\t\t #niceStep .\r\t\t\t #o };\r\ttag: 'Labeling';\r\tpackage: 'Roassal3-Chart'",			"comment" : [				"Nice numbers are just step sizes and used for tick spacing. We will use only niceStep tick",				" spaces and place tick marks at multiples of tick spacing.",				"  ",				"  References:",				"  \t[1] An Extension of Wilkinson's Algorithm for positioning Tick Labels on Axes",				"  \t\t \t\t\t\t(Justin Talbot, Sharon Lin, Pat Hanrahan)",				"   [2] Nice Numbers for Graph Labels (Paul S. Heckbert, Graphic Gems I)",				"",				"Here is an example on how to use it:",				"-=-=-=-=-=-=-=-=-=",				"nice := RSNiceStepSizeGenerator new.",				"lg := RSLabelGenerator nice: nice.",				"",				"lg setLooseFlag: true.",				"label := lg searchMin: -98.0 max: 18.0 desired: 3.",				"label asString",				"-=-=-=-=-=-=-=-=-=",				"This prints  '(Score: 0.14) -100.00\t-60.00\t-20.00\t20.00\t'"			],			"category" : "Roassal3-Chart-Labeling"		},		"ZnBufferedReadStream" : {			"hash" : 1196800,			"definition" : "Object << #ZnBufferedReadStream\r\tslots: { #stream . #buffer . #position . #limit };\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnBufferedReadStream.",				"",				"I wrap another ReadStream and add efficient buffering for the typical access pattern of parsers: sending lots of #next, #peek and #atEnd messages.",				"",				"By design I do not implement #position and #position: or anything based on that.",				"",				"I can wrap both binary or character streams and act accordingly.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-Character-Encoding-Core"		},		"OSSDLPasteEventFilter" : {			"hash" : 4301568,			"definition" : "Object << #OSSDLPasteEventFilter\r\tslots: { #next . #lastEvents . #currentState };\r\tsharedPools: { SDL2Constants };\r\ttag: 'Base';\r\tpackage: 'OSWindow-SDL2'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcurrentState:\t\t<Object>",				"\tlastEvents:\t\t<Object>",				"\tnext:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "OSWindow-SDL2-Base"		},		"SourceFile" : {			"hash" : 1140224,			"definition" : "Object << #SourceFile\r\tslots: { #path . #stream . #potentialLocations };\r\ttag: 'Sources';\r\tpackage: 'System-Sources'",			"comment" : [				"asdasd"			],			"category" : "System-Sources-Sources"		},		"ImageReadWriter" : {			"hash" : 562944,			"definition" : "Object << #ImageReadWriter\r\tslots: { #stream };\r\tpackage: 'Graphics-Files'",			"comment" : [				"I am ImageReadWriter. ",				"I read an encoded image from a binary stream and return its as a Form. ",				"I write and encode an image as Form to a binary stream.",				"I am an abstract class, my subclasses implement concrete formats.",				"I can autodetect the format of some encoded images, so you can use me directly.",				"",				"Usage",				"",				"\tImageReadWriter formFromFileNamed: 'test.png'",				"\tImageReadWriter formFromStream: 'test.png' asFileReference binaryReadStream",				"",				"Implementation ",				"",				"Instance Variables:",				"\tstream\t\t<ReadStream|WriteStream>\tbinary stream that I read from or write to",				"",				"Subclasses must implement the following messages:",				"\taccessing",				"\t\tnextImage",				"\t\tnextPutImage:",				"\ttesting",				"\t\tcanUnderstand         (or my class side's #understandsImageFormat:)",				"\t\t\t",				"(original) copyright (c) Kazuki Yasumatsu, 1995. All rights reserved."			],			"category" : "Graphics-Files"		},		"SourceFileCharacterReadWriteStream" : {			"hash" : 1142528,			"definition" : "Object << #SourceFileCharacterReadWriteStream\r\tslots: { #readStream . #writeStream };\r\ttag: 'Streams';\r\tpackage: 'System-Sources'",			"comment" : [				"I am a read-write character stream. I am mainly used to open the Pharo source and changes files."			],			"category" : "System-Sources-Streams"		},		"StAbstractStringFilter" : {			"hash" : 5644288,			"definition" : "StIteratorDecorator << #StAbstractStringFilter\r\tslots: { #returnedIndex . #originalUnwrapped . #results . #filteringText };\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I implement an abstract string based filter.",				"My users can update the filteringText using the message #filteringText:",				"When a new filtering is done I can handle the update of the filtering strategy and also I keep a list of already returned values so on a reset the filter is reapply to them, without reseting the inner iterator.",				"If the filter requires a full reset, I reset myself and the inner one.",				"",				"My subclasses implements #criterium: to change how the strings are compared."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"RBScanner" : {			"hash" : 1148928,			"definition" : "Object << #RBScanner\r\tslots: { #stream . #buffer . #tokenStart . #currentCharacter . #characterType . #classificationTable . #comments . #errorBlock };\r\tsharedVariables: { #PatternVariableCharacter . #KeywordPatternCharacter . #CascadePatternCharacter };\r\ttag: 'Parser';\r\tpackage: 'AST-Core'",			"comment" : [				"RBScanner is a stream that returns a sequence of tokens from the string. The tokens know where they came from in the source code and which comments were attached to them.",				"",				"Instance Variables:",				"\tbuffer\t<PositionableStream>\tAccumulates the text for the current token.",				"\tcharacterType\t<ByteSymbol>\tThe type of the next character. (e.g. #alphabetic, etc.)",				"\tclassificationTable\t<Array of: Symbol>\tMapping from Character values to their characterType.",				"\tcomments\t<Collection of: Interval>\tSource intervals of scanned comments that must be attached to the next token.",				"\tcurrentCharacter\t<Character>\tThe character currently being processed.",				"\terrorBlock\t<BlockClosure>\tThe block to execute on lexical errors.",				"\textendedLiterals\t<Boolean>\tTrue if IBM-type literals are allowed. In VW, this is false.",				"\tnameSpaceCharacter\t<Character>\tThe character used to separate namespaces.",				"\tnumberType\t<ByteSymbol>\tThe method to perform: to scan a number. ",				"\tseparatorsInLiterals\t<Boolean>\tTrue if separators are allowed within literals.",				"\tstream\t<PositionableStream>\tContains the text to be scanned.",				"\ttokenStart\t<Integer>\tThe source position of the beginning of the current token",				"",				"Class Instance Variables:",				"\tclassificationTable\t<Array>\t\tthe default classification table for all characters",				"",				"Shared Variables:",				"\tPatternVariableCharacter\t<Character>\tthe character that starts a pattern node"			],			"category" : "AST-Core-Parser"		},		"NullStream" : {			"hash" : 1075712,			"definition" : "Stream << #NullStream\r\tslots: { #binary . #position . #lastElement };\r\ttag: 'Base';\r\tpackage: 'Collections-Streams'",			"comment" : [				"I am a stream that does nothing i.e. generates and consumes an infinite number of elements (NullObject pattern). I can be used as an equivalent of /dev/null (for example ",				"a logging in off mode) or for performance benchmarks."			],			"category" : "Collections-Streams-Base"		},		"StIteratorDecorator" : {			"hash" : 5643776,			"definition" : "StIterator << #StIteratorDecorator\r\tslots: { #inner };\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I implement an abstract decorator for the implementors.",				"I have an iterator in the inner instance variable and all the messages are redirected to it. ",				"My subclasses can override the required behaviour."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"SharedRandom" : {			"hash" : 1129728,			"definition" : "Random << #SharedRandom\r\tslots: { #mutex };\r\ttag: 'Base';\r\tpackage: 'Random-Core'",			"comment" : [				"I represent a Random number generator that can be shaded between different code.",				"",				"I wrap the access to my parent's functionality (#next, #nextInt: and #next:into:)  through a mutex making me safe for multi threaded use.",				"",				"To access the default shared random number generator, do:",				"",				"\tSharedRandom globalGenerator.",				"\t",				"In principle it is better to use a shared generator since multiple users will create a more random pattern."			],			"category" : "Random-Core-Base"		},		"ExternalData" : {			"hash" : 958720,			"definition" : "ExternalStructure << #ExternalData\r\tslots: { #type };\r\tpackage: 'FFI-Kernel'",			"comment" : [				"Instances of ExternalData explicitly describe objects with associated type. They can be used for describing atomic C types like arrays of atomic types (e.g., 'int[]') or pointer to atomic types (e.g., 'int *').",				"",				"Instance variables:",				"\ttype\t<Integer | Behavior>\tThe basic type of the receiver.",				"",				"The encoding of type is equivalent to that of the basic type in class ExternalType. The interpretation of whether the receiver describes an array of data or a pointer to data depends on the contents of the instance variable 'handle'. If handle contains an ExternalAddress the receiver is treated as pointer to type. If the handle contains a ByteArray the receiver is interpreted as describing an array of type. Note that both interpretations are treated equivalent in external calls, e.g., if one describes an argument to an external call as taking 'int*' then, depending on the type of handle either the actual contents (if ExternalAddress) or a pointer to the contents (if ByteArray) is passed.",				""			],			"category" : "FFI-Kernel"		},		"StSequenceIterator" : {			"hash" : 5649408,			"definition" : "StIterator << #StSequenceIterator\r\tslots: { #iterators };\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I am sequence iterator, I will take all the iterators I have in myself and then I will go over the elements of them.",				"I iterate first all elements from the first one, and then the elements of the second one, and so on."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"WeakAnnouncementSubscription" : {			"hash" : 1175552,			"definition" : "Object << #WeakAnnouncementSubscription\r\tlayout: WeakLayout;\r\tslots: { #list . #next . #announcer . #announcementClass . #action };\r\tsharedVariables: { #FinalizationList };\r\ttag: 'Subscription';\r\tpackage: 'Announcements-Core'",			"comment" : [				"A WeakAnnouncementSubscription is a subscription which is removed automatically when the subscriber is unreferenced.",				"",				"No support for ephemerons currently prevents this from working for Block actions (blocks hold their receiver, which is the default subscriber strongly). ",				"",				"To switch between subscription types, use makeStrong/makeWeak on the subscription returned when initially registering with announcer.",				"",				"",				"Note, that list and next must be first instance variables."			],			"category" : "Announcements-Core-Subscription"		},		"LGitId" : {			"hash" : 2134784,			"definition" : "LGitExternalStructure << #LGitId\r\tslots: {};\r\tsharedVariables: { #OFFSET_PRIM_ID . #Byte20 };\r\ttag: 'CoreObjects';\r\tpackage: 'LibGit-Core'",			"comment" : [				"I'm an unique identity of any object (commit, tree, blob, tag).",				"",				"https://libgit2.github.com/libgit2/#HEAD/type/git_oid",				"",				"NOTE: This might be replaces by an FFITypeArray in the future."			],			"category" : "LibGit-Core-CoreObjects"		},		"MCScanner" : {			"hash" : 291072,			"definition" : "Object << #MCScanner\r\tslots: { #stream };\r\ttag: 'Chunk Format';\r\tpackage: 'Monticello'",			"comment" : [				"I scan / tokenize metadata  (package name, version info, ancestry, dependencies, ...) found in .mcz files.",				"",				"For example, try:",				"",				"MCScanner scan:  '(name ''MyPackage-ll.6'' message ''Fix bug xxx'' id ''b21dbd73-f1c3-2746-a3cc-92f1d4edea28'')' readStream"			],			"category" : "Monticello-Chunk Format"		},		"RandomGaussian" : {			"hash" : 2538240,			"definition" : "Random << #RandomGaussian\r\tslots: { #mu . #sigma . #densityMultiplier . #magic };\r\ttag: 'Random';\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Uses Kinderman and Monahan method. Reference: Kinderman, A.J. and Monahan, J.F., ",				"\"\"Computer generation of random variables using the ratio of uniform deviates\"\", ",				"ACM Trans Math Software, 3, (1977), pp257-260."			],			"category" : "Containers-Essentials-Random"		},		"RxmLink" : {			"hash" : 1438464,			"definition" : "Object << #RxmLink\r\tslots: { #next };\r\ttag: 'Links';\r\tpackage: 'Regex-Core'",			"comment" : [				"-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov",				"--",				"A matcher is built of a number of links interconnected into some intricate structure. Regardless of fancy stuff, any link (except for the terminator) has the next one. Any link can match against a stream of characters, recursively propagating the match to the next link. Any link supports a number of matcher-building messages. This superclass does all of the above. ",				"",				"The class is not necessarily abstract. It may double as an empty string matcher: it recursively propagates the match to the next link, thus always matching nothing successfully.",				"",				"Principal method:",				"\tmatchAgainst: aMatcher",				"\t\tAny subclass will reimplement this to test the state of the matcher, most",				"\t\tprobably reading one or more characters from the matcher's stream, and",				"\t\teither decide it has matched and answer true, leaving matcher stream",				"\t\tpositioned at the end of match, or answer false and restore the matcher",				"\t\tstream position to whatever it was before the matching attempt.",				"",				"Instance variables:",				"\tnext\t\t<RxmLink | RxmTerminator> The next link in the structure."			],			"category" : "Regex-Core-Links"		},		"ReadWriteStream" : {			"hash" : 1107456,			"definition" : "WriteStream << #ReadWriteStream\r\tslots: {};\r\ttag: 'Base';\r\tpackage: 'Collections-Streams'",			"comment" : [				"I represent an accessor for a sequence of objects. My instances can both read and store objects."			],			"category" : "Collections-Streams-Base"		},		"AthensPathSegment" : {			"hash" : 3168256,			"definition" : "Object << #AthensPathSegment\r\tslots: { #next };\r\ttag: 'Paths';\r\tpackage: 'Athens-Core'",			"comment" : [				"The path segment is path building block.",				"Path is formed from list of connected path segments. At building stage, there is no container nor separately defined \"path\" object, just a linked list of segments.",				"Later the segments are accumulated in backend-specific path object, and the way how it is organized may vary.",				"",				"My (sub)instances usually are not created directly by user, but instead by instance",				"of AthensPathBuilder.",				"Therefore, all my subclasses are considered private and implementation detail."			],			"category" : "Athens-Core-Paths"		},		"HelpBrowser" : {			"hash" : 1806336,			"definition" : "Model << #HelpBrowser\r\tslots: { #rootTopic . #window . #treeMorph . #helpTopicCache . #sourceTextModel };\r\tsharedVariables: { #DefaultHelpBrowser };\r\ttag: 'UI';\r\tpackage: 'HelpSystem-Core'",			"comment" : [				"A HelpBrowser is used to display a hierarchy of help topics and their contents.",				"",				"Instance Variables",				"\trootTopic: \t\t<HelpTopic>",				"\twindow:\t\t\t<StandardWindow>\t ",				"\ttreeMorph:\t\t<PluggableTreeMorph>",				"\tcontentMorph:\t\t<Morph>\t\t\t",				"",				"rootTopic",				"\t- xxxxx",				"",				"window",				"\t- xxxxx",				"",				"treeMorph ",				"\t- xxxxx",				"",				"contentMorph ",				"\t- xxxxx",				""			],			"category" : "HelpSystem-Core-UI"		},		"RandomBoxMullerBivariateGaussian" : {			"hash" : 2537216,			"definition" : "Random << #RandomBoxMullerBivariateGaussian\r\tslots: {};\r\ttag: 'Random';\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Box–Muller transform, see https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform"			],			"category" : "Containers-Essentials-Random"		},		"StWithoutDuplicatesDecorator" : {			"hash" : 5647872,			"definition" : "StIteratorDecorator << #StWithoutDuplicatesDecorator\r\tslots: { #uniqueResults };\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I implement a decorator for the iterators. ",				"I don't allow duplicates to be returned. For doing so, I have a collection of the already returned values, so I can filter duplicates."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"ZnEncodedReadStream" : {			"hash" : 1202688,			"definition" : "ZnEncodedStream << #ZnEncodedReadStream\r\tslots: { #peeked };\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnEncodedReadStream, an abstract support class for read streams on a binary encoded wrapped stream.",				"",				"Part of Zinc HTTP Components"			],			"category" : "Zinc-Character-Encoding-Core"		},		"StIterator" : {			"hash" : 5639680,			"definition" : "Object << #StIterator\r\tslots: { #onReset };\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I represent an abstract Iterator.",				"My subclasses should implement #next, #doReset, and #atEnd.",				"",				"I implement some construction messages to ease the construction of chains of iterators.",				"",				"#, allows to create sequence of iterators, the results are from the first one, then from the second one and so on. ",				"",				"#asBeginsWithFilter",				"Creates an iterator that allows to filter by a string, comparing with beginsWith:, with an starting filter of ''.",				"#beginsWithFilter: aString",				"Create an iterator that allows to filter by a string, comparing with beginsWith:, with an starting filter of aString.",				"",				"#asSubStringFilter",				"Creates an iterator that allows to filter by a string, comparing with substring:, with an starting filter of ''.",				"",				"#substringFilter: aString",				"Create an iterator that allows to filter by a string, comparing with substring:, with an starting filter of aString.",				"",				"#asWithoutDuplicates ",				"Creates an itearator that returns no duplicates."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"OCArrayLiteralTest" : {			"hash" : 3979520,			"definition" : "TestCase << #OCArrayLiteralTest\r\tslots: {};\r\ttag: 'FromOld';\r\tpackage: 'OpalCompiler-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "OpalCompiler-Tests-FromOld"		},		"InflateStream" : {			"hash" : 1337856,			"definition" : "ReadStream << #InflateStream\r\tslots: {\r\t\t\t #state .\r\t\t\t #bitBuf .\r\t\t\t #bitPos .\r\t\t\t #source .\r\t\t\t #sourcePos .\r\t\t\t #sourceLimit .\r\t\t\t #litTable .\r\t\t\t #distTable .\r\t\t\t #sourceStream .\r\t\t\t #crc };\r\tsharedVariables: { #FixedDistCodes . #FixedLitCodes . #StateNoMoreData . #MaxBits . #StateNewBlock . #BlockTypes . #BlockProceedBit };\r\ttag: 'Streams';\r\tpackage: 'Compression'",			"comment" : [				"This class implements the Inflate decompression algorithm as defined by RFC1951 and used in PKZip, GZip and ZLib (and many, many more). It is a variant of the LZ77 compression algorithm described in",				"",				"[LZ77] Ziv J., Lempel A., \"A Universal Algorithm for Sequential Data Compression\", IEEE Transactions on Information Theory\", Vol. 23, No. 3, pp. 337-343.",				"",				"[RFC1951] Deutsch. P, \"DEFLATE Compressed Data Format Specification version 1.3\"",				"",				"For more information see the above mentioned RFC 1951 which can for instance be found at",				"",				"\thttp://www.leo.org/pub/comp/doc/standards/rfc/index.html",				"",				"Huffman Tree Implementation Notes:",				"===========================================",				"The huffman tree used for decoding literal, distance and length codes in the inflate algorithm has been encoded in a single Array. The tree is made up of subsequent tables storing all entries at the current bit depth. Each entry in the table (e.g., a 32bit Integer value) is either a leaf or a non-leaf node. Leaf nodes store the immediate value in its low 16 bits whereas non-leaf nodes store the offset of the subtable in its low 16bits. The high 8 bits of non-leaf nodes contain the number of additional bits needed for the sub table (the high 8 bits of leaf-nodes are always zero). The first entry in each table is always a non-leaf node indicating how many bits we need to fetch initially. We can thus travel down the tree as follows (written in sort-of-pseudocode the actual implementation can be seen in InflateStream>>decodeValueFrom:):",				"",				"\ttable := initialTable.",				"\tbitsNeeded := high 8 bits of (table at: 1).\t\t\"Determine initial bits\"",				"\ttable := initialTable + (low 16 bits of (table at: 1)). \"Determine start of first real table\"",				"\t[bits := fetch next bitsNeeded bits.\t\t\t\"Grab the bits\"",				"\tvalue := table at: bits.\t\t\t\t\t\t\"Lookup the value\"",				"\tvalue has high 8 bit set] whileTrue:[\t\t\"Check if it's leaf\"",				"\t\ttable := initialTable + (low 16 bits of value).\t\"No - compute new sub table start\"",				"\t\tbitsNeeded := high 8 bit of value].\t\t\"Compute additional number of bits needed\"",				"\t^value"			],			"category" : "Compression-Streams"		},		"SDL_PixelFormat" : {			"hash" : 4323072,			"definition" : "SDL2Structure << #SDL_PixelFormat\r\tslots: {};\r\tsharedVariables: { #OFFSET_FORMAT . #OFFSET_PALETTE . #OFFSET_RMASK . #OFFSET_RSHIFT . #OFFSET_GLOSS . #OFFSET_BITSPERPIXEL . #OFFSET_ALOSS . #OFFSET_GMASK . #OFFSET_NEXT . #OFFSET_BLOSS . #OFFSET_BSHIFT . #OFFSET_AMASK . #OFFSET_BMASK . #OFFSET_PAD1 . #OFFSET_BYTESPERPIXEL . #OFFSET_REFCOUNT . #OFFSET_ASHIFT . #OFFSET_RLOSS . #OFFSET_PAD2 . #OFFSET_GSHIFT };\r\ttag: 'Bindings';\r\tpackage: 'OSWindow-SDL2'",			"comment" : [				"SDL2 library structure"			],			"category" : "OSWindow-SDL2-Bindings"		},		"AtomicSharedQueue" : {			"hash" : 1094656,			"definition" : "WaitfreeQueue << #AtomicSharedQueue\r\tslots: { #availSema };\r\ttag: 'Base';\r\tpackage: 'Collections-Atomic'",			"comment" : [				"I am using semaphore to signal/wait for new items available in queue",				"",				"I am introducing extra protocol - #next, which blocks the sender until ",				"it can successfully fetch next item from queue."			],			"category" : "Collections-Atomic-Base"		},		"SkewBinaryCanonicalNumber" : {			"hash" : 2533120,			"definition" : "Object << #SkewBinaryCanonicalNumber\r\tslots: { #representation };\r\ttag: 'Numbers';\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\trepresentation:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Numbers"		},		"IceGitHubAPIPaginatedResult" : {			"hash" : 6519552,			"definition" : "Object << #IceGitHubAPIPaginatedResult\r\tslots: { #api . #request . #result . #nextPage };\r\ttag: 'Model';\r\tpackage: 'Iceberg-Plugin-GitHub'",			"comment" : [				"I'm a paginated answer from github (he sends results in pages and includes information in headers)"			],			"category" : "Iceberg-Plugin-GitHub-Model"		},		"Number" : {			"hash" : 873472,			"definition" : "Magnitude << #Number\r\tslots: {};\r\ttag: 'Numbers';\r\tpackage: 'Kernel'",			"comment" : [				"Class Number holds the most general methods for dealing with numbers. Subclasses Float, Fraction, and Integer, and their subclasses, provide concrete representations of a numeric quantity.",				"",				"All of Number's subclasses participate in a simple type coercion mechanism that supports mixed-mode arithmetic and comparisons.  It works as follows:  If",				"\tself<typeA> op: arg<typeB>",				"fails because of incompatible types, then it is retried in the following guise:",				"\t(arg adaptTypeA: self) op: arg adaptToTypeA.",				"This gives the arg of typeB an opportunity to resolve the incompatibility, knowing exactly what two types are involved.  If self is more general, then arg will be converted, and viceVersa.  This mechanism is extensible to any new number classes that one might wish to add to Pharo.  The only requirement is that every subclass of Number must support a pair of conversion methods specific to each of the other subclasses of Number.",				"",				"Implementation notes",				"----------------------------------",				"The implementation of #degreeCos and #degreeSin is such that results are exact for any multiple of 90.",				"",				"Care is also taken to evaluate the sine between -90° and 90°, this will avoid #degreesToRadians and i386 FPU sine function to accumulate round off errors due to approximate representation of pi.",				"We can thus evaluate 240 degreeCos with at most 1 ulp error. It's not perfect, but better than previous implementation.",				"",				"For cosine, we know that:",				"\tcosd(x)=cosd(abs(x))",				"\tcosd(x)=sind(90-x)",				"thus the trick is to evaluate:",				"\tcosd(x)=sind(90-abs(x)) after appropriate modulo in [-180,180[",				"This way, we are sure to evaluate the sine between -90° and 90°",				"The #degreesToRadians and #sin are used rather than #degreeSin to avoid cycles.",				"",				"For sine, it would be necessary to evaluate either",				"sind(x) if abs(x) <=90",				"or sind(180-x) if abs(x) >= 90",				"A possible implementation would be:",				"\t| x |",				"\tx := 90 + self \\\\ 360 - 90.",				"\tx >= 180 ifTrue: [x := 180 - x].",				"\t^x degreesToRadians sin",				"We prefer evaluating cosd(90-x) thus providing a branch free implementation."			],			"category" : "Kernel-Numbers"		},		"False" : {			"hash" : 787712,			"definition" : "Boolean << #False\r\tslots: {};\r\ttag: 'Objects';\r\tpackage: 'Kernel'",			"comment" : [				"False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.",				"",				"Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."			],			"category" : "Kernel-Objects"		},		"RxMatcher" : {			"hash" : 1437440,			"definition" : "Object << #RxMatcher\r\tslots: { #matcher . #ignoreCase . #startOptimizer . #stream . #markerPositions . #markerCount . #lastResult };\r\tsharedVariables: { #Lf . #Cr };\r\ttag: 'Base';\r\tpackage: 'Regex-Core'",			"comment" : [				"-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov",				"--",				"This is a recursive regex matcher. Not strikingly efficient, but simple. Also, keeps track of matched subexpressions.  The life cycle goes as follows:",				"",				"1. Initialization. Accepts a syntax tree (presumably produced by RxParser) and compiles it into a matcher built of other classes in this category.",				"",				"2. Matching. Accepts a stream or a string and returns a boolean indicating whether the whole stream or its prefix -- depending on the message sent -- matches the regex.",				"",				"3. Subexpression query. After a successful match, and before any other match, the matcher may be queried about the range of specific stream (string) positions that matched to certain parenthesized subexpressions of the original expression.",				"",				"Any number of queries may follow a successful match, and any number or matches may follow a successful initialization.",				"",				"Note that `matcher' is actually a sort of a misnomer. The actual matcher is a web of Rxm* instances built by RxMatcher during initialization. RxMatcher is just the interface facade of this network.  It is also a builder of it, and also provides a stream-like protocol to easily access the stream being matched.",				"",				"Instance variables:",				"\tmatcher\t\t\t\t<RxmLink> The entry point into the actual matcher.",				"\tstream\t\t\t\t<Stream> The stream currently being matched against.",				"\tmarkerPositions\t\t<Array of: Integer> Positions of markers' matches.",				"\tmarkerCount\t\t<Integer> Number of markers.",				"\tlastResult \t\t\t<Boolean> Whether the latest match attempt succeeded or not.",				"\tlastChar\t\t\t<Character | nil> character last seen in the matcher stream"			],			"category" : "Regex-Core-Base"		},		"MCDataStream" : {			"hash" : 1355264,			"definition" : "Stream << #MCDataStream\r\tslots: { #byteStream . #topCall . #basePos };\r\tsharedVariables: { #WriteSelectors . #TypeMap . #ReadSelectors };\r\ttag: 'Storing';\r\tpackage: 'Monticello'",			"comment" : [				"This is the save-to-disk facility. A DataStream can store one or more objects in a persistent form.",				"",				"To handle objects with sharing and cycles, you must use a",				"ReferenceStream instead of a DataStream.  (Or SmartRefStream.)  ReferenceStream is typically",				"faster and produces smaller files because it doesn't repeatedly write the same Symbols.",				"",				"Here is the way to use DataStream and ReferenceStream:",				"\trr := ReferenceStream fileNamed: 'test.obj'.",				"\trr nextPut: <your object>.",				"\trr close.",				"",				"To get it back:",				"\trr := ReferenceStream fileNamed: 'test.obj'.",				"\t<your object> := rr next.",				"\trr close.",				"",				"Each object to be stored has two opportunities to control what gets stored.  On the high level, objectToStoreOnDataStream allows you to substitute another object on the way out.  The low level hook is storeDataOn:. The read-in counterparts to these messages are comeFullyUpOnReload and (class) readDataFrom:size:. See these methods for more information about externalizing and internalizing.",				"",				"NOTE: A DataStream should be treated as a write-stream for writing.  It is a read-stream for reading.  It is not a ReadWriteStream."			],			"category" : "Monticello-Storing"		},		"ZnLimitedReadStream" : {			"hash" : 1404160,			"definition" : "Stream << #ZnLimitedReadStream\r\tslots: { #stream . #position . #limit . #binary };\r\ttag: 'Streaming';\r\tpackage: 'Zinc-HTTP'",			"comment" : [				"I am ZnLimitedReadStream, wrapping another read stream delegating to it ",				"but limiting reading to a fixed number of elements.",				"",				"I can be atEnd while my wrapped stream is not.",				"",				"My contentSpecies can be forced to be ByteArray (binary) or ByteString (ascii).",				"",				"I do byte/char conversions on the fly (support bivalent access).",				"",				"This implementation is really a kludge.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Streaming"		},		"ThirtyTwoBitRegister" : {			"hash" : 1154304,			"definition" : "Object << #ThirtyTwoBitRegister\r\tslots: { #hi . #low };\r\ttag: 'Core';\r\tpackage: 'System-Hashing'",			"comment" : [				"I represent a 32-bit register. An instance of me can hold any non-negative integer in the range [0..(2^32 - 1)]. Operations are performed on my contents in place, like a hardware register, and results are always modulo 2^32.",				"",				"This class is primarily meant for use by the SecureHashAlgorithm class."			],			"category" : "System-Hashing-Core"		},		"RandomExponential" : {			"hash" : 2537728,			"definition" : "Random << #RandomExponential\r\tslots: { #lambda };\r\ttag: 'Random';\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tlambda:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Random"		},		"StFilter" : {			"hash" : 5646848,			"definition" : "StIteratorBlockDecorator << #StFilter\r\tslots: {};\r\ttag: 'Iterators';\r\tpackage: 'NewTools-Spotter-Processors'",			"comment" : [				"I implement the select: operation on the iterator.",				"I apply the block and filter the elements returned by myself."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"NavigationHistory" : {			"hash" : 598784,			"definition" : "Object << #NavigationHistory\r\tslots: { #storage . #index . #maxSize . #paused };\r\ttag: 'Utilities';\r\tpackage: 'Tool-Base'",			"comment" : [				"I act as a web browser history"			],			"category" : "Tool-Base-Utilities"		},		"Timespan" : {			"hash" : 922112,			"definition" : "Magnitude << #Timespan\r\tslots: { #start . #duration };\r\ttag: 'Chronology';\r\tpackage: 'Kernel'",			"comment" : [				"I represent a duration starting on a specific DateAndTime."			],			"category" : "Kernel-Chronology"		},		"RubParagraph" : {			"hash" : 613632,			"definition" : "Object << #RubParagraph\r\tslots: { #text . #composer . #container . #drawingEnabled . #textArea };\r\ttag: 'Editing-Core';\r\tpackage: 'Rubric'",			"comment" : [				"I represent a paragraph of a text area"			],			"category" : "Rubric-Editing-Core"		},		"Generator" : {			"hash" : 972288,			"definition" : "Stream << #Generator\r\tslots: { #block . #next . #continue . #home };\r\ttag: 'Base';\r\tpackage: 'Collections-Streams'",			"comment" : [				"A `Generator` transforms callback interfaces into stream interfaces. ",				"",				"The `Generator` class was originally written by Paolo Bonzini and inspired from functional programming languages.",				"",				"With basic iterators, you specify an action to be perform to elements of a collection or stream but you do not control when computation pass from one element to the next one. In addition you cannot perform a lazzy computation on potentially infinite stream of objects. ",				"",				"Generators offer a nice solution to such problem. Generators provide a way to use blocks to define a stream of values. The return values are computed one at a time, as needed, and hence need not even be finite. ",				"",				"A generator needs a block and will make sure that the block is executed once at a time and that the block has the control to decide when to yield computation. A generator offers an API that is compatible with the one of stream since it act as a stream of objects. ",				"",				"A generator should be instantiated using the expression `Generator on: [...]`. ",				"The following code creates an infinite streams of 1. ",				"",				"```",				"| g | ",				"g := Generator on: [ :gen | [ gen yield: 1 ] repeat ].",				"g next",				"> 1",				"g next ",				"> 1",				"```",				"",				"### Behavior ",				"",				"The generator itself is passed to the block, and as soon as a message like `next`, `peek`, `atEnd` or `peekFor:` is sent to the generator, execution of the block starts/resumes and goes on until the generator's `yield:` method is called: then the argument of `yield:` will be the generator's next element. ",				"",				"If the block goes on to the end without calling `yield:`, the generator will produce no more elements and `atEnd` will return true.",				"",				"",				"A generator is a quick way to create a stream of objects. A generator is a kind of pluggable stream, in that a user-supplied blocks defines which values are in a stream.",				"",				"For example, here is an empty generator and two infinite generators:",				"",				"```",				"Generator on: [ :gen | ]",				"Generator on: [ :gen | [ gen yield: 1 ] repeat ]",				"```",				"",				"As a more concrete example taken from GNU Smalltalk implementation, these lines process a file and create Person objects out of the file:",				"",				"```",				"lines := file lines.",				"lines := lines select: [ :line | line ~ '^[A-Za-z]+ [0-9]+$' ].",				"fields := lines collect: [ :line | line subStrings ].",				"people := fields collect: [ :data |",				"            Person name: data first age: data second asInteger ].",				"```",				"Let's see how to rewrite them to use a single Generator instead:",				"",				"```",				"Generator on: [ :gen |",				"    file linesDo: [ :line || data |",				"        line ~ '^[A-Za-z]+ [0-9]+$' ifTrue: [",				"            data := line subStrings.",				"            gen yield: (Person name: data first age: data second asInteger) ] ] ].",				"```",				"As you can see, `select:` becomes an if-statement, and the value from the final stream is yielded to the user of the generator.",				"Generators use continuations, but they shield the users from their complexity by presenting the ",				"same simple interface as streams.",				"",				"",				"### Instance Variables",				"",				"- block:\t\t<BlockClosure> The block associated with the generator.",				"- continue:\t<MethodContext>\tThe continuation to return to.",				"- home:\t\t<MethodContext>\tThe home (root) context of the activated block",				"- next:\t\t<Object>\t\tThe next object to return from the Generator."			],			"category" : "Collections-Streams-Base"		},		"ProfStef" : {			"hash" : 3323392,			"definition" : "Model << #ProfStef\r\tslots: { #lessonView . #player };\r\tsharedVariables: { #Instance };\r\tpackage: 'ProfStef-Core'",			"comment" : [				"ProfStef is the Pharo teacher. To start the tutorial, evaluate:",				"",				"[[[ ",				"ProfStef go.",				"]]]",				"To go to the next lesson evaluate:",				"",				"[[[",				"ProfStef next.",				"]]]",				"",				"To execute your own tutorial:",				"[[[",				"ProfStef goOn: MyOwnTutorial",				"]]]",				"",				"MyOwnTutorial should be a subclass of AbstractTutorial.",				"",				"To see a table of contents with all defined tutorials:",				"",				"[[[",				"ProfStef contents ",				"",				"Metacello Configuration Tutorial Part1",				"\tProfStef goOn: MetacelloConfigurationTutorialPart1",				"",				"Metacello Configuration Tutorial Part2",				"\tProfStef goOn: MetacelloConfigurationTutorialPart2",				"",				"Metacello Development Cycle",				"\tProfStef goOn: MetacelloDevelopmentProcess",				"",				"Inside Metacello Toolbox API",				"\tProfStef goOn: MetacelloToolBoxTutorial",				"",				"Pharo Syntax Tutorial",				"\tProfStef goOn: PharoSyntaxTutorial",				"",				"'",				"]]]",				"",				"Metacello Configuration Tutorial Part1",				"\tProfStef goOn: MetacelloConfigurationTutorialPart1",				"",				"Metacello Configuration Tutorial Part2",				"\tProfStef goOn: MetacelloConfigurationTutorialPart2",				"",				"Metacello Development Cycle",				"\tProfStef goOn: MetacelloDevelopmentProcess",				"",				"Inside Metacello Toolbox API",				"\tPharoTutorial goOn: MetacelloToolBoxTutorial",				"",				"Pharo Syntax Tutorial",				"\tProfStef goOn: PharoSyntaxTutorial",				"'",				"]]]",				"",				"ProfStef is interacting with a tutorial player (which encapsulate the logic of navigating within lessons) and lessonView (a dead simple little UI).",				""			],			"category" : "ProfStef-Core"		},		"MWVisualizationsTest" : {			"hash" : 2766080,			"definition" : "TestCase << #MWVisualizationsTest\r\ttraits: {TIceImagesExporting};\r\tslots: {};\r\tpackage: 'MethodWrappers-Tests-Visualizations'",			"comment" : [				"This class contains tests"			],			"category" : "MethodWrappers-Tests-Visualizations"		},		"CoFetcher" : {			"hash" : 5472768,			"definition" : "Object << #CoFetcher\r\tslots: { #generator . #filter };\r\ttag: 'Core';\r\tpackage: 'HeuristicCompletion-Model'",			"comment" : [				"I'm a kind of iterator (in the sense of GoF) that goes one by one over \"a stream\" of entities that can be consumed by the completion engine within a completion context.",				"",				"I provide access to the elements I return one by one (using the next message) in a controlled manner. ",				"At the root, I define the architecture to yield one entry at a time. ",				"The next method invokes the hook method #entriesDo: with a generator yielding capability.",				"This way any use of #next will be done step by step. ",				"",				"My subclasses implement the following method entriesDo: aBlock which defines the semantics of element fetching",				"Here is a simple example where a generic fetcher is used on a collection, and wrapped by a fetcher that avoids returning duplicate elements.",				"",				"[[[",				"fetcher := AvoidRepeatedComplishonFetcher new",				"\tcomplishonFetcher: (GenericComplishonFetcher onCollection: #( a b b a c )).",				"]]]",				"\t",				"Here are two examples of definition",				"",				"[[[",				"AvoidRepeatedComplishonFecther >> entriesDo: aBlock",				"\tdecoree",				"\t\tentriesDo: [ :elem | ",				"\t\t\t(self hasAlreadyReturned: elem)",				"\t\t\t\tifFalse: [ elements add: elem.",				"\t\t\t\t\taBlock value: elem ] ]",				"]]]",				"",				"[[[",				"GenericComplishonFetcher >> entriesDo: aBlock",				"",				"\tcollection do: aBlock",				"]]]",				"",				"",				"",				"\t"			],			"category" : "HeuristicCompletion-Model-Core"		},		"WriteStream" : {			"hash" : 820992,			"definition" : "PositionableStream << #WriteStream\r\tslots: { #writeLimit };\r\ttag: 'Base';\r\tpackage: 'Collections-Streams'",			"comment" : [				"I represent an accessor for a sequence of objects that can only store objects in the sequence."			],			"category" : "Collections-Streams-Base"		},		"RandomGeometric" : {			"hash" : 2536704,			"definition" : "RandomBernoulli << #RandomGeometric\r\tslots: {};\r\ttag: 'Random';\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Random"		},		"LIFOQueue" : {			"hash" : 1093888,			"definition" : "AtomicCollection << #LIFOQueue\r\tslots: { #head };\r\ttag: 'Base';\r\tpackage: 'Collections-Atomic'",			"comment" : [				"This is a thread-safe LIFO (last-in-first-out) queue (also known as stack) implementation,",				"based on atomic operations."			],			"category" : "Collections-Atomic-Base"		}	},	"messages" : {		"testInspectCatalanArray" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectCatalanArray",						"",						"\t^ self exportSlotsGraphOf: (Array2D catalan: 1 << 4)"					],					"body" : [						"^ self exportSlotsGraphOf: (Array2D catalan: 1 << 4)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169395,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectDatetimeNow" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectDatetimeNow",						"",						"\t^ self exportSlotsGraphOf: DateAndTime now"					],					"body" : [						"^ self exportSlotsGraphOf: DateAndTime now"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169078,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testGaussian" : {			"implementors" : {				"RandomTestDistributions" : {					"sourceCode" : [						"testGaussian",						"",						"\t| gen |",						"\tgen := RandomGaussian seed: 13.",						"",						"\tself exportSlotsGraphOf: gen.",						"",						"\tself",						"\t\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\t\tequals: self expectedValue_testGaussian"					],					"body" : [						"| gen |",						"gen := RandomGaussian seed: 13.",						"",						"self exportSlotsGraphOf: gen.",						"",						"self",						"\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\tequals: self expectedValue_testGaussian"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 3432791,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspect20LucasNumbers" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect20LucasNumbers",						"",						"\t| lucas |",						"\tlucas := 20 lucasNumbers.",						"",						"\tself",						"\t\tassert: -3 lucasNumbers equals: #(  );",						"\t\tassert: 0 lucasNumbers equals: #(  );",						"\t\tassert: 1 lucasNumbers equals: #( 2 );",						"\t\tassert: 2 lucasNumbers equals: #( 2 1 );",						"\t\tassert: lucas",						"\t\tequals:",						"\t\t\t#( 2 1 3 4 7 11 18 29 47 76 123 199 322 521 843 1364 2207 3571 5778",						"\t\t\t   9349 ).",						"",						"\t^ self exportSlotsGraphOf: lucas"					],					"body" : [						"| lucas |",						"lucas := 20 lucasNumbers.",						"",						"self",						"\tassert: -3 lucasNumbers equals: #(  );",						"\tassert: 0 lucasNumbers equals: #(  );",						"\tassert: 1 lucasNumbers equals: #( 2 );",						"\tassert: 2 lucasNumbers equals: #( 2 1 );",						"\tassert: lucas",						"\tequals:",						"\t\t#( 2 1 3 4 7 11 18 29 47 76 123 199 322 521 843 1364 2207 3571 5778",						"\t\t   9349 ).",						"",						"^ self exportSlotsGraphOf: lucas"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3434974,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testByteArrayLoremIpsum" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testByteArrayLoremIpsum",						"",						"\t^ self exportSlotsGraphOf: (String loremIpsum: 50) asByteArray"					],					"body" : [						"^ self exportSlotsGraphOf: (String loremIpsum: 50) asByteArray"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169297,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectBag" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectBag",						"",						"\t^ self exportSlotsGraphOf: (Bag withAll: String loremIpsum)"					],					"body" : [						"^ self exportSlotsGraphOf: (Bag withAll: String loremIpsum)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169281,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspect10GoldenRectanglesNested" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect10GoldenRectanglesNested",						"",						"\t| rectangles |",						"\trectangles := self testInspect10GoldenRectangles foldr1: [ :each :aBox | ",						"\t\t              aBox rotateByRadians: Float pi half negated.",						"\t\t              RSLocation new left stick: aBox on: each.",						"\t\t              RSComposite new",						"\t\t\t              shapes: { ",						"\t\t\t\t\t              each.",						"\t\t\t\t\t              aBox };",						"\t\t\t              yourself ].",						"",						"\t^ self exportShapeOf: rectangles"					],					"body" : [						"| rectangles |",						"rectangles := self testInspect10GoldenRectangles foldr1: [ :each :aBox | ",						"\t              aBox rotateByRadians: Float pi half negated.",						"\t              RSLocation new left stick: aBox on: each.",						"\t              RSComposite new",						"\t\t              shapes: { ",						"\t\t\t\t              each.",						"\t\t\t\t              aBox };",						"\t\t              yourself ].",						"",						"^ self exportShapeOf: rectangles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3431973,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectOneToMany" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectOneToMany",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: { 'hello'. 'world' } ~~> ({ ",						"\t\t\t\t   42 asValueHolder.",						"\t\t\t\t   Float goldenRatio asValueHolder } ~~> nil)",						"\t\t  slotDescriptorsContext:",						"\t\t  SlotDescriptorsVisitorOneToManyForValueLinkTesting new"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: { 'hello'. 'world' } ~~> ({ ",						"\t\t\t   42 asValueHolder.",						"\t\t\t   Float goldenRatio asValueHolder } ~~> nil)",						"\t  slotDescriptorsContext:",						"\t  SlotDescriptorsVisitorOneToManyForValueLinkTesting new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3170833,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testCollectionSubclasses" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testCollectionSubclasses",						"",						"\t^ self exportShapeOf: Collection accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Collection accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168998,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testByteArrayInteger" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testByteArrayInteger",						"",						"\t^ self exportSlotsGraphOf: 50 fibonacciNumbers last asByteArray"					],					"body" : [						"^ self exportSlotsGraphOf: 50 fibonacciNumbers last asByteArray"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169393,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"bitBRGC" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"bitBRGC",						"",						"\t^ self bitXor: self >> 1"					],					"body" : [						"^ self bitXor: self >> 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1806529,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#asStringBRGC",				"Integer>>#asShapeBRGCDots",				"SequenceableCollection>>#injectBRGC:intoIn:intoOut:"			]		},		"testInspect10GoldenRatios" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect10GoldenRatios",						"",						"\t| ratios |",						"\tratios := 10 goldenRatiosLower.",						"",						"\tself",						"\t\tassert: ratios",						"\t\tequals:",						"\t\t\t#( 1.618033988749895 1 0.6180339887498949 0.3819660112501051",						"\t\t\t   0.2360679774997898 0.1458980337503153 0.09016994374947451",						"\t\t\t   0.05572809000084078 0.03444185374863373 0.021286236252207047 ).",						"",						"\t^ self exportSlotsGraphOf: ratios"					],					"body" : [						"| ratios |",						"ratios := 10 goldenRatiosLower.",						"",						"self",						"\tassert: ratios",						"\tequals: #( 1.618033988749895 1 0.6180339887498949 0.3819660112501051",						"\t\t   0.2360679774997898 0.1458980337503153 0.09016994374947451",						"\t\t   0.05572809000084078 0.03444185374863373 0.021286236252207047 ).",						"",						"^ self exportSlotsGraphOf: ratios"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3432106,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspect10GoldenRectangles"			]		},		"testInspect20FibonacciNumbers" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect20FibonacciNumbers",						"",						"\t| fibs |",						"\tfibs := 20 fibonacciNumbers.",						"",						"\tself",						"\t\tassert: -3 fibonacciNumbers equals: #(  );",						"\t\tassert: 0 fibonacciNumbers equals: #(  );",						"\t\tassert: 1 fibonacciNumbers equals: #( 0 );",						"\t\tassert: 2 fibonacciNumbers equals: #( 0 1 );",						"\t\tassert: fibs",						"\t\tequals:",						"\t\t\t#( 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 ).",						"",						"\t^ self exportSlotsGraphOf: fibs"					],					"body" : [						"| fibs |",						"fibs := 20 fibonacciNumbers.",						"",						"self",						"\tassert: -3 fibonacciNumbers equals: #(  );",						"\tassert: 0 fibonacciNumbers equals: #(  );",						"\tassert: 1 fibonacciNumbers equals: #( 0 );",						"\tassert: 2 fibonacciNumbers equals: #( 0 1 );",						"\tassert: fibs",						"\tequals:",						"\t\t#( 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 ).",						"",						"^ self exportSlotsGraphOf: fibs"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3434974,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspect10GoldenRectangles" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect10GoldenRectangles",						"",						"\t| rectangles |",						"\trectangles := RSGroup withAll:",						"\t\t              (self testInspect10GoldenRatios ",						"\t\t\t               overlappingPairsCollect: [ :width :height | ",						"\t\t\t\t               RSBox new",						"\t\t\t\t\t               cornerRadius: Float goldenRatio double;",						"\t\t\t\t\t               extent: width @ height * 100;",						"\t\t\t\t\t               color: Color white;",						"\t\t\t\t\t               withBorder;",						"\t\t\t\t\t               yourself ]).",						"",						"\t^ self exportSlotsGraphOf: rectangles"					],					"body" : [						"| rectangles |",						"rectangles := RSGroup withAll:",						"\t              (self testInspect10GoldenRatios ",						"\t\t               overlappingPairsCollect: [ :width :height | ",						"\t\t\t               RSBox new",						"\t\t\t\t               cornerRadius: Float goldenRatio double;",						"\t\t\t\t               extent: width @ height * 100;",						"\t\t\t\t               color: Color white;",						"\t\t\t\t               withBorder;",						"\t\t\t\t               yourself ]).",						"",						"^ self exportSlotsGraphOf: rectangles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3432178,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspect10GoldenRectanglesNested"			]		},		"privateNextSeed" : {			"implementors" : {				"Random" : {					"sourceCode" : [						"privateNextSeed",						"",						"\t\"This method generates random instances of Integer \tin the interval",						"\t0 to 16r7FFFFFFF. This method does NOT update the seed; repeated sends",						"\tanswer the same value. The algorithm is described in detail in [1]\"",						"",						"\t| lo hi aLoRHi |",						"\thi := (seed quo: q) asFloat.",						"\tlo := seed - (hi * q). \" = seed rem: q\"",						"\taLoRHi := a * lo - (r * hi).",						"\t^ aLoRHi > 0.0",						"\t\t  ifTrue: [ aLoRHi ]",						"\t\t  ifFalse: [ aLoRHi + m ]"					],					"body" : [						"| lo hi aLoRHi |",						"hi := (seed quo: q) asFloat.",						"lo := seed - (hi * q). \" = seed rem: q\"",						"aLoRHi := a * lo - (r * hi).",						"^ aLoRHi > 0.0",						"\t  ifTrue: [ aLoRHi ]",						"\t  ifFalse: [ aLoRHi + m ]"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [						"This method generates random instances of Integer \tin the interval",						"\t0 to 16r7FFFFFFF. This method does NOT update the seed; repeated sends",						"\tanswer the same value. The algorithm is described in detail in [1]"					],					"hash" : 2688091,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Random>>#privateNextValue"			]		},		"testInspectCharacterPi" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectCharacterPi",						"",						"\t^ self exportSlotsGraphOf: $π"					],					"body" : [						"^ self exportSlotsGraphOf: $π"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168946,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectSet" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectSet",						"",						"\t| random sample n |",						"\tn := 20.",						"\trandom := Random seed: 11.",						"\tsample := (1 to: n) collect: [ :i | random nextInteger: n ].",						"",						"\tself",						"\t\tassert: sample",						"\t\tequals: #( 1 9 7 1 18 9 11 10 10 6 5 15 3 8 12 17 8 2 5 15 ).",						"",						"\t^ self exportSlotsGraphOf: sample asSet"					],					"body" : [						"| random sample n |",						"n := 20.",						"random := Random seed: 11.",						"sample := (1 to: n) collect: [ :i | random nextInteger: n ].",						"",						"self",						"\tassert: sample",						"\tequals: #( 1 9 7 1 18 9 11 10 10 6 5 15 3 8 12 17 8 2 5 15 ).",						"",						"^ self exportSlotsGraphOf: sample asSet"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3957984,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testBernoulli" : {			"implementors" : {				"RandomTestDistributions" : {					"sourceCode" : [						"testBernoulli",						"",						"\t| gen |",						"\tgen := (Random seed: 13) fairCoin.",						"",						"\tself exportSlotsGraphOf: gen.",						"",						"\tself",						"\t\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\t\tequals: self expectedValue_testBernoulli"					],					"body" : [						"| gen |",						"gen := (Random seed: 13) fairCoin.",						"",						"self exportSlotsGraphOf: gen.",						"",						"self",						"\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\tequals: self expectedValue_testBernoulli"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 3432947,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectLargeInteger" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectLargeInteger",						"",						"\t| large n |",						"\tn := 42 factorial.",						"\tlarge := n dcMultiplyInteger: n base: 10.",						"",						"\tself",						"\t\tassert: large equals: n * n;",						"\t\tassert: (n dcMultiplyIntegerSlow: n base: 10) equals: large.",						"",						"\t^ self exportSlotsGraphOf: large"					],					"body" : [						"| large n |",						"n := 42 factorial.",						"large := n dcMultiplyInteger: n base: 10.",						"",						"self",						"\tassert: large equals: n * n;",						"\tassert: (n dcMultiplyIntegerSlow: n base: 10) equals: large.",						"",						"^ self exportSlotsGraphOf: large"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3695894,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"mediantInteger:" : {			"implementors" : {				"Fraction" : {					"sourceCode" : [						"mediantInteger: anInteger",						"",						"\t^ self numerator + anInteger numerator",						"\t  / (self denominator + anInteger denominator)"					],					"body" : [						"^ self numerator + anInteger numerator",						"  / (self denominator + anInteger denominator)"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18806016,					"argumentNames" : [						"anInteger"					]				},				"Integer" : {					"sourceCode" : [						"mediantInteger: anInteger",						"",						"\t^ self + anInteger / 2"					],					"body" : [						"^ self + anInteger / 2"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18845723,					"argumentNames" : [						"anInteger"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#'\\/'"			]		},		"next" : {			"implementors" : {				"RandomBinomial" : {					"sourceCode" : [						"next",						"",						"\t^ (1 to: n)",						"\t\t  inject: 0",						"\t\t  into: [ :successes :each | successes + super next asInteger ]"					],					"body" : [						"^ (1 to: n)",						"\t  inject: 0",						"\t  into: [ :successes :each | successes + super next asInteger ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 3330974,					"argumentNames" : [ ]				},				"AtomicQueueItem" : {					"sourceCode" : [						"next",						"",						"\t\"Answer the value of next\"",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the value of next"					],					"hash" : 1952149,					"argumentNames" : [ ]				},				"ZnPositionableReadStream" : {					"sourceCode" : [						"next",						"",						"\t\"Return the next element and move over it\"",						"",						"\t| next |",						"\tdelta = 0",						"\t\tifTrue: [ ",						"\t\t\t(next := stream next) ifNotNil: [ ",						"\t\t\t\tcount := count + 1.",						"\t\t\t\tbuffer at: index + 1 put: next.",						"\t\t\t\tindex := index + 1 \\\\ buffer size ] ]",						"\t\tifFalse: [ ",						"\t\t\tnext := buffer at: index - delta \\\\ buffer size + 1.",						"\t\t\tdelta := delta - 1 ].",						"\t^ next"					],					"body" : [						"| next |",						"delta = 0",						"\tifTrue: [ ",						"\t\t(next := stream next) ifNotNil: [ ",						"\t\t\tcount := count + 1.",						"\t\t\tbuffer at: index + 1 put: next.",						"\t\t\tindex := index + 1 \\\\ buffer size ] ]",						"\tifFalse: [ ",						"\t\tnext := buffer at: index - delta \\\\ buffer size + 1.",						"\t\tdelta := delta - 1 ].",						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return the next element and move over it"					],					"hash" : 2274018,					"argumentNames" : [ ]				},				"MCDataStream" : {					"sourceCode" : [						"next",						"",						"\t\"Answer the next object in the stream.\"",						"",						"\t| type selector anObject internalObject |",						"\ttype := byteStream next.",						"\ttype ifNil: [ ",						"\t\tbyteStream close. \"clean up\"",						"\t\tbyteStream position = 0",						"\t\t\tifTrue: [ self error: 'The file did not exist in this directory' ]",						"\t\t\tifFalse: [ self error: 'Unexpected end of object file' ].",						"\t\t^ nil ].",						"\ttype = 0 ifTrue: [ ",						"\t\tbyteStream close. \"clean up\"",						"\t\tself error: 'Expected start of object, but found 0'.",						"\t\t^ nil ].",						"",						"\tselector := self class readSelectors at: type ifAbsent: [ ",						"\t\t            byteStream close.",						"\t\t            self error:",						"\t\t\t            'Unrecognised type id. You should load the Monticello-OldDataStreamCompatibility package' ].",						"",						"\tanObject := self perform: selector. \"A method that recursively",						"\t\tcalls next (readArray, readInstance, objectAt:) must save &",						"\t\trestore the current reference position.\"",						"",						"\t\"After reading the externalObject, internalize it.",						"\t\t #readReference is a special case. Either:",						"\t\t   (1) We actually have to read the object, recursively calling",						"\t\t\t   next, which internalizes the object.",						"\t\t   (2) We just read a reference to an object already read and",						"\t\t\t   thus already interalized.",						"\t\t Either way, we must not re-internalize the object here.\"",						"\tselector == #readReference ifTrue: [ ^ anObject ].",						"\tinternalObject := anObject comeFullyUpOnReload: self.",						"\t^ self maybeBeginReference: internalObject"					],					"body" : [						"| type selector anObject internalObject |",						"type := byteStream next.",						"type ifNil: [ ",						"\tbyteStream close. \"clean up\"",						"\tbyteStream position = 0",						"\t\tifTrue: [ self error: 'The file did not exist in this directory' ]",						"\t\tifFalse: [ self error: 'Unexpected end of object file' ].",						"\t^ nil ].",						"type = 0 ifTrue: [ ",						"\tbyteStream close. \"clean up\"",						"\tself error: 'Expected start of object, but found 0'.",						"\t^ nil ].",						"",						"selector := self class readSelectors at: type ifAbsent: [ ",						"\t            byteStream close.",						"\t            self error:",						"\t\t            'Unrecognised type id. You should load the Monticello-OldDataStreamCompatibility package' ].",						"",						"anObject := self perform: selector. \"A method that recursively",						"\t\tcalls next (readArray, readInstance, objectAt:) must save &",						"\t\trestore the current reference position.\"",						"",						"\"After reading the externalObject, internalize it.",						"\t\t #readReference is a special case. Either:",						"\t\t   (1) We actually have to read the object, recursively calling",						"\t\t\t   next, which internalizes the object.",						"\t\t   (2) We just read a reference to an object already read and",						"\t\t\t   thus already interalized.",						"\t\t Either way, we must not re-internalize the object here.\"",						"selector == #readReference ifTrue: [ ^ anObject ].",						"internalObject := anObject comeFullyUpOnReload: self.",						"^ self maybeBeginReference: internalObject"					],					"isTestMethod" : false,					"category" : "write and read",					"comment" : [						"Answer the next object in the stream."					],					"hash" : 3200977,					"argumentNames" : [ ]				},				"RBScanner" : {					"sourceCode" : [						"next",						"",						"\t| token |",						"\tbuffer reset.",						"\ttokenStart := stream position.",						"\ttoken := characterType = #eof",						"\t\t         ifTrue: [ ",						"\t\t\t         RBEOFToken start: tokenStart + 1 \"The EOF token should occur after the end of input\" ]",						"\t\t         ifFalse: [ self scanToken ].",						"\tself stripSeparators.",						"\ttoken comments: self getComments.",						"\t^ token"					],					"body" : [						"| token |",						"buffer reset.",						"tokenStart := stream position.",						"token := characterType = #eof",						"\t         ifTrue: [ ",						"\t\t         RBEOFToken start: tokenStart + 1 \"The EOF token should occur after the end of input\" ]",						"\t         ifFalse: [ self scanToken ].",						"self stripSeparators.",						"token comments: self getComments.",						"^ token"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2208356,					"argumentNames" : [ ]				},				"RSNiceStepSizeGenerator" : {					"sourceCode" : [						"next",						"",						"\t| oSet |",						"\tniceStep",						"\t\tstepSize: ss;",						"\t\toffset: o;",						"\t\ti: i;",						"\t\t\"all output and calculations shouls add 1 because wilkinsons index start from 1\"",						"\t\tj: j.",						"\t\"Keep track of existing offsets and stepSizes to avoid duplicate returns of ",						"\tstep size, offset pairs\"",						"\t(ssOffMap includesKey: ss)",						"\t\tifTrue: [ ",						"\t\t\toSet := ssOffMap at: ss.",						"\t\t\t[ ",						"\t\t\t| b |",						"\t\t\tb := oSet includes: o.",						"\t\t\toSet add: o.",						"\t\t\tb not and: [ io < (ovar size - 1) ] ] whileTrue: [ ",						"\t\t\t\tio := io + 1.",						"\t\t\t\tniceStep offset: (o := ovar at: io + 1) ] ]",						"\t\tifFalse: [ ",						"\t\t\toSet := Set new.",						"\t\t\toSet add: o.",						"\t\t\tssOffMap at: ss put: oSet ].",						"\tio := io + 1. \"position for next offset if it exists\"",						"",						"\t\"iterate for next call\"",						"\tio < ovar size",						"\t\tifTrue: [ o := ovar at: io + 1 ]",						"\t\tifFalse: [ ",						"\t\t\tio := 0.",						"\t\t\ti := i < (qvar size - 1)",						"\t\t\t\t     ifTrue: [ i + 1 ]",						"\t\t\t\t     ifFalse: [ 0 ].",						"\t\t\tj := i = 0",						"\t\t\t\t     ifTrue: [ j + 1 ]",						"\t\t\t\t     ifFalse: [ j ].",						"\t\t\tq := self qat: i.",						"\t\t\tss := self stepSize: j q: q.",						"\t\t\tovar := self offsets: j q: q.",						"\t\t\to := ovar at: io + 1 ].",						"\tresetRequired := true.",						"\t^ niceStep"					],					"body" : [						"| oSet |",						"niceStep",						"\tstepSize: ss;",						"\toffset: o;",						"\ti: i;",						"\t\"all output and calculations shouls add 1 because wilkinsons index start from 1\"",						"\tj: j.",						"\"Keep track of existing offsets and stepSizes to avoid duplicate returns of ",						"\tstep size, offset pairs\"",						"(ssOffMap includesKey: ss)",						"\tifTrue: [ ",						"\t\toSet := ssOffMap at: ss.",						"\t\t[ ",						"\t\t| b |",						"\t\tb := oSet includes: o.",						"\t\toSet add: o.",						"\t\tb not and: [ io < (ovar size - 1) ] ] whileTrue: [ ",						"\t\t\tio := io + 1.",						"\t\t\tniceStep offset: (o := ovar at: io + 1) ] ]",						"\tifFalse: [ ",						"\t\toSet := Set new.",						"\t\toSet add: o.",						"\t\tssOffMap at: ss put: oSet ].",						"io := io + 1. \"position for next offset if it exists\"",						"",						"\"iterate for next call\"",						"io < ovar size",						"\tifTrue: [ o := ovar at: io + 1 ]",						"\tifFalse: [ ",						"\t\tio := 0.",						"\t\ti := i < (qvar size - 1)",						"\t\t\t     ifTrue: [ i + 1 ]",						"\t\t\t     ifFalse: [ 0 ].",						"\t\tj := i = 0",						"\t\t\t     ifTrue: [ j + 1 ]",						"\t\t\t     ifFalse: [ j ].",						"\t\tq := self qat: i.",						"\t\tss := self stepSize: j q: q.",						"\t\tovar := self offsets: j q: q.",						"\t\to := ovar at: io + 1 ].",						"resetRequired := true.",						"^ niceStep"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [ ],					"hash" : 7290332,					"argumentNames" : [ ]				},				"RandomGaussian" : {					"sourceCode" : [						"next",						"",						"\t| z |",						"\t[ ",						"\t| u1 u2 |",						"\tu1 := super next.",						"\tu2 := 1.0 - super next.",						"",						"\tz := u1 - 0.5 * magic / u2.",						"",						"\t(z / 2) squared > u2 log negated ] whileTrue.",						"",						"\t^ z * sigma + mu"					],					"body" : [						"| z |",						"[ ",						"| u1 u2 |",						"u1 := super next.",						"u2 := 1.0 - super next.",						"",						"z := u1 - 0.5 * magic / u2.",						"",						"(z / 2) squared > u2 log negated ] whileTrue.",						"",						"^ z * sigma + mu"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 4120869,					"argumentNames" : [ ]				},				"RubParagraphDecorator" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1473941,					"argumentNames" : [ ]				},				"ZdcAbstractSocketStream" : {					"sourceCode" : [						"next",						"",						"\t\"Read and return a single byte\"",						"",						"\treadBuffer isEmpty ifTrue: [ self fillReadBuffer ].",						"\t^ readBuffer isEmpty",						"\t\t  ifTrue: [ nil ]",						"\t\t  ifFalse: [ readBuffer next ]"					],					"body" : [						"readBuffer isEmpty ifTrue: [ self fillReadBuffer ].",						"^ readBuffer isEmpty",						"\t  ifTrue: [ nil ]",						"\t  ifFalse: [ readBuffer next ]"					],					"isTestMethod" : false,					"category" : "stream in",					"comment" : [						"Read and return a single byte"					],					"hash" : 1102463,					"argumentNames" : [ ]				},				"STONReader" : {					"sourceCode" : [						"next",						"",						"\t| object |",						"\tself consumeWhitespace.",						"\tobject := self parseValue.",						"\tunresolvedReferences > 0 ifTrue: [ self processSubObjectsOf: object ].",						"\tunresolvedReferences = 0 ifFalse: [ ",						"\t\tself error: 'Inconsistent reference resolution' ].",						"\t^ object"					],					"body" : [						"| object |",						"self consumeWhitespace.",						"object := self parseValue.",						"unresolvedReferences > 0 ifTrue: [ self processSubObjectsOf: object ].",						"unresolvedReferences = 0 ifFalse: [ ",						"\tself error: 'Inconsistent reference resolution' ].",						"^ object"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [ ],					"hash" : 1400669,					"argumentNames" : [ ]				},				"RandomBoxMullerBivariateGaussian" : {					"sourceCode" : [						"next",						"",						"\t| u1 u2 z0 z1 z w |",						"\tu1 := super next.",						"\tu2 := super next.",						"\tz := (-2 * u1 ln) sqrt.",						"\tw := 2 * Float pi * u2.",						"\tz0 := w cos * z.",						"\tz1 := w sin * z.",						"\t^ z0 @ z1"					],					"body" : [						"| u1 u2 z0 z1 z w |",						"u1 := super next.",						"u2 := super next.",						"z := (-2 * u1 ln) sqrt.",						"w := 2 * Float pi * u2.",						"z0 := w cos * z.",						"z1 := w sin * z.",						"^ z0 @ z1"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 4908071,					"argumentNames" : [ ]				},				"CoASTNodeFetcherHeuristic" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6322325,					"argumentNames" : [ ]				},				"AthensTextDisplayCommand" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2528405,					"argumentNames" : [ ]				},				"StTransformation" : {					"sourceCode" : [						"next",						"",						"\t^ inner next ifNotNil: [ :aValue | self transform: aValue ]"					],					"body" : [						"^ inner next ifNotNil: [ :aValue | self transform: aValue ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6704878,					"argumentNames" : [ ]				},				"RxMatcher" : {					"sourceCode" : [						"next",						"",						"\t^ stream next"					],					"body" : [						"^ stream next"					],					"isTestMethod" : false,					"category" : "streaming",					"comment" : [ ],					"hash" : 2231560,					"argumentNames" : [ ]				},				"NullStream" : {					"sourceCode" : [						"next",						"",						"\t\"Answer the next object accessible by the receiver.\"",						"",						"\tposition := position + 1.",						"\t^ self element"					],					"body" : [						"position := position + 1.",						"^ self element"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next object accessible by the receiver."					],					"hash" : 1870318,					"argumentNames" : [ ]				},				"RxmLink" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2298261,					"argumentNames" : [ ]				},				"StSequenceIterator" : {					"sourceCode" : [						"next",						"",						"\titerators do: [ :e | e next ifNotNil: [ :aValue | ^ aValue ] ].",						"\t^ nil"					],					"body" : [						"iterators do: [ :e | e next ifNotNil: [ :aValue | ^ aValue ] ].",						"^ nil"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6444019,					"argumentNames" : [ ]				},				"RandomExponential" : {					"sourceCode" : [						"next",						"",						"\t^ (1 - super next) ln negated / lambda"					],					"body" : [						"^ (1 - super next) ln negated / lambda"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 3332646,					"argumentNames" : [ ]				},				"UnicodeTestRNG" : {					"sourceCode" : [						"next",						"",						"\t^ generator next"					],					"body" : [						"^ generator next"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [ ],					"hash" : 4720903,					"argumentNames" : [ ]				},				"AbstractBinaryFileStream" : {					"sourceCode" : [						"next",						"",						"\t\"Answer the next byte from this file, or nil if at the end of the file.\"",						"",						"\t^ (self next: 1) ifEmpty: [ nil ] ifNotEmpty: [ :col | col first ]"					],					"body" : [						"^ (self next: 1) ifEmpty: [ nil ] ifNotEmpty: [ :col | col first ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next byte from this file, or nil if at the end of the file."					],					"hash" : 1629859,					"argumentNames" : [ ]				},				"SDL_PixelFormat" : {					"sourceCode" : [						"next",						"",						"\t\"This method was automatically generated\"",						"",						"\t^ SDL_PixelFormat fromHandle: (handle pointerAt: OFFSET_NEXT)"					],					"body" : [						"^ SDL_PixelFormat fromHandle: (handle pointerAt: OFFSET_NEXT)"					],					"isTestMethod" : false,					"category" : "accessing - structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 5117471,					"argumentNames" : [ ]				},				"HelpBrowser" : {					"sourceCode" : [						"next",						"",						"\ttreeMorph setSelectionIndex: treeMorph getSelectionIndex + 1"					],					"body" : [						"treeMorph setSelectionIndex: treeMorph getSelectionIndex + 1"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 2601047,					"argumentNames" : [ ]				},				"SocketStream" : {					"sourceCode" : [						"next",						"",						"\t\"Return next byte, if inBuffer is empty",						"\twe recieve some more data and try again.\"",						"",						"\tself atEnd ifTrue: [ ^ nil ].",						"\tself isInBufferEmpty ifTrue: [ ",						"\t\tself receiveData.",						"\t\tself atEnd ifTrue: [ ^ nil ] ].",						"\tlastRead := lastRead + 1.",						"\t^ inBuffer at: lastRead"					],					"body" : [						"self atEnd ifTrue: [ ^ nil ].",						"self isInBufferEmpty ifTrue: [ ",						"\tself receiveData.",						"\tself atEnd ifTrue: [ ^ nil ] ].",						"lastRead := lastRead + 1.",						"^ inBuffer at: lastRead"					],					"isTestMethod" : false,					"category" : "stream in",					"comment" : [						"Return next byte, if inBuffer is empty",						"\twe recieve some more data and try again."					],					"hash" : 2163652,					"argumentNames" : [ ]				},				"ReadStream" : {					"sourceCode" : [						"next",						"",						"\t\"Primitive. Answer the next object in the Stream represented by the",						"\treceiver. Fail if the collection of this stream is not an Array or a String.",						"\tFail if the stream is positioned at its end, or if the position is out of",						"\tbounds in the collection. Optional. See Object documentation",						"\twhatIsAPrimitive.\"",						"",						"\t^ position >= readLimit",						"\t\t  ifTrue: [ nil ]",						"\t\t  ifFalse: [ collection at: (position := position + 1) ]"					],					"body" : [						"^ position >= readLimit",						"\t  ifTrue: [ nil ]",						"\t  ifFalse: [ collection at: (position := position + 1) ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Primitive. Answer the next object in the Stream represented by the",						"\treceiver. Fail if the collection of this stream is not an Array or a String.",						"\tFail if the stream is positioned at its end, or if the position is out of",						"\tbounds in the collection. Optional. See Object documentation",						"\twhatIsAPrimitive."					],					"hash" : 1901810,					"argumentNames" : [ ]				},				"StFilter" : {					"sourceCode" : [						"next",						"",						"\t| value |",						"\t[ inner atEnd ] whileFalse: [ ",						"\t\tvalue := inner next.",						"\t\t(self filter: value) ifTrue: [ ^ value ] ].",						"\t^ nil"					],					"body" : [						"| value |",						"[ inner atEnd ] whileFalse: [ ",						"\tvalue := inner next.",						"\t(self filter: value) ifTrue: [ ^ value ] ].",						"^ nil"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6705341,					"argumentNames" : [ ]				},				"ZnChunkedReadStream" : {					"sourceCode" : [						"next",						"",						"\tself ensureChunkOrAtEnd.",						"\tself atEnd ifTrue: [ ^ nil ].",						"\t^ chunk at: (position := position + 1)"					],					"body" : [						"self ensureChunkOrAtEnd.",						"self atEnd ifTrue: [ ^ nil ].",						"^ chunk at: (position := position + 1)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2199129,					"argumentNames" : [ ]				},				"AtomicSharedQueue" : {					"sourceCode" : [						"next",						"",						"\t\"Fetch the next item from queue. If queue is locked or empty, block the sender until operation can complete\"",						"",						"\t| result |",						"\t[ ",						"\t| keepWaiting |",						"\tkeepWaiting := false.",						"\tresult := self nextIfNone: [ keepWaiting := true ].",						"\tkeepWaiting ] whileTrue: [ self waitForNewItems ].",						"",						"\t^ result"					],					"body" : [						"| result |",						"[ ",						"| keepWaiting |",						"keepWaiting := false.",						"result := self nextIfNone: [ keepWaiting := true ].",						"keepWaiting ] whileTrue: [ self waitForNewItems ].",						"",						"^ result"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Fetch the next item from queue. If queue is locked or empty, block the sender until operation can complete"					],					"hash" : 2416439,					"argumentNames" : [ ]				},				"WeakFinalizerItem" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2037143,					"argumentNames" : [ ]				},				"ZnLimitedReadStream" : {					"sourceCode" : [						"next",						"",						"\t\"We do byte/char conversions on the fly.\"",						"",						"\t^ self atEnd",						"\t\t  ifTrue: [ nil ]",						"\t\t  ifFalse: [ ",						"\t\t\t  position := position + 1.",						"\t\t\t  binary isNil",						"\t\t\t\t  ifTrue: [ stream next ]",						"\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t  binary",						"\t\t\t\t\t\t  ifTrue: [ stream next asInteger ]",						"\t\t\t\t\t\t  ifFalse: [ stream next asCharacter ] ] ]"					],					"body" : [						"^ self atEnd",						"\t  ifTrue: [ nil ]",						"\t  ifFalse: [ ",						"\t\t  position := position + 1.",						"\t\t  binary isNil",						"\t\t\t  ifTrue: [ stream next ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  binary",						"\t\t\t\t\t  ifTrue: [ stream next asInteger ]",						"\t\t\t\t\t  ifFalse: [ stream next asCharacter ] ] ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"We do byte/char conversions on the fly."					],					"hash" : 2200908,					"argumentNames" : [ ]				},				"Timespan" : {					"sourceCode" : [						"next",						"",						"\t^ self class starting: start + duration duration: duration"					],					"body" : [						"^ self class starting: start + duration duration: duration"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1716616,					"argumentNames" : [ ]				},				"RandomGeometric" : {					"sourceCode" : [						"next",						"",						"\t| failures |",						"\tfailures := 0.",						"\t[ ",						"\tfailures := failures + 1.",						"\tsuper next = 0 ] whileTrue.",						"",						"\t^ failures"					],					"body" : [						"| failures |",						"failures := 0.",						"[ ",						"failures := failures + 1.",						"super next = 0 ] whileTrue.",						"",						"^ failures"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 3595347,					"argumentNames" : [ ]				},				"UUIDGenerator class" : {					"sourceCode" : [						"next",						"",						"\t\"Return a UUID using the shared generator\"",						"",						"\t\"self next\"",						"",						"\t\"[ UUIDGenerator next ] bench\"",						"",						"\t^ self default next"					],					"body" : [						"^ self default next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return a UUID using the shared generator"					],					"hash" : 1953763,					"argumentNames" : [ ]				},				"RandomBernoulli" : {					"sourceCode" : [						"next",						"",						"\t^ (super next < p) asInteger"					],					"body" : [						"^ (super next < p) asInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 3330263,					"argumentNames" : [ ]				},				"ZnBufferedReadStream" : {					"sourceCode" : [						"next",						"",						"\t\"Return the next element and move over it\"",						"",						"\tposition > limit ifTrue: [ self nextBuffer ].",						"\t^ position <= limit",						"\t\t  ifTrue: [ ",						"\t\t\t  | char |",						"\t\t\t  char := buffer at: position.",						"\t\t\t  position := position + 1.",						"\t\t\t  char ]",						"\t\t  ifFalse: [ nil ]"					],					"body" : [						"position > limit ifTrue: [ self nextBuffer ].",						"^ position <= limit",						"\t  ifTrue: [ ",						"\t\t  | char |",						"\t\t  char := buffer at: position.",						"\t\t  position := position + 1.",						"\t\t  char ]",						"\t  ifFalse: [ nil ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return the next element and move over it"					],					"hash" : 2255113,					"argumentNames" : [ ]				},				"UUIDGenerator" : {					"sourceCode" : [						"next",						"",						"\t\"Return the next UUID, see my class comment\"",						"",						"\t| uuid |",						"\tuuid := UUID nilUUID.",						"\tself placeFields: uuid.",						"\t^ uuid"					],					"body" : [						"| uuid |",						"uuid := UUID nilUUID.",						"self placeFields: uuid.",						"^ uuid"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return the next UUID, see my class comment"					],					"hash" : 2216802,					"argumentNames" : [ ]				},				"ProfStef" : {					"sourceCode" : [						"next",						"",						"\tself helpBrowserWindow ifNotNil: [ :window | window model next ].",						"\tself lessonView isOpenInWindow ifTrue: [ ",						"\t\tself player next.",						"\t\tself showCurrentLesson ]"					],					"body" : [						"self helpBrowserWindow ifNotNil: [ :window | window model next ].",						"self lessonView isOpenInWindow ifTrue: [ ",						"\tself player next.",						"\tself showCurrentLesson ]"					],					"isTestMethod" : false,					"category" : "navigating",					"comment" : [ ],					"hash" : 4382546,					"argumentNames" : [ ]				},				"SourceFileCharacterReadWriteStream" : {					"sourceCode" : [						"next",						"",						"\t^ readStream next"					],					"body" : [						"^ readStream next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1936645,					"argumentNames" : [ ]				},				"HistoryIterator" : {					"sourceCode" : [						"next",						"",						"\t\"next item in history\"",						"",						"\t^ self hasNext ifTrue: [ ",						"\t\t  index := self index + 1.",						"\t\t  self current ]"					],					"body" : [						"^ self hasNext ifTrue: [ ",						"\t  index := self index + 1.",						"\t  self current ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"next item in history"					],					"hash" : 1355398,					"argumentNames" : [ ]				},				"FTGlyphSlotRec" : {					"sourceCode" : [						"next",						"",						"\t\"This method was automatically generated\"",						"",						"\t^ FTGlyphSlotRec fromHandle: (handle pointerAt: OFFSET_NEXT)"					],					"body" : [						"^ FTGlyphSlotRec fromHandle: (handle pointerAt: OFFSET_NEXT)"					],					"isTestMethod" : false,					"category" : "accessing - structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 1829663,					"argumentNames" : [ ]				},				"SourceFileBufferedReadWriteStream" : {					"sourceCode" : [						"next",						"",						"\t| value |",						"\tself atEnd ifTrue: [ ^ nil ].",						"",						"\tself checkBufferFor: nextPosition.",						"",						"\tvalue := self bufferAt: nextPosition.",						"",						"\tnextPosition := nextPosition + 1.",						"",						"\t^ value"					],					"body" : [						"| value |",						"self atEnd ifTrue: [ ^ nil ].",						"",						"self checkBufferFor: nextPosition.",						"",						"value := self bufferAt: nextPosition.",						"",						"nextPosition := nextPosition + 1.",						"",						"^ value"					],					"isTestMethod" : false,					"category" : "reading",					"comment" : [ ],					"hash" : 2199774,					"argumentNames" : [ ]				},				"ProfStef class" : {					"sourceCode" : [						"next",						"",						"\t^ self default next"					],					"body" : [						"^ self default next"					],					"isTestMethod" : false,					"category" : "navigating",					"comment" : [ ],					"hash" : 4117475,					"argumentNames" : [ ]				},				"ReadWriteStream" : {					"sourceCode" : [						"next",						"",						"\t\"Primitive. Return the next object in the Stream represented by the",						"\treceiver. Fail if the collection of this stream is not an Array or a String.",						"\tFail if the stream is positioned at its end, or if the position is out of",						"\tbounds in the collection. Optional. See Object documentation",						"\twhatIsAPrimitive.\"",						"",						"\t\"treat me as a FIFO\"",						"",						"\tposition >= readLimit",						"\t\tifTrue: [ ^ nil ]",						"\t\tifFalse: [ ^ collection at: (position := position + 1) ]"					],					"body" : [						"position >= readLimit",						"\tifTrue: [ ^ nil ]",						"\tifFalse: [ ^ collection at: (position := position + 1) ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Primitive. Return the next object in the Stream represented by the",						"\treceiver. Fail if the collection of this stream is not an Array or a String.",						"\tFail if the stream is positioned at its end, or if the position is out of",						"\tbounds in the collection. Optional. See Object documentation",						"\twhatIsAPrimitive."					],					"hash" : 1902406,					"argumentNames" : [ ]				},				"Stream" : {					"sourceCode" : [						"next",						"",						"\t\"Answer the next object accessible by the receiver.\"",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next object accessible by the receiver."					],					"hash" : 1629764,					"argumentNames" : [ ]				},				"StWithoutDuplicatesDecorator" : {					"sourceCode" : [						"next",						"",						"\t| aValue |",						"\taValue := inner next.",						"",						"\t[ aValue isNotNil and: [ uniqueResults includes: aValue ] ] ",						"\t\twhileTrue: [ aValue := inner next ].",						"",						"\tuniqueResults add: aValue.",						"\t^ aValue"					],					"body" : [						"| aValue |",						"aValue := inner next.",						"",						"[ aValue isNotNil and: [ uniqueResults includes: aValue ] ] ",						"\twhileTrue: [ aValue := inner next ].",						"",						"uniqueResults add: aValue.",						"^ aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6707272,					"argumentNames" : [ ]				},				"Random" : {					"sourceCode" : [						"next",						"",						"\t\"Answer a random Float in the interval [0 to 1).\"",						"",						"\t^ self privateNextValue"					],					"body" : [						"^ self privateNextValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer a random Float in the interval [0 to 1)."					],					"hash" : 1899375,					"argumentNames" : [ ]				},				"ImageReadWriter" : {					"sourceCode" : [						"next",						"",						"\t^ stream next"					],					"body" : [						"^ stream next"					],					"isTestMethod" : false,					"category" : "stream access",					"comment" : [ ],					"hash" : 1357061,					"argumentNames" : [ ]				},				"StAbstractStringFilter" : {					"sourceCode" : [						"next",						"",						"\t| nextOne |",						"\treturnedIndex < results size ifTrue: [ ",						"\t\treturnedIndex := returnedIndex + 1.",						"\t\t^ results at: returnedIndex ].",						"",						"\tnextOne := super next.",						"",						"\tnextOne ifNil: [ ^ nil ].",						"",						"\tresults add: nextOne.",						"\treturnedIndex := results size.",						"",						"\t^ nextOne"					],					"body" : [						"| nextOne |",						"returnedIndex < results size ifTrue: [ ",						"\treturnedIndex := returnedIndex + 1.",						"\t^ results at: returnedIndex ].",						"",						"nextOne := super next.",						"",						"nextOne ifNil: [ ^ nil ].",						"",						"results add: nextOne.",						"returnedIndex := results size.",						"",						"^ nextOne"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6703414,					"argumentNames" : [ ]				},				"LGitRevwalk" : {					"sourceCode" : [						"next",						"",						"\tself hasNext ifFalse: [ ^ LGit_GIT_ITEROVER signal ].",						"",						"\t^ self basicNext"					],					"body" : [						"self hasNext ifFalse: [ ^ LGit_GIT_ITEROVER signal ].",						"",						"^ self basicNext"					],					"isTestMethod" : false,					"category" : "operations",					"comment" : [ ],					"hash" : 2960945,					"argumentNames" : [ ]				},				"TutorialPlayer" : {					"sourceCode" : [						"next",						"",						"\tself tutorialPosition < self size ifTrue: [ ",						"\t\ttutorialPosition := tutorialPosition + 1 ].",						"\t^ self currentLesson"					],					"body" : [						"self tutorialPosition < self size ifTrue: [ ",						"\ttutorialPosition := tutorialPosition + 1 ].",						"^ self currentLesson"					],					"isTestMethod" : false,					"category" : "navigating",					"comment" : [ ],					"hash" : 4103364,					"argumentNames" : [ ]				},				"IceGitHubAPIPaginatedResult" : {					"sourceCode" : [						"next",						"",						"\tnextPage ifNil: [ nextPage := 1 ].",						"\t^ [ ",						"\t  | aUrl |",						"\t  aUrl := self request asUrl ? (#page -> nextPage asString).",						"\t  result := self api getRaw: aUrl asString.",						"\t  STON fromString: result contents ] ensure: [ ",						"\t\t  nextPage := nextPage + 1 ]"					],					"body" : [						"nextPage ifNil: [ nextPage := 1 ].",						"^ [ ",						"  | aUrl |",						"  aUrl := self request asUrl ? (#page -> nextPage asString).",						"  result := self api getRaw: aUrl asString.",						"  STON fromString: result contents ] ensure: [ ",						"\t  nextPage := nextPage + 1 ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 7314955,					"argumentNames" : [ ]				},				"CoFetcher" : {					"sourceCode" : [						"next",						"",						"\t^ self generator next"					],					"body" : [						"^ self generator next"					],					"isTestMethod" : false,					"category" : "fetching",					"comment" : [ ],					"hash" : 6267107,					"argumentNames" : [ ]				},				"MailAddressTokenizer" : {					"sourceCode" : [						"next",						"",						"\t| ans |",						"\tcachedToken ifNil: [ ^ self nextToken ].",						"\tans := cachedToken.",						"\tcachedToken := nil.",						"\t^ ans"					],					"body" : [						"| ans |",						"cachedToken ifNil: [ ^ self nextToken ].",						"ans := cachedToken.",						"cachedToken := nil.",						"^ ans"					],					"isTestMethod" : false,					"category" : "stream protocol",					"comment" : [ ],					"hash" : 4369044,					"argumentNames" : [ ]				},				"STONCStyleCommentsSkipStream" : {					"sourceCode" : [						"next",						"",						"\t^ peekedCharacter",						"\t\t  ifNil: [ stream atEnd ifFalse: [ self nextNonCommentChar ] ]",						"\t\t  ifNotNil: [ ",						"\t\t\t  | character |",						"\t\t\t  character := peekedCharacter.",						"\t\t\t  peekedCharacter := nil.",						"\t\t\t  character ]"					],					"body" : [						"^ peekedCharacter",						"\t  ifNil: [ stream atEnd ifFalse: [ self nextNonCommentChar ] ]",						"\t  ifNotNil: [ ",						"\t\t  | character |",						"\t\t  character := peekedCharacter.",						"\t\t  peekedCharacter := nil.",						"\t\t  character ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1398848,					"argumentNames" : [ ]				},				"WeakAnnouncementSubscription" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2035351,					"argumentNames" : [ ]				},				"SharedQueue" : {					"sourceCode" : [						"next",						"",						"\t^ monitor critical: [ ",						"\t\t  monitor waitWhile: [ items isEmpty ].",						"\t\t  items removeFirst ]"					],					"body" : [						"^ monitor critical: [ ",						"\t  monitor waitWhile: [ items isEmpty ].",						"\t  items removeFirst ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1923393,					"argumentNames" : [ ]				},				"Generator" : {					"sourceCode" : [						"next",						"",						"\t\"Generate and answer the next object in the receiver.\"",						"",						"\t^ self atEnd ifFalse: [ ",						"\t\t  home swapSender: thisContext sender.",						"\t\t  continue := thisContext swapSender: continue ]"					],					"body" : [						"^ self atEnd ifFalse: [ ",						"\t  home swapSender: thisContext sender.",						"\t  continue := thisContext swapSender: continue ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Generate and answer the next object in the receiver."					],					"hash" : 1768116,					"argumentNames" : [ ]				},				"StIterator" : {					"sourceCode" : [						"next",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6434116,					"argumentNames" : [ ]				},				"ZnEncodedReadStream" : {					"sourceCode" : [						"next",						"",						"\t^ peeked",						"\t\t  ifNil: [ stream atEnd ifFalse: [ self nextElement ] ]",						"\t\t  ifNotNil: [ ",						"\t\t\t  | character |",						"\t\t\t  character := peeked.",						"\t\t\t  peeked := nil.",						"\t\t\t  character ]"					],					"body" : [						"^ peeked",						"\t  ifNil: [ stream atEnd ifFalse: [ self nextElement ] ]",						"\t  ifNotNil: [ ",						"\t\t  | character |",						"\t\t  character := peeked.",						"\t\t  peeked := nil.",						"\t\t  character ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2260803,					"argumentNames" : [ ]				},				"AthensPathSegment" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 4028053,					"argumentNames" : [ ]				},				"NavigationHistory" : {					"sourceCode" : [						"next",						"",						"\tindex := index + 1 min: storage size.",						"\t^ storage at: index"					],					"body" : [						"index := index + 1 min: storage size.",						"^ storage at: index"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 1393561,					"argumentNames" : [ ]				},				"WriteStream" : {					"sourceCode" : [						"next",						"",						"\tself shouldNotImplement"					],					"body" : [						"self shouldNotImplement"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1615428,					"argumentNames" : [ ]				},				"FileSystemResolver" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2141845,					"argumentNames" : [ ]				},				"RubParagraph" : {					"sourceCode" : [						"next",						"",						"\t^ nil"					],					"body" : [						"^ nil"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1473422,					"argumentNames" : [ ]				},				"DecoratorStream" : {					"sourceCode" : [						"next",						"",						"\t^ decoratedStream next"					],					"body" : [						"^ decoratedStream next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1680389,					"argumentNames" : [ ]				},				"RxParser" : {					"sourceCode" : [						"next",						"",						"\t\"Advance the input storing the just read character",						"\tas the lookahead.\"",						"",						"\tinput atEnd",						"\t\tifTrue: [ lookahead := #epsilon ]",						"\t\tifFalse: [ lookahead := input next ]"					],					"body" : [						"input atEnd",						"\tifTrue: [ lookahead := #epsilon ]",						"\tifFalse: [ lookahead := input next ]"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [						"Advance the input storing the just read character",						"\tas the lookahead."					],					"hash" : 2233029,					"argumentNames" : [ ]				},				"SharedRandom" : {					"sourceCode" : [						"next",						"",						"\t^ mutex critical: [ super privateNextValue ]"					],					"body" : [						"^ mutex critical: [ super privateNextValue ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1924166,					"argumentNames" : [ ]				},				"InflateStream" : {					"sourceCode" : [						"next",						"",						"\t\"Answer the next decompressed object in the Stream represented by the",						"\treceiver.\"",						"",						"\t^ position >= readLimit",						"\t\t  ifTrue: [ self pastEndRead ]",						"\t\t  ifFalse: [ collection at: (position := position + 1) ]"					],					"body" : [						"^ position >= readLimit",						"\t  ifTrue: [ self pastEndRead ]",						"\t  ifFalse: [ collection at: (position := position + 1) ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next decompressed object in the Stream represented by the",						"\treceiver."					],					"hash" : 2133122,					"argumentNames" : [ ]				},				"OSSDLPasteEventFilter" : {					"sourceCode" : [						"next",						"",						"\t^ next"					],					"body" : [						"^ next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 5161365,					"argumentNames" : [ ]				},				"StIteratorDecorator" : {					"sourceCode" : [						"next",						"",						"\t^ inner next"					],					"body" : [						"^ inner next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6437894,					"argumentNames" : [ ]				},				"SourceFile" : {					"sourceCode" : [						"next",						"",						"\t^ stream next"					],					"body" : [						"^ stream next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 1934342,					"argumentNames" : [ ]				},				"ZdcIOBuffer" : {					"sourceCode" : [						"next",						"",						"\t\"Access the next readable element, fail is empty\"",						"",						"\t^ self availableForReading > 0",						"\t\t  ifTrue: [ ",						"\t\t\t  readPointer := readPointer + 1.",						"\t\t\t  buffer at: readPointer ]",						"\t\t  ifFalse: [ self bufferEmptyError ]"					],					"body" : [						"^ self availableForReading > 0",						"\t  ifTrue: [ ",						"\t\t  readPointer := readPointer + 1.",						"\t\t  buffer at: readPointer ]",						"\t  ifFalse: [ self bufferEmptyError ]"					],					"isTestMethod" : false,					"category" : "reading",					"comment" : [						"Access the next readable element, fail is empty"					],					"hash" : 1105538,					"argumentNames" : [ ]				},				"StSpotterCandidateLink" : {					"sourceCode" : [						"next",						"",						"\t^ self nextLink"					],					"body" : [						"^ self nextLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6458991,					"argumentNames" : [ ]				},				"MCScanner" : {					"sourceCode" : [						"next",						"",						"\t\"This would be slightly simpler using recursion but it risks a stack overflow ",						"\t for some packages on some platforms, so we implement it using a local stack.\"",						"",						"\t| stack |",						"\tstack := Stack with: Stack new.",						"\t[ ",						"\t| c |",						"\tstream skipSeparators.",						"\tc := stream peek.",						"\t\"We essentially ignore the $# symbol and expect what follows to be a symbol or array\"",						"\tc = $# ifTrue: [ ",						"\t\tc := stream",						"\t\t\t     next;",						"\t\t\t     peek ].",						"\t\"Note that #'foo' will be treated as a String, not a Symbol\"",						"\tc = $'",						"\t\tifTrue: [ stack top push: self nextString ]",						"\t\tifFalse: [ \"Any alphanumeric, including an integer, is treated as a Symbol even if not preceeded by a $#\"",						"\t\t\tc isAlphaNumeric",						"\t\t\t\tifTrue: [ stack top push: self nextSymbol ]",						"\t\t\t\tifFalse: [ \"For an array, start a new level on the stack\"",						"\t\t\t\t\tc = $(",						"\t\t\t\t\t\tifTrue: [ ",						"\t\t\t\t\t\t\tstream next.",						"\t\t\t\t\t\t\tstack push: Stack new ]",						"\t\t\t\t\t\tifFalse: [ \"At the end of an array, so add it to the previous level\"",						"\t\t\t\t\t\t\tc = $)",						"\t\t\t\t\t\t\t\tifTrue: [ ",						"\t\t\t\t\t\t\t\t\t| x |",						"\t\t\t\t\t\t\t\t\tstream next.",						"\t\t\t\t\t\t\t\t\tx := stack pop.",						"\t\t\t\t\t\t\t\t\tstack top push: x asArray reverse ]",						"\t\t\t\t\t\t\t\tifFalse: [ \"Unexpected token\" ",						"\t\t\t\t\t\t\t\tself error: 'Unknown token type' ] ] ] ].",						"\t\"Keep looping while we are in an array\"",						"\t1 < stack size ] whileTrue: [  ].",						"\t^ stack top top"					],					"body" : [						"| stack |",						"stack := Stack with: Stack new.",						"[ ",						"| c |",						"stream skipSeparators.",						"c := stream peek.",						"\"We essentially ignore the $# symbol and expect what follows to be a symbol or array\"",						"c = $# ifTrue: [ ",						"\tc := stream",						"\t\t     next;",						"\t\t     peek ].",						"\"Note that #'foo' will be treated as a String, not a Symbol\"",						"c = $'",						"\tifTrue: [ stack top push: self nextString ]",						"\tifFalse: [ \"Any alphanumeric, including an integer, is treated as a Symbol even if not preceeded by a $#\"",						"\t\tc isAlphaNumeric",						"\t\t\tifTrue: [ stack top push: self nextSymbol ]",						"\t\t\tifFalse: [ \"For an array, start a new level on the stack\"",						"\t\t\t\tc = $(",						"\t\t\t\t\tifTrue: [ ",						"\t\t\t\t\t\tstream next.",						"\t\t\t\t\t\tstack push: Stack new ]",						"\t\t\t\t\tifFalse: [ \"At the end of an array, so add it to the previous level\"",						"\t\t\t\t\t\tc = $)",						"\t\t\t\t\t\t\tifTrue: [ ",						"\t\t\t\t\t\t\t\t| x |",						"\t\t\t\t\t\t\t\tstream next.",						"\t\t\t\t\t\t\t\tx := stack pop.",						"\t\t\t\t\t\t\t\tstack top push: x asArray reverse ]",						"\t\t\t\t\t\t\tifFalse: [ \"Unexpected token\" self error: 'Unknown token type' ] ] ] ].",						"\"Keep looping while we are in an array\"",						"1 < stack size ] whileTrue: [  ].",						"^ stack top top"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [						"This would be slightly simpler using recursion but it risks a stack overflow ",						"\t for some packages on some platforms, so we implement it using a local stack."					],					"hash" : 1875467,					"argumentNames" : [ ]				},				"StGenericGenerator" : {					"sourceCode" : [						"next",						"",						"\t^ generator next"					],					"body" : [						"^ generator next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 6434310,					"argumentNames" : [ ]				},				"ChunkReadStream" : {					"sourceCode" : [						"next",						"",						"\t^ self parseLangTagFor: self basicNextChunk"					],					"body" : [						"^ self parseLangTagFor: self basicNextChunk"					],					"isTestMethod" : false,					"category" : "decorated",					"comment" : [ ],					"hash" : 1680223,					"argumentNames" : [ ]				},				"LIFOQueue" : {					"sourceCode" : [						"next",						"",						"\t| dummy tail |",						"\tdummy := self newItem.",						"\tdummy object: dummy.",						"",						"\t\"this is atomic\"",						"\ttail := head.",						"\thead := dummy.",						"",						"\t\"skip over dummies\"",						"\t[ tail object == tail ] whileTrue: [ ",						"\t\t[ tail isCircular ] whileTrue: [ self yield ].",						"\t\t(tail := tail next) ifNil: [ ",						"\t\t\t| result |",						"\t\t\t\"queue is empty. block until new items appear\"",						"\t\t\thead == dummy ifTrue: [ self signalNoMoreItems ].",						"\t\t\t[ head == dummy ] whileTrue: [ self waitForNewItems ].",						"\t\t\tdummy next: nil.",						"\t\t\tresult := self next.",						"\t\t\t^ result ] ].",						"",						"\tdummy next: tail next.",						"",						"\t^ tail object"					],					"body" : [						"| dummy tail |",						"dummy := self newItem.",						"dummy object: dummy.",						"",						"\"this is atomic\"",						"tail := head.",						"head := dummy.",						"",						"\"skip over dummies\"",						"[ tail object == tail ] whileTrue: [ ",						"\t[ tail isCircular ] whileTrue: [ self yield ].",						"\t(tail := tail next) ifNil: [ ",						"\t\t| result |",						"\t\t\"queue is empty. block until new items appear\"",						"\t\thead == dummy ifTrue: [ self signalNoMoreItems ].",						"\t\t[ head == dummy ] whileTrue: [ self waitForNewItems ].",						"\t\tdummy next: nil.",						"\t\tresult := self next.",						"\t\t^ result ] ].",						"",						"dummy next: tail next.",						"",						"^ tail object"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 2677712,					"argumentNames" : [ ]				}			},			"senders" : [				"ASConverter>>#skipBlanksAndComma",				"ASConverter>>#skipBlanks",				"ASConverter>>#nextNumber",				"ASConverter>>#readInteger",				"ASConverter>>#readFraction",				"ASPathConverter>>#convertPathData",				"AbstractBinaryFileStream>>#upToAnyOf:",				"AbstractBinaryFileStream>>#upToEnd",				"AnimatedImageMorph>>#step",				"Array>>#generateSpec",				"AthensBalloonPath>>#convertFromBuilder:",				"AthensPathConverter>>#convert:",				"AthensPathSegment>>#do:",				"AthensPathSegment>>#size",				"AthensTextDisplayCommand>>#do:",				"AthensTextDisplayCommand>>#tail",				"AthensTiger>>#readParts",				"BMPReadWriter>>#readColorMap",				"Base64MimeConverter>>#mimeEncode",				"Base64MimeConverter>>#nextValue",				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"BinaryFileStream>>#peek",				"BinaryFileStreamTest>>#testReadWhenNothingAvailableYieldsNil",				"BinaryFileStreamTest>>#testWriteReadInt",				"BinaryFileStreamTest>>#testSkipLecture",				"BinaryFileStreamTest>>#testWriteMultipleBytes",				"BinaryFileStreamTest>>#testReadFullFileIsAtEnd",				"Bitmap>>#readCompressedFrom:",				"Bitmap class>>#newFromStream:",				"Bitmap class>>#decodeIntFrom:",				"BlockClosuresTestCase>>#nestedLoopsExample:",				"ByteArray>>#hexDumpOn:max:",				"BytecodeEncoder class>>#specialSelectors",				"CTHeapQTest>>#testHeapify",				"CTHeapQTest>>#testPushPop",				"CalendarMorph>>#computeDays",				"Canvas>>#line:to:width:colors:dashes:startingOffset:",				"ChangeRecord>>#string",				"ChunkFileFormatParser>>#parseCommentDeclaration:",				"ChunkFileFormatParser>>#parseMethodDeclarations:",				"ChunkFileFormatParser>>#parseClassOrganization:",				"ChunkFileFormatParser>>#parseNextDeclaration",				"ChunkReadStream>>#basicNext",				"ChunkReadStream>>#decodeString:andRuns:",				"ChunkReadStream>>#basicNextChunk",				"ChunkReadStream>>#isNextChunkMetaData",				"ChunkReadStream>>#skipSeparators",				"ClapCommandTest>>#testMatchingStopsAtWrongFlag",				"ClapCommandTest>>#testMatchesWithSingleFlag",				"ClapCommandTest>>#testMatchesWithSinglePositional",				"ClapCommandTest>>#testMatches",				"ClapCommandTest>>#testMismatchesDifferentAlias",				"ClapCommandTest>>#testMatchesWithSingleSubcommand",				"ClapFlagTest>>#testMatchesLongForm",				"ClapFlagTest>>#testMismatchesWrongLongForm",				"ClapFlagTest>>#testMismatchesWrongShortForm",				"ClapFlagTest>>#testMatchesShortForm",				"ClapNamedMatch>>#completeMatchOn:",				"ClapPositionalTest>>#testMatches",				"ClapWordMatch>>#completeMatchOn:",				"ClyDataSourceUpdateScheduler>>#processQueue",				"CoASTNodeFetcherHeuristic>>#fetcherFor:inContext:",				"CoBasicFetcherTest>>#testNextShouldReturnNilAfterEnd",				"CoBasicFetcherWithElementsTest>>#testNextShouldReturnFirstElement",				"CoBasicFetcherWithElementsTest>>#testNextNextShouldReturnSecondExpectedElement",				"CoFetcher>>#next:",				"CoFetcher>>#next",				"CoSequenceFetcherTest>>#testCompletionCompositionNextShouldReturnValuesOfSecondCompletionAfterFirst",				"CoStatisticsHeuristicWrapper>>#buildFetcherFor:inContext:",				"CoStatisticsTest>>#testHeuristicBuilderForSingleHeuristicLastIsNullHeuristic",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicSecondWrapperWrapsNonWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicNextIsWrapper",				"Color class>>#random",				"CompilationContext class>>#cleanOptionString:",				"CompiledMethodTrailer>>#decodeEmbeddedSourceQCompress",				"Continuation>>#restoreValues",				"Date class>>#tomorrow",				"Date class>>#readFrom:",				"DateAndTime class>>#tomorrow",				"DateAndTime class>>#readTimezoneOffsetFrom:default:",				"DateAndTime class>>#fuzzyReadFrom:",				"DateAndTime class>>#readTwoDigitIntegerFrom:",				"DateAndTime class>>#readOptionalSeparatorFrom:",				"DateAndTime class>>#readFrom:defaultOffset:",				"DateParser>>#readNextChar",				"DateParser>>#parseSameChar",				"DateParser>>#parseEscapePattern",				"DateTest>>#testSubtractDate",				"DateTest>>#selectorsToBeIgnored",				"DateTest>>#testNext",				"DecoratorStream>>#next",				"DigitalSignatureAlgorithm>>#initRandomFromString:",				"DigitalSignatureAlgorithm>>#isProbablyPrime:",				"DigitalSignatureAlgorithm>>#stringToSignature:",				"DiskFileAttributesTest>>#testPermissions",				"DiskFileAttributesTest>>#testUidGid",				"DiskFileAttributesTest>>#testSymlinkUidGid",				"DiskFileAttributesTestsResource>>#setUp",				"Duration class>>#readFrom:",				"DynamicLeftToRightRowsLayout>>#instVarNamesFrom:",				"DynamicTopToBottomColumnsLayout>>#instVarNamesFrom:",				"EDEmergencyDebuggerTest>>#testComposeStackTest",				"EDEmergencyDebuggerTest>>#testComposePromptWith",				"EDEmergencyDebuggerTest>>#testComposeErrorTextFrom",				"EDEmergencyDebuggerTest>>#testComposeStackText",				"EvaluateCommandLineHandler>>#evaluateStdIn",				"FFICallback class>>#exampleCqsort",				"FFICallout>>#parseOptions:",				"FFICalloutTest>>#testBuildingFnSpec",				"FFIExternalArrayTest>>#testExternalAtPutFloat",				"FFIExternalStructureFieldParser>>#parseFields:structure:",				"FFIFunctionParser>>#skipSpace",				"FFIFunctionParser>>#parseInt",				"FFIFunctionParser>>#parseArgument",				"FFIFunctionParser>>#parseType",				"FFIFunctionParser>>#parseNamedFunction:",				"FFIFunctionParser>>#parseArgumentCastedType",				"FFIFunctionParser>>#parseWord",				"FFIFunctionParser>>#parseCastedType",				"FFITypeArrayTest>>#testExternalAtPutFloat",				"FIFOQueueTest>>#testContention1",				"FIFOQueueTest>>#runValidationTest",				"FIFOQueueTest>>#testHeavyContention",				"FIFOQueueTest>>#testHeavyContention2",				"FIFOQueueTest>>#runValidationTest2",				"FLBasicSerializationTest>>#testReadStream",				"FLDecoder>>#nextEncodedUint16",				"FLDecoder>>#nextEncodedInt32",				"FLDecoder>>#nextEncodedString",				"FLDecoder>>#nextEncodedUint64",				"FLDecoder>>#nextEncodedByte",				"FLDecoder>>#nextEncodedInt64",				"FLDecoder>>#nextEncodedUint24",				"FLDecoder>>#nextEncodedUint32",				"FLDecoder>>#nextEncodedUint8",				"FLIndexStream>>#nextIndex",				"FTExampleMethodListGeneratorDataSource>>#elementAt:ifAbsent:",				"FTGlyphSlotRec class>>#fieldsDesc",				"FileDialogWindowTest>>#randomTestPathName",				"FileLocator class>>#supportedOrigins",				"FloatTest>>#testFloatRounded",				"FloatTest>>#testFloatTruncated",				"Form>>#readAttributesFrom:",				"GIFReadWriter>>#readColorTable:",				"GIFReadWriter>>#readCommentExtension",				"GIFReadWriter>>#readBitDataOnFrame:",				"GIFReadWriter>>#understandsImageFormat",				"GIFReadWriter>>#readApplicationExtension",				"GIFReadWriter>>#readWord",				"GIFReadWriter>>#readHeader",				"GIFReadWriter>>#readBody",				"GIFReadWriter>>#readExtensionBlock:withFrame:",				"Generator>>#contents",				"Generator class>>#somePrimes",				"GeneratorTest>>#testErrorPropagation",				"GeneratorTest>>#testPeek",				"GeneratorTest>>#testReset",				"GeneratorTest>>#testAtEnd",				"GeneratorTest>>#testEmpty",				"GeneratorTest>>#testNext",				"HEBinaryReader>>#readByte",				"Heap class>>#heapSortExample",				"Heap class>>#heapExample",				"HiWheelColorStrategy>>#ruler:",				"HistoryIterator>>#redo",				"IceGitHubAPIPaginatedResult>>#all",				"ImageReadWriter>>#nextIntegerOfSize:signed:bigEndian:",				"ImageReadWriter>>#nextLong",				"ImageReadWriter>>#nextWord",				"ImageReadWriter>>#next",				"InflateStream>>#atEnd",				"InflateStream>>#readInto:startingAt:count:",				"InflateStream>>#next:into:startingAt:",				"InflateStream>>#pastEndRead",				"InflateStream>>#upTo:",				"InflateStream>>#next:",				"InflateStream>>#decompressAll",				"InlineTextDiffBuilder>>#split:",				"Integer class>>#readHexByteFrom:",				"JPEGReadStream>>#fillBuffer",				"JPEGReadStream>>#nextByte",				"JPEGReadWriter>>#parseAPPn",				"JPEGReadWriter>>#understandsImageFormat",				"JPEGReadWriter>>#parseStartOfScan",				"JPEGReadWriter>>#parseNextMarker",				"JPEGReadWriter>>#parseStartOfFile",				"JPEGReadWriter>>#parseQuantizationTable",				"JPEGReadWriter>>#parseFirstMarker",				"JPEGReadWriter>>#parseHuffmanTable",				"JPEGReadWriter class>>#understandsImageFormat:",				"LGitExternalStructureFieldParser>>#parseFields:structure:",				"LGitRefSpec>>#initializeFromString:",				"LGitRepository>>#createPackForReference:",				"LGitRevwalk>>#do:",				"LIFOQueue>>#nextIfNone:",				"LIFOQueue>>#fastPeek",				"LIFOQueue>>#peek",				"LIFOQueue>>#next",				"LIFOQueueTest>>#testBasics",				"LIFOQueueTest>>#testContention1",				"LIFOQueueTest>>#testHeavyContention",				"LayoutFrame>>#fromArray:",				"LzwGifDecoder>>#nextByte",				"LzwGifDecoder>>#codeStream:",				"LzwGifDecoder>>#peekByte",				"MCDataStream>>#objectAt:",				"MCDataStream>>#readMethod",				"MCDataStream>>#readArray",				"MCDataStream>>#next:",				"MCDataStream>>#readInstance",				"MCDataStream>>#nextAndClose",				"MCDataStream>>#readWordLike",				"MCDataStream>>#readString",				"MCDataStream>>#readShortInst",				"MCDataStream>>#next",				"MCDataStreamTest>>#testReadOnlyFileNamed",				"MCDataStreamTest>>#testFileNamed",				"MCHttpRepository>>#parseFileNamesFromStream:",				"MCMcdReader>>#loadPatch",				"MCMczReader>>#loadDefinitions",				"MCScanner>>#nextSymbol",				"MCScanner>>#nextArray",				"MCScanner>>#next",				"MCScanner class>>#scan:",				"MCStWriterTest>>#testMethodDefinitionWithBangs",				"MCStWriterTest>>#testMethodDefinition",				"MCStWriterTest>>#assertAllChunksAreWellFormed",				"MCStWriterTest>>#testClassMethodDefinition",				"MCStWriterTest>>#testInitializerDefinition",				"MCStWriterTest>>#testClassDefinitionA",				"MIMEHeaderValue class>>#fromMIMEHeader:",				"MailMessage>>#timeFrom:",				"MailMessage>>#skipWeekdayName:",				"MailMessage>>#readDateFrom:",				"Month class>>#readFrom:",				"MonthTest>>#selectorsToBeIgnored",				"MonthTest>>#testPreviousNext",				"NSPerlinNoise3>>#initialize",				"NetNameResolver class>>#addressFromString:",				"NetNameResolver class>>#readDecimalByteFrom:",				"NumberParser>>#readExponent",				"NumberParser>>#nextElementaryLargeIntegerBase:",				"OCASTTranslator>>#emitAllButLastCases:",				"OCASTTranslator>>#emitCaseOf:otherwiseBlock:",				"OCSourceCode2BytecodeTest>>#testPrimNext",				"Object>>#readDataFrom:size:",				"OmSTONEntryReader>>#nextEntry",				"OmSTONEntryReader>>#nextEntryPositionIfFound:ifNone:",				"PNGReadWriter>>#processNonInterlaced",				"PNGReadWriter>>#understandsImageFormat",				"PNGReadWriter>>#processInterlaced",				"PanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"PanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"PharoSyntaxTutorial>>#divideTwoByZero",				"PharoTutorialGoOnMockTutorialTest>>#testNextShouldGoToSecondLesson",				"PharoTutorialNavigationTest>>#testNextOpenSecondLesson",				"PharoTutorialNavigationTest>>#testSequenceNextNextPreviousOpenSecondLesson",				"PharoTutorialNavigationTest>>#testSequenceNextNextOpenThirdLesson",				"PluginBasedJPEGReadWriter>>#understandsImageFormat",				"PositionableStream>>#nextDelimited:",				"PositionableStream>>#int32",				"PositionableStream>>#decodeString:andRuns:",				"PositionableStream>>#uint32",				"PositionableStream>>#match:",				"PositionableStream>>#upTo:",				"PositionableStream>>#basicNextChunk",				"PositionableStream>>#next:",				"PositionableStream>>#uint24",				"PositionableStream>>#nextInt32",				"PositionableStream>>#peekFor:",				"PositionableStream>>#upToEnd",				"PositionableStream>>#uint16",				"PositionableStream>>#positionOfSubCollection:ifAbsent:",				"PositionableStream>>#upToAny:",				"PositionableStream>>#boolean",				"PositionableStream>>#readInto:startingAt:count:",				"PositionableStream>>#skipSeparatorsAndPeekNext",				"PositionableStream>>#peek",				"PositionableStream>>#skipSeparators",				"PositionableStream>>#nextPreamble",				"PositionableStream>>#nextString",				"PositionableStream>>#backUpTo:",				"PositionableStream>>#nextStringOld",				"PositionableStream>>#nextChunk",				"PositionableStream>>#nextNumber:",				"PositionableStream>>#upToAnyOf:do:",				"PositionableStream>>#nextWord",				"PositionableStream>>#skipTo:",				"PositionableStream>>#int16",				"PositionableStream>>#oldBack",				"ProfStef>>#next",				"ProfStef class>>#next",				"QuotedPrintableMimeConverter>>#mimeEncode",				"QuotedPrintableMimeConverter>>#mimeDecode",				"RBMethodName>>#printOn:",				"RBParser>>#scannerNext",				"RBRefactoryDefinitionChange>>#namesIn:",				"RBRegexRefactoring>>#execute:replace:with:",				"RBScanner>>#step",				"RBScanner>>#contents",				"RBScanner class>>#isVariable:",				"RBScannerTest>>#testNextNegativeFloatNumbersIsNumberLiteral",				"RBScannerTest>>#testNextBinarySelectorStopAtLastLetter",				"RBScannerTest>>#testNextFirstTokenContainsPrecedingComments",				"RBScannerTest>>#testNextSpecialCharactereisSpecial",				"RBScannerTest>>#testNextAcceptLiteralArrayWithParenthesis",				"RBScannerTest>>#testNextErrorStopAtErrorCharacter",				"RBScannerTest>>#testNextKeywordCanNotBeginWithDigit",				"RBScannerTest>>#testNextMultipleKeywordStopAtLastLetter",				"RBScannerTest>>#testNextTrimsEndLineBreak",				"RBScannerTest>>#testNextNilIsLiteral",				"RBScannerTest>>#testNextTrimsBeginningTab",				"RBScannerTest>>#testNextFloatNumbersCanNotHaveSpaces",				"RBScannerTest>>#testNextKeywordCanNotBeFullBinary",				"RBScannerTest>>#testNextLiteralArrayWithBracketStartAtHashtag",				"RBScannerTest>>#testNextLiteralBeginningWithApostropheThrowsError",				"RBScannerTest>>#testNextDoesNotAddTabToComments",				"RBScannerTest>>#testNextFalseIsLiteral",				"RBScannerTest>>#testNextIdentifierCanNotBeginWithBinary",				"RBScannerTest>>#testNextSpecialCharactereisSingle",				"RBScannerTest>>#testNextWithTwoDoubleQuotesInComment",				"RBScannerTest>>#testNextTrimsMiddleTab",				"RBScannerTest>>#testNextIdentifierStopAtLastLetter",				"RBScannerTest>>#testNextIdentifierCanNotHaveBinary",				"RBScannerTest>>#testNextLiteralArrayHasRightValue",				"RBScannerTest>>#testNextLiteralCharacterCanBeAnyCharacter",				"RBScannerTest>>#testNextTokenStartAfterLineBreak",				"RBScannerTest>>#testNextTrimsMiddleSpaces",				"RBScannerTest>>#testNextLiteralCharacterHasCharacterAsValue",				"RBScannerTest>>#testCommentTokenStartAtFirstQuote",				"RBScannerTest>>#testNextTrimsEndTab",				"RBScannerTest>>#testNextRadixNumbersCanBeFloatAsWell",				"RBScannerTest>>#testNextTrimsBeginningLineBreak",				"RBScannerTest>>#testNextWithAnIdentifierTokenGetTheIdentifierToken",				"RBScannerTest>>#testNextAssignementStopAtEqual",				"RBScannerTest>>#testNextLiteralStartAtFirstLetter",				"RBScannerTest>>#testNextTrimsBeginningComment",				"RBScannerTest>>#testNextKeywordCanNotBeFullDigit",				"RBScannerTest>>#testNextBinarySelectorStartAtFirstLetter",				"RBScannerTest>>#testNextHashtagStringIsLiteral",				"RBScannerTest>>#testNextLiteralStopAtLastLetter",				"RBScannerTest>>#testNextIdentifierCanNotEndWithBinary",				"RBScannerTest>>#testNextValueOfNegativeNumbers",				"RBScannerTest>>#testNextHashtagCanNotStandAlone",				"RBScannerTest>>#testNextLiteralWithMultipleHashtagTrimThem",				"RBScannerTest>>#testNextWithAnOpeningCommentGetError",				"RBScannerTest>>#testNextSpecialCharactereCanBeAssignement",				"RBScannerTest>>#testNextAllAlphabeticEndingWithColonGiveKeyword",				"RBScannerTest>>#testCommentTokenStopAtLastQuote",				"RBScannerTest>>#testNextKeyWordStartAtFirstLetter",				"RBScannerTest>>#testNextLiteralCanNotContainBinaryAndAlphabetic",				"RBScannerTest>>#testNextAllAlphabeticsGiveIdentifier",				"RBScannerTest>>#testNextIdentifierCanNotBeginWithDigit",				"RBScannerTest>>#testNextLiteralCharacterWithAMissingCharacter",				"RBScannerTest>>#testNextWithAnUnknownCharacterGetError",				"RBScannerTest>>#testNextAcceptAllAlphabeticAsLiteral",				"RBScannerTest>>#testNextAcceptRadixNumbers",				"RBScannerTest>>#testNextLiteralArrayWithParenthesisHasRigthValue",				"RBScannerTest>>#testNextNumberLiteralStopAtTheLastDigit",				"RBScannerTest>>#testNextTokenStartAfterSpaces",				"RBScannerTest>>#testNextNumberLiteralStartAtTheBeginning",				"RBScannerTest>>#testNextTrimsBeginningSpaces",				"RBScannerTest>>#testNextLiteralBeginningWithUnknownThrowsError",				"RBScannerTest>>#testNextErrorStartAtFirstCharacter",				"RBScannerTest>>#testNextWithUnFinishedCommentGivesAnError",				"RBScannerTest>>#testCommentTokenHasTheRightValue",				"RBScannerTest>>#testNextBeginningWithDigitIsNumber",				"RBScannerTest>>#testNextLiteralCanContainColon",				"RBScannerTest>>#testNextAssignementStartAtColon",				"RBScannerTest>>#testNextMultipleKeywordColonIsSufficientAfterFirstKeyword",				"RBScannerTest>>#testNextRadixNumbersCanBeNegative",				"RBScannerTest>>#testNextDoesNotAddSpacesToComments",				"RBScannerTest>>#testNextFloatNumbersCanBeNegative",				"RBScannerTest>>#testNextIdentifierValueIsName",				"RBScannerTest>>#testNextMultipleKeywordStartAtFirstLetter",				"RBScannerTest>>#testNextLiteralBeginningWithDigitThrowsError",				"RBScannerTest>>#testNextWithTwoDoubleQuotesInCommentGetError",				"RBScannerTest>>#testNextBinarySelectorCanBeMultipleBinaries",				"RBScannerTest>>#testNextCommentIsCommentToken",				"RBScannerTest>>#testNextLiteralCanBeBinary",				"RBScannerTest>>#testNextTrimsMiddleLineBreak",				"RBScannerTest>>#testNextWithAnOpeningCommentAtEndGetError",				"RBScannerTest>>#testNextNegativeNumberIsNumberLiteral",				"RBScannerTest>>#testNextTokenStartAfterTab",				"RBScannerTest>>#testNextFirstTokenContainsFollowingComments",				"RBScannerTest>>#testNextDollarSignErrorHasDollarValue",				"RBScannerTest>>#testNextAlphabeticsAndDigitGiveIdentifier",				"RBScannerTest>>#testNextKeywordBeginningWithSpecialCharacterIsNotKeyword",				"RBScannerTest>>#testNextStringErrorDoesNotPropagateInside",				"RBScannerTest>>#testNextTrimsEndSpaces",				"RBScannerTest>>#testNextLiteralBeginningWithSpecialThrowsError",				"RBScannerTest>>#testNextWithAnOpeningStringsGetError",				"RBScannerTest>>#testNextBinarySelectorValueIsBinary",				"RBScannerTest>>#testNextKeywordCanContainUnderscore",				"RBScannerTest>>#testNextAcceptLiteralArrayWithBracket",				"RBScannerTest>>#testNextBaseOfRadixNumbersCanNotBeOne",				"RBScannerTest>>#testNextEOFContainsCommentsWhenNoOtherToken",				"RBScannerTest>>#testNextIdentifierCanContainUnderscore",				"RBScannerTest>>#testNextLiteralCanHaveMultipleHashtag",				"RBScannerTest>>#testNextStringCanContainOtherString",				"RBScannerTest>>#testNextFloatNumbersHasFloatValue",				"RBScannerTest>>#testNextDoesNotAddLineBreakToComments",				"RBScannerTest>>#testNextDollarSignExpectedACharacter",				"RBScannerTest>>#testNextIdentifierStartAtFirstLetter",				"RBScannerTest>>#testNextTrimsMiddleComment",				"RBScannerTest>>#testNextKeywordCanNotBeginWithBinary",				"RBScannerTest>>#testNextWithAWrongSymbolGetError",				"RBScannerTest>>#testNextLiteralArrayWithParenthesisStartAtHashTag",				"RBScannerTest>>#testNextLiteralCharacterHasOnlyOneCharacter",				"RBScannerTest>>#testNextLiteralCanContainDigits",				"RBScannerTest>>#testNextKeywordStopAtColon",				"RBScannerTest>>#testNextAlphabeticAndDigitEndingWithColonGiveKeyword",				"RBScannerTest>>#testNextLiteralArrayWithBracketStopAtBracket",				"RBScannerTest>>#testNextSpecialCharacterStartAtTheBeginning",				"RBScannerTest>>#testNextUnknownCharacterThrowsError",				"RBScannerTest>>#testNextBinarySelectorStopsAtNonBinary",				"RBScannerTest>>#testNextSpecialCharacterStopAtThemself",				"RBScannerTest>>#testNextStringContainsAllTheContent",				"RBScannerTest>>#testNextTokenStartAfterComment",				"RBScannerTest>>#testNextLiteralArrayWithParenthesisStopAtParenthesis",				"RBScannerTest>>#testNextNegativeNumberCanNotHaveSpaces",				"RBScannerTest>>#testNextSecondTokenDoesNotConsumePrecedingComment",				"RBScannerTest>>#testNextAcceptFloatNumbers",				"RBScannerTest>>#testNextTrimsEndComment",				"RBScannerTest>>#testNextTwoKeywordIsMultipleKeyword",				"RBScannerTest>>#testNextTrueIsLiteral",				"RBScannerTest>>#testNextBinaryGivesBinarySelector",				"RBScannerTest>>#testNextStringIsLiteral",				"RBScannerTest>>#testNextUnderscoreWithOnlyDigitsIsIdentifier",				"RBScannerTest>>#testNextDollarSignIsError",				"RBScannerTest>>#testNextValueOfRadixNumbersCutsWhenValueIsImpossible",				"RBScannerTest>>#testNextKeywordValueIsStartToStop",				"RBScannerTest>>#testMultipleCommentTokensAreWellSeparated",				"RBScannerTest>>#testNextValueOfRadixNumbersIsConvertedToDecimal",				"RFC2047MimeConverter>>#mimeDecode",				"RFC2047MimeConverter>>#readWord",				"RSAlpharo>>#blinkRandomAmeba",				"RSAlpharo>>#renderIn:",				"RSAnimationExamples>>#example02BoxesLineCircles",				"RSAnimationExamples>>#example05ElasticEllipses",				"RSAnimationExamples>>#example23PerlinNoise",				"RSAnimationExamples>>#example18Rainbow",				"RSAnimationExamples>>#example28AlteredWorld",				"RSAnimationExamples>>#example09PerlinParticles",				"RSAnimationExamples>>#example30Perlin",				"RSAnimationExamples>>#example44A",				"RSAnimationExamples>>#example09b",				"RSAnimationExamples>>#example24RoassalPerlinNoise",				"RSAnimationExamples>>#example41River",				"RSAnimationExamples>>#example16Gris",				"RSBasicShapeExamples>>#example08EllipseBorder",				"RSCat>>#addStars",				"RSChartExample>>#example12ScatterPlotAndNormalizer",				"RSExporterExamples>>#example12SVGRelax",				"RSForceBasedLayout>>#accumulate:",				"RSForceBuilder>>#createObjects:radius:class:",				"RSForceLayoutInSpacesBuilder>>#example01",				"RSGaussianJitterVanDerPloegTreeLayout>>#initializeRSTWalkBasedRegularTreeLayoutRandomizedGaps",				"RSHorizontalGaussianJitterVanDerPloegTreeLayout>>#initializeRSTWalkBasedRegularTreeLayoutRandomizedGaps",				"RSInterference>>#initialize",				"RSLabelGenerator>>#searchMin:max:desired:",				"RSParticleD>>#level:",				"RSPieExamples>>#example07Dendi",				"RSPieExamples>>#example15Clockwise",				"RSPieExamples>>#example05Smash",				"RSSVGAnimationExamples>>#example02Miku",				"RSSVGAnimationExamples>>#example01SVGIcons",				"RSSVGExporterTest>>#testCanvasBackground",				"RSSegmentsVisitor>>#visitBoundingShape:",				"RSTWalkBasedRegularTreeLayoutRandomizedGaps>>#initializeRSTWalkBasedRegularTreeLayoutRandomizedGaps",				"RSTWalkBasedRegularTreeLayoutRandomizedPositioning>>#positionOfShape:atDepth:atBreadth:",				"RSXmasExample>>#background",				"RSXmasTree>>#initializeBraches",				"Random>>#asShapeScatter",				"Random>>#nextBetween:and:",				"Random>>#rsNext:and:",				"Random>>#density:",				"Random class>>#bucketTest:",				"RandomBernoulli>>#ifHead:ifTail:",				"RandomBernoulli>>#next",				"RandomBinomial>>#next",				"RandomBoxMullerBivariateGaussian>>#asShapeScatter",				"RandomBoxMullerBivariateGaussian>>#next",				"RandomExponential>>#next",				"RandomGaussian>>#next",				"RandomGeometric>>#next",				"RandomTest>>#testUnixRandomGeneratorSeed",				"RandomTest>>#testIfCompletelyBroken",				"RandomTest>>#testNext",				"RandomTestDistributions>>#testExponential",				"RandomTestDistributions>>#testBernoulli",				"RandomTestDistributions>>#testGeometric",				"RandomTestDistributions>>#testBinomial",				"RandomTestDistributions>>#testGaussianBoxMuller",				"RandomTestDistributions>>#testGaussian",				"RandomTestDistributions>>#testUniform",				"ReadStreamTest>>#testIsEmpty",				"ReadStreamTest>>#testOldBackOnPosition1",				"ReadStreamTest>>#testBackOnPosition1",				"ReadStreamTest>>#testUpTo3",				"ReadWriteStreamTest>>#testPosition",				"ReadWriteStreamTest>>#testIsEmpty",				"ReadWriteStreamTest>>#testUpTo",				"ReadWriteStreamTest>>#testReset",				"ReadWriteStreamTest>>#testNext",				"RemoteString>>#string",				"RubAbstractTextArea>>#withoutDecorator:",				"RubTextEditor>>#unNesting:with:",				"RubTextEditor>>#indent:fromStream:toStream:",				"RunArray class>>#scanFrom:",				"RxCharSetParser>>#initialize:",				"RxCharSetParser>>#match:",				"RxCharSetParser>>#parseNamedSet",				"RxMatcher>>#searchStream:",				"RxMatcher>>#lastChar",				"RxMatcher>>#copyStream:to:replacingMatchesWith:",				"RxMatcher>>#copyStream:to:translatingMatchesUsing:",				"RxMatcher>>#proceedSearchingStream:",				"RxMatcher>>#matchesOnStream:do:",				"RxMatcher>>#next",				"RxParser>>#characterSet",				"RxParser>>#lookAround",				"RxParser>>#quantifiedAtom:",				"RxParser>>#atom",				"RxParser>>#piece",				"RxParser>>#inputUpToAny:errorMessage:",				"RxParser>>#characterSetFrom:",				"RxParser>>#match:",				"RxParser>>#next",				"RxParser>>#inputUpTo:nestedOn:errorMessage:",				"RxParser>>#inputUpTo:errorMessage:",				"RxmPredicate>>#matchAgainst:",				"RxmSubstring>>#matchAgainst:",				"SDL_PixelFormat class>>#fieldsDesc",				"STON class>>#fromStream:",				"STON class>>#fromStreamWithComments:",				"STONCStyleCommentsSkipStream>>#skip:",				"STONCStyleCommentsSkipStream>>#consumeToCommentEnd",				"STONCStyleCommentsSkipStream>>#upTo:",				"STONCStyleCommentsSkipStream>>#consumeToEOL",				"STONCStyleCommentsSkipStream>>#nextNonCommentChar",				"STONCStyleCommentsSkipStream>>#peekFor:",				"STONCStyleCommentsSkipStream>>#upToEnd",				"STONCStyleCommentsSkipStream>>#nextLine",				"STONLargeWriteReadTest>>#materialize:",				"STONReader>>#parseCharacterConvertingNewLinesOn:",				"STONReader>>#parseNumberExponent",				"STONReader>>#parseNumberInteger",				"STONReader>>#parseEscapedCharacter",				"STONReader>>#parseCharacter",				"STONReader>>#parseSymbol",				"STONReader>>#parseClass",				"STONReader>>#parseNumberFraction",				"STONReader>>#parseCharacterHexDigit",				"STONReader>>#parseConstantDo:",				"STONReader>>#parseStringInternal",				"STONReader>>#parseTrailingSurrogateHexEscape",				"STONReader>>#consumeWhitespace",				"STONReaderTest>>#testClassWithUnderscore",				"STONReaderTest>>#testStreaming",				"STONReaderTest>>#testMultiple",				"STONReaderTest>>#testConvertingNewLines",				"STONReaderTest>>#testDictionaryWithIndirectReferenceKeys",				"STONReaderTest>>#testDictionaryWithComplexKeys",				"STONReaderTest>>#testDictionaryWithReferenceKeys",				"STONReaderTest>>#materialize:",				"STONReaderTest>>#testUnknownClasses",				"STONReaderTest>>#testDeepStructure",				"STONTest class>>#readFromFileNamed:",				"STONTest class>>#fastReadFromFileNamed:",				"STONWriteReadCommentsTest>>#materialize:",				"STONWriteReadTest>>#testSpecialClassNames",				"STONWriteReadTest>>#materialize:",				"STONWriter>>#encodeStringKeepingNewLines:",				"SettingsStonReader>>#load",				"SharedQueueTest>>#testContention1",				"SmalltalkImage>>#newSpecialObjectsArray",				"SortedCollection>>#mergeSortedCollection:",				"SourceFile>>#nextChunk",				"SourceFile>>#getPreambleAt:",				"SourceFile>>#next",				"SourceFileArray>>#changeRecordsFrom:className:isMeta:do:",				"SourceFileArray>>#sourceCodeAt:",				"SourceFileArrayTest>>#testRemoteStringReadsInGivenSourceFileArray",				"SourceFileBufferedReadWriteStream>>#peek",				"SourceFileBufferedReadWriteStream>>#upTo:",				"SourceFileBufferedReadWriteStreamTest>>#testPeek",				"SourceFileCharacterReadWriteStream>>#upToAll:",				"SourceFileCharacterReadWriteStream>>#next",				"SpGeneratorListModel>>#at:ifAbsent:",				"SpPanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"SpPanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"SpStyleSTONReader>>#parseStyleName",				"SpStyleSTONReader class>>#fromStream:",				"StAbstractStringFilter>>#next",				"StFilter>>#next",				"StGeneratorBlockIteratorTest>>#testIteratorWithSingleElementIsAtEndAfterNext",				"StGeneratorBlockIteratorTest>>#testIteratorOnACalculatedCollectionReturnsOnlyFirst",				"StGeneratorIteratorTest>>#testCollectionWithSingleManyElementsReturnsTheRequested",				"StGeneratorIteratorTest>>#testCollectionWithSingleElementReturnsIt",				"StGenericGenerator>>#next",				"StIterator>>#next:",				"StIterator>>#upToEnd",				"StIteratorDecorator>>#next",				"StIteratorsTest>>#testIteratorOnACollectionWithCollectReturnsCorrectFirstValue",				"StIteratorsTest>>#testIteratorOnACollectionReturnsTheFirstValue",				"StIteratorsTest>>#testWordsAwareIteratorFiltersByASingleWord",				"StIteratorsTest>>#testSubstringFilterReturnsValidResults",				"StIteratorsTest>>#testWordsAwareIteratorFiltersByASequenceOfCamelCaseMixingCase",				"StIteratorsTest>>#testSubstringFilterReturnsValidResultsWithTheSameFilter",				"StIteratorsTest>>#testWordsAwareIteratorFiltersByASequenceOfWords",				"StIteratorsTest>>#testWordsAwareIteratorFiltersByASequenceOfCamelCaseWithUppercase",				"StIteratorsTest>>#testWordsAwareIteratorFiltersByASequenceOfCamelCase",				"StIteratorsTest>>#testWordsAwareIteratorFiltersLeftOutBecauseSecondWord",				"StIteratorsTest>>#testSubstringFilterDoesNotFetchTwiceIfTheFilterIsARefinementOfPreviousText",				"StIteratorsTest>>#testIteratorOnACollectionReturnsTheFirstValueAndSecondValue",				"StIteratorsTest>>#testBeginsWithFilterDoesNotFetchTwiceIfTheFilterIsARefinementOfPreviousText",				"StIteratorsTest>>#testWordsAwareIteratorFiltersByASingleWordFindingNothing",				"StIteratorsTest>>#testBeginsWithFilterReturnsValidResults",				"StIteratorsTest>>#testIteratorOnACollectionWithTwoCollectReturnsCorrectFirstValue",				"StIteratorsTest>>#testBeginsWithFilterReturnsValidResultsWithTheSameFilter",				"StSequenceIterator>>#next",				"StSpotterProcessor>>#executeQuery",				"StTransformation>>#next",				"StWithoutDuplicatesDecorator>>#next",				"StdioStream>>#peek",				"StdioStreamTest>>#testPeek",				"StdioStreamTest>>#testChangePosition",				"Stopwatch>>#end",				"Stream>>#nextMatchFor:",				"Stream>>#basicNext",				"Stream>>#do:",				"Stream>>#next:",				"Stream>>#nextMatchAll:",				"Stream>>#upToEnd",				"StrikeFont>>#readCharacter:from:",				"String>>#unescapeCharacter:",				"String>>#findTokens:escapedBy:",				"String>>#indentationIfBlank:",				"String>>#format:",				"String>>#expandMacrosWithArguments:",				"String>>#decodeMimeHeader",				"String>>#asAlphaNumeric:extraChars:mergeUID:",				"String>>#withLineEndings:",				"String class>>#readFrom:",				"SystemWindow>>#addPaneVSplitterBetween:and:",				"SystemWindow>>#addPaneHSplitterBetween:and:",				"TKTCommonQueueWorkerPoolTest>>#testWorkerPoolDoesNotExceedPoolSizeWhenSchedulingTasksInParallel",				"TKTFutureTest>>#testFutureSuccessCallbackExecutesInNewProcess",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsInNewProcessEveryTime",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsNeverInLocalProcess",				"TKTWorkerPool>>#stop",				"TKTWorkerPool>>#getAvailableWorker",				"TKTWorkerPoolTest>>#testWorkerPoolDoesNotExceedPoolSizeWhenSchedulingTasksInParallel",				"TKTWorkerProcess>>#privateNextTask",				"TabSelectorMorph>>#calculateVisibleTabs",				"TextDiffBuilder>>#patchSequenceDoIfMatch:ifInsert:ifRemove:",				"TextEditor>>#indent:fromStream:toStream:",				"Time class>>#readFrom:",				"Timespan>>#do:with:when:",				"Timespan>>#end",				"TimespanDoSpanAYearTest>>#testNext",				"TimespanDoTest>>#testNext",				"TimespanTest>>#testPrevious",				"TimespanTest>>#testNext",				"TonelCommentScanner>>#scan",				"TonelParser>>#metadata",				"TonelParser>>#removeComments:",				"TonelParser>>#separator",				"TonelParser>>#extractSelector:",				"TonelSourceScanner>>#readNext",				"TonelWriter>>#splitMethodSource:into:",				"TonelWriter>>#skipComment:",				"TutorialPlayerWithMockTutorialTest>>#testNavigation",				"TutorialPlayerWithMockTutorialTest>>#testResetTutorialGoBackToFirstLesson",				"UUID>>#readFrom:",				"UUIDGenerator class>>#next",				"UUIDGeneratorTest>>#testTwoDifferentGenerator",				"UUIDGeneratorTest>>#testUniqueness",				"UUIDGeneratorTest>>#testOne",				"UUIDGeneratorTest>>#testSpeed",				"UUIDGeneratorTest>>#testCounterRollover",				"UUIDGeneratorTest>>#testDefault",				"UUIDGeneratorTest>>#testTwoSameGenerator",				"UUIDGeneratorTest>>#timeFromUUID:",				"UnicodeTestRNG>>#randomCodePointBetween:and:",				"UnicodeTestRNG>>#next",				"UnixResolver>>#xdgParseUserDirLine:",				"WaitfreeQueue>>#size",				"WaitfreeQueue>>#peek",				"WaitfreeQueue>>#nextOrNilSuchThat:",				"WaitfreeQueue>>#nextIfNone:",				"WaitfreeQueue>>#flush:",				"WaitfreeQueue>>#flushAllSuchThat:",				"WaitfreeQueue>>#isEmpty",				"WaitfreeQueue>>#itemCount",				"WeakAnnouncementSubscription class>>#finalizeValues",				"WeakRegistry>>#finalizeValues",				"WeekTest>>#selectorsToBeIgnored",				"WeekTest>>#testPreviousNext",				"WelcomeHelp class>>#open",				"WideString class>>#newFromStream:",				"WordArray class>>#newFromStream:",				"ZdcAbstractSocketStream>>#readInto:startingAt:count:",				"ZdcAbstractSocketStream>>#skip:",				"ZdcAbstractSocketStream>>#upTo:",				"ZdcAbstractSocketStream>>#upToEnd",				"ZdcAbstractSocketStream>>#next",				"ZdcAbstractSocketStreamTest>>#testAddOneEcho",				"ZdcIOBufferTest>>#testCompactAtEnd",				"ZdcIOBufferTest>>#testCompact",				"ZdcIOBufferTest>>#testReading",				"ZdcIOBufferTest>>#testString",				"ZdcIOBufferTest>>#testAdvanceReadPointer",				"ZipEncoder>>#privateSendBlock:with:with:with:",				"ZnBase64Encoder>>#encode:to:",				"ZnBase64Encoder>>#skipWhitespace:",				"ZnBase64Encoder>>#decode:to:",				"ZnBufferedReadStream>>#nextIntegerOfSize:signed:bigEndian:",				"ZnBufferedReadStream>>#skip:",				"ZnBufferedReadStream>>#upTo:",				"ZnBufferedReadStream>>#peekFor:",				"ZnBufferedReadStreamTest>>#testPeek",				"ZnCharacterEncoderTest>>#testReadIntoStartingAtCountFromStreamWithOffset",				"ZnCharacterReadStream>>#match:",				"ZnCharacterReadStream>>#upToAll:",				"ZnCharacterReadStream>>#nextLine",				"ZnCharacterStreamTest>>#testReadStream",				"ZnCharacterStreamTest>>#testPeek",				"ZnChunkedReadStream>>#skip:",				"ZnChunkedReadStream>>#match:",				"ZnChunkedReadStream>>#upTo:",				"ZnDigestAuthenticator>>#createNonce",				"ZnDigestAuthenticator>>#createOpaque",				"ZnEncodedReadStream>>#readInto:startingAt:count:",				"ZnEncodedReadStream>>#peekFor:",				"ZnEncodedReadStream>>#skip:",				"ZnEncodedReadStream>>#upToEnd",				"ZnEncodedReadStream>>#upTo:",				"ZnFastLineReader>>#nextLine",				"ZnHeaders>>#readOneHeaderFrom:",				"ZnHtmlOutputStream>>#format:with:",				"ZnLimitedReadStream>>#peekFor:",				"ZnLimitedReadStream>>#skip:",				"ZnLimitedReadStream>>#match:",				"ZnLimitedReadStream>>#next",				"ZnLimitedReadStream>>#upTo:",				"ZnLimitedReadStreamTest>>#testSimpleEof",				"ZnLimitedReadStreamTest>>#testNext",				"ZnLineReader>>#processNext",				"ZnNullEncoder>>#nextCodePointFromStream:",				"ZnNullEncoder>>#readInto:startingAt:count:fromStream:",				"ZnPercentEncoder>>#encode:to:",				"ZnPercentEncoder>>#readHexFrom:",				"ZnPercentEncoder>>#decode:to:",				"ZnPositionableReadStream>>#readInto:startingAt:count:",				"ZnPositionableReadStream>>#peek",				"ZnPositionableReadStream>>#skip:",				"ZnPositionableReadStream>>#upTo:",				"ZnPositionableReadStream>>#peekFor:",				"ZnPositionableReadStream>>#upToEnd",				"ZnPositionableReadStream>>#next",				"ZnPositionableReadStreamTest>>#testPlainPeek",				"ZnPositionableReadStreamTest>>#testSearchBinary",				"ZnPositionableReadStreamTest>>#testUTF8",				"ZnPositionableReadStreamTest>>#testPlainNext",				"ZnPositionableReadStreamTest>>#testPositionErrors",				"ZnPositionableReadStreamTest>>#testSkipAndBack",				"ZnPositionableReadStreamTest>>#testEmpty",				"ZnPositionableReadStreamTest>>#testSearch",				"ZnSimplifiedByteEncoder>>#nextCodePointFromStream:",				"ZnSimplifiedByteEncoder>>#nextFromStream:",				"ZnStreamingEntity>>#consumeContent",				"ZnUTF16Encoder>>#read16BitWordFromStream:",				"ZnUTF32Encoder>>#readCodePointFrom:",				"ZnUTF8Encoder>>#nextCodePointFromStream:",				"ZnUrl>>#parsePath:",				"ZnUrlCopy>>#parsePath:"			]		},		"halves:base:" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"halves: aBlock base: aBase",						"",						"\t| n |",						"\tn := self numberOfDigitsInBase: aBase.",						"",						"\t^ self",						"\t\t  halves: aBlock",						"\t\t  at: (n / 2) ceiling",						"\t\t  digits: n",						"\t\t  base: aBase"					],					"body" : [						"| n |",						"n := self numberOfDigitsInBase: aBase.",						"",						"^ self",						"\t  halves: aBlock",						"\t  at: (n / 2) ceiling",						"\t  digits: n",						"\t  base: aBase"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 36148276,					"argumentNames" : [						"aBlock",						"aBase"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#dcMultiplyIntegerSlow:base:",				"Integer>>#dcMultiplyInteger:base:",				"Integer>>#dcMultiplyIntegerQuick:base:"			]		},		"testInspectTrueAndFalse" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectTrueAndFalse",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: (Array with: true with: false)",						"\t\t  slotDescriptorsContext:",						"\t\t\t  (CTSlotDescriptorsVisitor new collect: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor inline: false ])"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: (Array with: true with: false)",						"\t  slotDescriptorsContext:",						"\t\t  (CTSlotDescriptorsVisitor new collect: [ :aDescriptor | ",						"\t\t\t   aDescriptor inline: false ])"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169885,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"asSkewBinaryCanonicalSparse" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"asSkewBinaryCanonicalSparse",						"",						"\t| skew |",						"\tskew := SkewBinaryCanonicalNumber new.",						"\tself timesRepeat: [ skew := skew increment ].",						"\t^ skew"					],					"body" : [						"| skew |",						"skew := SkewBinaryCanonicalNumber new.",						"self timesRepeat: [ skew := skew increment ].",						"^ skew"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 2070018,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectSkewBinaryCanonicalSparse",				"Integer>>#skewBinaryCanonicalSparseRepresentation"			]		},		"testInspectInteger13Detailed" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectInteger13Detailed",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: 13",						"\t\t  slotDescriptorsContext: CTSlotDescriptorsVisitorIntegerDetails new"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: 13",						"\t  slotDescriptorsContext: CTSlotDescriptorsVisitorIntegerDetails new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169123,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectContext" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectContext",						"",						"\t^ self exportSlotsGraphOf: thisContext"					],					"body" : [						"^ self exportSlotsGraphOf: thisContext"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168978,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectFractionKissing" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionKissing",						"",						"\t| aFraction |",						"\taFraction := self testInspectFractionForKisses.",						"",						"\tself assert: aFraction kissingFractions equals: { ",						"\t\t\t(1 / 5).",						"\t\t\t(2 / 9).",						"\t\t\t(3 / 13).",						"\t\t\t(4 / 17).",						"\t\t\t(1 / 4).",						"\t\t\t(1 / 3).",						"\t\t\t(1 / 2) }.",						"",						"\t^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"body" : [						"| aFraction |",						"aFraction := self testInspectFractionForKisses.",						"",						"self assert: aFraction kissingFractions equals: { ",						"\t\t(1 / 5).",						"\t\t(2 / 9).",						"\t\t(3 / 13).",						"\t\t(4 / 17).",						"\t\t(1 / 4).",						"\t\t(1 / 3).",						"\t\t(1 / 2) }.",						"",						"^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3434253,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionReciprocalKissing"			]		},		"fairCoin" : {			"implementors" : {				"Random" : {					"sourceCode" : [						"fairCoin",						"",						"\t^ (RandomBernoulli seed: seed)",						"\t\t  p: 0.5;",						"\t\t  yourself"					],					"body" : [						"^ (RandomBernoulli seed: seed)",						"\t  p: 0.5;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1900018,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"CTBinaryTreeNode>>#mergeBinaryTreeElement:inBinaryTree:",				"RandomTestDistributions>>#testBernoulli"			]		},		"testInspectNil" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectNil",						"",						"\t^ self exportSlotsGraphOf: nil"					],					"body" : [						"^ self exportSlotsGraphOf: nil"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168975,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectFractionReciprocalKissing" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionReciprocalKissing",						"",						"\t| aFraction |",						"\taFraction := self testInspectFractionKissing reciprocal.",						"",						"\tself assert: aFraction kissingFractions equals: { ",						"\t\t\t(1 / 4).",						"\t\t\t(1 / 3).",						"\t\t\t(1 / 2) }.",						"",						"\t^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"body" : [						"| aFraction |",						"aFraction := self testInspectFractionKissing reciprocal.",						"",						"self assert: aFraction kissingFractions equals: { ",						"\t\t(1 / 4).",						"\t\t(1 / 3).",						"\t\t(1 / 2) }.",						"",						"^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3433545,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectBRGCodes" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectBRGCodes",						"",						"\t^ self exportSlotsGraphOf:",						"\t\t  ((0 to: 15) collect: [ :each | each asShapeBRGCDots ] as: RSGroup)"					],					"body" : [						"^ self exportSlotsGraphOf:",						"\t  ((0 to: 15) collect: [ :each | each asShapeBRGCDots ] as: RSGroup)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169684,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"kissingFractions" : {			"implementors" : {				"Fraction" : {					"sourceCode" : [						"kissingFractions",						"",						"\t| kissedFractions vl |",						"\tkissedFractions := Set new.",						"",						"\tvl := ValueLink new",						"\t\t      value: self asFractionWrtFloor;",						"\t\t      yourself.",						"",						"\t[ vl ] whileNotNil: [ ",						"\t\t| gcd diophantinePoint next less aFraction |",						"\t\taFraction := vl value.",						"\t\tkissedFractions add: aFraction.",						"",						"\t\tgcd := aFraction numerator >|< aFraction denominator.",						"\t\tdiophantinePoint := gcd point.",						"\t\tnext := diophantinePoint x / diophantinePoint y negated.",						"",						"\t\tless := aFraction numerator - next numerator",						"\t\t        / (aFraction denominator - next denominator).",						"",						"\t\tvl := next kissingFractionLink:",						"\t\t\t      (less kissingFractionLink: vl nextLink) ].",						"",						"\t^ kissedFractions asArray",						"\t\t  sort;",						"\t\t  yourself"					],					"body" : [						"| kissedFractions vl |",						"kissedFractions := Set new.",						"",						"vl := ValueLink new",						"\t      value: self asFractionWrtFloor;",						"\t      yourself.",						"",						"[ vl ] whileNotNil: [ ",						"\t| gcd diophantinePoint next less aFraction |",						"\taFraction := vl value.",						"\tkissedFractions add: aFraction.",						"",						"\tgcd := aFraction numerator >|< aFraction denominator.",						"\tdiophantinePoint := gcd point.",						"\tnext := diophantinePoint x / diophantinePoint y negated.",						"",						"\tless := aFraction numerator - next numerator",						"\t        / (aFraction denominator - next denominator).",						"",						"\tvl := next kissingFractionLink:",						"\t\t      (less kissingFractionLink: vl nextLink) ].",						"",						"^ kissedFractions asArray",						"\t  sort;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 2293772,					"argumentNames" : [ ]				},				"BlockClosure" : {					"sourceCode" : [						"kissingFractions",						"",						"\t| fractions news level |",						"\tlevel := 1.",						"\tfractions := SortedCollection with: 0 with: 1.",						"",						"\t[ ",						"\tnews := OrderedCollection new.",						"\tfractions overlappingPairsDo: [ :a :b | ",						"\t\t| f |",						"\t\tf := a \\/ b.",						"\t\t(self",						"\t\t\t cull: f",						"\t\t\t cull: fractions",						"\t\t\t cull: news",						"\t\t\t cull: level) ifTrue: [ news add: f ] ].",						"\tnews isEmpty ] whileFalse: [ ",						"\t\tfractions addAll: news.",						"\t\tlevel := level + 1 ].",						"",						"\t^ fractions",						"\t\t  removeFirst;",						"\t\t  removeLast;",						"\t\t  asArray"					],					"body" : [						"| fractions news level |",						"level := 1.",						"fractions := SortedCollection with: 0 with: 1.",						"",						"[ ",						"news := OrderedCollection new.",						"fractions overlappingPairsDo: [ :a :b | ",						"\t| f |",						"\tf := a \\/ b.",						"\t(self",						"\t\t cull: f",						"\t\t cull: fractions",						"\t\t cull: news",						"\t\t cull: level) ifTrue: [ news add: f ] ].",						"news isEmpty ] whileFalse: [ ",						"\tfractions addAll: news.",						"\tlevel := level + 1 ].",						"",						"^ fractions",						"\t  removeFirst;",						"\t  removeLast;",						"\t  asArray"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1331651,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionReciprocalKissing",				"EssentialsObjectTest>>#testInspectFractionKissingEnumeration",				"EssentialsObjectTest>>#testInspectFractionKissing",				"Fraction>>#asShapeFordCircles"			]		},		"testInspectFloatPi" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFloatPi",						"",						"\t^ self exportSlotsGraphOf: Float π"					],					"body" : [						"^ self exportSlotsGraphOf: Float π"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169078,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspect20CatalanNumbers" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect20CatalanNumbers",						"",						"\t| catalan |",						"\tcatalan := 20 catalanNumbers.",						"",						"\tself",						"\t\tassert: -3 catalanNumbers equals: #(  );",						"\t\tassert: 0 catalanNumbers equals: #(  );",						"\t\tassert: catalan",						"\t\tequals:",						"\t\t\t#( 1 1 2 5 14 42 132 429 1430 4862 16796 58786 208012 742900 2674440",						"\t\t\t   9694845 35357670 129644790 477638700 1767263190 ).",						"",						"\t^ self exportSlotsGraphOf: catalan"					],					"body" : [						"| catalan |",						"catalan := 20 catalanNumbers.",						"",						"self",						"\tassert: -3 catalanNumbers equals: #(  );",						"\tassert: 0 catalanNumbers equals: #(  );",						"\tassert: catalan",						"\tequals:",						"\t\t#( 1 1 2 5 14 42 132 429 1430 4862 16796 58786 208012 742900 2674440",						"\t\t   9694845 35357670 129644790 477638700 1767263190 ).",						"",						"^ self exportSlotsGraphOf: catalan"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3433526,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"asInteger" : {			"implementors" : {				"Number" : {					"sourceCode" : [						"asInteger",						"",						"\t\"Round me towards nearest integer closer to zero.\"",						"",						"\t\"This violates the ANSI standard, but the system depends on this\"",						"",						"\t^ self truncated"					],					"body" : [						"^ self truncated"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [						"Round me towards nearest integer closer to zero."					],					"hash" : 1667695,					"argumentNames" : [ ]				},				"ExternalAddress" : {					"sourceCode" : [						"asInteger",						"",						"\t\"convert address to integer\"",						"",						"\t^ self asByteArrayPointer integerAt: 1 size: self size signed: false"					],					"body" : [						"^ self asByteArrayPointer integerAt: 1 size: self size signed: false"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [						"convert address to integer"					],					"hash" : 1752792,					"argumentNames" : [ ]				},				"ExternalData" : {					"sourceCode" : [						"asInteger",						"",						"\t^ self getHandle asInteger"					],					"body" : [						"^ self getHandle asInteger"					],					"isTestMethod" : false,					"category" : "*UnifiedFFI",					"comment" : [ ],					"hash" : 1753090,					"argumentNames" : [ ]				},				"LGitId" : {					"sourceCode" : [						"asInteger",						"",						"\t^ self asByteArray asInteger"					],					"body" : [						"^ self asByteArray asInteger"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [ ],					"hash" : 2929154,					"argumentNames" : [ ]				},				"String" : {					"sourceCode" : [						"asInteger",						"",						"\t\"Return the integer present in the receiver, or nil. In case of float, returns the integer part.\"",						"",						"\t\"'1' asInteger >>> 1\"",						"",						"\t\"'-1' asInteger >>> -1\"",						"",						"\t\"'10' asInteger >>> 10\"",						"",						"\t\"'a' asInteger >>> nil\"",						"",						"\t\"'1.234' asInteger >>> 1\"",						"",						"\t^ self asSignedInteger"					],					"body" : [						"^ self asSignedInteger"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [						"Return the integer present in the receiver, or nil. In case of float, returns the integer part."					],					"hash" : 1600879,					"argumentNames" : [ ]				},				"True" : {					"sourceCode" : [						"asInteger",						"",						"\t^ 1"					],					"body" : [						"^ 1"					],					"isTestMethod" : false,					"category" : "*UnifiedFFI",					"comment" : [ ],					"hash" : 1648100,					"argumentNames" : [ ]				},				"False" : {					"sourceCode" : [						"asInteger",						"",						"\t^ 0"					],					"body" : [						"^ 0"					],					"isTestMethod" : false,					"category" : "*UnifiedFFI",					"comment" : [ ],					"hash" : 1647586,					"argumentNames" : [ ]				},				"SkewBinaryCanonicalNumber" : {					"sourceCode" : [						"asInteger",						"",						"\t| value |",						"\tvalue := 0.",						"\trepresentation do: [ :each | value := value + each ].",						"\t^ value"					],					"body" : [						"| value |",						"value := 0.",						"representation do: [ :each | value := value + each ].",						"^ value"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [ ],					"hash" : 3590975,					"argumentNames" : [ ]				},				"Character" : {					"sourceCode" : [						"asInteger",						"",						"\t\"Answer the receiver's character code.\"",						"",						"\t<primitive: 171>",						"\t^ self primitiveFailed"					],					"body" : [						"^ self primitiveFailed"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [						"Answer the receiver's character code."					],					"hash" : 860693,					"argumentNames" : [ ]				},				"ByteArray" : {					"sourceCode" : [						"asInteger",						"",						"\t\"Convert me to an Integer, network byte order, most significant byte first, big endian\"",						"",						"\t| integer |",						"\tinteger := 0.",						"\tself withIndexDo: [ :each :index | ",						"\t\tinteger := integer + (each bitShift: self size - index * 8) ].",						"\t^ integer"					],					"body" : [						"| integer |",						"integer := 0.",						"self withIndexDo: [ :each :index | ",						"\tinteger := integer + (each bitShift: self size - index * 8) ].",						"^ integer"					],					"isTestMethod" : false,					"category" : "*System-Hashing-Core",					"comment" : [						"Convert me to an Integer, network byte order, most significant byte first, big endian"					],					"hash" : 1070770,					"argumentNames" : [ ]				},				"Integer" : {					"sourceCode" : [						"asInteger",						"",						"\t\"Answer with the receiver itself.\"",						"",						"\t^ self"					],					"body" : [						"^ self"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [						"Answer with the receiver itself."					],					"hash" : 1871752,					"argumentNames" : [ ]				},				"ThirtyTwoBitRegister" : {					"sourceCode" : [						"asInteger",						"",						"\t\"Answer the integer value of my current contents.\"",						"",						"\t^ (hi bitShift: 16) + low"					],					"body" : [						"^ (hi bitShift: 16) + low"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the integer value of my current contents."					],					"hash" : 1948563,					"argumentNames" : [ ]				},				"IceSemanticVersion" : {					"sourceCode" : [						"asInteger",						"",						"\t\"this does not works for versions 0.100+.*, but I do not think it will arrive to that\"",						"",						"\t^ self major * 10000 + (self minor * 100) + self patch"					],					"body" : [						"^ self major * 10000 + (self minor * 100) + self patch"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [						"this does not works for versions 0.100+.*, but I do not think it will arrive to that"					],					"hash" : 7340591,					"argumentNames" : [ ]				}			},			"senders" : [				"AbstractBinaryFileStream>>#lf",				"AbstractBinaryFileStream>>#cr",				"AbstractBinaryFileStream>>#nextPut:",				"AbstractKeymappingTest>>#eventKey:alt:ctrl:command:shift:",				"AndreasSystemProfiler>>#reportGCStatsOn:",				"AsciiCharset class>>#toUppercase:",				"AsciiCharset class>>#toLowercase:",				"AthensBalloonEngine>>#strokeRectangle:width:",				"AthensCairoCanvas>>#primSetLineCap:",				"AthensCairoCanvas>>#showGlyphs:size:",				"AthensCairoCanvas>>#primSetDashesLengths:count:offset:",				"AthensCairoCanvas>>#primSetLineJoin:",				"AthensCairoCanvas>>#setFillRule:",				"AthensCairoCanvas>>#primResetDashes:",				"AthensCairoCanvas>>#setAA:",				"AthensCairoPaintMode>>#setOperator:",				"AthensCairoSurface class>>#createFromFile:ifFailed:",				"AthensCairoSurface class>>#primImage:width:height:",				"AthensCairoSurface class>>#fromForm:",				"AthensCairoSurface class>>#destroyContextHandle:",				"AthensCairoSurface class>>#destroySurfaceHandle:",				"AthensTiger>>#readParts",				"Base64MimeConverter>>#mimeEncode",				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"BitBlt>>#roundVariables",				"BorderedMorph>>#changeBorderWidth:",				"ByteArray>>#char32AtOffset:put:",				"ByteArray>>#char16AtOffset:put:",				"ByteArray>>#char8AtOffset:put:",				"CairoFontFace>>#primSetSynthesizeEmphasis:",				"CairoFontFace class>>#primFtFace:loadFlags:",				"CairoFontMetricsProvider>>#convertString:len:ofFont:toGlyphs:numGlyphs:x:y:",				"CairoFontOptions>>#setHintStyle:",				"CairoFontOptions>>#setSubpixelOrder:",				"CairoFontOptions>>#setHintMetrics:",				"CairoFontOptions>>#setAA:",				"CairoScaledFont>>#getExtentsOfGlyphs:ofLength:into:",				"Character>>#storeBinaryOn:",				"Character>>#isSeparator",				"Character>>#hexDigitValue",				"Character>>#asUnicode",				"Character>>#shouldBePrintedAsLiteral",				"Character>>#isOctetCharacter",				"Character>>#basicPharoToIso",				"Character>>#storeOn:",				"Character>>#printStringHex",				"Character>>#hex",				"Character>>#charCode",				"Character>>#serializeOn:",				"Character>>#leadingChar",				"Character>>#digitValue",				"Character>>#printOn:",				"Character class>>#digitValue:",				"Color>>#closestXTermPixelValue",				"Color>>#/",				"Color>>#asColorref",				"Color>>#initializeHue:saturation:brightness:alpha:",				"Color>>#setHue:saturation:brightness:",				"Color>>#asRGBInteger",				"Color>>#setAlpha:",				"Color>>#initializeHue:saturation:lightness:alpha:",				"Color>>#*",				"Color class>>#hex:",				"ColorSelectorDialogWindow>>#hue",				"ColorSelectorDialogWindow>>#red",				"ColorSelectorDialogWindow>>#blue",				"ColorSelectorDialogWindow>>#saturation",				"ColorSelectorDialogWindow>>#brightness",				"ColorSelectorDialogWindow>>#green",				"ColorSelectorDialogWindow>>#alpha",				"CommandLineUIManager>>#chooseFrom:lines:title:",				"ComplexBorderStyle>>#computeAltFramedColors",				"ComplexBorderStyle>>#computeRaisedColors",				"ComplexBorderStyle>>#computeAltInsetColors",				"ComplexBorderStyle>>#computeFramedColors",				"ComplexBorderStyle>>#computeInsetColors",				"ComplexBorderStyle>>#computeAltRaisedColors",				"CompressedBoundaryShape>>#morphFrom:to:at:",				"Context>>#object:basicAt:",				"Context>>#object:basicAt:put:",				"Context>>#at:",				"Context>>#at:put:",				"DateAndTime class>>#fromSeconds:offset:",				"DateAndTime class>>#fuzzyReadFrom:",				"DateParser>>#currentMillenium",				"DateParser>>#parse:expectedSize:",				"Delay>>#setDelay:",				"Delay>>#setDelay:forSemaphore:",				"DigitalSignatureAlgorithm>>#initRandomFromString:",				"Duration>>#*",				"Duration>>#'//'",				"Duration>>#/",				"Duration class>>#readFrom:",				"EncoderForSistaV1>>#genPushCharacter:",				"EncoderForSistaV1>>#isSpecialLiteralForPush:",				"EssentialsObjectTest>>#testInspectSkewBinaryCanonicalSparse",				"ExternalAddress>>#value",				"ExternalAddress>>#char16AtOffset:put:",				"ExternalAddress>>#char32AtOffset:put:",				"ExternalAddress>>#char8AtOffset:put:",				"ExternalAddress>>#printOn:",				"ExternalData>>#asInteger",				"ExternalData>>#value",				"FFICallbackParametersTest>>#testCharacterParameters",				"FFICalloutMethodBuilderTestRequestor>>#loaderFromMethodArgsNamed:",				"FFIConstantHandleTest>>#testReturn",				"FFIFunctionParser>>#parseInt",				"FFIVoid>>#callbackReturnOn:for:",				"FIFOQueueTest>>#runValidationTest",				"FIFOQueueTest>>#testHeavyContention",				"FIFOQueueTest>>#testHeavyContention2",				"FIFOQueueTest>>#runValidationTest2",				"FLPlatform>>#versionNumber",				"FT2Face>>#glyphOfCharacter:",				"FT2Face>>#angle:scale:offset:",				"FT2Face>>#angle:scale:offset:slant:",				"FT2Face>>#ffiOutline:embolden:",				"FT2Face>>#ffiGetCharIndex:",				"FT2Face>>#ffiLoadChar:flags:",				"FT2Face>>#angle:scalePoint:offset:slant:",				"FT2Face>>#transformOutlineAngle:scalePoint:slant:",				"FT2Face>>#kerningLeft:right:",				"FT2Face>>#setCharMap:",				"FT2Face>>#ffiTranslateOutline:x:y:",				"FT2Face>>#angle:scalePoint:offset:",				"FT2Face>>#ffiGetKerningLeft:right:result:",				"FT2Face>>#ffiSetPixelWidth:height:",				"FT2Library>>#ffiNewFace:fromFilename:index:",				"FT2Library>>#ffiNewFace:fromMemory:size:index:",				"FTTableMorph>>#verticalScrollBarValueToRowIndex:",				"FileReference class>>#newTempFilePrefix:suffix:",				"Float>>#printPaddedWith:to:",				"Float>>#absPrintOn:base:digitCount:",				"Float>>#asSVGString",				"Float>>#asApproximateFractionAtOrder:",				"FloatTest>>#testComparison",				"FloatTest>>#testFloatTruncated",				"Form>>#paintBits:at:translucent:",				"Form>>#setExtent:depth:",				"Form>>#rotateBy:magnify:smoothing:",				"Form>>#setExtent:depth:bits:",				"Form>>#colorReduced",				"Form>>#colorsUsed",				"Form>>#copyBits:at:translucent:",				"Fraction>>#setNumerator:denominator:",				"FreeTypeCacheTest>>#testFailedGet",				"FreeTypeCacheTest>>#testMaximumSizeRespectedOnPut",				"FreeTypeCacheTest>>#testNormalPutGetWidth",				"FreeTypeCacheTest>>#testNormalPutGet",				"FreeTypeCacheTest>>#testNormalPutGetTwice",				"FreeTypeCacheTest>>#testNormalGetIfAbsentPutTwiceIntoNonEmptyCache",				"FreeTypeCacheTest>>#testPutSameElementTwice",				"FreeTypeCacheTest>>#testNormalGetIfAbsentPut",				"FreeTypeCacheTest>>#testMaximumSizeRespectedOnIfAbsentPut",				"FreeTypeCacheTest>>#testNormalGetIfAbsentPutTwice",				"FreeTypeFont>>#glyphOf:destDepth:colorValue:subpixelPosition:",				"FreeTypeFont>>#getLinearWidthOf:",				"FreeTypeFont>>#hintedWidthOf:",				"FreeTypeFont>>#hasGlyphsForAll:",				"FreeTypeFont>>#hasDistinctGlyphsForAll:",				"FreeTypeFont>>#linearKerningLeft:right:",				"FreeTypeFont>>#mode41GlyphOf:colorValue:mono:subpixelPosition:",				"FreeTypeFont>>#linearWidthOf:",				"FreeTypeFont>>#subGlyphOf:colorValue:mono:subpixelPosition:",				"FreeTypeFont>>#getWidthOf:",				"FreeTypeFont>>#glyphOf:colorValue:mono:subpixelPosition:",				"FreeTypeFont>>#widthOfString:from:to:",				"FreeTypeGlyphRenderer>>#renderGlyph:depth:subpixelPosition:font:",				"FreeTypeSubPixelAntiAliasedGlyphRenderer>>#renderStretchedGlyph:depth:subpixelPosition:font:",				"GIFReadWriter class>>#initialize",				"GoferVersionReference>>#parseName:",				"HEInteger>>#doReadFrom:",				"HaloMorph>>#doGrow:with:",				"HaloMorph>>#positionIn:horizontalPlacement:verticalPlacement:",				"IceSemanticVersion>>#<",				"IceSemanticVersion>>#=",				"ImageReadWriter>>#space",				"ImageReadWriter>>#lf",				"ImageReadWriter>>#cr",				"ImageReadWriter>>#tab",				"Integer>>#asStringAZaz",				"Integer>>#isProbablyPrimeWithK:andQ:randomIndex:",				"Integer>>#humanReadableSIByteSizeOn:",				"Integer>>#asStringaz",				"Integer class>>#primesUpTo:do:",				"Integer class>>#largePrimesUpTo:do:",				"IntegerTest>>#testIntegerHex",				"IntegerTest>>#testBitAverage",				"InternetConfiguration class>>#setHttpProxy",				"JPEGReadStream>>#nextByte",				"KeyboardEvent>>#storeOn:",				"LGitBranchIterator>>#branch_iterator_new:repo:list_flags:",				"LGitCheckoutOptions>>#prim_notify_cb",				"LGitCheckoutOptions>>#checkout_init_options:version:",				"LGitCheckoutOptions>>#prim_progress_cb",				"LGitCheckoutOptions>>#prim_perfdata_cb",				"LGitCloneOptionsV02x>>#prim_remote_cb",				"LGitCloneOptionsV02x>>#prim_repository_cb",				"LGitCloneOptionsV100>>#prim_remote_cb",				"LGitCloneOptionsV100>>#prim_repository_cb",				"LGitCloneOptionsV120>>#prim_remote_cb",				"LGitCloneOptionsV120>>#prim_repository_cb",				"LGitCommit>>#commit_parent_id:n:",				"LGitCommitBuilder>>#commit_create:repo:update_ref:author:committer:message_encoding:message:tree:parent_count:parents:",				"LGitDiffOptions>>#prim_notify_cb",				"LGitDiffOptions>>#prim_progress_cb",				"LGitDiffOptions>>#diff_init_options:version:",				"LGitDiffSimilarityMetric>>#prim_free_signature",				"LGitDiffSimilarityMetric>>#prim_file_signature",				"LGitDiffSimilarityMetric>>#prim_similarity",				"LGitDiffSimilarityMetric>>#prim_buffer_signature",				"LGitFetchOptionsV100>>#fetch_init_options:version:",				"LGitId>>#asInteger",				"LGitId>>#asByteArray",				"LGitId>>#oid_fmt:size:id:",				"LGitIndex>>#index_add_all:pathspec:flags:callback:payload:",				"LGitObject>>#object_lookup:repo:id:type:",				"LGitPackbuilderForeachPayload>>#prim_progress_cb",				"LGitProxyOptions>>#prim_credentials",				"LGitProxyOptions>>#prim_certificate_check",				"LGitRemoteCallbacksV02x>>#prim_transfer_progress",				"LGitRemoteCallbacksV02x>>#prim_sideband_progress",				"LGitRemoteCallbacksV02x>>#prim_push_transfer_progress",				"LGitRemoteCallbacksV02x>>#prim_push_negotiation",				"LGitRemoteCallbacksV02x>>#prim_credentials",				"LGitRemoteCallbacksV02x>>#prim_completion",				"LGitRemoteCallbacksV02x>>#prim_update_tips",				"LGitRemoteCallbacksV02x>>#prim_certificate_check",				"LGitRemoteCallbacksV02x>>#prim_push_update_reference",				"LGitRemoteCallbacksV02x>>#prim_pack_progress",				"LGitRemoteCallbacksV100>>#remote_init_callbacks:version:",				"LGitRemoteCallbacksV100>>#prim_transfer_progress",				"LGitRemoteCallbacksV100>>#prim_sideband_progress",				"LGitRemoteCallbacksV100>>#prim_push_transfer_progress",				"LGitRemoteCallbacksV100>>#prim_push_negotiation",				"LGitRemoteCallbacksV100>>#prim_credentials",				"LGitRemoteCallbacksV100>>#prim_completion",				"LGitRemoteCallbacksV100>>#prim_update_tips",				"LGitRemoteCallbacksV100>>#prim_certificate_check",				"LGitRemoteCallbacksV100>>#prim_push_update_reference",				"LGitRemoteCallbacksV100>>#prim_resolve_url",				"LGitRemoteCallbacksV100>>#prim_pack_progress",				"LGitRemoteCallbacksV120>>#prim_transfer_progress",				"LGitRemoteCallbacksV120>>#prim_remote_ready",				"LGitRemoteCallbacksV120>>#prim_sideband_progress",				"LGitRemoteCallbacksV120>>#prim_push_transfer_progress",				"LGitRemoteCallbacksV120>>#prim_push_negotiation",				"LGitRemoteCallbacksV120>>#prim_credentials",				"LGitRemoteCallbacksV120>>#prim_completion",				"LGitRemoteCallbacksV120>>#prim_update_tips",				"LGitRemoteCallbacksV120>>#prim_certificate_check",				"LGitRemoteCallbacksV120>>#prim_push_update_reference",				"LGitRemoteCallbacksV120>>#prim_resolve_url",				"LGitRemoteCallbacksV120>>#prim_pack_progress",				"LGitRepository>>#resetTo:resetType:checkoutOptions:",				"LGitRepository>>#branch_lookup:branch_name:branch_type:",				"LGitTime class>>#fromDateAndTime:",				"LGitTree>>#hash",				"LGitTree>>#tree_entry_byindex:idx:",				"LIFOQueueTest>>#testHeavyContention",				"LargePositiveIntegerTest>>#assertSqrtCorrectlyRoundedForExponent:",				"LayoutFrame>>#transform:",				"LibC>>#memCopy:to:size:",				"MCFileBasedRepository>>#addVersionInformationExtractedFrom:to:",				"MCFileBasedRepository>>#packageDescriptionsFromReadableFileNames",				"MCRepository>>#retrieveVersionsWithPackageNames:",				"MCVersionInfo>>#versionNumber",				"Magnitude>>#iceSemanticVersion",				"MagnitudeTest>>#testMin",				"MagnitudeTest>>#testMax",				"MessageTally>>#reportGCStatsOn:",				"MetacelloCommonMCSpecLoader class>>#nameComponentsFrom:",				"MetacelloOldSemanticVersionNumber class>>#integerFromString:",				"MetacelloSemanticVersionNumber class>>#integerFromString:",				"MicDocumentListBlock>>#summaryMaxSize",				"MicOrderedListBlock>>#startIndexFrom:",				"MicRichTextComposer class>>#counterFor:atLevel:",				"Monitor>>#waitUntil:maxSeconds:",				"Monitor>>#waitUntil:for:maxSeconds:",				"Monitor>>#waitFor:maxSeconds:",				"Monitor>>#waitWhile:maxSeconds:",				"Monitor>>#waitWhile:for:maxSeconds:",				"Monitor>>#waitMaxSeconds:",				"Morph>>#height:",				"Morph>>#width:",				"NECMenuMorph>>#resize",				"NSInterpolator>>#gtCanvasForInspector",				"NSPerlinNoise3>>#initialize",				"NSPolylinearScale>>#findJ:",				"NetNameResolver class>>#stringFromIPv6Address:",				"Number>>#asDuration",				"NumberTest>>#testAsInteger",				"OSSDL2BackendWindow>>#position:",				"OSSDL2ExternalForm>>#setExtent:depth:",				"OSSDL2ExternalForm>>#setManualSurfacePointer:",				"OSSDL2GenericRenderer>>#drawLine:end:",				"OSSDL2GenericRenderer>>#mapColorChannel:",				"OSSDL2GenericRenderer>>#drawPoint:",				"Object>>#split:",				"OmBlock>>#firstLocalNameAsInteger",				"OmBlock>>#atLocalName:ifPresent:ifAbsent:",				"OmBlockFileStore>>#readEntryForLocalName:ifPresent:ifAbsent:",				"OmFileStore>>#refreshEntryPositionsByLocalNameStartingAt:since:",				"OmMemoryStore>>#entryFor:ifPresent:ifAbsent:",				"OrderedDictionary>>#growOrderedKeys",				"OrderedDictionaryTest>>#testCapacity",				"POP3Client>>#messageCount",				"PerformMessageCommandLineHandler class>>#printReversed:times:",				"PluggableTabButtonMorph>>#calculateArcLengths",				"Point>>#asIntegerPoint",				"PointArray>>#at:put:",				"PointerUtils class>>#objectForOop:",				"PositionableStream>>#nextNumber:",				"PositionableStream>>#nextWord",				"ProcessBrowser>>#changePriority",				"ProcessBrowser>>#messageTally",				"ProtocolClient class>>#openOnHostNamed:",				"QuotedPrintableMimeConverter>>#mimeEncode",				"RBRegexRefactoring>>#execute:replace:with:",				"RBScanner>>#classify:",				"RBScanner class>>#initializeChars:to:",				"RBScanner class>>#initializeUnderscore",				"RPackageOrganizerTest>>#stringCharacterInCollPackage",				"RSAbstractCanvasMonitorInteraction>>#lastFramePerSecond",				"RSAbstractTick>>#fromNames:",				"RSAbstractTick>>#integer",				"RSAbstractTick>>#integerWithCommas",				"RSAnimationExamples>>#example30Perlin",				"RSAnimationExamples>>#example24RoassalPerlinNoise",				"RSBasicShapeExamples>>#example12BasicLine",				"RSBoxPlot>>#quantile:for:withProbs:",				"RSCat>>#addAnimationSlider",				"RSChartExample>>#example12ScatterPlotAndNormalizer",				"RSLineChartPopupBuilder>>#valuePointFor:",				"RSPieChartExample>>#visualizeChart:package:",				"RSPieExamples>>#example24ManyPies",				"Random>>#useUnixRandomGeneratorSeed",				"RandomBernoulli>>#next",				"RandomBinomial>>#next",				"RubTextFieldAreaTest>>#simulatedKeyDownFromChar:alt:ctrl:command:shift:",				"RubTextFieldAreaTest>>#simulatedKeyStrokeFromChar:alt:ctrl:command:shift:",				"RubTextLine>>#paddingWidth:",				"RubTextLine>>#internalSpaces:paddingWidth:",				"RxCharSetParser>>#addRangeFrom:to:",				"RxMatcher>>#syntaxAny",				"RxsPredicate>>#beControl",				"RxsRange>>#enumerateTo:ignoringCase:",				"SDL2 class>>#createCursor:mask:w:h:hotX:hotY:",				"SDL2 class>>#createRGBSurfaceFromPixels:width:height:depth:pitch:rmask:gmask:bmask:amask:",				"SDL2 class>>#createWindow:x:y:width:height:flags:",				"SDL2 class>>#initSubSystem:",				"SDL2 class>>#init:",				"SDL_Renderer>>#primCreateTextureFormat:access:width:height:",				"SDL_Window>>#primCreateRenderer:flags:",				"SHA1>>#finalHash",				"SHA1>>#initializeTotalsArray",				"SHA1Test>>#testEmptyInput",				"SHA1Test>>#testExample3",				"SHA256>>#finalHash",				"SHA256>>#initializeTotalsArray",				"SQSurfaceDispatch>>#showSurfaceFn",				"SQSurfaceDispatch>>#unlockSurfaceFn",				"SQSurfaceDispatch>>#getSurfaceFormatFn",				"SQSurfaceDispatch>>#lockSurfaceFn",				"STONReader>>#parseCharacterHexDigit",				"ScrollBarMorph>>#expandSlider",				"SindarinDebuggerTest>>#helperMethod6",				"SindarinDebuggerTest>>#helperMethod10",				"SindarinDebuggerTest>>#testMessageSelector",				"SindarinDebuggerTest>>#helperMethod20",				"SindarinDebuggerTest>>#testStep",				"SindarinDebuggerTest>>#testWhenHitBreakpoint",				"SindarinDebuggerTest>>#helperMethod2",				"SindarinDebuggerTest>>#helperMethod5",				"SindarinDebuggerTest>>#testSelector",				"SindarinDebuggerTest>>#helperMethod19",				"SindarinDebuggerTest>>#testNode",				"SindarinDebuggerTest>>#testMethod",				"SindarinDebuggerTest>>#helperMethod8",				"SindarinDebuggerTest>>#helperMethod13",				"SindarinDebuggerTest>>#helperMethod9",				"SindarinDebuggerTest>>#helperMethod15",				"SindarinDebuggerTest>>#helperMethod14",				"SindarinDebuggerTest>>#helperMethod3",				"SindarinDebuggerTest>>#helperMethod7",				"SindarinDebuggerTest>>#helperMethod4",				"SindarinDebuggerTest>>#testRemoveBreakpoint",				"SindarinDebuggerTest>>#testOnceBreakpoint",				"SindarinDebuggerTest>>#testContinue",				"SindarinDebuggerTest>>#helperMethod1",				"SliderMorph>>#computeSlider",				"SocketStream>>#upTo:",				"SocketStream>>#nextPut:",				"SpComponentListPresenterTest>>#testActivationWithTransformation",				"SpMorphicGridLayoutComputation>>#baseRowHeight",				"SpMorphicGridLayoutComputation>>#calculateNotHomogeneousColumnWidths",				"SpMorphicGridLayoutComputation>>#baseColumnWidth",				"SpMorphicPanedLayout>>#preservePositionProportionOn:",				"SpMorphicPanedLayout>>#widthPositionIn:",				"SpMorphicPanedLayout>>#heightPositionIn:",				"SpOpenOnIntExample>>#connectPresenters",				"SpPaginatorMorph>>#adjustShownPages",				"SpProgressBarDemo>>#connectPresenters",				"StSpotter>>#handleKeyEvent:",				"StSpotterStyleContributor>>#styleSheetContribution",				"StandardFonts class>>#setDemoFonts",				"String>>#isOctetString",				"String>>#unzipped",				"String>>#alike:",				"String class>>#with:",				"StringTest>>#testAsInteger",				"TFBasicTypeMarshallingInCallbacksTest>>#assertCharType:named:",				"TFCharType>>#marshallToPrimitive:",				"TFFunctionDefinition>>#doValidate:",				"TFIntType>>#emitMarshallToPrimitive:",				"TFIntType>>#write:into:",				"TFUFFIStructuresTest>>#testPassingByReferenceAStructInC",				"TPointAccess>>#at:put:",				"TestCase class>>#coverageAsString",				"TestCase class>>#localCoverageAsString",				"TextMorph>>#setCurveBaseline:",				"ThirtyTwoBitRegister>>#bitShift:",				"ThirtyTwoBitRegister>>#load:",				"ThirtyTwoBitRegister>>#printOn:",				"Time class>>#fromSeconds:",				"TreePagerMorph>>#currentPage",				"TreePagerMorph>>#lastPage",				"UUIDGeneratorTest>>#timeFromUUID:",				"VirtualMachine>>#statisticsReport",				"WideStringTest>>#testAsInteger",				"WideSymbol>>#string:",				"ZipEncoder>>#pastEndPut:",				"ZnBivalentWriteStream>>#nextPut:",				"ZnCharacterEncoder>>#encodedByteCountFor:",				"ZnCharacterEncoder>>#nextPut:toStream:",				"ZnClientTest>>#testCookies",				"ZnDigestAuthenticator class>>#md5Hash:",				"ZnHeaders>>#readFrom:",				"ZnLimitedReadStream>>#peek",				"ZnLimitedReadStream>>#next",				"ZnServerTest>>#testReadEvalPrint",				"ZnSimplifiedByteEncoder>>#nextCodePointFromStream:",				"ZnUrlTest>>#testRetrieveContents",				"ZnUrlTest>>#testSaveContentsToFile"			]		},		"testInspectIceRepository" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectIceRepository",						"",						"\t^ self exportSlotsGraphOf:",						"\t\t  (IceRepository registry detect: [ :each | ",						"\t\t\t   each name = 'Containers-HeapQ' ])"					],					"body" : [						"^ self exportSlotsGraphOf: (IceRepository registry detect: [ :each | ",						"\t\t   each name = 'Containers-HeapQ' ])"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169516,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testRBNodeSubclasses" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testRBNodeSubclasses",						"",						"\t^ self exportShapeOf: RBNode accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: RBNode accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168998,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectObject" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectObject",						"",						"\t^ self exportSlotsGraphOf: Object new"					],					"body" : [						"^ self exportSlotsGraphOf: Object new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169055,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectFractionForKisses" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionForKisses",						"",						"\t^ self exportSlotsGraphOf: 4 / 17"					],					"body" : [						"^ self exportSlotsGraphOf: 4 / 17"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169104,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionKissing"			]		},		"gibonacciNumbersFirst:second:do:" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"gibonacciNumbersFirst: first second: second do: aBlock",						"",						"\t^ self",						"\t\t  ifPositive: [ ",						"\t\t\t  Array streamContents: [ :aStream | ",						"\t\t\t\t  | a |",						"\t\t\t\t  a := first.",						"\t\t\t\t  aStream nextPut: a.",						"\t\t\t\t  self > 1 ifTrue: [ ",						"\t\t\t\t\t  | b |",						"\t\t\t\t\t  b := second.",						"\t\t\t\t\t  aStream nextPut: b.",						"\t\t\t\t\t  3 to: self do: [ :each | ",						"\t\t\t\t\t\t  | c v |",						"\t\t\t\t\t\t  c := aBlock value: a value: b.",						"\t\t\t\t\t\t  aStream nextPut: c.",						"\t\t\t\t\t\t  a := b.",						"\t\t\t\t\t\t  b := c ] ] ] ]",						"\t\t  ifNotPositive: [ #(  ) ]"					],					"body" : [						"^ self",						"\t  ifPositive: [ ",						"\t\t  Array streamContents: [ :aStream | ",						"\t\t\t  | a |",						"\t\t\t  a := first.",						"\t\t\t  aStream nextPut: a.",						"\t\t\t  self > 1 ifTrue: [ ",						"\t\t\t\t  | b |",						"\t\t\t\t  b := second.",						"\t\t\t\t  aStream nextPut: b.",						"\t\t\t\t  3 to: self do: [ :each | ",						"\t\t\t\t\t  | c v |",						"\t\t\t\t\t  c := aBlock value: a value: b.",						"\t\t\t\t\t  aStream nextPut: c.",						"\t\t\t\t\t  a := b.",						"\t\t\t\t\t  b := c ] ] ] ]",						"\t  ifNotPositive: [ #(  ) ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 52925045,					"argumentNames" : [						"first",						"second",						"aBlock"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#fibonacciNumbers",				"Integer>>#goldenRatiosLower",				"Integer>>#lucasNumbers",				"Integer>>#goldenRatiosGreater"			]		},		"testLinkSubclasses" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testLinkSubclasses",						"",						"\t^ self exportShapeOf: Link accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Link accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168998,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testMagnitudeSubclasses" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testMagnitudeSubclasses",						"",						"\t^ self exportShapeOf: Magnitude accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Magnitude accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168998,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"privateNextValue" : {			"implementors" : {				"Random" : {					"sourceCode" : [						"privateNextValue",						"",						"\t\"Answer a random Float in the interval [0 to 1).\"",						"",						"\t^ (seed := self privateNextSeed) / m"					],					"body" : [						"^ (seed := self privateNextSeed) / m"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [						"Answer a random Float in the interval [0 to 1)."					],					"hash" : 1899729,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Random>>#next:into:",				"Random>>#nextInteger:",				"Random>>#next",				"SharedRandom>>#next"			]		},		"lucasNumbers" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"lucasNumbers",						"",						"\t^ self gibonacciNumbersFirst: 2 second: 1 do: [ :a :b | a + b ]"					],					"body" : [						"^ self gibonacciNumbersFirst: 2 second: 1 do: [ :a :b | a + b ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1806719,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspect20LucasNumbers"			]		},		"goldenRatiosLower" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"goldenRatiosLower",						"",						"\t^ self",						"\t\t  gibonacciNumbersFirst: Float goldenRatio",						"\t\t  second: 1",						"\t\t  do: [ :a :b | a - b ]"					],					"body" : [						"^ self",						"\t  gibonacciNumbersFirst: Float goldenRatio",						"\t  second: 1",						"\t  do: [ :a :b | a - b ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1806859,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"CTDfsShapeBuilder>>#initialize",				"EssentialsObjectTest>>#testInspect10GoldenRatios",				"RSVerticalLineLayoutWithGoldenGaps>>#applyOn:"			]		},		"testBinomial" : {			"implementors" : {				"RandomTestDistributions" : {					"sourceCode" : [						"testBinomial",						"",						"\t| gen |",						"\tgen := (RandomBinomial seed: 13)",						"\t\t       p: 0.7;",						"\t\t       n: 20;",						"\t\t       yourself.",						"",						"\tself exportSlotsGraphOf: gen.",						"",						"\tself",						"\t\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\t\tequals: self expectedValue_testBinomial"					],					"body" : [						"| gen |",						"gen := (RandomBinomial seed: 13)",						"\t       p: 0.7;",						"\t       n: 20;",						"\t       yourself.",						"",						"self exportSlotsGraphOf: gen.",						"",						"self",						"\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\tequals: self expectedValue_testBinomial"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 3434023,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"mediantFraction:" : {			"implementors" : {				"Fraction" : {					"sourceCode" : [						"mediantFraction: aFraction",						"",						"\t^ aFraction numerator + self numerator",						"\t  / (aFraction denominator + self denominator)"					],					"body" : [						"^ aFraction numerator + self numerator",						"  / (aFraction denominator + self denominator)"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18806016,					"argumentNames" : [						"aFraction"					]				},				"Integer" : {					"sourceCode" : [						"mediantFraction: aFraction",						"",						"\t^ aFraction numerator + self / (aFraction denominator + self)"					],					"body" : [						"^ aFraction numerator + self / (aFraction denominator + self)"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18846205,					"argumentNames" : [						"aFraction"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Fraction>>#'\\/'"			]		},		"kissingFractionLink:" : {			"implementors" : {				"Fraction" : {					"sourceCode" : [						"kissingFractionLink: aLink",						"",						"\t^ self ~~> aLink"					],					"body" : [						"^ self ~~> aLink"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18805184,					"argumentNames" : [						"aLink"					]				},				"Integer" : {					"sourceCode" : [						"kissingFractionLink: aLink",						"",						"\t^ aLink"					],					"body" : [						"^ aLink"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18845393,					"argumentNames" : [						"aLink"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Fraction>>#kissingFractions"			]		},		"testInspectSkewBinaryCanonicalSparse" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectSkewBinaryCanonicalSparse",						"",						"\t| skewNumbers backwards |",						"\tskewNumbers := (1 to: 20) collect: [ :each | ",						"\t\t               each asSkewBinaryCanonicalSparse yourself: [ :skew | ",						"\t\t\t               self assert: skew asInteger equals: each ] ].",						"",						"\tself exportSlotsGraphOf: skewNumbers pathSuffix: 'increasing'.",						"",						"\tbackwards := skewNumbers reversed",						"\t\t             with: (19 to: 0 by: -1)",						"\t\t             collect: [ :skew :each | ",						"\t\t\t             skew decrement yourself: [ :previous | ",						"\t\t\t\t             self assert: previous asInteger equals: each ] ].",						"",						"\tself exportSlotsGraphOf: backwards pathSuffix: 'decreasing'"					],					"body" : [						"| skewNumbers backwards |",						"skewNumbers := (1 to: 20) collect: [ :each | ",						"\t               each asSkewBinaryCanonicalSparse yourself: [ :skew | ",						"\t\t               self assert: skew asInteger equals: each ] ].",						"",						"self exportSlotsGraphOf: skewNumbers pathSuffix: 'increasing'.",						"",						"backwards := skewNumbers reversed",						"\t             with: (19 to: 0 by: -1)",						"\t             collect: [ :skew :each | ",						"\t\t             skew decrement yourself: [ :previous | ",						"\t\t\t             self assert: previous asInteger equals: each ] ].",						"",						"self exportSlotsGraphOf: backwards pathSuffix: 'decreasing'"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3696342,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"dcMultiplyInteger:base:" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"dcMultiplyInteger: anInteger base: base",						"",						"\t^ ((self between: 0 and: base - 1) and: [ ",						"\t\t   anInteger between: 0 and: base - 1 ])",						"\t\t  ifTrue: [ self multiplyNumber: anInteger ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | x y yDigits |",						"\t\t\t  (self numberOfDigitsInBase: base)",						"\t\t\t  > (anInteger numberOfDigitsInBase: base)",						"\t\t\t\t  ifTrue: [ ",						"\t\t\t\t\t  x := self.",						"\t\t\t\t\t  y := anInteger ]",						"\t\t\t\t  ifFalse: [ ",						"\t\t\t\t\t  x := anInteger.",						"\t\t\t\t\t  y := self ].",						"",						"\t\t\t  yDigits := y numberOfDigitsInBase: base.",						"",						"\t\t\t  x",						"\t\t\t\t  halves: [ :xHigh :xLow :xn :xl | ",						"\t\t\t\t\t  y",						"\t\t\t\t\t\t  halves: [ :yHigh :yLow :yn :yl | ",						"\t\t\t\t\t\t\t  | p pp xyHigh xyLow exp |",						"\t\t\t\t\t\t\t  p := (xHigh add: xLow)",						"\t\t\t\t\t\t\t\t       dcMultiplyInteger: (yHigh add: yLow)",						"\t\t\t\t\t\t\t\t       base: base.",						"\t\t\t\t\t\t\t  xyHigh := xHigh dcMultiplyInteger: yHigh base: base.",						"\t\t\t\t\t\t\t  xyLow := xLow dcMultiplyInteger: yLow base: base.",						"",						"\t\t\t\t\t\t\t  exp := base ** xl.",						"\t\t\t\t\t\t\t  pp := p subtractNumber: (xyHigh add: xyLow).",						"",						"\t\t\t\t\t\t\t  \"According to the Horner schema.\"",						"\t\t\t\t\t\t\t  (((xyHigh multiplyNumber: exp) add: pp) multiplyNumber: exp) ",						"\t\t\t\t\t\t\t\t  add: xyLow ]",						"\t\t\t\t\t\t  at: xl",						"\t\t\t\t\t\t  digits: yDigits",						"\t\t\t\t\t\t  base: base ]",						"\t\t\t\t  base: base ]"					],					"body" : [						"^ ((self between: 0 and: base - 1) and: [ ",						"\t   anInteger between: 0 and: base - 1 ])",						"\t  ifTrue: [ self multiplyNumber: anInteger ]",						"\t  ifFalse: [ ",						"\t\t  | x y yDigits |",						"\t\t  (self numberOfDigitsInBase: base)",						"\t\t  > (anInteger numberOfDigitsInBase: base)",						"\t\t\t  ifTrue: [ ",						"\t\t\t\t  x := self.",						"\t\t\t\t  y := anInteger ]",						"\t\t\t  ifFalse: [ ",						"\t\t\t\t  x := anInteger.",						"\t\t\t\t  y := self ].",						"",						"\t\t  yDigits := y numberOfDigitsInBase: base.",						"",						"\t\t  x",						"\t\t\t  halves: [ :xHigh :xLow :xn :xl | ",						"\t\t\t\t  y",						"\t\t\t\t\t  halves: [ :yHigh :yLow :yn :yl | ",						"\t\t\t\t\t\t  | p pp xyHigh xyLow exp |",						"\t\t\t\t\t\t  p := (xHigh add: xLow)",						"\t\t\t\t\t\t\t       dcMultiplyInteger: (yHigh add: yLow)",						"\t\t\t\t\t\t\t       base: base.",						"\t\t\t\t\t\t  xyHigh := xHigh dcMultiplyInteger: yHigh base: base.",						"\t\t\t\t\t\t  xyLow := xLow dcMultiplyInteger: yLow base: base.",						"",						"\t\t\t\t\t\t  exp := base ** xl.",						"\t\t\t\t\t\t  pp := p subtractNumber: (xyHigh add: xyLow).",						"",						"\t\t\t\t\t\t  \"According to the Horner schema.\"",						"\t\t\t\t\t\t  (((xyHigh multiplyNumber: exp) add: pp) multiplyNumber: exp) ",						"\t\t\t\t\t\t\t  add: xyLow ]",						"\t\t\t\t\t  at: xl",						"\t\t\t\t\t  digits: yDigits",						"\t\t\t\t\t  base: base ]",						"\t\t\t  base: base ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 36674079,					"argumentNames" : [						"anInteger",						"base"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectLargeIntegerBench",				"EssentialsObjectTest>>#testInspectLargeInteger",				"Integer>>#dcMultiplyInteger:base:",				"MWVisualizationsTest>>#testInspectLargeIntegerProfiled"			]		},		"testInspectColorGray" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectColorGray",						"",						"\t^ self exportSlotsGraphOf: Color gray translucent"					],					"body" : [						"^ self exportSlotsGraphOf: Color gray translucent"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169227,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectLargeIntegerProfiled" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectLargeIntegerProfiled",						"",						"\t| m n large handlerTiming tree handlerExecution handlerCopying metadata presenter |",						"\ttree := CTOrderPreservingTree new.",						"",						"\thandlerExecution := MWHandlerExecution new",						"\t\t                    tree: tree;",						"\t\t                    yourself.",						"",						"\thandlerTiming := MWHandlerTiming new",						"\t\t                 handler: handlerExecution;",						"\t\t                 yourself.",						"",						"\thandlerCopying := MWHandlerReceiverArgumentsCopying new",						"\t\t                  handler: handlerTiming;",						"\t\t                  yourself.",						"",						"\tm := 835.",						"\tn := 714.",						"",						"\tlarge := (MWSession withAllImplementations: { ",						"\t\t\t\t          (Integer >> #dcMultiplyInteger:base:).",						"\t\t\t\t          (Number >> #add:).",						"\t\t\t\t          (Number >> #subtractNumber:) })",						"\t\t         do: [ :each | each handler: handlerCopying ];",						"\t\t         value: [ large := m dcMultiplyInteger: n base: 10 ].",						"",						"\tmetadata := IdentityDictionary new.",						"\thandlerExecution metadata: metadata.",						"\thandlerCopying metadata: metadata.",						"\thandlerTiming metadata: metadata.",						"",						"\t\"Show here the new presenter.\"",						"\tpresenter := (MWSpPresenter on: tree -> metadata)",						"\t\t             openWithSpec;",						"\t\t             yourself.",						"\t\"\t\tuseShapeSlotsDfsTree;\"",						"",						"\tself",						"\t\tassert: tree size equals: 28;",						"\t\tassert: large equals: m * n.",						"",						"\t^ self",						"\t\t  exportShapeOf: tree",						"\t\t  accessorBlock: [ :aTree | ",						"\t\t\t  aTree asShapeValuesHorizontalTreeWithLabelShapes ]",						"\t\t  pathSuffix: 'contexts-tree';",						"\t\t  export: tree",						"\t\t  pathSuffix: 'sequence-diagram'",						"\t\t  onCanvasDo: [ :aCanvas :useless | ",						"\t\t\t  presenter currentCanvas: aCanvas ];",						"\t\t  exportSlotsGraphOf: large"					],					"body" : [						"| m n large handlerTiming tree handlerExecution handlerCopying metadata presenter |",						"tree := CTOrderPreservingTree new.",						"",						"handlerExecution := MWHandlerExecution new",						"\t                    tree: tree;",						"\t                    yourself.",						"",						"handlerTiming := MWHandlerTiming new",						"\t                 handler: handlerExecution;",						"\t                 yourself.",						"",						"handlerCopying := MWHandlerReceiverArgumentsCopying new",						"\t                  handler: handlerTiming;",						"\t                  yourself.",						"",						"m := 835.",						"n := 714.",						"",						"large := (MWSession withAllImplementations: { ",						"\t\t\t          (Integer >> #dcMultiplyInteger:base:).",						"\t\t\t          (Number >> #add:).",						"\t\t\t          (Number >> #subtractNumber:) })",						"\t         do: [ :each | each handler: handlerCopying ];",						"\t         value: [ large := m dcMultiplyInteger: n base: 10 ].",						"",						"metadata := IdentityDictionary new.",						"handlerExecution metadata: metadata.",						"handlerCopying metadata: metadata.",						"handlerTiming metadata: metadata.",						"",						"\"Show here the new presenter.\"",						"presenter := (MWSpPresenter on: tree -> metadata)",						"\t             openWithSpec;",						"\t             yourself.",						"\"\t\tuseShapeSlotsDfsTree;\"",						"",						"self",						"\tassert: tree size equals: 28;",						"\tassert: large equals: m * n.",						"",						"^ self",						"\t  exportShapeOf: tree",						"\t  accessorBlock: [ :aTree | ",						"\t\t  aTree asShapeValuesHorizontalTreeWithLabelShapes ]",						"\t  pathSuffix: 'contexts-tree';",						"\t  export: tree",						"\t  pathSuffix: 'sequence-diagram'",						"\t  onCanvasDo: [ :aCanvas :useless | presenter currentCanvas: aCanvas ];",						"\t  exportSlotsGraphOf: large"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 5531689,					"argumentNames" : [ ]				},				"MWVisualizationsTest" : {					"sourceCode" : [						"testInspectLargeIntegerProfiled",						"",						"\t| m n large tree handlerExecution handlerCopying metadata presenter |",						"\ttree := CTOrderPreservingTree new.",						"",						"\thandlerExecution := MWHandlerProfiling new",						"\t\t                    tree: tree;",						"\t\t                    yourself.",						"",						"\thandlerCopying := MWHandlerReceiverArgumentsCopying new",						"\t\t                  handler: handlerExecution;",						"\t\t                  yourself.",						"",						"\tm := 835.",						"\tn := 714.",						"",						"\tlarge := (MWSession withAllImplementations: { ",						"\t\t\t\t          (Integer >> #dcMultiplyInteger:base:).",						"\t\t\t\t          (Number >> #add:).",						"\t\t\t\t          (Number >> #subtractNumber:).",						"\t\t\t\t          (Number >> #multiplyNumber:) })",						"\t\t         do: [ :each | each handler: handlerCopying ];",						"\t\t         value: [ large := m dcMultiplyInteger: n base: 10 ].",						"",						"\tmetadata := IdentityDictionary new.",						"\thandlerExecution metadata: metadata.",						"\thandlerCopying metadata: metadata.",						"",						"\t\"Show here the new presenter.\"",						"\tpresenter := (MWSpPresenter on: tree -> metadata)",						"\t\t             useShapeSlotsDfsTree;",						"\t\t             openWithSpec;",						"\t\t             yourself.",						"",						"\tself",						"\t\tassert: tree size equals: 41;",						"\t\tassert: large equals: m * n.",						"",						"\t^ self",						"\t\t  export: tree",						"\t\t  pathSuffix: 'sequence-diagram'",						"\t\t  onCanvasDo: [ :aCanvas :useless | ",						"\t\t\t  presenter currentCanvas: aCanvas ];",						"\t\t  exportSlotsGraphOf: large",						"\t\"exportShapeOf: tree",						"\t\t  accessorBlock: [ :aTree | ",						"\t\t\t  aTree asShapeValuesHorizontalTreeWithLabelShapes ]",						"\t\t  pathSuffix: 'contexts-tree';\""					],					"body" : [						"| m n large tree handlerExecution handlerCopying metadata presenter |",						"tree := CTOrderPreservingTree new.",						"",						"handlerExecution := MWHandlerProfiling new",						"\t                    tree: tree;",						"\t                    yourself.",						"",						"handlerCopying := MWHandlerReceiverArgumentsCopying new",						"\t                  handler: handlerExecution;",						"\t                  yourself.",						"",						"m := 835.",						"n := 714.",						"",						"large := (MWSession withAllImplementations: { ",						"\t\t\t          (Integer >> #dcMultiplyInteger:base:).",						"\t\t\t          (Number >> #add:).",						"\t\t\t          (Number >> #subtractNumber:).",						"\t\t\t          (Number >> #multiplyNumber:) })",						"\t         do: [ :each | each handler: handlerCopying ];",						"\t         value: [ large := m dcMultiplyInteger: n base: 10 ].",						"",						"metadata := IdentityDictionary new.",						"handlerExecution metadata: metadata.",						"handlerCopying metadata: metadata.",						"",						"\"Show here the new presenter.\"",						"presenter := (MWSpPresenter on: tree -> metadata)",						"\t             useShapeSlotsDfsTree;",						"\t             openWithSpec;",						"\t             yourself.",						"",						"self",						"\tassert: tree size equals: 41;",						"\tassert: large equals: m * n.",						"",						"^ self",						"\t  export: tree",						"\t  pathSuffix: 'sequence-diagram'",						"\t  onCanvasDo: [ :aCanvas :useless | presenter currentCanvas: aCanvas ];",						"\t  exportSlotsGraphOf: large",						"\"exportShapeOf: tree",						"\t\t  accessorBlock: [ :aTree | ",						"\t\t\t  aTree asShapeValuesHorizontalTreeWithLabelShapes ]",						"\t\t  pathSuffix: 'contexts-tree';\""					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 5660662,					"argumentNames" : [ ]				}			}		},		"fibonacciNumbers" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"fibonacciNumbers",						"",						"\t^ self gibonacciNumbersFirst: 0 second: 1 do: [ :a :b | a + b ]"					],					"body" : [						"^ self gibonacciNumbersFirst: 0 second: 1 do: [ :a :b | a + b ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1806741,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testByteArrayInteger",				"EssentialsObjectTest>>#testInspect20FibonacciNumbers",				"MWHandlerTest>>#testProfileSlowFibonacciWithAddOnly",				"MWHandlerTest>>#testProfileSlowFibonacci",				"MWHandlerTest>>#testTimingSlowFibonacciMemoing",				"MWHandlerTest>>#testProfileSlowFibonacciTailWithAdd",				"MWHandlerTest>>#testProfileSlowFibonacciMemoing",				"MWHandlerTest>>#testProfileSlowFibonacciWithAdd"			]		},		"testInspectRBNodesQuine" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectRBNodesQuine",						"",						"\t| quine aQuineBlock evalBlock |",						"\taQuineBlock := [ :x | ",						"\t               RBMessageNode",						"\t\t               receiver: x",						"\t\t               selector: #value:",						"\t\t               arguments:",						"\t\t               { (RBMessageNode receiver: x selector: #sourceNode) } ].",						"",						"\tquine := aQuineBlock value: aQuineBlock sourceNode.",						"",						"\tevalBlock := OpalCompiler new",						"\t\t             source:",						"\t\t\t             (RBBlockNode body:",						"\t\t\t\t\t              (RBSequenceNode statements: { quine }))",						"\t\t\t\t             formattedCode;",						"\t\t             evaluate.",						"",						"\tself assert: evalBlock value equals: quine"					],					"body" : [						"| quine aQuineBlock evalBlock |",						"aQuineBlock := [ :x | ",						"               RBMessageNode",						"\t               receiver: x",						"\t               selector: #value:",						"\t               arguments:",						"\t               { (RBMessageNode receiver: x selector: #sourceNode) } ].",						"",						"quine := aQuineBlock value: aQuineBlock sourceNode.",						"",						"evalBlock := OpalCompiler new",						"\t             source:",						"\t\t             (RBBlockNode body:",						"\t\t\t\t              (RBSequenceNode statements: { quine }))",						"\t\t\t             formattedCode;",						"\t             evaluate.",						"",						"self assert: evalBlock value equals: quine"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3958898,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"bisect:baseBlock:" : {			"implementors" : {				"ArrayedCollection" : {					"sourceCode" : [						"bisect: mergeBlock baseBlock: baseBlock",						"",						"\t^ self",						"\t\t  bisect: mergeBlock",						"\t\t  from: 1",						"\t\t  to: self size",						"\t\t  baseBlock: baseBlock"					],					"body" : [						"^ self",						"\t  bisect: mergeBlock",						"\t  from: 1",						"\t  to: self size",						"\t  baseBlock: baseBlock"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 35729267,					"argumentNames" : [						"mergeBlock",						"baseBlock"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"CTBinaryTreeAbstract class>>#withArrayedCollection:",				"CTBinomialHeap class>>#withArrayedCollection:"			]		},		"testInspectHeap" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectHeap",						"",						"\t| array random heap |",						"\trandom := Random seed: 11.",						"\tarray := (1 to: 30) asArray shuffleBy: random.",						"\tself",						"\t\tassert: array",						"\t\tequals:",						"\t\t\t#( 12 16 22 30 8 17 15 4 20 19 28 18 27 21 24 10 7 3 14 5 6 26 25",						"\t\t\t   29 11 23 2 9 13 1 ).",						"",						"\theap := Heap new.",						"",						"\tself exportSlotsGraphOf: heap.",						"",						"\tarray withIndexDo: [ :each :i | ",						"\t\theap add: each.",						"",						"\t\tself exportSlotsGraphOf: heap pathSuffix: i asString ]"					],					"body" : [						"| array random heap |",						"random := Random seed: 11.",						"array := (1 to: 30) asArray shuffleBy: random.",						"self",						"\tassert: array",						"\tequals:",						"\t\t#( 12 16 22 30 8 17 15 4 20 19 28 18 27 21 24 10 7 3 14 5 6 26 25 29",						"\t\t   11 23 2 9 13 1 ).",						"",						"heap := Heap new.",						"",						"self exportSlotsGraphOf: heap.",						"",						"array withIndexDo: [ :each :i | ",						"\theap add: each.",						"",						"\tself exportSlotsGraphOf: heap pathSuffix: i asString ]"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3958756,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"halves:at:digits:base:" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"halves: aBlock at: l digits: n base: aBase",						"",						"\t| low high lSucc |",						"\tlSucc := l + 1.",						"",						"\tlow := (1 to: l) inject: 0 into: [ :acc :i | ",						"\t\t       | d |",						"\t\t       d := (self digitAt: i base: aBase) * (aBase ** (i - 1)).",						"\t\t       d + acc ].",						"",						"\thigh := (lSucc to: n) inject: 0 into: [ :acc :i | ",						"\t\t        | d |",						"\t\t        d := (self digitAt: i base: aBase) * (aBase ** (i - lSucc)).",						"\t\t        d + acc ].",						"",						"\t^ aBlock",						"\t\t  value: high",						"\t\t  value: low",						"\t\t  value: n",						"\t\t  value: l"					],					"body" : [						"| low high lSucc |",						"lSucc := l + 1.",						"",						"low := (1 to: l) inject: 0 into: [ :acc :i | ",						"\t       | d |",						"\t       d := (self digitAt: i base: aBase) * (aBase ** (i - 1)).",						"\t       d + acc ].",						"",						"high := (lSucc to: n) inject: 0 into: [ :acc :i | ",						"\t        | d |",						"\t        d := (self digitAt: i base: aBase) * (aBase ** (i - lSucc)).",						"\t        d + acc ].",						"",						"^ aBlock",						"\t  value: high",						"\t  value: low",						"\t  value: n",						"\t  value: l"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 70753203,					"argumentNames" : [						"aBlock",						"l",						"n",						"aBase"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#dcMultiplyIntegerSlow:base:",				"Integer>>#dcMultiplyInteger:base:",				"Integer>>#dcMultiplyIntegerQuick:base:",				"Integer>>#halves:base:"			]		},		"testInspectRSPolygon" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectRSPolygon",						"",						"\t^ self exportSlotsGraphOf: (RSPolygon new",						"\t\t\t   points: { ",						"\t\t\t\t\t   (0 @ 0).",						"\t\t\t\t\t   (100 @ 25).",						"\t\t\t\t\t   (200 @ 0) };",						"\t\t\t   cornerRadii: Float goldenRatio double;",						"\t\t\t   yourself)"					],					"body" : [						"^ self exportSlotsGraphOf: (RSPolygon new",						"\t\t   points: { ",						"\t\t\t\t   (0 @ 0).",						"\t\t\t\t   (100 @ 25).",						"\t\t\t\t   (200 @ 0) };",						"\t\t   cornerRadii: Float goldenRatio double;",						"\t\t   yourself)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3171588,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testRandomSubclasses" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testRandomSubclasses",						"",						"\t^ self exportShapeOf: Random accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Random accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168998,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testUniform" : {			"implementors" : {				"RandomTestDistributions" : {					"sourceCode" : [						"testUniform",						"",						"\t| gen |",						"\tgen := Random seed: 13.",						"",						"\tself exportSlotsGraphOf: gen.",						"",						"\tself",						"\t\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\t\tequals: self expectedValue_testUniform"					],					"body" : [						"| gen |",						"gen := Random seed: 13.",						"",						"self exportSlotsGraphOf: gen.",						"",						"self",						"\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\tequals: self expectedValue_testUniform"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 3432791,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"asShapeBRGCDots" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"asShapeBRGCDots",						"",						"\t^ self asShapeBinaryDots: (self bitBRGC printStringBase: 2) asArray"					],					"body" : [						"^ self asShapeBinaryDots: (self bitBRGC printStringBase: 2) asArray"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1806798,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"CTSlotDescriptorsVisitorIntegerDetails>>#visitInteger:",				"EssentialsObjectTest>>#testInspectBRGCodes"			]		},		"testExponential" : {			"implementors" : {				"RandomTestDistributions" : {					"sourceCode" : [						"testExponential",						"",						"\t| gen |",						"\tgen := RandomExponential seed: 13.",						"",						"\tself exportSlotsGraphOf: gen.",						"",						"\tself",						"\t\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\t\tequals: self expectedValue_testExponential"					],					"body" : [						"| gen |",						"gen := RandomExponential seed: 13.",						"",						"self exportSlotsGraphOf: gen.",						"",						"self",						"\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\tequals: self expectedValue_testExponential"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 3432791,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testMagnitudeSubclassesSlotsGraph" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testMagnitudeSubclassesSlotsGraph",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: Magnitude",						"\t\t  slotDescriptorsContext: CTSlotDescriptorsVisitorClassHierarchy new"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: Magnitude",						"\t  slotDescriptorsContext: CTSlotDescriptorsVisitorClassHierarchy new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169107,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectFraction" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFraction",						"",						"\t^ self exportSlotsGraphOf: -1 / 2"					],					"body" : [						"^ self exportSlotsGraphOf: -1 / 2"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169104,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectString" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectString",						"",						"\t^ self exportSlotsGraphOf: (String loremIpsum: 100)"					],					"body" : [						"^ self exportSlotsGraphOf: (String loremIpsum: 100)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169147,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"valueWithArgumentedExit" : {			"implementors" : {				"BlockClosure" : {					"sourceCode" : [						"valueWithArgumentedExit",						"",						"\t^ self value: [ :anObject | ^ anObject ]"					],					"body" : [						"^ self value: [ :anObject | ^ anObject ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 803941,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"CTUnbalancedSet>>#push:"			]		},		"testSequenceableCollectionHornerInit" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"MWVisualizationsTest" : {					"sourceCode" : [						"testSequenceableCollectionHornerInit",						"",						"\t| tree metadata result handlerExecution handlerCopying presenter |",						"\ttree := CTOrderPreservingTree new.",						"",						"\thandlerExecution := MWHandlerProfiling new",						"\t\t                    tree: tree;",						"\t\t                    yourself.",						"",						"\thandlerCopying := MWHandlerReceiverArgumentsCopying new",						"\t\t                  handler: handlerExecution;",						"\t\t                  yourself.",						"",						"\tresult := (MWSession withAllImplementations: { ",						"\t\t\t\t           (SequenceableCollection >> #horner:init:).",						"\t\t\t\t           \"(Collection >> #inject:into:).\"",						"\t\t\t\t           (Number >> #addNumber:).",						"\t\t\t\t           (Number >> #multiplyNumber:) })",						"\t\t          do: [ :each | each handler: handlerCopying ];",						"\t\t          value: [ { 1. 3. 5. 6 } hornerBase10 ].",						"",						"\tmetadata := IdentityDictionary new.",						"\thandlerExecution metadata: metadata.",						"\thandlerCopying metadata: metadata.",						"",						"\t\"Show here the new presenter.\"",						"\tpresenter := (MWSpPresenter on: tree -> metadata)",						"\t\t             useShapeSlotsDfsTree;",						"\t\t             openWithSpec;",						"\t\t             yourself.",						"",						"\tself",						"\t\tassert: tree size equals: 9;",						"\t\tassert: result equals: 1356.",						"",						"\tself",						"\t\texport: tree",						"\t\tpathSuffix: 'sequence-diagram'",						"\t\tonCanvasDo: [ :aCanvas :useless | presenter currentCanvas: aCanvas ];",						"\t\texportSlotsGraphOf: result"					],					"body" : [						"| tree metadata result handlerExecution handlerCopying presenter |",						"tree := CTOrderPreservingTree new.",						"",						"handlerExecution := MWHandlerProfiling new",						"\t                    tree: tree;",						"\t                    yourself.",						"",						"handlerCopying := MWHandlerReceiverArgumentsCopying new",						"\t                  handler: handlerExecution;",						"\t                  yourself.",						"",						"result := (MWSession withAllImplementations: { ",						"\t\t\t           (SequenceableCollection >> #horner:init:).",						"\t\t\t           \"(Collection >> #inject:into:).\"",						"\t\t\t           (Number >> #addNumber:).",						"\t\t\t           (Number >> #multiplyNumber:) })",						"\t          do: [ :each | each handler: handlerCopying ];",						"\t          value: [ { 1. 3. 5. 6 } hornerBase10 ].",						"",						"metadata := IdentityDictionary new.",						"handlerExecution metadata: metadata.",						"handlerCopying metadata: metadata.",						"",						"\"Show here the new presenter.\"",						"presenter := (MWSpPresenter on: tree -> metadata)",						"\t             useShapeSlotsDfsTree;",						"\t             openWithSpec;",						"\t             yourself.",						"",						"self",						"\tassert: tree size equals: 9;",						"\tassert: result equals: 1356.",						"",						"self",						"\texport: tree",						"\tpathSuffix: 'sequence-diagram'",						"\tonCanvasDo: [ :aCanvas :useless | presenter currentCanvas: aCanvas ];",						"\texportSlotsGraphOf: result"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 5135554,					"argumentNames" : [ ]				}			}		},		"testInspectPascalArray" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectPascalArray",						"",						"\t^ self exportSlotsGraphOf: (Array2D pascal: 1 << 4)"					],					"body" : [						"^ self exportSlotsGraphOf: (Array2D pascal: 1 << 4)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169395,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectAssociation" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectAssociation",						"",						"\t^ self exportSlotsGraphOf: 42 -> thisContext method"					],					"body" : [						"^ self exportSlotsGraphOf: 42 -> thisContext method"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169342,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"bisect:from:to:baseBlock:" : {			"implementors" : {				"ArrayedCollection" : {					"sourceCode" : [						"bisect: mergeBlock from: low to: high baseBlock: baseBlock",						"",						"\t| diff |",						"\tdiff := high - low.",						"\t^ diff = 0",						"\t\t  ifTrue: [ ",						"\t\t  baseBlock value: (self at: high) \"Because `high` equals `low`.\" ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | middle left right |",						"\t\t\t  middle := diff // 2 + low.",						"\t\t\t  left := self",						"\t\t\t\t          bisect: mergeBlock",						"\t\t\t\t          from: low",						"\t\t\t\t          to: middle",						"\t\t\t\t          baseBlock: baseBlock.",						"\t\t\t  right := self",						"\t\t\t\t           bisect: mergeBlock",						"\t\t\t\t           from: middle + 1",						"\t\t\t\t           to: high",						"\t\t\t\t           baseBlock: baseBlock.",						"\t\t\t  mergeBlock value: left value: right ]"					],					"body" : [						"| diff |",						"diff := high - low.",						"^ diff = 0",						"\t  ifTrue: [ ",						"\t  baseBlock value: (self at: high) \"Because `high` equals `low`.\" ]",						"\t  ifFalse: [ ",						"\t\t  | middle left right |",						"\t\t  middle := diff // 2 + low.",						"\t\t  left := self",						"\t\t\t          bisect: mergeBlock",						"\t\t\t          from: low",						"\t\t\t          to: middle",						"\t\t\t          baseBlock: baseBlock.",						"\t\t  right := self",						"\t\t\t           bisect: mergeBlock",						"\t\t\t           from: middle + 1",						"\t\t\t           to: high",						"\t\t\t           baseBlock: baseBlock.",						"\t\t  mergeBlock value: left value: right ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 70858242,					"argumentNames" : [						"mergeBlock",						"low",						"high",						"baseBlock"					]				}			},			"senders" : [				"ArrayedCollection>>#bisect:baseBlock:",				"ArrayedCollection>>#bisect:from:to:baseBlock:",				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testByteArrayLiteral" : {			"implementors" : {				"OCArrayLiteralTest" : {					"sourceCode" : [						"testByteArrayLiteral",						"",						"\tself class compile: 'array ^ #[ 1 2 3 4 ]'.",						"\tself assert: self array equals: self array.",						"\tself assert: self array identicalTo: self array"					],					"body" : [						"self class compile: 'array ^ #[ 1 2 3 4 ]'.",						"self assert: self array equals: self array.",						"self assert: self array identicalTo: self array"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4775977,					"argumentNames" : [ ]				},				"EssentialsObjectTest" : {					"sourceCode" : [						"testByteArrayLiteral",						"",						"\t^ self exportSlotsGraphOf: #[ 18 10 253 ]"					],					"body" : [						"^ self exportSlotsGraphOf: #[ 18 10 253 ]"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168946,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testGaussianBoxMuller" : {			"implementors" : {				"RandomTestDistributions" : {					"sourceCode" : [						"testGaussianBoxMuller",						"",						"\t| gen |",						"\tgen := RandomBoxMullerBivariateGaussian seed: 13.",						"",						"\tself exportSlotsGraphOf: gen.",						"",						"\tself",						"\t\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\t\tequals: self expectedValue_testGaussianBoxMuller"					],					"body" : [						"| gen |",						"gen := RandomBoxMullerBivariateGaussian seed: 13.",						"",						"self exportSlotsGraphOf: gen.",						"",						"self",						"\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\tequals: self expectedValue_testGaussianBoxMuller"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 3432791,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"overlappingPairsDo:" : {			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"overlappingPairsDo: aBlock",						"",						"\t\"Emit overlapping pairs of my elements into aBlock\"",						"",						"\t\"(Array streamContents: [:stream | #(1 2 3 4) overlappingPairsDo: [:first :second| stream nextPut: (first + second)]]) >>> #(3 5 7)\"",						"",						"\t1 to: self size - 1 do: [ :i | ",						"\taBlock value: (self at: i) value: (self at: i + 1) ]"					],					"body" : [						"1 to: self size - 1 do: [ :i | ",						"aBlock value: (self at: i) value: (self at: i + 1) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Emit overlapping pairs of my elements into aBlock"					],					"hash" : 19217913,					"argumentNames" : [						"aBlock"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"BlockClosure>>#kissingFractions",				"RSPolyline>>#basicIncludesPoint:",				"RSUMLSequenceBuilder>>#lifeLines:selfMessageSends:lineBuilder:descriptor:startShape:endShape:",				"RSUMLSequenceDescriptor>>#cumulateWidths",				"TabMorph>>#drawOn:"			]		},		"asShapeBinaryDots:" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"asShapeBinaryDots: repr",						"",						"\t| dots |",						"\tdots := repr collect: [ :each | ",						"\t\t        | int |",						"\t\t        int := Integer readFrom: each asString.",						"\t\t        RSCircle new",						"\t\t\t        model: int;",						"\t\t\t        radius: Float goldenRatio double double;",						"\t\t\t        color: Color white;",						"\t\t\t        withBorder;",						"\t\t\t        yourself: [ :c | ",						"\t\t\t\t        c color: (int",						"\t\t\t\t\t\t\t         ifZero: [ Color white ]",						"\t\t\t\t\t\t\t         ifOne: [ c border color ]",						"\t\t\t\t\t\t\t         ifTwo: [ ",						"\t\t\t\t\t\t\t\t         c border",						"\t\t\t\t\t\t\t\t\t         color: Color black;",						"\t\t\t\t\t\t\t\t\t         color ]",						"\t\t\t\t\t\t\t         otherwise: [ Error signal ]) ] ].",						"",						"\tRSHorizontalLineLayout new",						"\t\tgapSize: Float goldenRatio;",						"\t\ton: dots.",						"",						"\t^ RSComposite new",						"\t\t  model: repr;",						"\t\t  shapes: dots;",						"\t\t  yourself"					],					"body" : [						"| dots |",						"dots := repr collect: [ :each | ",						"\t        | int |",						"\t        int := Integer readFrom: each asString.",						"\t        RSCircle new",						"\t\t        model: int;",						"\t\t        radius: Float goldenRatio double double;",						"\t\t        color: Color white;",						"\t\t        withBorder;",						"\t\t        yourself: [ :c | ",						"\t\t\t        c color: (int",						"\t\t\t\t\t\t         ifZero: [ Color white ]",						"\t\t\t\t\t\t         ifOne: [ c border color ]",						"\t\t\t\t\t\t         ifTwo: [ ",						"\t\t\t\t\t\t\t         c border",						"\t\t\t\t\t\t\t\t         color: Color black;",						"\t\t\t\t\t\t\t\t         color ]",						"\t\t\t\t\t\t         otherwise: [ Error signal ]) ] ].",						"",						"RSHorizontalLineLayout new",						"\tgapSize: Float goldenRatio;",						"\ton: dots.",						"",						"^ RSComposite new",						"\t  model: repr;",						"\t  shapes: dots;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 19110842,					"argumentNames" : [						"repr"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#asShapeBinaryDots",				"Integer>>#asShapeSkewDots",				"Integer>>#asShapeBRGCDots"			]		},		"goldenRatiosGreater" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"goldenRatiosGreater",						"",						"\t^ self",						"\t\t  gibonacciNumbersFirst: 1",						"\t\t  second: Float goldenRatio",						"\t\t  do: [ :a :b | a + b ]"					],					"body" : [						"^ self",						"\t  gibonacciNumbersFirst: 1",						"\t  second: Float goldenRatio",						"\t  do: [ :a :b | a + b ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1806859,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectObjectModel" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectObjectModel",						"",						"\t^ self exportSlotsGraphOf: { ",						"\t\t\t  Object.",						"\t\t\t  Trait }"					],					"body" : [						"^ self exportSlotsGraphOf: { ",						"\t\t  Object.",						"\t\t  Trait }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169329,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectFractionKissingEnumeration" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionKissingEnumeration",						"",						"\t| fractions n |",						"\tn := 7.",						"\tfractions := [ :f :seen :frontier :level | level < n ]",						"\t\t             kissingFractions.",						"",						"\tself assert: fractions size equals: 1 << (n - 1) - 1.",						"",						"\tself assert: fractions equals: { ",						"\t\t\t(1 / 7).",						"\t\t\t(1 / 6).",						"\t\t\t(2 / 11).",						"\t\t\t(1 / 5).",						"\t\t\t(3 / 14).",						"\t\t\t(2 / 9).",						"\t\t\t(3 / 13).",						"\t\t\t(1 / 4).",						"\t\t\t(4 / 15).",						"\t\t\t(3 / 11).",						"\t\t\t(5 / 18).",						"\t\t\t(2 / 7).",						"\t\t\t(5 / 17).",						"\t\t\t(3 / 10).",						"\t\t\t(4 / 13).",						"\t\t\t(1 / 3).",						"\t\t\t(5 / 14).",						"\t\t\t(4 / 11).",						"\t\t\t(7 / 19).",						"\t\t\t(3 / 8).",						"\t\t\t(8 / 21).",						"\t\t\t(5 / 13).",						"\t\t\t(7 / 18).",						"\t\t\t(2 / 5).",						"\t\t\t(7 / 17).",						"\t\t\t(5 / 12).",						"\t\t\t(8 / 19).",						"\t\t\t(3 / 7).",						"\t\t\t(7 / 16).",						"\t\t\t(4 / 9).",						"\t\t\t(5 / 11).",						"\t\t\t(1 / 2).",						"\t\t\t(6 / 11).",						"\t\t\t(5 / 9).",						"\t\t\t(9 / 16).",						"\t\t\t(4 / 7).",						"\t\t\t(11 / 19).",						"\t\t\t(7 / 12).",						"\t\t\t(10 / 17).",						"\t\t\t(3 / 5).",						"\t\t\t(11 / 18).",						"\t\t\t(8 / 13).",						"\t\t\t(13 / 21).",						"\t\t\t(5 / 8).",						"\t\t\t(12 / 19).",						"\t\t\t(7 / 11).",						"\t\t\t(9 / 14).",						"\t\t\t(2 / 3).",						"\t\t\t(9 / 13).",						"\t\t\t(7 / 10).",						"\t\t\t(12 / 17).",						"\t\t\t(5 / 7).",						"\t\t\t(13 / 18).",						"\t\t\t(8 / 11).",						"\t\t\t(11 / 15).",						"\t\t\t(3 / 4).",						"\t\t\t(10 / 13).",						"\t\t\t(7 / 9).",						"\t\t\t(11 / 14).",						"\t\t\t(4 / 5).",						"\t\t\t(9 / 11).",						"\t\t\t(5 / 6).",						"\t\t\t(6 / 7) }.",						"",						"\t^ self exportShapeOf: fractions accessorBlock: #asShapeFordCircles"					],					"body" : [						"| fractions n |",						"n := 7.",						"fractions := [ :f :seen :frontier :level | level < n ]",						"\t             kissingFractions.",						"",						"self assert: fractions size equals: 1 << (n - 1) - 1.",						"",						"self assert: fractions equals: { ",						"\t\t(1 / 7).",						"\t\t(1 / 6).",						"\t\t(2 / 11).",						"\t\t(1 / 5).",						"\t\t(3 / 14).",						"\t\t(2 / 9).",						"\t\t(3 / 13).",						"\t\t(1 / 4).",						"\t\t(4 / 15).",						"\t\t(3 / 11).",						"\t\t(5 / 18).",						"\t\t(2 / 7).",						"\t\t(5 / 17).",						"\t\t(3 / 10).",						"\t\t(4 / 13).",						"\t\t(1 / 3).",						"\t\t(5 / 14).",						"\t\t(4 / 11).",						"\t\t(7 / 19).",						"\t\t(3 / 8).",						"\t\t(8 / 21).",						"\t\t(5 / 13).",						"\t\t(7 / 18).",						"\t\t(2 / 5).",						"\t\t(7 / 17).",						"\t\t(5 / 12).",						"\t\t(8 / 19).",						"\t\t(3 / 7).",						"\t\t(7 / 16).",						"\t\t(4 / 9).",						"\t\t(5 / 11).",						"\t\t(1 / 2).",						"\t\t(6 / 11).",						"\t\t(5 / 9).",						"\t\t(9 / 16).",						"\t\t(4 / 7).",						"\t\t(11 / 19).",						"\t\t(7 / 12).",						"\t\t(10 / 17).",						"\t\t(3 / 5).",						"\t\t(11 / 18).",						"\t\t(8 / 13).",						"\t\t(13 / 21).",						"\t\t(5 / 8).",						"\t\t(12 / 19).",						"\t\t(7 / 11).",						"\t\t(9 / 14).",						"\t\t(2 / 3).",						"\t\t(9 / 13).",						"\t\t(7 / 10).",						"\t\t(12 / 17).",						"\t\t(5 / 7).",						"\t\t(13 / 18).",						"\t\t(8 / 11).",						"\t\t(11 / 15).",						"\t\t(3 / 4).",						"\t\t(10 / 13).",						"\t\t(7 / 9).",						"\t\t(11 / 14).",						"\t\t(4 / 5).",						"\t\t(9 / 11).",						"\t\t(5 / 6).",						"\t\t(6 / 7) }.",						"",						"^ self exportShapeOf: fractions accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3696156,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"\\/" : {			"implementors" : {				"Fraction" : {					"sourceCode" : [						"\\/ anObject",						"",						"\t^ anObject mediantFraction: self"					],					"body" : [						"^ anObject mediantFraction: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18805184,					"argumentNames" : [						"anObject"					]				},				"Integer" : {					"sourceCode" : [						"\\/ anObject",						"",						"\t^ anObject mediantInteger: self"					],					"body" : [						"^ anObject mediantInteger: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18845632,					"argumentNames" : [						"anObject"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"BlockClosure>>#kissingFractions"			]		},		"testInspectPoint" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectPoint",						"",						"\t^ self exportSlotsGraphOf: 42 @ 24"					],					"body" : [						"^ self exportSlotsGraphOf: 42 @ 24"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169106,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testGeometric" : {			"implementors" : {				"RandomTestDistributions" : {					"sourceCode" : [						"testGeometric",						"",						"\t| gen |",						"\tgen := (RandomGeometric seed: 13)",						"\t\t       p: 0.2;",						"\t\t       yourself.",						"",						"\tself exportSlotsGraphOf: gen.",						"",						"\tself",						"\t\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\t\tequals: self expectedValue_testGeometric"					],					"body" : [						"| gen |",						"gen := (RandomGeometric seed: 13)",						"\t       p: 0.2;",						"\t       yourself.",						"",						"self exportSlotsGraphOf: gen.",						"",						"self",						"\tassert: ((1 to: 1000) collect: [ :each1 | gen next ])",						"\tequals: self expectedValue_testGeometric"					],					"isTestMethod" : true,					"category" : "*Containers-Essentials-Tests",					"comment" : [ ],					"hash" : 3433483,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectGoldenRatio" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectGoldenRatio",						"",						"\t^ self exportSlotsGraphOf: Float goldenRatio"					],					"body" : [						"^ self exportSlotsGraphOf: Float goldenRatio"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169078,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectInteger13" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectInteger13",						"",						"\t^ self exportSlotsGraphOf: 13"					],					"body" : [						"^ self exportSlotsGraphOf: 13"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3168946,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectIceRepositoryCommitsGraph" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectIceRepositoryCommitsGraph",						"",						"\t^ self",						"\t\t  exportShapeOf: (IceRepository registry detect: [ :each | ",						"\t\t\t\t   each name = 'Containers-HeapQ' ])",						"\t\t  accessorBlock: #asShapeCommitsGraph"					],					"body" : [						"^ self",						"\t  exportShapeOf: (IceRepository registry detect: [ :each | ",						"\t\t\t   each name = 'Containers-HeapQ' ])",						"\t  accessorBlock: #asShapeCommitsGraph"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3169587,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		},		"testInspectDictionary" : {			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectDictionary",						"",						"\t^ self exportSlotsGraphOf: (Dictionary new",						"\t\t\t   at: 1 put: 'Hello';",						"\t\t\t   at: 2 -> 3 put: 4;",						"\t\t\t   at: 'World' put: #Smalltalk;",						"\t\t\t   yourself)"					],					"body" : [						"^ self exportSlotsGraphOf: (Dictionary new",						"\t\t   at: 1 put: 'Hello';",						"\t\t   at: 2 -> 3 put: 4;",						"\t\t   at: 'World' put: #Smalltalk;",						"\t\t   yourself)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3171034,					"argumentNames" : [ ]				},				"OpenToolTest" : {					"sourceCode" : [						"testInspectDictionary",						"",						"\t| inspector |",						"\tinspector := self openInspectorOn: Dictionary new.",						"\tinspector changed.",						"\tinspector close"					],					"body" : [						"| inspector |",						"inspector := self openInspectorOn: Dictionary new.",						"inspector changed.",						"inspector close"					],					"isTestMethod" : true,					"category" : "tests - inspect",					"comment" : [ ],					"hash" : 5700425,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			]		}	}}
{	"classes" : {		"CTKeysAndValuesView" : {			"hash" : 7615232,			"definition" : "Object subclass: #CTKeysAndValuesView\r\tinstanceVariableNames: 'dict'\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Views'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tdict:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Views"		},		"ExternalAddress" : {			"hash" : 958208,			"definition" : "ByteArray variableByteSubclass: #ExternalAddress\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'FFI-Kernel'",			"comment" : [				"An ExternalAddress is an opaque handle to objects outside Pharo memory (e.g., a pointer)."			],			"category" : "FFI-Kernel"		},		"PdmRelationCanBeReachedBy" : {			"hash" : 2361088,			"definition" : "PdmRelation subclass: #PdmRelationCanBeReachedBy\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Tests"		},		"SequenceableCollection" : {			"hash" : 855040,			"definition" : "Collection subclass: #SequenceableCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		},		"PdmRelation" : {			"hash" : 7619840,			"definition" : "MessageSent subclass: #PdmRelation\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Tests"		},		"Context" : {			"hash" : 9216,			"definition" : "InstructionStream variableSubclass: #Context\r\tinstanceVariableNames: 'stackp method closureOrNil receiver'\r\tclassVariableNames: 'PrimitiveFailToken SpecialPrimitiveSimulators TryNamedPrimitiveTemplateMethod'\r\tpackage: 'Kernel-Methods'",			"comment" : [				"Instance variables:",				"\treceiver: <Object> (self)",				"\tclosureOrNil: <BlockClosure|nil> ",				"\t\tnil if I'm a method context",				"\t\tthe blockClosure being executed if I'm a block context",				"\tmethod <CompiledMethod> ",				"\t\tmethod being executed if I'm a method context",				"\t\tmethod holding the block if I'm a block context",				"\tvariable fields: <Object> temporary variables (including arguments)",				"",				"My instances hold all the dynamic state associated with the execution of either a method activation resulting from a message send or a block activation resulting from a block evaluation.",				"\t",				"MethodContexts, though normal in their variable size, are actually only used in two sizes, small and large, which are determined by the temporary space required by the method being executed.",				"",				"MethodContexts must only be created using the method newForMethod:.  Note that it is impossible to determine the real object size of a MethodContext except by asking for the frameSize of its method.  Any fields above the stack pointer (stackp) are truly invisible -- even (and especially!) to the garbage collector.  Any store into stackp other than by the primitive method stackp: is potentially fatal."			],			"category" : "Kernel-Methods"		},		"EssentialsObjectTest" : {			"hash" : 7631104,			"definition" : "ObjectTest subclass: #EssentialsObjectTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Essentials-Tests"		},		"PdmRelationManagesProjectsFor" : {			"hash" : 2359552,			"definition" : "PdmRelation subclass: #PdmRelationManagesProjectsFor\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Tests"		},		"ByteArray" : {			"hash" : 12800,			"definition" : "ArrayedCollection variableByteSubclass: #ByteArray\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Native-Base'",			"comment" : [				"I represent an ArrayedCollection whose elements are integers between 0 and 255.",				"",				"For further comments read comments of `WordArray`."			],			"category" : "Collections-Native-Base"		},		"PdmRelationOrderedCollection" : {			"hash" : 7614208,			"definition" : "OrderedCollection subclass: #PdmRelationOrderedCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Tests"		},		"Integer" : {			"hash" : 1012992,			"definition" : "Number subclass: #Integer\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		},		"CompiledCode" : {			"hash" : 807680,			"definition" : "ByteArray variableByteSubclass: #CompiledCode\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'LargeFrame PrimaryBytecodeSetEncoderClass SecondaryBytecodeSetEncoderClass SmallFrame'\r\tpackage: 'Kernel-Methods'",			"comment" : [				"My instances (and subinstances) are objects suitable for execution by the virtual machine. My subclasses and I have a specific layout so the instances intermix both indexable pointer fields and indexable integer fields.",				"",				"\t",				"The current format of a CompiledCode is as follows:",				"",				"\theader (4 bytes)",				"\tliterals (4 bytes each)",				"\tbytecodes  (variable)",				"\ttrailer (variable)",				"",				"The header describes the compiled code. It's a small integer with the following format: ",				"",				"sign bit \t1 bit: \tif set, the method is encoded in the SecondaryBytecodeSet, else in the PrimaryBytecodeSet (See class variables) ",				"(index 0)\t15 bits:\tnumber of literals",				"(index 16)\t1 bit:\trequires counters (in the sista JIT, methods marked this way cannot trip)",				"(index 17)\t1 bit:\twhether a large frame size is needed",				"(index 18)\t6 bits:\tnumber of temporary variables",				"(index 24)\t4 bits:\tnumber of arguments to the method",				"(index 28)\t1 bit:\thas primitive",				"(index 29)\t1 bit:\tflag bit, ignored by the VM",				"",				"The trailer encodes how to fetch the method's sources. See CompiledMethodTrailer."			],			"category" : "Kernel-Methods"		},		"BlockClosure" : {			"hash" : 9472,			"definition" : "Object variableSubclass: #BlockClosure\r\tinstanceVariableNames: 'outerContext startpc numArgs'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.",				"",				"examples :",				"[ 1 + 2 ] value",				"[ :arg | ",				"\t| temp | ",				"\ttemp := arg. ",				"\ttemp ] value: 5",				"[ ^ 5 ] value",				"",				"My return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. ",				"",				"Implementation:",				"",				"Instance variables:",				"\touterContext <Context|nil> context that defined me",				"\tstartpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  ",				"\tnumArgs: <SmallInteger> my number of arguments",				"",				"I am created at runtime through a special bytecode:",				"closureNumCopied: x numArgs: y bytes z1 to z2",				"On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.",				"",				"I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.",				"",				"Accessing variables of the my enclosing context is different depending on variables because of various optimizations:",				"- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.",				"- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. ",				"- full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.",				"",				"Optimized block closures: ",				"Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."			],			"category" : "Kernel-Methods"		},		"CTLinkedStoragePoolQueue" : {			"hash" : 7638784,			"definition" : "CTLinkedStoragePoolStack subclass: #CTLinkedStoragePoolQueue\r\tinstanceVariableNames: 'bottom'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tbottom:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"Fraction" : {			"hash" : 974080,			"definition" : "Number subclass: #Fraction\r\tinstanceVariableNames: 'numerator denominator'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"Fraction provides methods for dealing with fractions like 1/3 as fractions (not as 0.33333...).  All public arithmetic operations answer reduced fractions (see examples).",				"",				"instance variables: 'numerator denominator '",				"",				"Examples: (note the parentheses required to get the right answers in Smalltalk and Pharo):",				"",				"(2/3) + (2/3)",				"(2/3) + (1/2)\t\t \"answers shows the reduced fraction\" ",				"(2/3) raisedToInteger: 5\t\t \"fractions also can have exponents\""			],			"category" : "Kernel-Numbers"		},		"PdmEntity" : {			"hash" : 2361600,			"definition" : "Association subclass: #PdmEntity\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Tests"		}	},	"messages" : {		"overlappingPairsDo:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"BlockClosure>>#kissingFractions",				"RSPolyline>>#basicIncludesPoint:",				"TabMorph>>#drawOn:"			],			"implementors" : {				"SequenceableCollection" : {					"sourceCode" : [						"overlappingPairsDo: aBlock",						"",						"\t\"Emit overlapping pairs of my elements into aBlock\"",						"",						"\t\"(Array streamContents: [:stream | #(1 2 3 4) overlappingPairsDo: [:first :second| stream nextPut: (first + second)]]) >>> #(3 5 7)\"",						"",						"\t1 to: self size - 1 do: [ :i | ",						"\taBlock value: (self at: i) value: (self at: i + 1) ]"					],					"body" : [						"1 to: self size - 1 do: [ :i | ",						"aBlock value: (self at: i) value: (self at: i + 1) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Emit overlapping pairs of my elements into aBlock"					],					"hash" : 19216121,					"argumentNames" : [						"aBlock"					]				}			}		},		"mediantFraction:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Fraction>>#'\\/'"			],			"implementors" : {				"Fraction" : {					"sourceCode" : [						"mediantFraction: aFraction",						"",						"\t^ aFraction numerator + self numerator",						"\t  / (aFraction denominator + self denominator)"					],					"body" : [						"^ aFraction numerator + self numerator",						"  / (aFraction denominator + self denominator)"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18808064,					"argumentNames" : [						"aFraction"					]				},				"Integer" : {					"sourceCode" : [						"mediantFraction: aFraction",						"",						"\t^ aFraction numerator + self / (aFraction denominator + self)"					],					"body" : [						"^ aFraction numerator + self / (aFraction denominator + self)"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18846717,					"argumentNames" : [						"aFraction"					]				}			}		},		"testInspectFractionKissingEnumeration" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionKissingEnumeration",						"",						"\t| fractions n |",						"\tn := 7.",						"\tfractions := [ :f :seen :frontier :level | level < n ]",						"\t\t             kissingFractions.",						"",						"\tself assert: fractions size equals: 1 << (n - 1) - 1.",						"",						"\tself assert: fractions equals: { ",						"\t\t\t(1 / 7).",						"\t\t\t(1 / 6).",						"\t\t\t(2 / 11).",						"\t\t\t(1 / 5).",						"\t\t\t(3 / 14).",						"\t\t\t(2 / 9).",						"\t\t\t(3 / 13).",						"\t\t\t(1 / 4).",						"\t\t\t(4 / 15).",						"\t\t\t(3 / 11).",						"\t\t\t(5 / 18).",						"\t\t\t(2 / 7).",						"\t\t\t(5 / 17).",						"\t\t\t(3 / 10).",						"\t\t\t(4 / 13).",						"\t\t\t(1 / 3).",						"\t\t\t(5 / 14).",						"\t\t\t(4 / 11).",						"\t\t\t(7 / 19).",						"\t\t\t(3 / 8).",						"\t\t\t(8 / 21).",						"\t\t\t(5 / 13).",						"\t\t\t(7 / 18).",						"\t\t\t(2 / 5).",						"\t\t\t(7 / 17).",						"\t\t\t(5 / 12).",						"\t\t\t(8 / 19).",						"\t\t\t(3 / 7).",						"\t\t\t(7 / 16).",						"\t\t\t(4 / 9).",						"\t\t\t(5 / 11).",						"\t\t\t(1 / 2).",						"\t\t\t(6 / 11).",						"\t\t\t(5 / 9).",						"\t\t\t(9 / 16).",						"\t\t\t(4 / 7).",						"\t\t\t(11 / 19).",						"\t\t\t(7 / 12).",						"\t\t\t(10 / 17).",						"\t\t\t(3 / 5).",						"\t\t\t(11 / 18).",						"\t\t\t(8 / 13).",						"\t\t\t(13 / 21).",						"\t\t\t(5 / 8).",						"\t\t\t(12 / 19).",						"\t\t\t(7 / 11).",						"\t\t\t(9 / 14).",						"\t\t\t(2 / 3).",						"\t\t\t(9 / 13).",						"\t\t\t(7 / 10).",						"\t\t\t(12 / 17).",						"\t\t\t(5 / 7).",						"\t\t\t(13 / 18).",						"\t\t\t(8 / 11).",						"\t\t\t(11 / 15).",						"\t\t\t(3 / 4).",						"\t\t\t(10 / 13).",						"\t\t\t(7 / 9).",						"\t\t\t(11 / 14).",						"\t\t\t(4 / 5).",						"\t\t\t(9 / 11).",						"\t\t\t(5 / 6).",						"\t\t\t(6 / 7) }.",						"",						"\t^ self exportShapeOf: fractions accessorBlock: #asShapeFordCircles"					],					"body" : [						"| fractions n |",						"n := 7.",						"fractions := [ :f :seen :frontier :level | level < n ]",						"\t             kissingFractions.",						"",						"self assert: fractions size equals: 1 << (n - 1) - 1.",						"",						"self assert: fractions equals: { ",						"\t\t(1 / 7).",						"\t\t(1 / 6).",						"\t\t(2 / 11).",						"\t\t(1 / 5).",						"\t\t(3 / 14).",						"\t\t(2 / 9).",						"\t\t(3 / 13).",						"\t\t(1 / 4).",						"\t\t(4 / 15).",						"\t\t(3 / 11).",						"\t\t(5 / 18).",						"\t\t(2 / 7).",						"\t\t(5 / 17).",						"\t\t(3 / 10).",						"\t\t(4 / 13).",						"\t\t(1 / 3).",						"\t\t(5 / 14).",						"\t\t(4 / 11).",						"\t\t(7 / 19).",						"\t\t(3 / 8).",						"\t\t(8 / 21).",						"\t\t(5 / 13).",						"\t\t(7 / 18).",						"\t\t(2 / 5).",						"\t\t(7 / 17).",						"\t\t(5 / 12).",						"\t\t(8 / 19).",						"\t\t(3 / 7).",						"\t\t(7 / 16).",						"\t\t(4 / 9).",						"\t\t(5 / 11).",						"\t\t(1 / 2).",						"\t\t(6 / 11).",						"\t\t(5 / 9).",						"\t\t(9 / 16).",						"\t\t(4 / 7).",						"\t\t(11 / 19).",						"\t\t(7 / 12).",						"\t\t(10 / 17).",						"\t\t(3 / 5).",						"\t\t(11 / 18).",						"\t\t(8 / 13).",						"\t\t(13 / 21).",						"\t\t(5 / 8).",						"\t\t(12 / 19).",						"\t\t(7 / 11).",						"\t\t(9 / 14).",						"\t\t(2 / 3).",						"\t\t(9 / 13).",						"\t\t(7 / 10).",						"\t\t(12 / 17).",						"\t\t(5 / 7).",						"\t\t(13 / 18).",						"\t\t(8 / 11).",						"\t\t(11 / 15).",						"\t\t(3 / 4).",						"\t\t(10 / 13).",						"\t\t(7 / 9).",						"\t\t(11 / 14).",						"\t\t(4 / 5).",						"\t\t(9 / 11).",						"\t\t(5 / 6).",						"\t\t(6 / 7) }.",						"",						"^ self exportShapeOf: fractions accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8952092,					"argumentNames" : [ ]				}			}		},		"testInspectFractionReciprocalKissing" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionReciprocalKissing",						"",						"\t| aFraction |",						"\taFraction := self testInspectFractionKissing reciprocal.",						"",						"\tself assert: aFraction kissingFractions equals: { ",						"\t\t\t(1 / 4).",						"\t\t\t(1 / 3).",						"\t\t\t(1 / 2) }.",						"",						"\t^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"body" : [						"| aFraction |",						"aFraction := self testInspectFractionKissing reciprocal.",						"",						"self assert: aFraction kissingFractions equals: { ",						"\t\t(1 / 4).",						"\t\t(1 / 3).",						"\t\t(1 / 2) }.",						"",						"^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8689481,					"argumentNames" : [ ]				}			}		},		"testInspect20LucasNumbers" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect20LucasNumbers",						"",						"\t| lucas |",						"\tlucas := 20 lucasNumbers.",						"",						"\tself",						"\t\tassert: -3 lucasNumbers equals: #(  );",						"\t\tassert: 0 lucasNumbers equals: #(  );",						"\t\tassert: 1 lucasNumbers equals: #( 2 );",						"\t\tassert: 2 lucasNumbers equals: #( 2 1 );",						"\t\tassert: lucas",						"\t\tequals:",						"\t\t\t#( 2 1 3 4 7 11 18 29 47 76 123 199 322 521 843 1364 2207 3571 5778",						"\t\t\t   9349 ).",						"",						"\t^ self exportSlotsGraphOf: lucas"					],					"body" : [						"| lucas |",						"lucas := 20 lucasNumbers.",						"",						"self",						"\tassert: -3 lucasNumbers equals: #(  );",						"\tassert: 0 lucasNumbers equals: #(  );",						"\tassert: 1 lucasNumbers equals: #( 2 );",						"\tassert: 2 lucasNumbers equals: #( 2 1 );",						"\tassert: lucas",						"\tequals:",						"\t\t#( 2 1 3 4 7 11 18 29 47 76 123 199 322 521 843 1364 2207 3571 5778",						"\t\t   9349 ).",						"",						"^ self exportSlotsGraphOf: lucas"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8690910,					"argumentNames" : [ ]				}			}		},		"testInspectCharacterPi" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectCharacterPi",						"",						"\t^ self exportSlotsGraphOf: $π"					],					"body" : [						"^ self exportSlotsGraphOf: $π"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424882,					"argumentNames" : [ ]				}			}		},		"testInspectBRGCodes" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectBRGCodes",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf:",						"\t\t  ((0 to: 15) collect: [ :each | each asShapeBRGCDots ])",						"\t\t  slotDescriptorsContext:",						"\t\t\t  (SlotDescriptorsVisitor new collect: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor",						"\t\t\t\t\t   inline: true;",						"\t\t\t\t\t   quote ])"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf:",						"\t  ((0 to: 15) collect: [ :each | each asShapeBRGCDots ])",						"\t  slotDescriptorsContext:",						"\t\t  (SlotDescriptorsVisitor new collect: [ :aDescriptor | ",						"\t\t\t   aDescriptor",						"\t\t\t\t   inline: true;",						"\t\t\t\t   quote ])"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8426168,					"argumentNames" : [ ]				}			}		},		"testInspectObject" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectObject",						"",						"\t^ self exportSlotsGraphOf: Object new"					],					"body" : [						"^ self exportSlotsGraphOf: Object new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424991,					"argumentNames" : [ ]				}			}		},		"testInspectInteger13Detailed" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectInteger13Detailed",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: 13",						"\t\t  slotDescriptorsContext: SlotDescriptorsVisitorIntegerDetails new"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: 13",						"\t  slotDescriptorsContext: SlotDescriptorsVisitorIntegerDetails new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425059,					"argumentNames" : [ ]				}			}		},		"asShapeBRGCDots" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectBRGCodes",				"SlotDescriptorsVisitorIntegerDetails>>#visitInteger:"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"asShapeBRGCDots",						"",						"\t^ self asShapeBinaryDots: (self bitBRGC printStringBase: 2) asArray"					],					"body" : [						"^ self asShapeBinaryDots: (self bitBRGC printStringBase: 2) asArray"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1807310,					"argumentNames" : [ ]				}			}		},		"fibonacciNumbers" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspect20FibonacciNumbers"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"fibonacciNumbers",						"",						"\t^ self gibonacciNumbersFirst: 0 second: 1 do: [ :a :b | a + b ]"					],					"body" : [						"^ self gibonacciNumbersFirst: 0 second: 1 do: [ :a :b | a + b ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1807253,					"argumentNames" : [ ]				}			}		},		"testInspectRSPolygon" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectRSPolygon",						"",						"\t^ self exportSlotsGraphOf: (RSPolygon new",						"\t\t\t   points: { ",						"\t\t\t\t\t   (0 @ 0).",						"\t\t\t\t\t   (100 @ 25).",						"\t\t\t\t\t   (200 @ 0) };",						"\t\t\t   cornerRadii: Float goldenRatio double;",						"\t\t\t   yourself)"					],					"body" : [						"^ self exportSlotsGraphOf: (RSPolygon new",						"\t\t   points: { ",						"\t\t\t\t   (0 @ 0).",						"\t\t\t\t   (100 @ 25).",						"\t\t\t\t   (200 @ 0) };",						"\t\t   cornerRadii: Float goldenRatio double;",						"\t\t   yourself)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8427524,					"argumentNames" : [ ]				}			}		},		"lucasNumbers" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspect20LucasNumbers"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"lucasNumbers",						"",						"\t^ self gibonacciNumbersFirst: 2 second: 1 do: [ :a :b | a + b ]"					],					"body" : [						"^ self gibonacciNumbersFirst: 2 second: 1 do: [ :a :b | a + b ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1807231,					"argumentNames" : [ ]				}			}		},		"gibonacciNumbersFirst:second:do:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#fibonacciNumbers",				"Integer>>#lucasNumbers"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"gibonacciNumbersFirst: first second: second do: aBlock",						"",						"\t^ self",						"\t\t  ifPositive: [ ",						"\t\t\t  Array streamContents: [ :aStream | ",						"\t\t\t\t  | a |",						"\t\t\t\t  a := first.",						"\t\t\t\t  aStream nextPut: a.",						"\t\t\t\t  self > 1 ifTrue: [ ",						"\t\t\t\t\t  | b |",						"\t\t\t\t\t  b := second.",						"\t\t\t\t\t  aStream nextPut: b.",						"\t\t\t\t\t  3 to: self do: [ :each | ",						"\t\t\t\t\t\t  | c v |",						"\t\t\t\t\t\t  c := aBlock value: a value: b.",						"\t\t\t\t\t\t  aStream nextPut: c.",						"\t\t\t\t\t\t  a := b.",						"\t\t\t\t\t\t  b := c ] ] ] ]",						"\t\t  ifNotPositive: [ #(  ) ]"					],					"body" : [						"^ self",						"\t  ifPositive: [ ",						"\t\t  Array streamContents: [ :aStream | ",						"\t\t\t  | a |",						"\t\t\t  a := first.",						"\t\t\t  aStream nextPut: a.",						"\t\t\t  self > 1 ifTrue: [ ",						"\t\t\t\t  | b |",						"\t\t\t\t  b := second.",						"\t\t\t\t  aStream nextPut: b.",						"\t\t\t\t  3 to: self do: [ :each | ",						"\t\t\t\t\t  | c v |",						"\t\t\t\t\t  c := aBlock value: a value: b.",						"\t\t\t\t\t  aStream nextPut: c.",						"\t\t\t\t\t  a := b.",						"\t\t\t\t\t  b := c ] ] ] ]",						"\t  ifNotPositive: [ #(  ) ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 52925557,					"argumentNames" : [						"first",						"second",						"aBlock"					]				}			}		},		"testInspectNil" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectNil",						"",						"\t^ self exportSlotsGraphOf: nil"					],					"body" : [						"^ self exportSlotsGraphOf: nil"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424911,					"argumentNames" : [ ]				}			}		},		"testInspectPoint" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectPoint",						"",						"\t^ self exportSlotsGraphOf: 42 @ 24"					],					"body" : [						"^ self exportSlotsGraphOf: 42 @ 24"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425042,					"argumentNames" : [ ]				}			}		},		"testMagnitudeSubclasses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testMagnitudeSubclasses",						"",						"\t^ self exportShapeOf: Magnitude accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Magnitude accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424934,					"argumentNames" : [ ]				}			}		},		"testInspectDatetimeNow" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectDatetimeNow",						"",						"\t^ self exportSlotsGraphOf: DateAndTime now"					],					"body" : [						"^ self exportSlotsGraphOf: DateAndTime now"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425014,					"argumentNames" : [ ]				}			}		},		"\\/" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"BlockClosure>>#kissingFractions"			],			"implementors" : {				"Fraction" : {					"sourceCode" : [						"\\/ anObject",						"",						"\t^ anObject mediantFraction: self"					],					"body" : [						"^ anObject mediantFraction: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18807232,					"argumentNames" : [						"anObject"					]				},				"Integer" : {					"sourceCode" : [						"\\/ anObject",						"",						"\t^ anObject mediantInteger: self"					],					"body" : [						"^ anObject mediantInteger: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18846144,					"argumentNames" : [						"anObject"					]				}			}		},		"testInspectObjectModel" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectObjectModel",						"",						"\t^ self exportSlotsGraphOf: { ",						"\t\t\t  Object.",						"\t\t\t  Trait }"					],					"body" : [						"^ self exportSlotsGraphOf: { ",						"\t\t  Object.",						"\t\t  Trait }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425265,					"argumentNames" : [ ]				}			}		},		"testInspectHeap" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectHeap",						"",						"\t| array random |",						"\trandom := Random seed: 11.",						"\tarray := (1 to: 30) asArray shuffleBy: random.",						"\tself",						"\t\tassert: array",						"\t\tequals:",						"\t\t\t#( 12 16 22 30 8 17 15 4 20 19 28 18 27 21 24 10 7 3 14 5 6 26 25",						"\t\t\t   29 11 23 2 9 13 1 ).",						"",						"\t^ self exportSlotsGraphOf: (Heap withAll: array)"					],					"body" : [						"| array random |",						"random := Random seed: 11.",						"array := (1 to: 30) asArray shuffleBy: random.",						"self",						"\tassert: array",						"\tequals:",						"\t\t#( 12 16 22 30 8 17 15 4 20 19 28 18 27 21 24 10 7 3 14 5 6 26 25 29",						"\t\t   11 23 2 9 13 1 ).",						"",						"^ self exportSlotsGraphOf: (Heap withAll: array)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8951366,					"argumentNames" : [ ]				}			}		},		"testInspect20FibonacciNumbers" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect20FibonacciNumbers",						"",						"\t| fibs |",						"\tfibs := 20 fibonacciNumbers.",						"",						"\tself",						"\t\tassert: -3 fibonacciNumbers equals: #(  );",						"\t\tassert: 0 fibonacciNumbers equals: #(  );",						"\t\tassert: 1 fibonacciNumbers equals: #( 0 );",						"\t\tassert: 2 fibonacciNumbers equals: #( 0 1 );",						"\t\tassert: fibs",						"\t\tequals:",						"\t\t\t#( 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 ).",						"",						"\t^ self exportSlotsGraphOf: fibs"					],					"body" : [						"| fibs |",						"fibs := 20 fibonacciNumbers.",						"",						"self",						"\tassert: -3 fibonacciNumbers equals: #(  );",						"\tassert: 0 fibonacciNumbers equals: #(  );",						"\tassert: 1 fibonacciNumbers equals: #( 0 );",						"\tassert: 2 fibonacciNumbers equals: #( 0 1 );",						"\tassert: fibs",						"\tequals:",						"\t\t#( 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 ).",						"",						"^ self exportSlotsGraphOf: fibs"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8690910,					"argumentNames" : [ ]				}			}		},		"instVarsNamesOrderedCollection" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"ExternalAddress>>#instVarsNamesOrderedCollection",				"Object>>#asShapeSlotsCollapsedSCCsDfsTree",				"Object>>#asShapeSlotsSCCsDfsTree",				"Object>>#asShapeSlotsLayeredDfsTree",				"Object>>#asShapeSlotsTopologicallySortedDfsTree",				"PdmRelationCanBeReachedBy>>#instVarsNamesOrderedCollection",				"PdmRelationManagesProjectsFor>>#instVarsNamesOrderedCollection",				"PdmRelationOrderedCollection>>#instVarsNamesOrderedCollection",				"PdmRolesTest>>#testPdmRelationsInlineProjects",				"PdmRolesTest>>#testPdmRelations"			],			"implementors" : {				"PdmEntity" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  (#id asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   blockClosure: [ :anAssoc | anAssoc key ]).",						"\t\t  (#relations asSlotDescriptor",						"\t\t\t   inline: false;",						"\t\t\t   noHeader;",						"\t\t\t   blockClosure: [ :anAssoc | \"in: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]\" ",						"\t\t\t\t   anAssoc value ]) }"					],					"body" : [						"^ { ",						"\t  (#id asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   blockClosure: [ :anAssoc | anAssoc key ]).",						"\t  (#relations asSlotDescriptor",						"\t\t   inline: false;",						"\t\t   noHeader;",						"\t\t   blockClosure: [ :anAssoc | \"in: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]\" ",						"\t\t\t   anAssoc value ]) }"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3158219,					"argumentNames" : [ ]				},				"ExternalAddress" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection",						"\t  , { (#addressString asSlotDescriptor inline: true) }"					],					"body" : [						"^ super instVarsNamesOrderedCollection",						"  , { (#addressString asSlotDescriptor inline: true) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1752997,					"argumentNames" : [ ]				},				"PdmRelation" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { (#relation asSlotDescriptor inline: true) } , (self arguments",						"\t\t   ifEmpty: [ {  } ]",						"\t\t   ifNotEmpty: [ { (#argument asSlotDescriptor inline: true) } ])",						"\t  , (self object",						"\t\t\t   ifNil: [ {  } ]",						"\t\t\t   ifNotNil: [ { #object asSlotDescriptor } ])",						"\t\"(#subject asSlotDescriptor inline: true).\""					],					"body" : [						"^ { (#relation asSlotDescriptor inline: true) } , (self arguments",						"\t   ifEmpty: [ {  } ]",						"\t   ifNotEmpty: [ { (#argument asSlotDescriptor inline: true) } ])",						"  , (self object",						"\t\t   ifNil: [ {  } ]",						"\t\t   ifNotNil: [ { #object asSlotDescriptor } ])",						"\"(#subject asSlotDescriptor inline: true).\""					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 8417123,					"argumentNames" : [ ]				},				"Context" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #home asSlotDescriptor.",						"\t\t  #sender asSlotDescriptor.",						"\t\t  #receiver asSlotDescriptor.",						"\t\t  #selector asSlotDescriptor.",						"\t\t  \"(#arguments asSlotDescriptor inline: true).\"",						"\t\t  #pc asSlotDescriptor.",						"\t\t  #stackPtr asSlotDescriptor",						"\t\t  \"#receiver asSlotDescriptor instVarNameHasBeenGiven \" }"					],					"body" : [						"^ { ",						"\t  #home asSlotDescriptor.",						"\t  #sender asSlotDescriptor.",						"\t  #receiver asSlotDescriptor.",						"\t  #selector asSlotDescriptor.",						"\t  \"(#arguments asSlotDescriptor inline: true).\"",						"\t  #pc asSlotDescriptor.",						"\t  #stackPtr asSlotDescriptor",						"\t  \"#receiver asSlotDescriptor instVarNameHasBeenGiven \" }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 804188,					"argumentNames" : [ ]				},				"ByteArray" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #hex asSlotDescriptor.",						"\t\t  #asArray asSlotDescriptor }"					],					"body" : [						"^ { ",						"\t  #hex asSlotDescriptor.",						"\t  #asArray asSlotDescriptor }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 807030,					"argumentNames" : [ ]				},				"PdmRelationManagesProjectsFor" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection yourself: [ :descriptors | ",						"\t\t  descriptors at: descriptors size put: (descriptors last",						"\t\t\t\t   selector: #projects;",						"\t\t\t\t   blockClosure: [ :anObj | \";",						"\t\t\t\t   inline: true;",						"\t\t\t\t   noHeader;",						"\t\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]\" ",						"\t\t\t\t\t   anObj return ]) ]"					],					"body" : [						"^ super instVarsNamesOrderedCollection yourself: [ :descriptors | ",						"\t  descriptors at: descriptors size put: (descriptors last",						"\t\t\t   selector: #projects;",						"\t\t\t   blockClosure: [ :anObj | \";",						"\t\t\t\t   inline: true;",						"\t\t\t\t   noHeader;",						"\t\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]\" ",						"\t\t\t\t   anObj return ]) ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3153805,					"argumentNames" : [ ]				},				"CompiledCode" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #methodClassName asSlotDescriptor.",						"\t\t  #selector asSlotDescriptor.",						"\t\t  #formattedCode asSlotDescriptor }"					],					"body" : [						"^ { ",						"\t  #methodClassName asSlotDescriptor.",						"\t  #selector asSlotDescriptor.",						"\t  #formattedCode asSlotDescriptor }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1602094,					"argumentNames" : [ ]				},				"CTKeysAndValuesView" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ Array streamContents: [ :aStream | ",						"\t\t  dict keysAndValuesDo: [ :k :v | ",						"\t\t\t  aStream nextPut: (k asString asSlotDescriptor",						"\t\t\t\t\t   blockClosure: [ v ];",						"\t\t\t\t\t   yourself) ] ]"					],					"body" : [						"^ Array streamContents: [ :aStream | ",						"\t  dict keysAndValuesDo: [ :k :v | ",						"\t\t  aStream nextPut: (k asString asSlotDescriptor",						"\t\t\t\t   blockClosure: [ v ];",						"\t\t\t\t   yourself) ] ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 8409188,					"argumentNames" : [ ]				},				"CTLinkedStoragePoolQueue" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t\"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference.\"",						"",						"\t^ { #avail. #bottom. #top }"					],					"body" : [						"^ { #avail. #bottom. #top }"					],					"isTestMethod" : false,					"category" : "*Containers-LinkedStoragePool-Visualizations",					"comment" : [						"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference."					],					"hash" : 8432789,					"argumentNames" : [ ]				},				"PdmRelationCanBeReachedBy" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection yourself: [ :descriptors | ",						"\t\t  descriptors at: descriptors size put: (descriptors last",						"\t\t\t\t   selector: #contacts;",						"\t\t\t\t   blockClosure: [ :anObj | anObj return ];",						"\t\t\t\t   inline: true;",						"\t\t\t\t   noHeader;",						"\t\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]) ]"					],					"body" : [						"^ super instVarsNamesOrderedCollection yourself: [ :descriptors | ",						"\t  descriptors at: descriptors size put: (descriptors last",						"\t\t\t   selector: #contacts;",						"\t\t\t   blockClosure: [ :anObj | anObj return ];",						"\t\t\t   inline: true;",						"\t\t\t   noHeader;",						"\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]) ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3155341,					"argumentNames" : [ ]				},				"PdmRelationOrderedCollection" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ self asArray instVarsNamesOrderedCollection collect: [ :each | ",						"\t\t  each inline: true ]"					],					"body" : [						"^ self asArray instVarsNamesOrderedCollection collect: [ :each | ",						"\t  each inline: true ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 8408502,					"argumentNames" : [ ]				}			}		},		"kissingFractions" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionReciprocalKissing",				"EssentialsObjectTest>>#testInspectFractionKissing",				"EssentialsObjectTest>>#testInspectFractionKissingEnumeration",				"Fraction>>#asShapeFordCircles"			],			"implementors" : {				"Fraction" : {					"sourceCode" : [						"kissingFractions",						"",						"\t| kissedFractions vl |",						"\tkissedFractions := Set new.",						"",						"\tvl := ValueLink new",						"\t\t      value: self asFractionWrtFloor;",						"\t\t      yourself.",						"",						"\t[ vl ] whileNotNil: [ ",						"\t\t| gcd diophantinePoint next less aFraction |",						"\t\taFraction := vl value.",						"\t\tkissedFractions add: aFraction.",						"",						"\t\tgcd := aFraction numerator >|< aFraction denominator.",						"\t\tdiophantinePoint := gcd point.",						"\t\tnext := diophantinePoint x / diophantinePoint y negated.",						"",						"\t\tless := aFraction numerator - next numerator",						"\t\t        / (aFraction denominator - next denominator).",						"",						"\t\tvl := next kissingFractionLink:",						"\t\t\t      (less kissingFractionLink: vl nextLink) ].",						"",						"\t^ kissedFractions asArray",						"\t\t  sort;",						"\t\t  yourself"					],					"body" : [						"| kissedFractions vl |",						"kissedFractions := Set new.",						"",						"vl := ValueLink new",						"\t      value: self asFractionWrtFloor;",						"\t      yourself.",						"",						"[ vl ] whileNotNil: [ ",						"\t| gcd diophantinePoint next less aFraction |",						"\taFraction := vl value.",						"\tkissedFractions add: aFraction.",						"",						"\tgcd := aFraction numerator >|< aFraction denominator.",						"\tdiophantinePoint := gcd point.",						"\tnext := diophantinePoint x / diophantinePoint y negated.",						"",						"\tless := aFraction numerator - next numerator",						"\t        / (aFraction denominator - next denominator).",						"",						"\tvl := next kissingFractionLink:",						"\t\t      (less kissingFractionLink: vl nextLink) ].",						"",						"^ kissedFractions asArray",						"\t  sort;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 2295820,					"argumentNames" : [ ]				},				"BlockClosure" : {					"sourceCode" : [						"kissingFractions",						"",						"\t| fractions news level |",						"\tlevel := 1.",						"\tfractions := SortedCollection with: 0 with: 1.",						"",						"\t[ ",						"\tnews := OrderedCollection new.",						"\tfractions overlappingPairsDo: [ :a :b | ",						"\t\t| f |",						"\t\tf := a \\/ b.",						"\t\t(self",						"\t\t\t cull: f",						"\t\t\t cull: fractions",						"\t\t\t cull: news",						"\t\t\t cull: level) ifTrue: [ news add: f ] ].",						"\tnews isEmpty ] whileFalse: [ ",						"\t\tfractions addAll: news.",						"\t\tlevel := level + 1 ].",						"",						"\t^ fractions",						"\t\t  removeFirst;",						"\t\t  removeLast;",						"\t\t  asArray"					],					"body" : [						"| fractions news level |",						"level := 1.",						"fractions := SortedCollection with: 0 with: 1.",						"",						"[ ",						"news := OrderedCollection new.",						"fractions overlappingPairsDo: [ :a :b | ",						"\t| f |",						"\tf := a \\/ b.",						"\t(self",						"\t\t cull: f",						"\t\t cull: fractions",						"\t\t cull: news",						"\t\t cull: level) ifTrue: [ news add: f ] ].",						"news isEmpty ] whileFalse: [ ",						"\tfractions addAll: news.",						"\tlevel := level + 1 ].",						"",						"^ fractions",						"\t  removeFirst;",						"\t  removeLast;",						"\t  asArray"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1331139,					"argumentNames" : [ ]				}			}		},		"testInspectString" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectString",						"",						"\t^ self exportSlotsGraphOf: (String loremIpsum: 100)"					],					"body" : [						"^ self exportSlotsGraphOf: (String loremIpsum: 100)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425083,					"argumentNames" : [ ]				}			}		},		"testInspectAssociation" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectAssociation",						"",						"\t^ self exportSlotsGraphOf: 42 -> thisContext method"					],					"body" : [						"^ self exportSlotsGraphOf: 42 -> thisContext method"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425278,					"argumentNames" : [ ]				}			}		},		"testInspectRBNodesQuine" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectRBNodesQuine",						"",						"\t\"A *quine* in Scheme:",						"\t",						"\t((lambda (x) (list x (list (quote quote) x)))",						"    (quote (lambda (x) (list x (list (quote quote) x)))))\"",						"",						"\t| quine aQuineBlock evalBlock |",						"\taQuineBlock := [ :x | ",						"\t               RBMessageNode",						"\t\t               receiver: x",						"\t\t               selector: #value:",						"\t\t               arguments:",						"\t\t               { (RBMessageNode receiver: x selector: #sourceNode) } ].",						"",						"\tquine := aQuineBlock value: aQuineBlock sourceNode.",						"",						"\tevalBlock := OpalCompiler new",						"\t\t             source:",						"\t\t\t             (RBBlockNode body:",						"\t\t\t\t\t              (RBSequenceNode statements: { quine }))",						"\t\t\t\t             formattedCode;",						"\t\t             evaluate.",						"",						"\tself assert: evalBlock value equals: quine"					],					"body" : [						"| quine aQuineBlock evalBlock |",						"aQuineBlock := [ :x | ",						"               RBMessageNode",						"\t               receiver: x",						"\t               selector: #value:",						"\t               arguments:",						"\t               { (RBMessageNode receiver: x selector: #sourceNode) } ].",						"",						"quine := aQuineBlock value: aQuineBlock sourceNode.",						"",						"evalBlock := OpalCompiler new",						"\t             source:",						"\t\t             (RBBlockNode body:",						"\t\t\t\t              (RBSequenceNode statements: { quine }))",						"\t\t\t             formattedCode;",						"\t             evaluate.",						"",						"self assert: evalBlock value equals: quine"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"A *quine* in Scheme:",						"\t",						"\t((lambda (x) (list x (list (quote quote) x)))",						"    (quote (lambda (x) (list x (list (quote quote) x)))))"					],					"hash" : 9214834,					"argumentNames" : [ ]				}			}		},		"bitBRGC" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#asStringBRGC",				"Integer>>#asShapeBRGCDots",				"SequenceableCollection>>#injectBRGC:intoIn:intoOut:"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"bitBRGC",						"",						"\t^ self bitXor: self >> 1"					],					"body" : [						"^ self bitXor: self >> 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1807041,					"argumentNames" : [ ]				}			}		},		"asShapeBinaryDots:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#asShapeBinaryDots",				"Integer>>#asShapeSkewDots",				"Integer>>#asShapeBRGCDots"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"asShapeBinaryDots: repr",						"",						"\t| dots |",						"\tdots := repr collect: [ :each | ",						"\t\t        | int |",						"\t\t        int := Integer readFrom: each asString.",						"\t\t        RSCircle new",						"\t\t\t        model: int;",						"\t\t\t        color: Color white;",						"\t\t\t        withBorder;",						"\t\t\t        yourself: [ :c | ",						"\t\t\t\t        c color: (int",						"\t\t\t\t\t\t\t         ifZero: [ Color white ]",						"\t\t\t\t\t\t\t         ifOne: [ c border color ]",						"\t\t\t\t\t\t\t         ifTwo: [ ",						"\t\t\t\t\t\t\t\t         c border",						"\t\t\t\t\t\t\t\t\t         color: Color black;",						"\t\t\t\t\t\t\t\t\t         color ]",						"\t\t\t\t\t\t\t         otherwise: [ Error signal ]) ] ].",						"",						"\tRSHorizontalLineLayout new",						"\t\tgapSize: Float goldenRatio;",						"\t\ton: dots.",						"",						"\t^ RSComposite new",						"\t\t  model: repr;",						"\t\t  shapes: dots;",						"\t\t  yourself"					],					"body" : [						"| dots |",						"dots := repr collect: [ :each | ",						"\t        | int |",						"\t        int := Integer readFrom: each asString.",						"\t        RSCircle new",						"\t\t        model: int;",						"\t\t        color: Color white;",						"\t\t        withBorder;",						"\t\t        yourself: [ :c | ",						"\t\t\t        c color: (int",						"\t\t\t\t\t\t         ifZero: [ Color white ]",						"\t\t\t\t\t\t         ifOne: [ c border color ]",						"\t\t\t\t\t\t         ifTwo: [ ",						"\t\t\t\t\t\t\t         c border",						"\t\t\t\t\t\t\t\t         color: Color black;",						"\t\t\t\t\t\t\t\t         color ]",						"\t\t\t\t\t\t         otherwise: [ Error signal ]) ] ].",						"",						"RSHorizontalLineLayout new",						"\tgapSize: Float goldenRatio;",						"\ton: dots.",						"",						"^ RSComposite new",						"\t  model: repr;",						"\t  shapes: dots;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 19111354,					"argumentNames" : [						"repr"					]				}			}		},		"testCollectionSubclasses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testCollectionSubclasses",						"",						"\t^ self exportShapeOf: Collection accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Collection accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424934,					"argumentNames" : [ ]				}			}		},		"testInspectTrueAndFalse" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectTrueAndFalse",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: (Array with: true with: false)",						"\t\t  slotDescriptorsContext:",						"\t\t\t  (SlotDescriptorsVisitor new collect: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor inline: false ])"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: (Array with: true with: false)",						"\t  slotDescriptorsContext:",						"\t\t  (SlotDescriptorsVisitor new collect: [ :aDescriptor | ",						"\t\t\t   aDescriptor inline: false ])"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425821,					"argumentNames" : [ ]				}			}		},		"kissingFractionLink:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Fraction>>#kissingFractions"			],			"implementors" : {				"Fraction" : {					"sourceCode" : [						"kissingFractionLink: aLink",						"",						"\t^ self ~~> aLink"					],					"body" : [						"^ self ~~> aLink"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18807232,					"argumentNames" : [						"aLink"					]				},				"Integer" : {					"sourceCode" : [						"kissingFractionLink: aLink",						"",						"\t^ aLink"					],					"body" : [						"^ aLink"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18845905,					"argumentNames" : [						"aLink"					]				}			}		},		"testMagnitudeSubclassesSlotsGraph" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testMagnitudeSubclassesSlotsGraph",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: Magnitude",						"\t\t  slotDescriptorsContext: SlotDescriptorsVisitorClassHierarchy new"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: Magnitude",						"\t  slotDescriptorsContext: SlotDescriptorsVisitorClassHierarchy new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425043,					"argumentNames" : [ ]				}			}		},		"testInspectFraction" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFraction",						"",						"\t^ self exportSlotsGraphOf: -1 / 2"					],					"body" : [						"^ self exportSlotsGraphOf: -1 / 2"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425040,					"argumentNames" : [ ]				}			}		},		"testInspectFractionForKisses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionKissing"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionForKisses",						"",						"\t^ self exportSlotsGraphOf: 4 / 17"					],					"body" : [						"^ self exportSlotsGraphOf: 4 / 17"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425040,					"argumentNames" : [ ]				}			}		},		"testInspectGoldenRatio" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectGoldenRatio",						"",						"\t^ self exportSlotsGraphOf: Float goldenRatio"					],					"body" : [						"^ self exportSlotsGraphOf: Float goldenRatio"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425014,					"argumentNames" : [ ]				}			}		},		"testInspectFractionKissing" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionReciprocalKissing"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionKissing",						"",						"\t| aFraction |",						"\taFraction := self testInspectFractionForKisses.",						"",						"\tself assert: aFraction kissingFractions equals: { ",						"\t\t\t(1 / 5).",						"\t\t\t(2 / 9).",						"\t\t\t(3 / 13).",						"\t\t\t(4 / 17).",						"\t\t\t(1 / 4).",						"\t\t\t(1 / 3).",						"\t\t\t(1 / 2) }.",						"",						"\t^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"body" : [						"| aFraction |",						"aFraction := self testInspectFractionForKisses.",						"",						"self assert: aFraction kissingFractions equals: { ",						"\t\t(1 / 5).",						"\t\t(2 / 9).",						"\t\t(3 / 13).",						"\t\t(4 / 17).",						"\t\t(1 / 4).",						"\t\t(1 / 3).",						"\t\t(1 / 2) }.",						"",						"^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8690189,					"argumentNames" : [ ]				}			}		},		"testInspectInteger13" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectInteger13",						"",						"\t^ self exportSlotsGraphOf: 13"					],					"body" : [						"^ self exportSlotsGraphOf: 13"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424882,					"argumentNames" : [ ]				}			}		},		"testRBNodeSubclasses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testRBNodeSubclasses",						"",						"\t^ self exportShapeOf: RBNode accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: RBNode accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424934,					"argumentNames" : [ ]				}			}		},		"mediantInteger:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#'\\/'"			],			"implementors" : {				"Fraction" : {					"sourceCode" : [						"mediantInteger: anInteger",						"",						"\t^ self numerator + anInteger numerator",						"\t  / (self denominator + anInteger denominator)"					],					"body" : [						"^ self numerator + anInteger numerator",						"  / (self denominator + anInteger denominator)"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18808064,					"argumentNames" : [						"anInteger"					]				},				"Integer" : {					"sourceCode" : [						"mediantInteger: anInteger",						"",						"\t^ self + anInteger / 2"					],					"body" : [						"^ self + anInteger / 2"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18846235,					"argumentNames" : [						"anInteger"					]				}			}		},		"testInspectFloatPi" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFloatPi",						"",						"\t^ self exportSlotsGraphOf: Float π"					],					"body" : [						"^ self exportSlotsGraphOf: Float π"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425014,					"argumentNames" : [ ]				}			}		},		"testInspectColorGray" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectColorGray",						"",						"\t^ self exportSlotsGraphOf: Color gray translucent"					],					"body" : [						"^ self exportSlotsGraphOf: Color gray translucent"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425163,					"argumentNames" : [ ]				}			}		},		"testInspectSet" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectSet",						"",						"\t| random sample n |",						"\tn := 20.",						"\trandom := Random seed: 11.",						"\tsample := (1 to: n) collect: [ :i | random nextInteger: n ].",						"",						"\tself",						"\t\tassert: sample",						"\t\tequals: #( 1 9 7 1 18 9 11 10 10 6 5 15 3 8 12 17 8 2 5 15 ).",						"",						"\t^ self exportSlotsGraphOf: sample asSet"					],					"body" : [						"| random sample n |",						"n := 20.",						"random := Random seed: 11.",						"sample := (1 to: n) collect: [ :i | random nextInteger: n ].",						"",						"self",						"\tassert: sample",						"\tequals: #( 1 9 7 1 18 9 11 10 10 6 5 15 3 8 12 17 8 2 5 15 ).",						"",						"^ self exportSlotsGraphOf: sample asSet"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 9213920,					"argumentNames" : [ ]				}			}		}	}}
{	"classes" : {		"PdmRelationOrderedCollection" : {			"hash" : 7614208,			"definition" : "OrderedCollection subclass: #PdmRelationOrderedCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials"		},		"Class" : {			"hash" : 799488,			"definition" : "ClassDescription subclass: #Class\r\tinstanceVariableNames: 'subclasses name classPool sharedPools environment category'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Classes'",			"comment" : [				"I add a number of facilities to those in ClassDescription:",				"\tA set of all my subclasses (defined in ClassDescription, but only used here and below)",				"\tA name by which I can be found in a SystemDictionary",				"\tA classPool for class variables shared between this class and its metaclass",				"\tA list of sharedPools which probably should be supplanted by some better mechanism.",				"",				"My instances describe the representation and behavior of objects. I add more comprehensive programming support facilities to the basic attributes of Behavior and the descriptive facilities of ClassDescription.",				"",				"The slot 'subclasses' is a redundant structure.  It is never used during execution, but is used by the development system to simplify or speed certain operations.  "			],			"category" : "Kernel-Classes"		},		"Context" : {			"hash" : 9216,			"definition" : "InstructionStream variableSubclass: #Context\r\tinstanceVariableNames: 'stackp method closureOrNil receiver'\r\tclassVariableNames: 'PrimitiveFailToken SpecialPrimitiveSimulators TryNamedPrimitiveTemplateMethod'\r\tpackage: 'Kernel-Methods'",			"comment" : [				"Instance variables:",				"\treceiver: <Object> (self)",				"\tclosureOrNil: <BlockClosure|nil> ",				"\t\tnil if I'm a method context",				"\t\tthe blockClosure being executed if I'm a block context",				"\tmethod <CompiledMethod> ",				"\t\tmethod being executed if I'm a method context",				"\t\tmethod holding the block if I'm a block context",				"\tvariable fields: <Object> temporary variables (including arguments)",				"",				"My instances hold all the dynamic state associated with the execution of either a method activation resulting from a message send or a block activation resulting from a block evaluation.",				"\t",				"MethodContexts, though normal in their variable size, are actually only used in two sizes, small and large, which are determined by the temporary space required by the method being executed.",				"",				"MethodContexts must only be created using the method newForMethod:.  Note that it is impossible to determine the real object size of a MethodContext except by asking for the frameSize of its method.  Any fields above the stack pointer (stackp) are truly invisible -- even (and especially!) to the garbage collector.  Any store into stackp other than by the primitive method stackp: is potentially fatal."			],			"category" : "Kernel-Methods"		},		"BlockClosure" : {			"hash" : 9472,			"definition" : "Object variableSubclass: #BlockClosure\r\tinstanceVariableNames: 'outerContext startpc numArgs'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.",				"",				"examples :",				"[ 1 + 2 ] value",				"[ :arg | ",				"\t| temp | ",				"\ttemp := arg. ",				"\ttemp ] value: 5",				"[ ^ 5 ] value",				"",				"My return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. ",				"",				"Implementation:",				"",				"Instance variables:",				"\touterContext <Context|nil> context that defined me",				"\tstartpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  ",				"\tnumArgs: <SmallInteger> my number of arguments",				"",				"I am created at runtime through a special bytecode:",				"closureNumCopied: x numArgs: y bytes z1 to z2",				"On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.",				"",				"I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.",				"",				"Accessing variables of the my enclosing context is different depending on variables because of various optimizations:",				"- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.",				"- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. ",				"- full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.",				"",				"Optimized block closures: ",				"Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."			],			"category" : "Kernel-Methods"		},		"Color" : {			"hash" : 907520,			"definition" : "Object subclass: #Color\r\tinstanceVariableNames: 'rgb cachedDepth cachedBitPattern alpha'\r\tclassVariableNames: 'BlueShift CachedColormaps ColorRegistry ComponentMask ComponentMax GrayToIndexMap GreenShift HalfComponentMask IndexedColors MaskingMap RedShift'\r\tpackage: 'Colors-Base'",			"comment" : [				"This class represents abstract color, regardless of the depth of bitmap it will be shown in.  At the very last moment a Color is converted to a pixelValue that depends on the depth of the actual Bitmap inside the Form it will be used with.  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.  (See comment in BitBlt.)  To change the depth of the Display and set how many colors you can see, execute: (Display newDepth: 8).  (See comment in DisplayMedium)",				"",				"\tColor is represented as the amount of light in red, green, and blue.  White is (1.0, 1.0, 1.0) and black is (0, 0, 0).  Pure red is (1.0, 0, 0).  These colors are \"additive\".  Think of Color's instance variables as:",				"\tr\tamount of red, a Float between 0.0 and 1.0.",				"\tg\tamount of green, a Float between 0.0 and 1.0.",				"\tb\tamount of blue, a Float between 0.0 and 1.0.",				"(But, in fact, the three are encoded as values from 0 to 1023 and combined in a single integer, rgb.  The user does not need to know this.)",				"",				"\tMany colors are named.  You find a color by name by sending a message to class Color, for example (Color lightBlue).  Also, (Color red: 0.2 green: 0.6 blue: 1.0) or (Color r: 0.2 g: 0.6 b: 1.0) creates a color. (see below)",				"\tA color is essentially immutable.  Once you set red, green, and blue, you cannot change them.  Instead, create a new Color and use it.",				"\t",				"\tApplications such as contour maps and bar graphs will want to display one of a set of shades based on a number.  Convert the range of this number to an integer from 1 to N.  Then call (Color green lightShades: N) to get an Array of colors from white to green.  Use the Array messages at:, atPin:, or atWrap: to pull out the correct color from the array.  atPin: gives the first (or last) color if the index is out of range.  atWrap: wraps around to the other end if the index is out of range.",				"\t\t",				"Messages:",				"\tmixed: proportion with: aColor\tAnswer this color mixed with the given color additively. The proportion, a number between 0.0 and 1.0, determines what what fraction of the receiver to use in the mix.",				"",				"\t+ \tadd two colors",				"\t- \tsubtract two colors",				"\t*\tmultiply the values of r, g, b by a number or an Array of factors.  ((Color named: #white) * 0.3) gives a darkish gray.  (aColor * #(0 0 0.9)) gives a color with slightly less blue.",				"\t/\tdivide a color by a factor or an array of three factors.",				"",				"\terrorForDepth: d     How close the nearest color at this depth is to this abstract color.  Sum of the squares of the RGB differences, square rooted and normalized to 1.0.  Multiply by 100 to get percent.",				"",				"\thue\t\t\tReturns the hue of the color. On a wheel from 0 to 360 with pure red at 0 and again at 360.",				"\tsaturation\tReturns the saturation of the color.  0.0 to 1.0",				"\tbrightness\tReturns the brightness of the color.  0.0 to 1.0",				"",				"\tname    Look to see if this Color has a name.",				"",				"\tlightShades: thisMany\t\tAn array of thisMany colors from white to the receiver. ",				"\tdarkShades: thisMany\t\tAn array of thisMany colors from black to the receiver.  Array is of length num.",				"\tmix: color2 shades: thisMany\t\tAn array of thisMany colors from the receiver to color2.",				"\twheel: thisMany\t\t\tAn array of thisMany colors around the color wheel starting and ending at the receiver.",				"",				"\tpixelValueForDepth: d    Returns the bits that appear be in a Bitmap of this depth for this color.  Represents the nearest available color at this depth.  Normal users do not need to know which pixelValue is used for which color. ",				"",				"Messages to Class Color.",				"\tred: r green: g blue: b\t\tReturn a color with the given r, g, and b components.",				"\tr: g: b:\t\tSame as above, for fast typing.",				"",				" \thue: h saturation: s brightness: b\t\tCreate a color with the given hue, saturation, and brightness.",				"",				"\tpink",				" \tblue",				"\tred ...\tMany colors have messages that return an instance of Color.",				"\tcanUnderstand: #brown\t  Returns true if #brown is a defined color.",				"\tnames\t\tAn OrderedCollection of the names of the colors.",				"\tnamed: #notAllThatGray put: aColor    Add a new color to the list and create an access message and a class variable for it.",				"",				"   colorFromPixelValue: value depth: d    Returns a Color whose bit pattern (inside a Bitmap) at this depth is the number specified.  Normal users do not need to use this.",				"",				"(See also comments in these classes: Form, Bitmap, BitBlt,.)"			],			"category" : "Colors-Base"		},		"CTKeysAndValuesView" : {			"hash" : 7615232,			"definition" : "Object subclass: #CTKeysAndValuesView\r\tinstanceVariableNames: 'dict'\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Views'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tdict:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Views"		},		"Point" : {			"hash" : 13824,			"definition" : "Object subclass: #Point\r\tinstanceVariableNames: 'x y'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-BasicObjects'",			"comment" : [				"I represent an x,y pair of numbers usually designating a location on the screen.",				"",				"My instances are created either using the message `@` or `x:y:` or `r:degrees:` as follows:",				"",				"```",				"| pt |",				"pt := 10@20.",				"pt x ",				">>> 10",				"pt y",				">>> 20 \t\t\t ",				"```",				"",				"```",				"| pt |",				"pt := Point x: 10 y: 20.",				"pt x ",				"> 10",				"pt y",				"> 20 \t\t\t ",				"```",				"",				"I define many nice messages that deal with point such as: ",				"- arithmetic such as \\+, \\*, reciprocal, min, abs,",				"- comparison \\<, \\<=, \\=, \\>, \\>=, closeTo: ",				"- geometry such as sideOf:, to:intersects:to:, ",				"- polar coordinates,",				"- extent such as scaleTo:",				"- transformation such as negated, translatedBy:, scaleBy:",				"- rounding with roundTo:, roundUpTo:, truncateTo:, truncated",				""			],			"category" : "Kernel-BasicObjects"		},		"RSBoundingShape" : {			"hash" : 6309632,			"definition" : "RSShape subclass: #RSBoundingShape\r\tuses: RSTPositionable\r\tinstanceVariableNames: 'baseRectangle matrix connectedLines shouldUpdateLines'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Shapes-Bounding'",			"comment" : [				"My subclasses has an extent and a transformation matrix"			],			"category" : "Roassal3-Shapes-Bounding"		},		"ByteArray" : {			"hash" : 12800,			"definition" : "ArrayedCollection variableByteSubclass: #ByteArray\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Native-Base'",			"comment" : [				"I represent an ArrayedCollection whose elements are integers between 0 and 255.",				"",				"For further comments read comments of `WordArray`."			],			"category" : "Collections-Native-Base"		},		"DateAndTime" : {			"hash" : 806144,			"definition" : "Magnitude subclass: #DateAndTime\r\tinstanceVariableNames: 'seconds offset julianDayNumber nanos'\r\tclassVariableNames: 'ClockProvider LocalTimeZoneCache'\r\tpoolDictionaries: 'ChronologyConstants'\r\tpackage: 'Kernel-Chronology'",			"comment" : [				"I am DateAndTime.",				"I represent a point in time or timestamp as defined by ISO 8601. ",				"I am a Magnitude. ",				"I have nanosecond precision.",				"I am TimeZone aware. ",				"I have zero duration.",				"",				"  DateAndTime now.",				"  DateAndTime now asUTC rounded.",				"  DateAndTime fromString: '1969-07-20T20:17:40.123+02:00'.",				"  DateAndTime fromString: '1969-07-20T20:17:40Z'.",				"",				"My implementation uses three SmallIntegers and a Duration:",				"  julianDayNumber - julian day number (starting at midnight UTC rather than noon GMT).",				"  seconds - number of seconds since midnight UTC. Always positive, between 0 and 86399.",				"  nanos\t - the number of nanoseconds since the second. Always positive, between 0 and 999999999.",				"  offset\t- duration from UTC.",				"",				"The offset is used to print the date and time in a local time zone, but the date and time are handled in UTC internally.",				"The nanosecond attribute is often zero but it defined for full ISO compliance and is suitable for timestamping."			],			"category" : "Kernel-Chronology"		},		"GreatestCommonDivisor" : {			"hash" : 7620864,			"definition" : "QuoRemComplementary subclass: #GreatestCommonDivisor\r\tinstanceVariableNames: 'equations point'\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tequations:\t\t<Object>",				"\tpoint:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials"		},		"PointArray" : {			"hash" : 1647360,			"definition" : "IntegerArray variableWordSubclass: #PointArray\r\tuses: TPointAccess\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'FormCanvas-Core-BalloonEngine'",			"comment" : [				"This class stores 32bit Integer points in place. It is used to pass data efficiently to the primitive level during high-bandwidth 2D graphics operations."			],			"category" : "FormCanvas-Core-BalloonEngine"		},		"Duration" : {			"hash" : 829952,			"definition" : "Magnitude subclass: #Duration\r\tinstanceVariableNames: 'nanos seconds'\r\tclassVariableNames: ''\r\tpoolDictionaries: 'ChronologyConstants'\r\tpackage: 'Kernel-Chronology'",			"comment" : [				"I represent a duration of time. I have nanosecond precision"			],			"category" : "Kernel-Chronology"		},		"Behavior" : {			"hash" : 866816,			"definition" : "Object subclass: #Behavior\r\tinstanceVariableNames: 'superclass methodDict format layout'\r\tclassVariableNames: 'ClassProperties ObsoleteSubclasses'\r\tpackage: 'Kernel-Classes'",			"comment" : [				"My instances describe the behavior of other objects. I provide the minimum state necessary for compiling methods, and creating and running instances. Most objects are created as instances of the more fully supported subclass, Class, but I am a good starting point for providing instance-specific behavior (as in Metaclass)."			],			"category" : "Kernel-Classes"		},		"CTLinkedStoragePoolQueue" : {			"hash" : 7638784,			"definition" : "CTLinkedStoragePoolStack subclass: #CTLinkedStoragePoolQueue\r\tinstanceVariableNames: 'bottom'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tbottom:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"FileReference" : {			"hash" : 1283072,			"definition" : "AbstractFileReference subclass: #FileReference\r\tinstanceVariableNames: 'filesystem'\r\tclassVariableNames: ''\r\tpackage: 'FileSystem-Core-Public'",			"comment" : [				"I combine a filesystem and path, which is sufficient to refer to a concrete file or directory. I provide methods for navigating my filesystem, performing filesystem operations and opening and closing files. ",				"I am the primary mechanism for working with files and directories. ",				"",				"###Examples",				"",				"```",				"| working |",				"working := FileSystem disk workingDirectory.",				"working files ",				"```",				"```",				"| disk |",				"disk := FileSystem disk.",				"disk root.                               \t\"a reference to the root directory\"",				"disk working.                         \t\"a reference to the working directory\"",				"```"			],			"category" : "FileSystem-Core-Public"		},		"CTIntegerRepresentationsView" : {			"hash" : 7614720,			"definition" : "Object subclass: #CTIntegerRepresentationsView\r\tinstanceVariableNames: 'integer'\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Views'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tinteger:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials-Views"		},		"Link" : {			"hash" : 1025280,			"definition" : "Object subclass: #Link\r\tinstanceVariableNames: 'nextLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."			],			"category" : "Collections-Support-Links"		},		"Integer" : {			"hash" : 1012992,			"definition" : "Number subclass: #Integer\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		},		"Array" : {			"hash" : 13056,			"definition" : "ArrayedCollection variableSubclass: #Array\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"Array is a fixed-sized collection of elements accessed by integer indices. Contrary to the C convention, the first element of a Pharo array is at position 1 and not 0. The main protocol to access array elements is the method `at:` and `at:put:`. ",				"",				"- `at: anInteger` returns the element at index anInteger. ",				"- `at: anInteger put: anObject` puts `anObject` at index `anInteger`. ",				"",				"Arrays are fixed-size collections therefore we cannot add or remove elements at the end of an array. ",				"",				"The following code creates an array of size 5, puts values in the first 3 locations and returns the first element.",				"",				"``` ",				"| anArray |",				"anArray := Array new: 5. ",				"anArray at: 1 put: 4. ",				"anArray at: 2 put: 3/2. ",				"anArray at: 3 put: 'ssss'. ",				"anArray at: 1\t\t\t",				">>> 4",				"```",				"",				"`#()` creates literal arrays with static (or “literal”) elements that have to be known when the expression is compiled, and not when it is executed. ",				"",				"The following code creates an array of size 2 where the first element is the (literal) number 1 and the second the (literal) string 'here'.",				"",				"``` ",				"#(1 'here') size ",				"> 2",				"```",				"",				"`{ }` is a way to create arrays in a more dynamic manner.",				"",				"``` ",				"| array |",				"array := (Array new: 2). ",				"array",				"\tat: 1 put: (Point x: 10 y: 20);",				"\tat: 2 put: (Point x: 10 y: 20). ",				"\tarray\t\t\t",				"```",				"",				"is equivalent to ",				"",				"```",				"{(10@20) . (10@20)}",				"{Point x: 10 y: 20 . Point x: 10 y: 20}",				"```"			],			"category" : "Collections-Sequenceable-Base"		},		"CompiledCode" : {			"hash" : 807680,			"definition" : "ByteArray variableByteSubclass: #CompiledCode\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'LargeFrame PrimaryBytecodeSetEncoderClass SecondaryBytecodeSetEncoderClass SmallFrame'\r\tpackage: 'Kernel-Methods'",			"comment" : [				"My instances (and subinstances) are objects suitable for execution by the virtual machine. My subclasses and I have a specific layout so the instances intermix both indexable pointer fields and indexable integer fields.",				"",				"\t",				"The current format of a CompiledCode is as follows:",				"",				"\theader (4 bytes)",				"\tliterals (4 bytes each)",				"\tbytecodes  (variable)",				"\ttrailer (variable)",				"",				"The header describes the compiled code. It's a small integer with the following format: ",				"",				"sign bit \t1 bit: \tif set, the method is encoded in the SecondaryBytecodeSet, else in the PrimaryBytecodeSet (See class variables) ",				"(index 0)\t15 bits:\tnumber of literals",				"(index 16)\t1 bit:\trequires counters (in the sista JIT, methods marked this way cannot trip)",				"(index 17)\t1 bit:\twhether a large frame size is needed",				"(index 18)\t6 bits:\tnumber of temporary variables",				"(index 24)\t4 bits:\tnumber of arguments to the method",				"(index 28)\t1 bit:\thas primitive",				"(index 29)\t1 bit:\tflag bit, ignored by the VM",				"",				"The trailer encodes how to fetch the method's sources. See CompiledMethodTrailer."			],			"category" : "Kernel-Methods"		},		"PdmRelation" : {			"hash" : 7619840,			"definition" : "MessageSent subclass: #PdmRelation\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials"		},		"CTDoubleValueLink" : {			"hash" : 7635712,			"definition" : "ValueLink subclass: #CTDoubleValueLink\r\tinstanceVariableNames: 'previousLink'\r\tclassVariableNames: ''\r\tpackage: 'Containers-DoubleValueLink'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tpreviousLink:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-DoubleValueLink"		},		"EssentialsObjectTest" : {			"hash" : 7631104,			"definition" : "ObjectTest subclass: #EssentialsObjectTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Essentials-Tests"		},		"PdmRelationManagesProjectsFor" : {			"hash" : 2359552,			"definition" : "PdmRelation subclass: #PdmRelationManagesProjectsFor\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials"		},		"ValueLink" : {			"hash" : 1174784,			"definition" : "Link subclass: #ValueLink\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"A ValueLink is a Link containing a Value.",				"Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.",				"",				"",				"value - The object this link points to."			],			"category" : "Collections-Support-Links"		},		"DoubleLink" : {			"hash" : 1629440,			"definition" : "Object subclass: #DoubleLink\r\tinstanceVariableNames: 'value nextLink previousLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-DoubleLinkedList-Base'",			"comment" : [				"I am DoubleLink, the elementary part of a DoubleLinkedList.",				"",				"I hold a value, as well as a link to my successor (nextLink) and to my predecessor (previousLink) - both can be nil."			],			"category" : "Collections-DoubleLinkedList-Base"		},		"ExternalAddress" : {			"hash" : 958208,			"definition" : "ByteArray variableByteSubclass: #ExternalAddress\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'FFI-Kernel'",			"comment" : [				"An ExternalAddress is an opaque handle to objects outside Pharo memory (e.g., a pointer)."			],			"category" : "FFI-Kernel"		},		"QuoRemComplementary" : {			"hash" : 7620352,			"definition" : "Magnitude subclass: #QuoRemComplementary\r\tinstanceVariableNames: 'a b ratio quo rem'\r\tclassVariableNames: ''\r\tpackage: 'Containers-Essentials'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\ta:\t\t<Object>",				"\tb:\t\t<Object>",				"\tquo:\t\t<Object>",				"\tratio:\t\t<Object>",				"\trem:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-Essentials"		},		"Fraction" : {			"hash" : 974080,			"definition" : "Number subclass: #Fraction\r\tinstanceVariableNames: 'numerator denominator'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"Fraction provides methods for dealing with fractions like 1/3 as fractions (not as 0.33333...).  All public arithmetic operations answer reduced fractions (see examples).",				"",				"instance variables: 'numerator denominator '",				"",				"Examples: (note the parentheses required to get the right answers in Smalltalk and Pharo):",				"",				"(2/3) + (2/3)",				"(2/3) + (1/2)\t\t \"answers shows the reduced fraction\" ",				"(2/3) raisedToInteger: 5\t\t \"fractions also can have exponents\""			],			"category" : "Kernel-Numbers"		},		"Object" : {			"hash" : 804608,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		},		"Stack" : {			"hash" : 1148160,			"definition" : "LinkedList subclass: #Stack\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Stack-Base'",			"comment" : [				"I implement a simple Stack. #push: adds a new object of any kind on top of the stack. #pop returns the first element and remove it from the stack. #top answer the first element of the stack without removing it."			],			"category" : "Collections-Stack-Base"		},		"Heap" : {			"hash" : 1003776,			"definition" : "Collection subclass: #Heap\r\tinstanceVariableNames: 'array tally sortBlock indexUpdateBlock'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"Heap implements a special data structure commonly referred to as 'heap' [ http://en.wikipedia.org/wiki/Heap_%28data_structure%29 ]",				"",				"Heaps are good at handling priority queues because:",				"\t1) greatest priority element according to the sort block will be stored in first position and thus accessed in O(1) operations",				"\t2) worse time for inserting or removing an element is in O(log n) operations, where n is the size of the Heap",				"\tInsertion/Removal times are more efficient than above upper bound, provided that:",				"\t\ta) Elements are only removed at the beginning",				"\t\tb) Elements are added with arbitrary sort order.",				"\t3) there is no need to fully sort the Heap, which makes it more efficient than a SortedCollection",				"",				"The heap can be fully sorted by sending the message #fullySort.",				"Worse time for fully sorting the Heap is in O(n log n) operations, but this is rarely used a feature.",				"Remind that the Heap does not fully sort the collection if you don't ask.",				"Thus don't expect #do: and other iterators to enumerate elements according to the sortBlock order.",				"",				"Instance variables:",				"       array           <Array>         The data repository",				"       tally           <Integer>       The number of elements in the heap",				"       sortBlock       <Block|nil>     A two-argument block defining the sort order,",				"                                                       or nil in which case the default sort order is",				"                                                               [:element1 :element2| element1 <= element2]",				"       indexUpdateBlock        <Block|nil>",				"                                                       A two-argument block of the form [:data :index | ... ]",				"                                                       which allows an application object to keep track of its",				"                                                       index within the heap.  Useful for quick heap update",				"                                                       when object's sort value changes (for example, when an",				"                                                       object in a priority queue has its priority increased",				"                                                       by an external event, you don't want to have to search",				"                                                       through the whole heap to find the index before fixing",				"                                                      the heap).  No update occurs if nil.",				"",				"The Heap can be viewed as a binary tree (every node in the tree has at most two children).",				"The root is stored in first slot of internal array.",				"The children are stored in next two slots.",				"The children of children in next four slots.",				"etc...",				"",				"For a node A of index i (1 based), the two children B1 and B2 are thus stored in indices (2*i) and (2*i+1).",				"Of course, the children indices must be less than the tally otherwise they are considered inexistent.",				"",				"The Heap does arrange to preserve the following invariant:",				"For any children B of a node A, A is sorted before B, in other words, (self sort: A before: B) = true",				"This implies that the root is always the first element according to sort order."			],			"category" : "Collections-Sequenceable-Base"		}	},	"messages" : {		"testInspectInteger13" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectInteger13",						"",						"\t^ self exportSlotsGraphOf: 13"					],					"body" : [						"^ self exportSlotsGraphOf: 13"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424882,					"argumentNames" : [ ]				}			}		},		"testMagnitudeSubclasses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testMagnitudeSubclasses",						"",						"\t^ self exportShapeOf: Magnitude accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Magnitude accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424934,					"argumentNames" : [ ]				}			}		},		"testInspect20FibonacciNumbers" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspect20FibonacciNumbers",						"",						"\t| fibs a b n |",						"\tn := 20.",						"\ta := 0.",						"\tb := 1.",						"\tfibs := Array streamContents: [ :aStream | ",						"\t\t        aStream",						"\t\t\t        nextPut: a;",						"\t\t\t        nextPut: b.",						"\t\t        3 to: 20 do: [ :each | ",						"\t\t\t        | c |",						"\t\t\t        c := aStream nextPut: a + b.",						"\t\t\t        a := b.",						"\t\t\t        b := c ] ].",						"",						"\t^ self exportSlotsGraphOf: fibs"					],					"body" : [						"| fibs a b n |",						"n := 20.",						"a := 0.",						"b := 1.",						"fibs := Array streamContents: [ :aStream | ",						"\t        aStream",						"\t\t        nextPut: a;",						"\t\t        nextPut: b.",						"\t        3 to: 20 do: [ :each | ",						"\t\t        | c |",						"\t\t        c := aStream nextPut: a + b.",						"\t\t        a := b.",						"\t\t        b := c ] ].",						"",						"^ self exportSlotsGraphOf: fibs"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 9213466,					"argumentNames" : [ ]				}			}		},		"testInspectDatetimeNow" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectDatetimeNow",						"",						"\t^ self exportSlotsGraphOf: DateAndTime now"					],					"body" : [						"^ self exportSlotsGraphOf: DateAndTime now"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425014,					"argumentNames" : [ ]				}			}		},		"instVarsNamesOrderedCollection_testMagnitudeSubclassesSlotsGraph" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testMagnitudeSubclassesSlotsGraph"			],			"implementors" : {				"Class" : {					"sourceCode" : [						"instVarsNamesOrderedCollection_testMagnitudeSubclassesSlotsGraph",						"",						"\t^ { ",						"\t\t  #name asSlotDescriptor.",						"\t\t  \"(#comment asSlotDescriptor inline: true).\"",						"\t\t  (#instVarNames asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   noHeader;",						"\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]).",						"\t\t  (#subclasses asSlotDescriptor yourself: [ :aDescriptor | ",						"\t\t\t   self subclasses ifEmpty: [ aDescriptor inline: true ] ]) }"					],					"body" : [						"^ { ",						"\t  #name asSlotDescriptor.",						"\t  \"(#comment asSlotDescriptor inline: true).\"",						"\t  (#instVarNames asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   noHeader;",						"\t\t   in: [ :aDescriptor | ",						"\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]).",						"\t  (#subclasses asSlotDescriptor yourself: [ :aDescriptor | ",						"\t\t   self subclasses ifEmpty: [ aDescriptor inline: true ] ]) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1595791,					"argumentNames" : [ ]				},				"Object" : {					"sourceCode" : [						"instVarsNamesOrderedCollection_testMagnitudeSubclassesSlotsGraph",						"",						"\t^ self instVarsNamesOrderedCollection"					],					"body" : [						"^ self instVarsNamesOrderedCollection"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1598319,					"argumentNames" : [ ]				}			}		},		"testInspectSet" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectSet",						"",						"\t| random sample n |",						"\tn := 20.",						"\trandom := Random seed: 11.",						"\tsample := (1 to: n) collect: [ :i | random nextInteger: n ].",						"",						"\tself",						"\t\tassert: sample",						"\t\tequals: #( 1 9 7 1 18 9 11 10 10 6 5 15 3 8 12 17 8 2 5 15 ).",						"",						"\t^ self exportSlotsGraphOf: sample asSet"					],					"body" : [						"| random sample n |",						"n := 20.",						"random := Random seed: 11.",						"sample := (1 to: n) collect: [ :i | random nextInteger: n ].",						"",						"self",						"\tassert: sample",						"\tequals: #( 1 9 7 1 18 9 11 10 10 6 5 15 3 8 12 17 8 2 5 15 ).",						"",						"^ self exportSlotsGraphOf: sample asSet"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 9213920,					"argumentNames" : [ ]				}			}		},		"testInspectTrueAndFalse" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectTrueAndFalse",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf: (Array with: true with: false)",						"\t\t  slotsBlock: [ :anArray | ",						"\t\t\t  anArray instVarsNamesOrderedCollection collect: [ :aDescriptor | ",						"\t\t\t\t  aDescriptor inline: false ] ]"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf: (Array with: true with: false)",						"\t  slotsBlock: [ :anArray | ",						"\t\t  anArray instVarsNamesOrderedCollection collect: [ :aDescriptor | ",						"\t\t\t  aDescriptor inline: false ] ]"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425491,					"argumentNames" : [ ]				}			}		},		"asShapeBRGCDots" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"CTIntegerRepresentationsView>>#instVarsNamesOrderedCollection",				"CTIntegerRepresentationsView>>#asShapeBRGCDots",				"EssentialsObjectTest>>#testInspectBRGCodes"			],			"implementors" : {				"CTIntegerRepresentationsView" : {					"sourceCode" : [						"asShapeBRGCDots",						"",						"\t^ integer asShapeBRGCDots"					],					"body" : [						"^ integer asShapeBRGCDots"					],					"isTestMethod" : false,					"category" : "converting",					"comment" : [ ],					"hash" : 8408355,					"argumentNames" : [ ]				},				"Integer" : {					"sourceCode" : [						"asShapeBRGCDots",						"",						"\t^ self asShapeBinaryDots: (self bitBRGC printStringBase: 2) asArray"					],					"body" : [						"^ self asShapeBinaryDots: (self bitBRGC printStringBase: 2) asArray"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1807310,					"argumentNames" : [ ]				}			}		},		"testInspectFloatPi" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFloatPi",						"",						"\t^ self exportSlotsGraphOf: Float π"					],					"body" : [						"^ self exportSlotsGraphOf: Float π"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425014,					"argumentNames" : [ ]				}			}		},		"testInspectFractionForKisses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionKissing"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionForKisses",						"",						"\t^ self exportSlotsGraphOf: 4 / 17"					],					"body" : [						"^ self exportSlotsGraphOf: 4 / 17"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425040,					"argumentNames" : [ ]				}			}		},		"kissingFractionLink:" : {			"implementors" : {				"Fraction" : {					"sourceCode" : [						"kissingFractionLink: aLink",						"",						"\t^ self ~~> aLink"					],					"body" : [						"^ self ~~> aLink"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18807232,					"argumentNames" : [						"aLink"					]				},				"Integer" : {					"sourceCode" : [						"kissingFractionLink: aLink",						"",						"\t^ aLink"					],					"body" : [						"^ aLink"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18845905,					"argumentNames" : [						"aLink"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Fraction>>#kissingFractions"			]		},		"testCollectionSubclasses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testCollectionSubclasses",						"",						"\t^ self exportShapeOf: Collection accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: Collection accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424934,					"argumentNames" : [ ]				}			}		},		"asShapeBinaryDots:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"Integer>>#asShapeBinaryDots",				"Integer>>#asShapeSkewDots",				"Integer>>#asShapeBRGCDots"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"asShapeBinaryDots: repr",						"",						"\t| dots |",						"\tdots := repr collect: [ :each | ",						"\t\t        | int |",						"\t\t        int := Integer readFrom: each asString.",						"\t\t        RSCircle new",						"\t\t\t        model: int;",						"\t\t\t        color: Color white;",						"\t\t\t        withBorder;",						"\t\t\t        yourself: [ :c | ",						"\t\t\t\t        c color: (int",						"\t\t\t\t\t\t\t         ifZero: [ Color white ]",						"\t\t\t\t\t\t\t         ifOne: [ c border color ]",						"\t\t\t\t\t\t\t         ifTwo: [ ",						"\t\t\t\t\t\t\t\t         c border",						"\t\t\t\t\t\t\t\t\t         color: Color black;",						"\t\t\t\t\t\t\t\t\t         color ]",						"\t\t\t\t\t\t\t         otherwise: [ Error signal ]) ] ].",						"",						"\tRSHorizontalLineLayout new",						"\t\tgapSize: Float goldenRatio;",						"\t\ton: dots.",						"",						"\t^ RSComposite new",						"\t\t  model: repr;",						"\t\t  shapes: dots;",						"\t\t  yourself"					],					"body" : [						"| dots |",						"dots := repr collect: [ :each | ",						"\t        | int |",						"\t        int := Integer readFrom: each asString.",						"\t        RSCircle new",						"\t\t        model: int;",						"\t\t        color: Color white;",						"\t\t        withBorder;",						"\t\t        yourself: [ :c | ",						"\t\t\t        c color: (int",						"\t\t\t\t\t\t         ifZero: [ Color white ]",						"\t\t\t\t\t\t         ifOne: [ c border color ]",						"\t\t\t\t\t\t         ifTwo: [ ",						"\t\t\t\t\t\t\t         c border",						"\t\t\t\t\t\t\t\t         color: Color black;",						"\t\t\t\t\t\t\t\t         color ]",						"\t\t\t\t\t\t         otherwise: [ Error signal ]) ] ].",						"",						"RSHorizontalLineLayout new",						"\tgapSize: Float goldenRatio;",						"\ton: dots.",						"",						"^ RSComposite new",						"\t  model: repr;",						"\t  shapes: dots;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 19111354,					"argumentNames" : [						"repr"					]				}			}		},		"testRBNodeSubclasses" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testRBNodeSubclasses",						"",						"\t^ self exportShapeOf: RBNode accessorBlock: #asShapeSubclasses"					],					"body" : [						"^ self exportShapeOf: RBNode accessorBlock: #asShapeSubclasses"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424934,					"argumentNames" : [ ]				}			}		},		"testInspectObject" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectObject",						"",						"\t^ self exportSlotsGraphOf: Object new"					],					"body" : [						"^ self exportSlotsGraphOf: Object new"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424991,					"argumentNames" : [ ]				}			}		},		"kissingFractions" : {			"implementors" : {				"Fraction" : {					"sourceCode" : [						"kissingFractions",						"",						"\t| kissedFractions vl |",						"\tkissedFractions := Set new.",						"",						"\tvl := ValueLink new",						"\t\t      value: self asFractionWrtFloor;",						"\t\t      yourself.",						"",						"\t[ vl ] whileNotNil: [ ",						"\t\t| gcd diophantinePoint next less aFraction |",						"\t\taFraction := vl value.",						"\t\tkissedFractions add: aFraction.",						"",						"\t\tgcd := aFraction numerator >|< aFraction denominator.",						"",						"\t\tdiophantinePoint := gcd point.",						"\t\tnext := diophantinePoint x / diophantinePoint y negated.",						"",						"\t\tless := aFraction numerator - next numerator",						"\t\t        / (aFraction denominator - next denominator).",						"",						"\t\tvl := next kissingFractionLink:",						"\t\t\t      (less kissingFractionLink: vl nextLink) ].",						"",						"\t^ kissedFractions asArray",						"\t\t  sort;",						"\t\t  yourself"					],					"body" : [						"| kissedFractions vl |",						"kissedFractions := Set new.",						"",						"vl := ValueLink new",						"\t      value: self asFractionWrtFloor;",						"\t      yourself.",						"",						"[ vl ] whileNotNil: [ ",						"\t| gcd diophantinePoint next less aFraction |",						"\taFraction := vl value.",						"\tkissedFractions add: aFraction.",						"",						"\tgcd := aFraction numerator >|< aFraction denominator.",						"",						"\tdiophantinePoint := gcd point.",						"\tnext := diophantinePoint x / diophantinePoint y negated.",						"",						"\tless := aFraction numerator - next numerator",						"\t        / (aFraction denominator - next denominator).",						"",						"\tvl := next kissingFractionLink:",						"\t\t      (less kissingFractionLink: vl nextLink) ].",						"",						"^ kissedFractions asArray",						"\t  sort;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 2295820,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionReciprocalKissing",				"EssentialsObjectTest>>#testInspectFractionKissing",				"Fraction>>#asShapeFordCircles"			]		},		"testInspectNil" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectNil",						"",						"\t^ self exportSlotsGraphOf: nil"					],					"body" : [						"^ self exportSlotsGraphOf: nil"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424911,					"argumentNames" : [ ]				}			}		},		"testInspectColorGreen" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectColorGreen",						"",						"\t^ self exportSlotsGraphOf: Color green translucent"					],					"body" : [						"^ self exportSlotsGraphOf: Color green translucent"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425163,					"argumentNames" : [ ]				}			}		},		"instVarsNamesOrderedCollection" : {			"senders" : [				"Array>>#instVarsNamesOrderedCollection",				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"BlockClosure>>#instVarsNamesOrderedCollection",				"CTLinkedStorageLinkTest>>#exportSlotsGraphOf:",				"CTLinkedStorageValueLinkTest>>#exportSlotsGraphOf:",				"CTLinksLinkTest>>#exportSlotsGraphOf:",				"CTLinksValueLinkTest>>#exportSlotsGraphOf:",				"Color>>#instVarsNamesOrderedCollection",				"DateAndTime>>#instVarsNamesOrderedCollection",				"EssentialsObjectTest>>#testInspectBRGCodes",				"EssentialsObjectTest>>#testInspectTrueAndFalse",				"EssentialsObjectTest>>#exportSlotsGraphOf:",				"ExternalAddress>>#instVarsNamesOrderedCollection",				"FileReference>>#instVarsNamesOrderedCollection",				"Fraction>>#instVarsNamesOrderedCollection",				"Heap>>#instVarsNamesOrderedCollection",				"Object>>#asShapeSlotsDfsTree",				"Object>>#asShapeSlotsCollapsedSCCsDfsTree",				"Object>>#asShapeSlotsSCCsDfsTree",				"Object>>#instVarsNamesOrderedCollection_testMagnitudeSubclassesSlotsGraph",				"Object>>#asShapeSlotsDfsTreeInitialDescriptor:",				"Object>>#asShapeSlotsLayeredDfsTree",				"Object>>#asShapeSlotsTopologicallySortedDfsTree",				"PdmRelationManagesProjectsFor>>#instVarsNamesOrderedCollection",				"PdmRelationOrderedCollection>>#instVarsNamesOrderedCollection",				"PdmRolesTest>>#testPdmRelationsInlineProjects",				"PdmRolesTest>>#exportSlotsGraphOf:",				"Point>>#instVarsNamesOrderedCollection",				"RSBoundingShape>>#instVarsNamesOrderedCollection",				"SkewBinaryCanonicalNumberTest>>#exportSlotsGraphOf:",				"SymbolicIntegerTest>>#exportSlotsGraphOf:",				"TIceImagesExporting>>#exportSlotsGraphOf:",				"ValueLink>>#instVarsNamesOrderedCollection"			],			"implementors" : {				"DoubleLink" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { #previousLink. #value. #nextLink }"					],					"body" : [						"^ { #previousLink. #value. #nextLink }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 2423445,					"argumentNames" : [ ]				},				"CTKeysAndValuesView" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ Array streamContents: [ :aStream | ",						"\t\t  dict keysAndValuesDo: [ :k :v | ",						"\t\t\t  aStream nextPut: (k asString asSlotDescriptor",						"\t\t\t\t\t   blockClosure: [ v ];",						"\t\t\t\t\t   yourself) ] ]"					],					"body" : [						"^ Array streamContents: [ :aStream | ",						"\t  dict keysAndValuesDo: [ :k :v | ",						"\t\t  aStream nextPut: (k asString asSlotDescriptor",						"\t\t\t\t   blockClosure: [ v ];",						"\t\t\t\t   yourself) ] ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 8409188,					"argumentNames" : [ ]				},				"Color" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection",						"\t  , { (#asShapeColoredBox asSlotDescriptor",						"\t\t\t   inline: false;",						"\t\t\t   quote) }"					],					"body" : [						"^ super instVarsNamesOrderedCollection",						"  , { (#asShapeColoredBox asSlotDescriptor",						"\t\t   inline: false;",						"\t\t   quote) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1702762,					"argumentNames" : [ ]				},				"Link" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { #nextLink }"					],					"body" : [						"^ { #nextLink }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1819180,					"argumentNames" : [ ]				},				"RSBoundingShape" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection",						"\t  , { #asShapeQuoted asSlotDescriptor quote }"					],					"body" : [						"^ super instVarsNamesOrderedCollection",						"  , { #asShapeQuoted asSlotDescriptor quote }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 7104327,					"argumentNames" : [ ]				},				"Duration" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #asDays.",						"\t\t  #asHours.",						"\t\t  #asMinutes.",						"\t\t  #asSeconds.",						"\t\t  #asMilliSeconds.",						"\t\t  #asMicroseconds.",						"\t\t  #asNanoSeconds.",						"\t\t  ('d:hh:mm:ss[.µ]' -> [ :aDuration | aDuration asString asSymbol ]) }"					],					"body" : [						"^ { ",						"\t  #asDays.",						"\t  #asHours.",						"\t  #asMinutes.",						"\t  #asSeconds.",						"\t  #asMilliSeconds.",						"\t  #asMicroseconds.",						"\t  #asNanoSeconds.",						"\t  ('d:hh:mm:ss[.µ]' -> [ :aDuration | aDuration asString asSymbol ]) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1624685,					"argumentNames" : [ ]				},				"Stack" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { #firstLink }"					],					"body" : [						"^ { #firstLink }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1942060,					"argumentNames" : [ ]				},				"PdmRelationManagesProjectsFor" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection yourself: [ :descriptors | ",						"\t\t  descriptors at: descriptors size put: (descriptors last",						"\t\t\t\t   selector: #projects;",						"\t\t\t\t   blockClosure: [ :anObj | anObj return ];",						"\t\t\t\t   inline: true;",						"\t\t\t\t   noHeader;",						"\t\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]) ]"					],					"body" : [						"^ super instVarsNamesOrderedCollection yourself: [ :descriptors | ",						"\t  descriptors at: descriptors size put: (descriptors last",						"\t\t\t   selector: #projects;",						"\t\t\t   blockClosure: [ :anObj | anObj return ];",						"\t\t\t   inline: true;",						"\t\t\t   noHeader;",						"\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]) ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3153805,					"argumentNames" : [ ]				},				"FileReference" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection , #( fullName contents",						"\t     size )"					],					"body" : [						"^ super instVarsNamesOrderedCollection , #( fullName contents size )"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 2077106,					"argumentNames" : [ ]				},				"BlockClosure" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t| copied |",						"\tcopied := self sourceNode allVariables flatCollect: [ :aRBVariable | ",						"\t\t          | var |",						"\t\t          var := outerContext lookupVar: aRBVariable name.",						"\t\t          var",						"\t\t\t          ifNil: [ #(  ) ]",						"\t\t\t          ifNotNil: [ ",						"\t\t\t          { (var name asSlotDescriptor blockClosure: [ var value ]) } ] ].",						"",						"\t^ super instVarsNamesOrderedCollection , copied"					],					"body" : [						"| copied |",						"copied := self sourceNode allVariables flatCollect: [ :aRBVariable | ",						"\t          | var |",						"\t          var := outerContext lookupVar: aRBVariable name.",						"\t          var",						"\t\t          ifNil: [ #(  ) ]",						"\t\t          ifNotNil: [ ",						"\t\t          { (var name asSlotDescriptor blockClosure: [ var value ]) } ] ].",						"",						"^ super instVarsNamesOrderedCollection , copied"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1066714,					"argumentNames" : [ ]				},				"PdmRelation" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  (#subject asSlotDescriptor inline: true).",						"\t\t  (#relation asSlotDescriptor inline: true) } , (self arguments",						"\t\t   ifEmpty: [ {  } ]",						"\t\t   ifNotEmpty: [ { (#argument asSlotDescriptor inline: true) } ])",						"\t  , (self object",						"\t\t\t   ifNil: [ {  } ]",						"\t\t\t   ifNotNil: [ { #object asSlotDescriptor } ])"					],					"body" : [						"^ { ",						"\t  (#subject asSlotDescriptor inline: true).",						"\t  (#relation asSlotDescriptor inline: true) } , (self arguments",						"\t   ifEmpty: [ {  } ]",						"\t   ifNotEmpty: [ { (#argument asSlotDescriptor inline: true) } ])",						"  , (self object",						"\t\t   ifNil: [ {  } ]",						"\t\t   ifNotNil: [ { #object asSlotDescriptor } ])"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 8417540,					"argumentNames" : [ ]				},				"CTIntegerRepresentationsView" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  (#decimal asSlotDescriptor inline: true).",						"\t\t  (#hex asSlotDescriptor inline: true).",						"\t\t  (#octal asSlotDescriptor inline: true).",						"\t\t  (#binary asSlotDescriptor inline: true).",						"\t\t  (#brgc asSlotDescriptor inline: true).",						"\t\t  (#skew asSlotDescriptor inline: true).",						"\t\t  (#asShapeBinaryDots asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote).",						"\t\t  (#asShapeBRGCDots asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote).",						"\t\t  (#asShapeSkewDots asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote) }"					],					"body" : [						"^ { ",						"\t  (#decimal asSlotDescriptor inline: true).",						"\t  (#hex asSlotDescriptor inline: true).",						"\t  (#octal asSlotDescriptor inline: true).",						"\t  (#binary asSlotDescriptor inline: true).",						"\t  (#brgc asSlotDescriptor inline: true).",						"\t  (#skew asSlotDescriptor inline: true).",						"\t  (#asShapeBinaryDots asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   quote).",						"\t  (#asShapeBRGCDots asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   quote).",						"\t  (#asShapeSkewDots asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   quote) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 8410420,					"argumentNames" : [ ]				},				"CTDoubleValueLink" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t\"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference.\"",						"",						"\t^ { #previousLink. #value. #nextLink }"					],					"body" : [						"^ { #previousLink. #value. #nextLink }"					],					"isTestMethod" : false,					"category" : "*Containers-DoubleValueLink-Visualizations",					"comment" : [						"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference."					],					"hash" : 8429717,					"argumentNames" : [ ]				},				"Fraction" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection , { ",						"\t\t  #floor asSlotDescriptor.",						"\t\t  (#asPythagoreanTriple asSlotDescriptor",						"\t\t\t   noHeader;",						"\t\t\t   inline: true;",						"\t\t\t   in: [ :aDescriptor | ",						"\t\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]).",						"\t\t  (#asShapeOnUnitCircle asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote) }"					],					"body" : [						"^ super instVarsNamesOrderedCollection , { ",						"\t  #floor asSlotDescriptor.",						"\t  (#asPythagoreanTriple asSlotDescriptor",						"\t\t   noHeader;",						"\t\t   inline: true;",						"\t\t   in: [ :aDescriptor | ",						"\t\t\t   aDescriptor quote: [ :anArray | ",						"\t\t\t\t\t   anArray asShapeSlotsDfsTreeInitialDescriptor: aDescriptor ] ]).",						"\t  (#asShapeOnUnitCircle asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   quote) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1771132,					"argumentNames" : [ ]				},				"Heap" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection",						"\t  , { (#asShapeValueTree asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote) }"					],					"body" : [						"^ super instVarsNamesOrderedCollection",						"  , { (#asShapeValueTree asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   quote) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1799017,					"argumentNames" : [ ]				},				"ExternalAddress" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection",						"\t  , { (#addressString asSlotDescriptor inline: true) }"					],					"body" : [						"^ super instVarsNamesOrderedCollection",						"  , { (#addressString asSlotDescriptor inline: true) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1752997,					"argumentNames" : [ ]				},				"ValueLink" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t\"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference.\"",						"",						"\t^ { #value } , super instVarsNamesOrderedCollection"					],					"body" : [						"^ { #value } , super instVarsNamesOrderedCollection"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [						"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference."					],					"hash" : 1969187,					"argumentNames" : [ ]				},				"CTLinkedStoragePoolQueue" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t\"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference.\"",						"",						"\t^ { #avail. #bottom. #top }"					],					"body" : [						"^ { #avail. #bottom. #top }"					],					"isTestMethod" : false,					"category" : "*Containers-LinkedStoragePool-Visualizations",					"comment" : [						"We choose the following order in which the `value` slot is ",						"\tthe rightmost because that allows us to compose better shapes ",						"\tpointed by its reference."					],					"hash" : 8432789,					"argumentNames" : [ ]				},				"DateAndTime" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection , { ",						"\t\t  ('asTimeZoneSymbol'",						"\t\t   -> [ :anObj | anObj timeZone abbreviation asSymbol ]).",						"\t\t  ('asISO8601String' -> [ :anObj | anObj asString ]).",						"\t\t  #asLocalStringYMDHM.",						"\t\t  #dayOfWeekName.",						"\t\t  #monthName.",						"\t\t  #month.",						"\t\t  #dayOfMonth.",						"\t\t  \"\t\t  ('Day of year' -> [ :anObj | anObj dayOfYear ]).\"",						"\t\t  #year.",						"\t\t  ('asTimeString' -> [ :anObj | anObj asTime asString ]) }"					],					"body" : [						"^ super instVarsNamesOrderedCollection , { ",						"\t  ('asTimeZoneSymbol'",						"\t   -> [ :anObj | anObj timeZone abbreviation asSymbol ]).",						"\t  ('asISO8601String' -> [ :anObj | anObj asString ]).",						"\t  #asLocalStringYMDHM.",						"\t  #dayOfWeekName.",						"\t  #monthName.",						"\t  #month.",						"\t  #dayOfMonth.",						"\t  \"\t\t  ('Day of year' -> [ :anObj | anObj dayOfYear ]).\"",						"\t  #year.",						"\t  ('asTimeString' -> [ :anObj | anObj asTime asString ]) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1602315,					"argumentNames" : [ ]				},				"Object" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ self class allInstVarNames collect: [ :varName | ",						"\t\t  varName asSlotDescriptor instVarNameHasBeenGiven ]"					],					"body" : [						"^ self class allInstVarNames collect: [ :varName | ",						"\t  varName asSlotDescriptor instVarNameHasBeenGiven ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1598902,					"argumentNames" : [ ]				},				"Behavior" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  (#name asSlotDescriptor inline: true).",						"\t\t  #class asSlotDescriptor.",						"\t\t  #superclass asSlotDescriptor.",						"\t\t  #typeOfClass asSlotDescriptor.",						"\t\t  #instanceCount asSlotDescriptor",						"\t\t  \"#spaceUsed asSlotDescriptor.",						"\t\t  #kindAsSymbol asSlotDescriptor\" }"					],					"body" : [						"^ { ",						"\t  (#name asSlotDescriptor inline: true).",						"\t  #class asSlotDescriptor.",						"\t  #superclass asSlotDescriptor.",						"\t  #typeOfClass asSlotDescriptor.",						"\t  #instanceCount asSlotDescriptor",						"\t  \"#spaceUsed asSlotDescriptor.",						"\t\t  #kindAsSymbol asSlotDescriptor\" }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1661847,					"argumentNames" : [ ]				},				"GreatestCommonDivisor" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #a asSlotDescriptor.",						"\t\t  #b asSlotDescriptor.",						"\t\t  #value asSlotDescriptor.",						"\t\t  (#asString asSlotDescriptor inline: true).",						"\t\t  #equations asSlotDescriptor.",						"\t\t  #point asSlotDescriptor.",						"\t\t  (#asStringDiophantineEquation asSlotDescriptor inline: true) }",						"\t  , (self value = 1",						"\t\t\t   ifTrue: [ ",						"\t\t\t\t   { ",						"\t\t\t\t\t   (#inverseMultiplicativeOfa asSlotDescriptor",						"\t\t\t\t\t\t    inline: true;",						"\t\t\t\t\t\t    quote: #asShapeSlotsDfsTree).",						"\t\t\t\t\t   (#inverseMultiplicativeOfb asSlotDescriptor",						"\t\t\t\t\t\t    inline: true;",						"\t\t\t\t\t\t    quote: #asShapeSlotsDfsTree) } ]",						"\t\t\t   ifFalse: [ ",						"\t\t\t\t   { ",						"\t\t\t\t\t   (#asShapeDividendOverGCD asSlotDescriptor",						"\t\t\t\t\t\t    inline: true;",						"\t\t\t\t\t\t    quote: #asShapeSlotsDfsTree).",						"\t\t\t\t\t   (#asShapeDivisorOverGCD asSlotDescriptor",						"\t\t\t\t\t\t    inline: true;",						"\t\t\t\t\t\t    quote: #asShapeSlotsDfsTree) } ])",						"\t\".",						"",						"\t\t  #divisibility asSlotDescriptor\"",						"\t\"(#asShapeDiophantineEquation asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote).\""					],					"body" : [						"^ { ",						"\t  #a asSlotDescriptor.",						"\t  #b asSlotDescriptor.",						"\t  #value asSlotDescriptor.",						"\t  (#asString asSlotDescriptor inline: true).",						"\t  #equations asSlotDescriptor.",						"\t  #point asSlotDescriptor.",						"\t  (#asStringDiophantineEquation asSlotDescriptor inline: true) }",						"  , (self value = 1",						"\t\t   ifTrue: [ ",						"\t\t\t   { ",						"\t\t\t\t   (#inverseMultiplicativeOfa asSlotDescriptor",						"\t\t\t\t\t    inline: true;",						"\t\t\t\t\t    quote: #asShapeSlotsDfsTree).",						"\t\t\t\t   (#inverseMultiplicativeOfb asSlotDescriptor",						"\t\t\t\t\t    inline: true;",						"\t\t\t\t\t    quote: #asShapeSlotsDfsTree) } ]",						"\t\t   ifFalse: [ ",						"\t\t\t   { ",						"\t\t\t\t   (#asShapeDividendOverGCD asSlotDescriptor",						"\t\t\t\t\t    inline: true;",						"\t\t\t\t\t    quote: #asShapeSlotsDfsTree).",						"\t\t\t\t   (#asShapeDivisorOverGCD asSlotDescriptor",						"\t\t\t\t\t    inline: true;",						"\t\t\t\t\t    quote: #asShapeSlotsDfsTree) } ])",						"\".",						"",						"\t\t  #divisibility asSlotDescriptor\"",						"\"(#asShapeDiophantineEquation asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote).\""					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 8417294,					"argumentNames" : [ ]				},				"Context" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #home asSlotDescriptor.",						"\t\t  #sender asSlotDescriptor.",						"\t\t  #receiver asSlotDescriptor.",						"\t\t  #selector asSlotDescriptor.",						"\t\t  \"(#arguments asSlotDescriptor inline: true).\"",						"\t\t  #pc asSlotDescriptor.",						"\t\t  #stackPtr asSlotDescriptor",						"\t\t  \"#receiver asSlotDescriptor instVarNameHasBeenGiven \" }"					],					"body" : [						"^ { ",						"\t  #home asSlotDescriptor.",						"\t  #sender asSlotDescriptor.",						"\t  #receiver asSlotDescriptor.",						"\t  #selector asSlotDescriptor.",						"\t  \"(#arguments asSlotDescriptor inline: true).\"",						"\t  #pc asSlotDescriptor.",						"\t  #stackPtr asSlotDescriptor",						"\t  \"#receiver asSlotDescriptor instVarNameHasBeenGiven \" }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 804188,					"argumentNames" : [ ]				},				"QuoRemComplementary" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #a asSlotDescriptor.",						"\t\t  #b asSlotDescriptor.",						"\t\t  #quo asSlotDescriptor.",						"\t\t  #rem asSlotDescriptor.",						"\t\t  \"(#value asSlotDescriptor",						"\t\t\t   blockClosure: [ self value asShapeSlotsDfsTree ];",						"\t\t\t   inline: true;",						"\t\t\t   quote).\"",						"\t\t  (#asString asSlotDescriptor inline: true).",						"\t\t  (#asShapeDots asSlotDescriptor",						"\t\t\t   inline: true;",						"\t\t\t   quote) }"					],					"body" : [						"^ { ",						"\t  #a asSlotDescriptor.",						"\t  #b asSlotDescriptor.",						"\t  #quo asSlotDescriptor.",						"\t  #rem asSlotDescriptor.",						"\t  \"(#value asSlotDescriptor",						"\t\t\t   blockClosure: [ self value asShapeSlotsDfsTree ];",						"\t\t\t   inline: true;",						"\t\t\t   quote).\"",						"\t  (#asString asSlotDescriptor inline: true).",						"\t  (#asShapeDots asSlotDescriptor",						"\t\t   inline: true;",						"\t\t   quote) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 8416255,					"argumentNames" : [ ]				},				"PointArray" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { (#asShapeDots asSlotDescriptor",						"\t\t   inline: false;",						"\t\t   quote) }"					],					"body" : [						"^ { (#asShapeDots asSlotDescriptor",						"\t   inline: false;",						"\t   quote) }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 2442100,					"argumentNames" : [ ]				},				"ByteArray" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #hex asSlotDescriptor.",						"\t\t  #asArray asSlotDescriptor }"					],					"body" : [						"^ { ",						"\t  #hex asSlotDescriptor.",						"\t  #asArray asSlotDescriptor }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 807030,					"argumentNames" : [ ]				},				"CompiledCode" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ { ",						"\t\t  #methodClassName asSlotDescriptor.",						"\t\t  #selector asSlotDescriptor.",						"\t\t  #formattedCode asSlotDescriptor }"					],					"body" : [						"^ { ",						"\t  #methodClassName asSlotDescriptor.",						"\t  #selector asSlotDescriptor.",						"\t  #formattedCode asSlotDescriptor }"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1602094,					"argumentNames" : [ ]				},				"Point" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ super instVarsNamesOrderedCollection",						"\t  , { (#asShapeWrtOrigin asSlotDescriptor",						"\t\t\t   inline: false;",						"\t\t\t   quote) }",						"\t\" #distanceToOrigin asSlotDescriptor.\""					],					"body" : [						"^ super instVarsNamesOrderedCollection",						"  , { (#asShapeWrtOrigin asSlotDescriptor",						"\t\t   inline: false;",						"\t\t   quote) }",						"\" #distanceToOrigin asSlotDescriptor.\""					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 809066,					"argumentNames" : [ ]				},				"PdmRelationOrderedCollection" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t^ self asArray instVarsNamesOrderedCollection collect: [ :each | ",						"\t\t  each inline: true ]"					],					"body" : [						"^ self asArray instVarsNamesOrderedCollection collect: [ :each | ",						"\t  each inline: true ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 8408502,					"argumentNames" : [ ]				},				"Array" : {					"sourceCode" : [						"instVarsNamesOrderedCollection",						"",						"\t| positions |",						"\tpositions := self withIndexCollect: [ :each :index | ",						"\t\t             index asString asSlotDescriptor blockClosure: [ each ] ].",						"",						"\t^ super instVarsNamesOrderedCollection , positions"					],					"body" : [						"| positions |",						"positions := self withIndexCollect: [ :each :index | ",						"\t             index asString asSlotDescriptor blockClosure: [ each ] ].",						"",						"^ super instVarsNamesOrderedCollection , positions"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials-Visualizations",					"comment" : [ ],					"hash" : 1069983,					"argumentNames" : [ ]				}			}		},		"testInspectPoint" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectPoint",						"",						"\t^ self exportSlotsGraphOf: 42 @ 24"					],					"body" : [						"^ self exportSlotsGraphOf: 42 @ 24"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425042,					"argumentNames" : [ ]				}			}		},		"testInspectAssociation" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectAssociation",						"",						"\t^ self exportSlotsGraphOf: 42 -> thisContext method"					],					"body" : [						"^ self exportSlotsGraphOf: 42 -> thisContext method"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425278,					"argumentNames" : [ ]				}			}		},		"testInspectHeap" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectHeap",						"",						"\t| array random |",						"\trandom := Random seed: 11.",						"\tarray := (1 to: 30) asArray shuffleBy: random.",						"\tself",						"\t\tassert: array",						"\t\tequals:",						"\t\t\t#( 12 16 22 30 8 17 15 4 20 19 28 18 27 21 24 10 7 3 14 5 6 26 25",						"\t\t\t   29 11 23 2 9 13 1 ).",						"",						"\t^ self exportSlotsGraphOf: (Heap withAll: array)"					],					"body" : [						"| array random |",						"random := Random seed: 11.",						"array := (1 to: 30) asArray shuffleBy: random.",						"self",						"\tassert: array",						"\tequals:",						"\t\t#( 12 16 22 30 8 17 15 4 20 19 28 18 27 21 24 10 7 3 14 5 6 26 25 29",						"\t\t   11 23 2 9 13 1 ).",						"",						"^ self exportSlotsGraphOf: (Heap withAll: array)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8951366,					"argumentNames" : [ ]				}			}		},		"testInspectGoldenRatio" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectGoldenRatio",						"",						"\t^ self exportSlotsGraphOf: Float goldenRatio"					],					"body" : [						"^ self exportSlotsGraphOf: Float goldenRatio"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425014,					"argumentNames" : [ ]				}			}		},		"testInspectRSPolygon" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectRSPolygon",						"",						"\t^ self exportSlotsGraphOf: (RSPolygon new",						"\t\t\t   points: { ",						"\t\t\t\t\t   (0 @ 0).",						"\t\t\t\t\t   (100 @ 25).",						"\t\t\t\t\t   (200 @ 0) };",						"\t\t\t   cornerRadii: Float goldenRatio double;",						"\t\t\t   yourself)"					],					"body" : [						"^ self exportSlotsGraphOf: (RSPolygon new",						"\t\t   points: { ",						"\t\t\t\t   (0 @ 0).",						"\t\t\t\t   (100 @ 25).",						"\t\t\t\t   (200 @ 0) };",						"\t\t   cornerRadii: Float goldenRatio double;",						"\t\t   yourself)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8427524,					"argumentNames" : [ ]				}			}		},		"bitBRGC" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"CTIntegerRepresentationsView>>#brgc",				"Integer>>#asShapeBRGCDots",				"SequenceableCollection>>#injectBRGC:intoIn:intoOut:"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"bitBRGC",						"",						"\t^ self bitXor: self >> 1"					],					"body" : [						"^ self bitXor: self >> 1"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1807041,					"argumentNames" : [ ]				}			}		},		"testInspectRBNodesQuine" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectRBNodesQuine",						"",						"\t\"A *quine* in Scheme:",						"\t",						"\t((lambda (x) (list x (list (quote quote) x)))",						"    (quote (lambda (x) (list x (list (quote quote) x)))))\"",						"",						"\t| quine aQuineBlock evalBlock |",						"\taQuineBlock := [ :x | ",						"\t               RBMessageNode",						"\t\t               receiver: x",						"\t\t               selector: #value:",						"\t\t               arguments:",						"\t\t               { (RBMessageNode receiver: x selector: #sourceNode) } ].",						"",						"\tquine := aQuineBlock value: aQuineBlock sourceNode.",						"",						"\tevalBlock := OpalCompiler new",						"\t\t             source:",						"\t\t\t             (RBBlockNode body:",						"\t\t\t\t\t              (RBSequenceNode statements: { quine }))",						"\t\t\t\t             formattedCode;",						"\t\t             evaluate.",						"",						"\tself assert: evalBlock value equals: quine"					],					"body" : [						"| quine aQuineBlock evalBlock |",						"aQuineBlock := [ :x | ",						"               RBMessageNode",						"\t               receiver: x",						"\t               selector: #value:",						"\t               arguments:",						"\t               { (RBMessageNode receiver: x selector: #sourceNode) } ].",						"",						"quine := aQuineBlock value: aQuineBlock sourceNode.",						"",						"evalBlock := OpalCompiler new",						"\t             source:",						"\t\t             (RBBlockNode body:",						"\t\t\t\t              (RBSequenceNode statements: { quine }))",						"\t\t\t             formattedCode;",						"\t             evaluate.",						"",						"self assert: evalBlock value equals: quine"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"A *quine* in Scheme:",						"\t",						"\t((lambda (x) (list x (list (quote quote) x)))",						"    (quote (lambda (x) (list x (list (quote quote) x)))))"					],					"hash" : 9214834,					"argumentNames" : [ ]				}			}		},		"testInspectFractionReciprocalKissing" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionReciprocalKissing",						"",						"\t| aFraction |",						"\taFraction := self testInspectFractionKissing reciprocal.",						"",						"\tself assert: aFraction kissingFractions equals: { ",						"\t\t\t(1 / 4).",						"\t\t\t(1 / 3).",						"\t\t\t(1 / 2) }.",						"",						"\t^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"body" : [						"| aFraction |",						"aFraction := self testInspectFractionKissing reciprocal.",						"",						"self assert: aFraction kissingFractions equals: { ",						"\t\t(1 / 4).",						"\t\t(1 / 3).",						"\t\t(1 / 2) }.",						"",						"^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8689481,					"argumentNames" : [ ]				}			}		},		"testInspectFractionKissing" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc",				"EssentialsObjectTest>>#testInspectFractionReciprocalKissing"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFractionKissing",						"",						"\t| aFraction |",						"\taFraction := self testInspectFractionForKisses.",						"",						"\tself assert: aFraction kissingFractions equals: { ",						"\t\t\t(1 / 5).",						"\t\t\t(2 / 9).",						"\t\t\t(3 / 13).",						"\t\t\t(4 / 17).",						"\t\t\t(1 / 4).",						"\t\t\t(1 / 3).",						"\t\t\t(1 / 2) }.",						"",						"\t^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"body" : [						"| aFraction |",						"aFraction := self testInspectFractionForKisses.",						"",						"self assert: aFraction kissingFractions equals: { ",						"\t\t(1 / 5).",						"\t\t(2 / 9).",						"\t\t(3 / 13).",						"\t\t(4 / 17).",						"\t\t(1 / 4).",						"\t\t(1 / 3).",						"\t\t(1 / 2) }.",						"",						"^ self exportShapeOf: aFraction accessorBlock: #asShapeFordCircles"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8690189,					"argumentNames" : [ ]				}			}		},		"testInspectFraction" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectFraction",						"",						"\t^ self exportSlotsGraphOf: -1 / 2"					],					"body" : [						"^ self exportSlotsGraphOf: -1 / 2"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425040,					"argumentNames" : [ ]				}			}		},		"testInspectString" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectString",						"",						"\t^ self exportSlotsGraphOf: (String loremIpsum: 100)"					],					"body" : [						"^ self exportSlotsGraphOf: (String loremIpsum: 100)"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425083,					"argumentNames" : [ ]				}			}		},		"testInspectBRGCodes" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectBRGCodes",						"",						"\t^ self",						"\t\t  exportSlotsGraphOf:",						"\t\t  ((0 to: 15) collect: [ :each | each asShapeBRGCDots ])",						"\t\t  slotsBlock: [ :anObject | ",						"\t\t\t  anObject instVarsNamesOrderedCollection collect: [ :aDescriptor | ",						"\t\t\t\t  aDescriptor",						"\t\t\t\t\t  inline: true;",						"\t\t\t\t\t  quote ] ]"					],					"body" : [						"^ self",						"\t  exportSlotsGraphOf:",						"\t  ((0 to: 15) collect: [ :each | each asShapeBRGCDots ])",						"\t  slotsBlock: [ :anObject | ",						"\t\t  anObject instVarsNamesOrderedCollection collect: [ :aDescriptor | ",						"\t\t\t  aDescriptor",						"\t\t\t\t  inline: true;",						"\t\t\t\t  quote ] ]"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425855,					"argumentNames" : [ ]				}			}		},		"testInspectObjectModel" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectObjectModel",						"",						"\t^ self exportSlotsGraphOf: { ",						"\t\t\t  Object.",						"\t\t\t  Trait }"					],					"body" : [						"^ self exportSlotsGraphOf: { ",						"\t\t  Object.",						"\t\t  Trait }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425265,					"argumentNames" : [ ]				}			}		},		"testInspectCharacterPi" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectCharacterPi",						"",						"\t^ self exportSlotsGraphOf: $π"					],					"body" : [						"^ self exportSlotsGraphOf: $π"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8424882,					"argumentNames" : [ ]				}			}		},		"testMagnitudeSubclassesSlotsGraph" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testMagnitudeSubclassesSlotsGraph",						"",						"\t^ self exportSlotsGraphOf: Magnitude slotsBlock: [ :anObject | ",						"\t\t  anObject",						"\t\t\t  instVarsNamesOrderedCollection_testMagnitudeSubclassesSlotsGraph ]"					],					"body" : [						"^ self exportSlotsGraphOf: Magnitude slotsBlock: [ :anObject | ",						"\t  anObject",						"\t\t  instVarsNamesOrderedCollection_testMagnitudeSubclassesSlotsGraph ]"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425153,					"argumentNames" : [ ]				}			}		},		"testInspectInteger13Detailed" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptCoreMessagesForDoc"			],			"implementors" : {				"EssentialsObjectTest" : {					"sourceCode" : [						"testInspectInteger13Detailed",						"",						"\t^ self exportSlotsGraphOf: 13 asDetailedRepresentationsView"					],					"body" : [						"^ self exportSlotsGraphOf: 13 asDetailedRepresentationsView"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8425030,					"argumentNames" : [ ]				}			}		}	}}
{	"classes" : {		"KMKeyCombinationSequence" : {			"hash" : 1997824,			"definition" : "KMKeyCombination subclass: #KMKeyCombinationSequence\r\tinstanceVariableNames: 'shortcuts'\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-KeyCombinations'",			"comment" : [				"I represent a sequence of key combinations.",				"",				"In order to have a match between me and a user's key presses, all user events must match all of my inner shortcuts in the same exact order.",				"",				"To create a sequence of key combinations use the #, message. Like for example:",				"",				"$a command , $b shift"			],			"category" : "Keymapping-KeyCombinations"		},		"CoASTNodeFetcherHeuristic" : {			"hash" : 6459648,			"definition" : "Object subclass: #CoASTNodeFetcherHeuristic\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Heuristics'",			"comment" : [				"I implement a fetcher heuristic for an AST node.",				"My responsibility is to build a fetcher for a given node in a given context.",				"I am implemented as a chain of responsibility: I treat the build request if possible, otherwise I forward the request to the next heuristic.",				"",				"My main method #fetcherFor:inContext: is a template method.",				"My subclasses should redefine:",				" - #appliesForNode:inContext: returning a boolean if the heuristic applies for context/node",				" - #buildFetcherFor:inContext: returning the effective heuristic built"			],			"category" : "HeuristicCompletion-Model-Heuristics"		},		"SpBoxLayout" : {			"hash" : 554240,			"definition" : "SpDirectionableLayout subclass: #SpBoxLayout\r\tuses: SpTAlignable\r\tinstanceVariableNames: 'spacing borderWidth homogeneous'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Layout-Box'",			"comment" : [				"A layout that will arrange presenters in a box, vertically (top to bottom) or horizontally (left to right).",				"Elements can be added at the begining or at the end of the box (see `SpBoxLayout>>#add:` and `SpBoxLayout>>#addLast:` method families).",				"",				"## Discussion",				"",				"The box layout is the main layout in Spec, because its versatility and ease to use. While one may think its functionality is limited, the fact that it can be composed with other types of layouts or other instances of itself (other boxes), will let users do almost everything they need.",				"The basic usage is, however, very simple: ",				"",				"```Smalltalk",				"SpBoxLayout newTopToBottom",				"\tadd: aPresenter;",				"\tadd: otherPresenter;",				"\tyourself.",				"```",				"",				"This will arrange `aPresenter` and `otherPresenter` vertically, assigning to each presenter as much `height` as they can receive (usually 50% of the box).  ",				"Of course, being able to do _just that_ would be very limiting, but then is where layout properties start to be important.",				"",				"### The expand property (`SpBoxLayout>>#add:expand:`)",				"",				"With the previous example, let's define a some real presenters: ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: presenter newTextInput;",				"\tadd: presenter newText;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"What's happened when we opened it? Well, the box layout was filled with an input text and a text area, but the height assigned to the first presenter is not what we would have expected, since even if text input is smaller, area height assigned is still half.",				"The property expand fixes this problem, by telling the layout not to assign more height than what is explicitly needed by the contained presenter: ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: presenter newTextInput expand: false;",				"\tadd: presenter newText;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"Now the presenter will behave as one would expect (This code is in `SpBoxLayout class>>#exampleExpand`).",				"",				"### Adding presenters **last**.",				"",				"Now, consider this problem: You want to add something *at the end* of your presenter (for example, you want to add a button, making a dialog): ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: 'Enter text' expand: false;",				"\tadd: presenter newTextInput expand: false;",				"\tadd: (presenter newButton label: 'Ok') expand: false;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"But you want that button to be shown at the end. This is why we use the `addLast:` method, who will instruct the layout to add this presenter at the end.",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: 'Enter text' expand: false;",				"\tadd: presenter newTextInput expand: false;",				"\taddLast: (presenter newButton label: 'Ok') expand: false;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"That makes the presenter work as expected  (This code is in SpBoxLayout class>>#exampleAddLast).",				"",				"### Composing layouts",				"",				"The real power of a layout comes when you understand they can be composed (with other instances of themselves or any other kind, children of `SpExecutableLayout`).",				"For example, taking the previous example, let's say you want to add two buttons (Ok, Cancel), aligned horizontaly. To accomplish that, you add a new layout with the buttons: ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: 'Enter text' expand: false;",				"\tadd: presenter newTextInput expand: false;",				"\taddLast: (SpBoxLayout newLeftToRight",				"\t\t\taddLast: (presenter newButton label: 'Ok') expand: false;",				"\t\t\taddLast: (presenter newButton label: 'Cancel') expand: false;",				"\t\t\tyourself)",				"\t\texpand: false;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"Now, the presenter will show buttons at bottom-right corner (This code is in `SpBoxLayout class>>#exampleComposite`)."			],			"category" : "Spec2-Layout-Box"		},		"RubShoutStylerDecorator" : {			"hash" : 4578304,			"definition" : "RubParagraphDecorator subclass: #RubShoutStylerDecorator\r\tinstanceVariableNames: 'styler text replaceStart replaceStop'\r\tclassVariableNames: 'MinTextSizeForStylingInBackground'\r\tpackage: 'Rubric-Styling'",			"comment" : [				"I am the shout styler decorator for a text area, I highlight the text "			],			"category" : "Rubric-Styling"		},		"Collection" : {			"hash" : 850688,			"definition" : "Object subclass: #Collection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am the abstract superclass of all classes that represent a group of elements.",				"",				"To get more information you read the explanation on Pharo by Example book in the next link: [Pharo by Example - Collections](https://github.com/SquareBracketAssociates/UpdatedPharoByExample/blob/pharo5/Collections/Collections.pillar).",				"",				"Or if you want to read in PDF format, download it from [Pharo by Example](https://github.com/SquareBracketAssociates/PharoByExample80/releases/tag/continuous) and look for Chapter 13: Collections. "			],			"category" : "Collections-Abstract-Base"		},		"CTLinkedStoragePoolCircular" : {			"hash" : 2286080,			"definition" : "CTLinkedStoragePool subclass: #CTLinkedStoragePoolCircular\r\tinstanceVariableNames: 'head'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\thead:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"MCDataStream" : {			"hash" : 1348864,			"definition" : "Stream subclass: #MCDataStream\r\tinstanceVariableNames: 'byteStream topCall basePos'\r\tclassVariableNames: 'ReadSelectors TypeMap WriteSelectors'\r\tpackage: 'Monticello-Storing'",			"comment" : [				"This is the save-to-disk facility. A DataStream can store one or more objects in a persistent form.",				"",				"To handle objects with sharing and cycles, you must use a",				"ReferenceStream instead of a DataStream.  (Or SmartRefStream.)  ReferenceStream is typically",				"faster and produces smaller files because it doesn't repeatedly write the same Symbols.",				"",				"Here is the way to use DataStream and ReferenceStream:",				"\trr := ReferenceStream fileNamed: 'test.obj'.",				"\trr nextPut: <your object>.",				"\trr close.",				"",				"To get it back:",				"\trr := ReferenceStream fileNamed: 'test.obj'.",				"\t<your object> := rr next.",				"\trr close.",				"",				"Each object to be stored has two opportunities to control what gets stored.  On the high level, objectToStoreOnDataStream allows you to substitute another object on the way out.  The low level hook is storeDataOn:. The read-in counterparts to these messages are comeFullyUpOnReload and (class) readDataFrom:size:. See these methods for more information about externalizing and internalizing.",				"",				"NOTE: A DataStream should be treated as a write-stream for writing.  It is a read-stream for reading.  It is not a ReadWriteStream."			],			"category" : "Monticello-Storing"		},		"MCDependencySorter" : {			"hash" : 275200,			"definition" : "Object subclass: #MCDependencySorter\r\tinstanceVariableNames: 'required provided orderedItems'\r\tclassVariableNames: ''\r\tpackage: 'Monticello-Loading'",			"comment" : [				"A MCDependencySorter computes the dependencies to a set of entities."			],			"category" : "Monticello-Loading"		},		"MetacelloPackagesSpec" : {			"hash" : 1486592,			"definition" : "MetacelloMemberListSpec subclass: #MetacelloPackagesSpec\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Specs'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-Core-Specs"		},		"ValueLink" : {			"hash" : 1171456,			"definition" : "Link subclass: #ValueLink\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"A ValueLink is a Link containing a Value.",				"Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.",				"",				"",				"value - The object this link points to."			],			"category" : "Collections-Support-Links"		},		"ZnLoggingReadStream" : {			"hash" : 1416960,			"definition" : "Object subclass: #ZnLoggingReadStream\r\tinstanceVariableNames: 'stream logger identifier logLevel'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Streaming'",			"comment" : [				"I am ZnLoggingReadStream, I wrap a binary stream and log all read operations.",				"",				"At logLevel 1 (the default) I log read operations next and friends.",				"At logLevel 2 I also log peek and atEnd.",				"",				"Usage",				"",				"ZnServer default reader: [ :stream | ",				"\tZnRequest readFrom: ",				"\t\t((ZnLoggingReadStream on: stream) identifier: 'Zn request') ].",				"",				"ZnServer default reader: [ :stream | ZnRequest readFrom: stream ].",				"",				"ZnZincServerAdaptor default server reader: [ :stream | ",				"\tZnRequest readBinaryFrom: ",				"\t\t((ZnLoggingReadStream on: stream) identifier: 'Zn request') ].",				"",				"ZnZincServerAdaptor default server reader: [ :stream | ZnRequest readBinaryFrom: stream ].",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Streaming"		},		"WeakFinalizerItem" : {			"hash" : 1176576,			"definition" : "Object weakSubclass: #WeakFinalizerItem\r\tinstanceVariableNames: 'list next executor'\r\tclassVariableNames: ''\r\tpackage: 'System-Finalization-Base'",			"comment" : [				"My instances is used by weak registry to hold a single weak reference",				"and executor(s).",				"",				"Once object, referenced weakly by my instance become garbage, a weak registry triggers its execution",				"by sending #finalizeValues to my instance.",				"",				"Note, that a new VM finalization scheme does not implies to use this particular class",				"in order to implement finalization scheme. VM refers only to WeakFinalizationList class. ",				"",				"In this way, my class and its implementation can serve as an example for implementing various finalization actions, which may differ from this one, provided by default for use by weak registry.",				"",				"Once initialized, my instance should:",				" - point to particular list (an instance of WeakFinalizationList),",				" - next should be nil",				" - executor or multiple executors initialized",				" - weak reference slot should point to some object of interest",				"",				"At the moment, when object, referenced weakly, become garbage, VM checks if its fist instance variable is an instance of WeakFinalizationList.",				"If it so, then it adds a given object to this list, and also links the tail of list through 'next' instance variable. ",				"",				"So, as a result of garbage collection, a list will contain all objects, which had weak references to garbage collected objects. ",				"It is a responsibility of application to manage the instances of WeakFinalizationList's , as well as clear this list before the next garbage collection.",				"As a consequence of that you can:",				" - use multiple different lists and manage them differently in order to react differently when some objects became garbage",				" - you are not obliged to handle/clear the list(s) immediately after GC. You can clean up them periodically.",				" - you can implement own kind of weak referencing object(s), which could use same finalization, provided by newer VMs.",				"",				"VM requires only that an object with weak reference having at least two instance variables,",				"and its first instance variable points to instance of WeakFinalizationList. Everything else is optional."			],			"category" : "System-Finalization-Base"		},		"LinkedListTest" : {			"hash" : 4360960,			"definition" : "TestCase subclass: #LinkedListTest\r\tuses: TAddTest - {#testTAddWithOccurrences. #testTAddTwice. #testTWriteTwice} + TEmptyTest + TIterateTest + TIterateSequencedReadableTest + TPrintTest + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + TSequencedElementAccessTest + TSubCollectionAccess + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + (TCopyPartOfSequenceable - {#testCopyEmptyMethod}) + (TCopySequenceableSameContents - {#testSortBy. #integerCollection}) + TCopySequenceableWithOrWithoutSpecificElements + TCopyTest + (TCopySequenceableWithReplacement - {#testCopyReplaceAllWithManyOccurrence. #collectionWith2TimeSubcollection}) + TBeginsEndsWith + TRemoveTest + TSetArithmetic + TIncludesWithIdentityCheckTest + TStructuralEqualityTest + TOccurrencesTest + TSortTest\r\tinstanceVariableNames: 'nextLink n list link1 link2 link3 link4 nonEmpty otherList link collectionWithoutNil nonEmpty1Element collectionWithoutEqualElements elementNotIn elementIn collection5Elements collectResult unsortedCollection sortedCollection'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Base'",			"comment" : [				"A set of test cases which thoroughly test functionality of the LinkedList class."			],			"category" : "Collections-Sequenceable-Tests-Base"		},		"StIterator" : {			"hash" : 6682624,			"definition" : "Object subclass: #StIterator\r\tinstanceVariableNames: 'onReset'\r\tclassVariableNames: ''\r\tpackage: 'NewTools-Spotter-Processors-Iterators'",			"comment" : [				"I represent an abstract Iterator.",				"My subclasses should implement #next, #doReset, and #atEnd.",				"",				"I implement some construction messages to ease the construction of chains of iterators.",				"",				"#, allows to create sequence of iterators, the results are from the first one, then from the second one and so on. ",				"",				"#asBeginsWithFilter",				"Creates an iterator that allows to filter by a string, comparing with beginsWith:, with an starting filter of ''.",				"#beginsWithFilter: aString",				"Create an iterator that allows to filter by a string, comparing with beginsWith:, with an starting filter of aString.",				"",				"#asSubStringFilter",				"Creates an iterator that allows to filter by a string, comparing with substring:, with an starting filter of ''.",				"",				"#substringFilter: aString",				"Create an iterator that allows to filter by a string, comparing with substring:, with an starting filter of aString.",				"",				"#asWithoutDuplicates ",				"Creates an itearator that returns no duplicates."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"Path" : {			"hash" : 833280,			"definition" : "Object variableSubclass: #Path\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'FileSystem-Path-Base'",			"comment" : [				"I'm a private and abstract filesystem path, independent of the string representation used to describe paths on a specific filesystem. I provide methods for navigating the filesystem hierarchy and working with absolute and relative paths. I only refer to a concrete file or directory with regard to a specific filesystem. Normally users should not use me directly. ",				"",				"API instance creation:",				"",				"- #from: parses the supplied string using the default delimeter",				"- #from:delimiter: parses the supplied string using the supplied delimiter.",				"- #/ creates an absolute path from the supplied string",				"- #* creates a relative path from the supplied string",				"",				"API path manipulation:",				"",				"- #/ adds the supplied string to the receiver"			],			"category" : "FileSystem-Path-Base"		},		"CoStatisticsHeuristicBuilder" : {			"hash" : 6482176,			"definition" : "CoHeuristicBuilder subclass: #CoStatisticsHeuristicBuilder\r\tinstanceVariableNames: 'statistics'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Statistics'",			"comment" : [				"I am an heuristic builder that builds statistic-enabled fetchers.",				"I wrap each of my heuristics with a CoStatisticsHeuristicWrapper, and then compose these wrappers into a chain of responsibility.",				"For example, given a list of heuristics:",				"",				"CoHeuristicBuilder new",				"\tadd: CoSelfMessageHeuristic new;",				"\tadd: CoSuperMessageHeuristic new;",				"\tyourself.",				"",				"I create the following chain:",				"",				"CoStatisticsHeuristicWrapper -next-> CoStatisticsHeuristicWrapper",				"           |                                     |",				"        decoree                               decoree",				"           |                                     |",				"           v                                     v",				"   CoSelfMessageHeuristic             CoSuperMessageHeuristic",				"\t",				"I am used also as a hook, that can be redefined in subclasses and build heuristics differently."			],			"category" : "HeuristicCompletion-Model-Statistics"		},		"IceAbstractNode" : {			"hash" : 7564032,			"definition" : "Object subclass: #IceAbstractNode\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Changes'",			"comment" : [				"My subclasses implement a tree used for diffing and merging."			],			"category" : "Iceberg-Changes"		},		"ZnCharacterReadWriteStream" : {			"hash" : 1205248,			"definition" : "Object subclass: #ZnCharacterReadWriteStream\r\tinstanceVariableNames: 'readStream writeStream'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am a read-write character stream. I am mainly used to open the Pharo source and changes files."			],			"category" : "Zinc-Character-Encoding-Core"		},		"SpValidationReport" : {			"hash" : 3011840,			"definition" : "Object subclass: #SpValidationReport\r\tinstanceVariableNames: 'errors'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-CommonWidgets-Validation'",			"comment" : [				"A validation report is used to collect possible validation failures in a tree of presenters.",				"It holds errors so that the caller of the validation can determine if the validation is successful or provide a useful feedback to the user on failed validations."			],			"category" : "Spec2-CommonWidgets-Validation"		},		"RPackageWithDoTest" : {			"hash" : 3787520,			"definition" : "TestCase subclass: #RPackageWithDoTest\r\tinstanceVariableNames: 'x'\r\tclassVariableNames: ''\r\tpackage: 'RPackage-Tests'",			"comment" : [				"SUnit tests for RPackage"			],			"category" : "RPackage-Tests"		},		"MetacelloSemanticVersionNumber" : {			"hash" : 1514240,			"definition" : "Magnitude subclass: #MetacelloSemanticVersionNumber\r\tinstanceVariableNames: 'normalVersion preReleaseVersion buildVersion'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Model'",			"comment" : [				"MetacelloSemanticVersionNumber conforms to version 2.0.0-rc.1 of  [Semantic Versioning 2.0.0-rc.1](http://semver.org/)",				"",				"The most important thing that you need to know is that: ",				"**A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers.**",				"",				"**Semantic Versioning Specification** extracted from [Semantic versioning 2.0.0-rc.1](https://github.com/mojombo/semver/blob/3c7f2e8df747ea0ca15208fdfc90e3275240184f/semver.md):",				"",				"Semantic Versioning Specification (SemVer)",				"------------------------------------------",				"",				"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",",				"\"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be",				"interpreted as described in RFC 2119.",				"",				"1. Software using Semantic Versioning MUST declare a public API. This API",				"could be declared in the code itself or exist strictly in documentation.",				"However it is done, it should be precise and comprehensive.",				"",				"1. A normal version number MUST take the form X.Y.Z where X, Y, and Z are",				"non-negative integers. X is the major version, Y is the minor version, and Z",				"is the patch version. Each element MUST increase numerically by increments of",				"one. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.",				"",				"1. Once a versioned package has been released, the contents of that version",				"MUST NOT be modified. Any modifications must be released as a new version.",				"",				"1. Major version zero (0.y.z) is for initial development. Anything may change",				"at any time. The public API should not be considered stable.",				"",				"1. Version 1.0.0 defines the public API. The way in which the version number",				"is incremented after this release is dependent on this public API and how it",				"changes.",				"",				"1. Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards",				"compatible bug fixes are introduced. A bug fix is defined as an internal",				"change that fixes incorrect behavior.",				"",				"1. Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards",				"compatible functionality is introduced to the public API. It MUST be",				"incremented if any public API functionality is marked as deprecated. It MAY be",				"incremented if substantial new functionality or improvements are introduced",				"within the private code. It MAY include patch level changes. Patch version",				"MUST be reset to 0 when minor version is incremented.",				"",				"1. Major version X (X.y.z | X > 0) MUST be incremented if any backwards",				"incompatible changes are introduced to the public API. It MAY include minor",				"and patch level changes. Patch and minor version MUST be reset to 0 when major",				"version is incremented.",				"",				"1. A pre-release version MAY be denoted by appending a hyphen and a series of",				"dot separated identifiers immediately following the patch version. Identifiers",				"MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-].",				"Pre-release versions satisfy but have a lower precedence than the associated",				"normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7,",				"1.0.0-x.7.z.92.",				"",				"1. A build version MAY be denoted by appending a plus sign and a series of dot",				"separated identifiers immediately following the patch version or pre-release",				"version. Identifiers MUST be comprised of only ASCII alphanumerics and dash",				"[0-9A-Za-z-]. Build versions satisfy and have a higher precedence than the",				"associated normal version. Examples: 1.0.0+build.1, 1.3.7+build.11.e0f985a.",				"",				"1. Precedence MUST be calculated by separating the version into major, minor,",				"patch, pre-release, and build identifiers in that order. Major, minor, and",				"patch versions are always compared numerically. Pre-release and build version",				"precedence MUST be determined by comparing each dot separated identifier as",				"follows: identifiers consisting of only digits are compared numerically and",				"identifiers with letters or dashes are compared lexically in ASCII sort order.",				"Numeric identifiers always have lower precedence than non-numeric identifiers.",				"Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-beta.2 < 1.0.0-beta.11 <",				"1.0.0-rc.1 < 1.0.0-rc.1+build.1 < 1.0.0 < 1.0.0+0.3.7 < 1.3.7+build <",				"1.3.7+build.2.b8f12d7 < 1.3.7+build.11.e0f985a.",				"",				"About",				"-----",				"",				"The Semantic Versioning specification is authored by [Tom",				"Preston-Werner](http://tom.preston-werner.com), inventor of Gravatars and",				"cofounder of GitHub.",				"",				"If you'd like to leave feedback, please [open an issue on",				"GitHub](https://github.com/mojombo/semver/issues).",				"",				"",				"License",				"-------",				"",				"Creative Commons - CC BY 3.0",				"http://creativecommons.org/licenses/by/3.0/"			],			"category" : "Metacello-Core-Model"		},		"ZnCookieJar" : {			"hash" : 1406720,			"definition" : "Object subclass: #ZnCookieJar\r\tinstanceVariableNames: 'cookies'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Support'",			"comment" : [				"I represent a container for storing HTTP Cookies for a client session.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Support"		},		"AthensPathSegment" : {			"hash" : 3611904,			"definition" : "Object subclass: #AthensPathSegment\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Athens-Core-Paths'",			"comment" : [				"The path segment is path building block.",				"Path is formed from list of connected path segments. At building stage, there is no container nor separately defined \"path\" object, just a linked list of segments.",				"Later the segments are accumulated in backend-specific path object, and the way how it is organized may vary.",				"",				"My (sub)instances usually are not created directly by user, but instead by instance",				"of AthensPathBuilder.",				"Therefore, all my subclasses are considered private and implementation detail."			],			"category" : "Athens-Core-Paths"		},		"SpMorphicBoxAdapter" : {			"hash" : 964352,			"definition" : "SpMorphicLayoutAdapter subclass: #SpMorphicBoxAdapter\r\tinstanceVariableNames: 'startPanel endPanel'\r\tclassVariableNames: 'Experimental'\r\tpackage: 'Spec2-Adapters-Morphic-Layout'",			"comment" : [				"I'm an adapter for Box Layouts.",				"A paned layout will split (horizontally or vertically) panels (in fixed yet proportional spaces)."			],			"category" : "Spec2-Adapters-Morphic-Layout"		},		"RSGroup" : {			"hash" : 6947584,			"definition" : "OrderedCollection subclass: #RSGroup\r\tinstanceVariableNames: 'shapeFromModelCache'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Core'",			"comment" : [				"<keyClass>",				"A `RSGroup` represents a collection of Roassal shapes. As soon as one assume a collection contains graphical elements, then it is convenient to be able to perform some operations (e.g., getting the encompassing rectangle of the elements, transforming a collection into a composite shape). `RSGroup` is a subclass of `OrderedCollection`. A `RSGroup` is not designed to contain other things than Roassal shapes. ",				"",				"*Responsibility*: handle a collection of graphical shapes in an intuitive and efficient way. A group is also responsible to retrieve shapes from a given model object.",				"",				"*Collaborators*: `RSGroup` is a central class in Roassal. Shapes are held in instance of `RSGroup`.",				"",				"*Variables*:",				"- `shapeFromModelCache`: a group of shapes must remember the model to speed up the retreival of shapes from a given object model.",				"",				"",				"*Example*:",				"```Smalltalk",				"shapes := (1 to: 20) collect: [ :value | ",				"\t| g |",				"\tg := RSGroup new.",				"\tg add: (RSEllipse new size: 30 atRandom).",				"\tg add: (RSLabel new text: value).",				"\tg asShape ].",				"",				"c := RSCanvas new.",				"c addAll: shapes.",				"RSFlowLayout on: shapes.",				"c @ RSCanvasController.",				"```",				"",				"Layout may be applied on a group",				"```Smalltalk",				"shapes := (1 to: 20) collect: [ :value | ",				"\t| g |",				"\tg := RSGroup new.",				"\tg add: (RSLabel new text: value).",				"\tg add: (RSEllipse new size: 30 atRandom).",				"\tRSVerticalLineLayout new center; gapSize: 0; on: g.",				"\tg asShape ].",				"",				"c := RSCanvas new.",				"c addAll: shapes.",				"RSFlowLayout on: shapes.",				"c @ RSCanvasController.",				"```",				"",				"```Smalltalk",				"g := RSGroup new.",				"g add: (RSBox new model: 'hello').",				"g add: (RSEllipse new model: 'world').",				"g shapeFromModel: 'hello' \"=> a RSBox(hello))\"",				"```"			],			"category" : "Roassal3-Core"		},		"OCLiteralSet" : {			"hash" : 1234688,			"definition" : "Set subclass: #OCLiteralSet\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-Extras'",			"comment" : [				"Holds a unique set of literals.  Literal objects are equal if they are #= plus they are the same class.  This set uses this rule for finding elements.",				"",				"Example:",				"\tSet new add: 'anthony'; add: #anthony; size  \"= 1\"",				"\tLiteralSet new add: 'anthony'; add: #anthony; size  \"= 2\""			],			"category" : "OpalCompiler-Core-Extras"		},		"SpButtonBarPresenter" : {			"hash" : 625152,			"definition" : "SpAbstractWidgetPresenter subclass: #SpButtonBarPresenter\r\tinstanceVariableNames: 'items placeAtStart'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Widgets'",			"comment" : [				"A full width bar for arranging buttons.",				"A button bar can be used to provide a consistent layout of buttons throughout your application. "			],			"category" : "Spec2-Core-Widgets"		},		"CTSBRAL" : {			"hash" : 2297344,			"definition" : "SkewBinaryCanonicalNumber subclass: #CTSBRAL\r\tinstanceVariableNames: 'lastAddedObject'\r\tclassVariableNames: ''\r\tpackage: 'Containers-SBRAL'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tlastAddedObject:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SBRAL"		},		"PositionableStream" : {			"hash" : 1022208,			"definition" : "Stream subclass: #PositionableStream\r\tinstanceVariableNames: 'collection position readLimit'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I represent an accessor for a sequence of objects (a collection) that are externally named by indices so that the point of access can be repositioned. I am abstract in that I do not implement the messages next and nextPut: which are inherited from my superclass Stream."			],			"category" : "Collections-Streams-Base"		},		"OrderedDictionary" : {			"hash" : 1081344,			"definition" : "Collection subclass: #OrderedDictionary\r\tinstanceVariableNames: 'dictionary orderedKeys'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I am a collection that act as a Dictionary except that I use key insertion order when enumerating, printing, or returing collections of keys/values/associations, but not when testing for equality (but it does not matters in this case).",				"I will assume that you know the Dictionary class in this comment.",				"",				"I work mainly as a Dictionary except that I also store the keys in an Array that keeps the order of elements. ",				"I should be used ONLY if you need to keep the keys ordered. Else you should use a Dictionary that is faster and keep less values into memory. (I duplicate the keys).",				"Insertion, update, and inclusion testing have O(1) complexity while removing has O(n) worst-case.",				"",				"### Public API and Key Messages",				"",				"- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue / #at: aKey ifPresent: aBlock ifAbsent: aBlock\t\tallow to add an element.  ",				"- #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock \t\tallow to access my values.",				"- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: \t\tallow to iterate on me effectively.",				"- #keyAtIndex: anIndex / KeyAtIndex: anIndex ifAbsent: aBlock \t\tallow to acess my keys from an index.",				"",				"### Examples",				"\t\"For basic examples see Dictionary comment.\"",				"```\t",				"\tordDic := (Dictionary with: 1 -> $a with: 2 -> $b) asOrderedDictionary.",				"\tordDic.   \t\t\"returns:  an OrderedDictionary(1->$a 2->$b)\"",				"\tordDic keyAtIndex: 2.\t\t\"returns:  2\"",				"```",				"\t",				"### Internal Representation and Key Implementation Points.",				"Instance Variables",				"-\tdictionary:\t\t\t<Dictionary>\t\tA dictionary where I store my keys and values.",				"-\torderedKeys:\t\t<Array>\t\t\tAn ordered collection where I store my keys to maintain the order.",				"",				"I base my implementation on a Dictionary and when I need to execute an action where the order of the values is important I use the keys in my ordered collection."			],			"category" : "Collections-Sequenceable-Ordered"		},		"SDL_PixelFormat" : {			"hash" : 4951296,			"definition" : "SDL2Structure subclass: #SDL_PixelFormat\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'OFFSET_ALOSS OFFSET_AMASK OFFSET_ASHIFT OFFSET_BITSPERPIXEL OFFSET_BLOSS OFFSET_BMASK OFFSET_BSHIFT OFFSET_BYTESPERPIXEL OFFSET_FORMAT OFFSET_GLOSS OFFSET_GMASK OFFSET_GSHIFT OFFSET_NEXT OFFSET_PAD1 OFFSET_PAD2 OFFSET_PALETTE OFFSET_REFCOUNT OFFSET_RLOSS OFFSET_RMASK OFFSET_RSHIFT'\r\tpackage: 'OSWindow-SDL2-Bindings'",			"comment" : [				"SDL2 library structure"			],			"category" : "OSWindow-SDL2-Bindings"		},		"SystemProgressItemMorph" : {			"hash" : 784384,			"definition" : "Morph subclass: #SystemProgressItemMorph\r\tinstanceVariableNames: 'bar labelMorph lock result hasResult startValue endValue lastRefresh'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-ProgressBar'",			"comment" : [				"A SystemProgressItemMorph is 'bar' in a SystemProgressMorph. "			],			"category" : "Morphic-Base-ProgressBar"		},		"Bag" : {			"hash" : 864256,			"definition" : "Collection subclass: #Bag\r\tinstanceVariableNames: 'contents'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Bags'",			"comment" : [				"I represent an unordered collection of possibly duplicate elements.",				"\t",				"I store these elements in a dictionary, tallying up occurrences of equal objects. Because I store an occurrence only once, my clients should beware that objects they store will not necessarily be retrieved such that == is true. If the client cares, a subclass of me should be created.",				"",				"## Creating ",				"Bags can be created from other collections or built up progressively using the `Bag>>#add:` message. The example below shows four different ways to create a `Bag` with 3 occurrences of 1.",				"```",				"b := #(1 1 1) asBag.",				"\"or\"",				"b:= Bag newFrom: #(1 1 1).",				"\"or\"",				"b := Bag new add: 1; add: 1; add: 1.",				"\"or\" ",				"b add: 1 withOccurrences: 3.",				"",				"b valuesAndCounts.  \"Dictionary(1->3)\"",				"```",				"",				"## Enumerating",				"",				"It is possible to iterate over each individual occurrance of an object using the `Bag>>#do:` message, or pairs of objects and their occurances using `Bag>>#doWithOccurrences:` or the synonymous messages `Bag>>#associationsDo:` and `Bag>>#keysAndValuesDo:`.",				"",				"```",				"b := #(1 1 1 1) asBag.",				"",				"\"The block will receive each occurrence. obj = 1 and there will be 4 iterations\"",				"|counter|",				"counter := 0",				"b do: [:obj | counter := counter + 1].",				"counter = 4  ",				"",				"\"The block will receive the obj and it's count. obj = 1 count = 4\"",				"b doWithOccurences: [:obj :count | ...].",				"```",				"",				"## Accessing ",				"As well as enumerating the contents it is possible to get a dictionary of all object counts using the `Bag>>#valuesAndCounts` message or get the counts of a single object using `Bag>>#occurrencesOf:`.",				"",				"```",				"b := #(1 1 1 2 2 3) asBag.",				"b valuesAndCounts.  \"Dictionary(1->3 2->2 3->1)\"",				"b occurrencesOf: 1  \"3\"",				"```"			],			"category" : "Collections-Unordered-Bags"		},		"SettingNodeBuilder" : {			"hash" : 2049024,			"definition" : "Object subclass: #SettingNodeBuilder\r\tinstanceVariableNames: 'node builder'\r\tclassVariableNames: ''\r\tpackage: 'System-Settings-Browser'",			"comment" : [				"Used to build nodes from the settings framework"			],			"category" : "System-Settings-Browser"		},		"ClapValidationReport" : {			"hash" : 411904,			"definition" : "Object subclass: #ClapValidationReport\r\tinstanceVariableNames: 'problems'\r\tclassVariableNames: ''\r\tpackage: 'Clap-Core-Validation'",			"comment" : [				"I aggregate multiple validation diagnostics together."			],			"category" : "Clap-Core-Validation"		},		"SubscriptionRegistry" : {			"hash" : 828416,			"definition" : "Object subclass: #SubscriptionRegistry\r\tinstanceVariableNames: 'subscriptions monitor'\r\tclassVariableNames: ''\r\tpackage: 'Announcements-Core-Subscription'",			"comment" : [				"The subscription registry is a threadsafe storage for the subscriptions to an Announcer.",				"",				"In Pharo, subscriptionsFor: protocol is not implemented.",				"This is because Announcer does not provide public access to its registery for encapsulation reasons.",				"(We do not want access to the announcer from action blocks to break encapsulation to other subscribers)"			],			"category" : "Announcements-Core-Subscription"		},		"Dictionary" : {			"hash" : 802048,			"definition" : "HashedCollection subclass: #Dictionary\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Dictionaries'",			"comment" : [				"I am a collection of elements that associate a key object with a value object.",				"",				"## Description",				"",				"",				"I  can be viewed from one of two perspectives: a set of associations, or a container of values that are externally named where the name can be any object that responds to #=. The external name is referred to as the key.  I inherit many operations from Set.",				"I use the #= method to locate a key. If you want a collection that use the #== method (same pointers) you can use an IdentityDictionary.",				"",				"I'm used when we need a collection of objects which I can access with a key. For example if you associate some words with a definition, the word will be the key and the definition will be the value. Both of them can be any kind of objects.",				"",				"Internally I use Associations. The Association class can help to use me. (See examples lower)",				"",				"I assume that my keys do not change after they have been added. The behavior of operations involving keys that have changed is undefined.",				"",				"## Public API and Key Messages",				"",				"### Initializing and Adding",				"",				"A `Dictionary` can be created with values using the `Collection class>>#withAll:` class selector which will add the ",				"values of a collection as the values of the `Dictionary` using numeric keys.",				"",				"```",				"d := Dictionary withAll: #(1 2 3 4 5)  \"a Dictionary(1->1, 2->2, 3->3, 4->4, 5->5)\"",				"```",				"",				"Alternatively, both the keys and values can be supplied using the `Dictionary class>>#newFromKeys:andValues:` selector,",				"which requires two collections of the same length, or the `Dictionary class>>#newFromPairs:` selector, which ",				"uses every odd numbered index as a key and even numbered index as a value for the dictionary.",				"",				"Once a `Dictionary` has been created, the basic method for adding new keys is the `Dictionary>>#at:put:` selector.",				"",				"```",				"d at: 99 put: 89  \"a Dictionary(1->1, 2->2, 3->3, 4->4, 5->5, 99->89)\"",				"```",				"",				"### Accessing ",				"",				"Get the value of a key using the `Dictionary>>#at:` selector.",				"",				"```",				"d := Dictionary withAll: #(5 4 3 2 1)  \"a Dictionary(1->5, 2->4, 3->3, 4->2, 5->1)\"",				"d at: 1  \"5\"",				"```",				"However accessing a key that does not exist will result in an error. In which case use",				"the selectors `Dictionary>>#at:ifAbsent:`",				"",				"```",				"d at: 100 ifAbsent: [ \"execute code in the block if the key is not found\" ]",				"```",				"",				"A common operation is to add in a value for a key if it is absent using the `Dictionary>>#at:ifAbsentPut:` selector. Note that unlike the regular `Dictionary>>#at:put:` selector, this message uses the value of a block. ",				"",				"```",				"d at: 100 ifAbsentPut: [ 100 ]",				"```",				"",				"Alternatively, if you want to change the value of a key use `Dictionary>>#at:update:` selector,",				"which uses the value of a block.",				"",				"```",				"d at: 5 update: [ 12 ]",				"\"a Dictionary(1->5,2->4,3->3,4->2,5->12,100->100)\"",				"```",				"",				"### Iterating / Enumerating",				"",				"It's possible to iterate over all of the values, keys, and associations of a `Dictionary` using ",				"the `Dictionary>>#valuesDo:`, `Dictionary>>#keysDo:`, and `Dictionary>>#associationsDo:` selectors. These selectors evaluate a block for",				"each of the items",				"",				"```",				"\"do: is an alias for valuesDo:\"",				"d valuesDo: [ :eachValue | \"do something with the value\" ].",				"d keysDo: [ :eachKey | \"do something with the key\" ].",				"d associationsDo: [ :eachAssociation | \"do something with a key-value pair\" ]",				"```",				"",				"The `Dictionary>>#select:` selector is also implemented to return a subset of the `Dictionary` where the",				"block evaluates to true using the value.",				"",				"```",				"d select: [:each | each > 5]  \"a Dictionary(5->12,100->100)\"",				"``` ",				"\t\t",				"### Removing",				"",				"Use the `Dictionary>>#removeKey:` selector to remove the association from the `Dictionary`, which will cause",				"an error if the key is not found. Use the `Dictionary>>#removeKey:ifAbsent:` selector to control this behavior.",				"",				"```",				"d removeKey: 5.",				"d removeKey: 1200.  \"Error\"",				"d removeKey: 1200 ifAbsent: [ \"do something\" ].",				"```",				"",				"### Testing",				"",				"Check if a value or key is present in a `Dictionary` using the `Dictionary>>#includes:` or `Dictionary>>#includesKey:` selectors.",				"",				"```",				"\"Look if 12 is the value of any key in the Dictionary\"",				"d includes: 12.",				"",				"\"Look if 100 is a key in the Dictionary\"",				"d includesKey: 100.",				"```",				"## Examples ",				"",				"",				"To create a dictionary with indexes as key: ",				"",				"```",				"\tDictionary withAll: #(7 3 1 3)   \t\t\"returns:  a Dictionary(1->7 2->3 3->1 4->3 \"",				"```",				"",				"To use Objects as key (here symbols): ",				"",				"```",				"\tcolors := Dictionary new ",				"\t\t\t\tat: #yellow put: Color yellow; ",				"\t\t\t\tat: #blue put: Color blue;",				"\t\t\t\tat: #red put: Color red;",				"\t\t\t\tyourself.",				"\t\t\t\t",				"\tcolors at: #yellow. \t\"returns:  Color yellow\"",				"\tcolors keys          \"returns: a Set(#blue #yellow #red)\"",				"\tcolors values       \"returns:  {Color blue. Color yellow. Color red}\" ",				"```",				"",				"You can also directly use Associations: ",				"",				"```",				"\tcolors := Dictionary with: #yellow -> Color yellow with: #blue -> Color blue.",				"\tcolors add: #red -> Color red.",				"\t",				"\tcolors associations  \t\"returns: {#yellow->Color yellow. #red->Color red. #blue->Color blue}\"",				"```",				"\t",				"Here some more examples: ",				"",				"```",				"\tcolors := Dictionary newFrom: { #blue->Color blue . #red->Color red . #yellow->Color yellow }. ",				"\tcolors removeKey: #blue. ",				"\tcolors at: #red ifPresent: [ :color |  color darker] ifAbsent: [ Error signal: 'The red color should be here.' ] .\t\t\"return: (Color r: 0.92 g: 0.0 b: 0.0 alpha: 1.0)\"",				"\tcolors associations \t\t \"{#yellow->Color yellow. #red->Color red}\"",				"```",				"",				"## Internal Representation and Key Implementation Points.",				"",				"I am just a collection of associations. If I need my keys I will just return the keys of my associations. Idem for my values.",				"I use the #= method in order to manipulate my keys. I cannot have two associations that are equals with the #= method."			],			"category" : "Collections-Unordered-Dictionaries"		},		"CollectionValueHolder" : {			"hash" : 1907200,			"definition" : "NewValueHolder subclass: #CollectionValueHolder\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'NewValueHolder-Core-Base'",			"comment" : [				"I am designed specifically for collections."			],			"category" : "NewValueHolder-Core-Base"		},		"SpAbstractAdapter" : {			"hash" : 612352,			"definition" : "Model subclass: #SpAbstractAdapter\r\tinstanceVariableNames: 'model widget selector owner unsubscribed'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Base'",			"comment" : [				"I am an abstract class.",				"",				"I'm the superclass of all the adapters used to link a Spec widget presenter to a framework specific widget (by example ButtonPresenter <-> PluggableButtonMorph).",				"",				"The current implementation installs my instances as dependent of the presenter and my `changed:` method propagates updates to the widget I create (via my `buildWidget` method). This implementation is not optimal. ",				"",				"In the future my instances should just be responsible to create a widget and install all the communication between the presenter and the widget. I should not be a middle man. ",				"",				"I'm only interesting for back-ends developers. As a developer, using Spec to define application, you should not care and have to deal with me. "			],			"category" : "Spec2-Core-Base"		},		"FTGlyphSlotRec" : {			"hash" : 2144768,			"definition" : "FFIExternalStructure subclass: #FTGlyphSlotRec\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'OFFSET_ADVANCE OFFSET_BITMAP OFFSET_BITMAP_LEFT OFFSET_BITMAP_TOP OFFSET_CONTROL_DATA OFFSET_CONTROL_LEN OFFSET_FACE OFFSET_FORMAT OFFSET_GENERIC OFFSET_INTERNAL OFFSET_LIBRARY OFFSET_LINEARHORIADVANCE OFFSET_LINEARVERTADVANCE OFFSET_LSB_DELTA OFFSET_METRICS OFFSET_NEXT OFFSET_NUM_SUBGLYPHS OFFSET_OTHER OFFSET_OUTLINE OFFSET_RESERVED OFFSET_RSB_DELTA OFFSET_SUBGLYPHS'\r\tpoolDictionaries: 'FT2Types'\r\tpackage: 'FreeType-Bindings'",			"comment" : [				"I Implement the `FT_GlyphSlot_Rec`, I am the structure where the glyphs are stored when reading from a font."			],			"category" : "FreeType-Bindings"		},		"NullStream" : {			"hash" : 1075712,			"definition" : "Stream subclass: #NullStream\r\tinstanceVariableNames: 'binary position lastElement'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I am a stream that does nothing i.e. generates and consumes an infinite number of elements (NullObject pattern). I can be used as an equivalent of /dev/null (for example ",				"a logging in off mode) or for performance benchmarks."			],			"category" : "Collections-Streams-Base"		},		"ClapParameterized" : {			"hash" : 407296,			"definition" : "ClapParameter subclass: #ClapParameterized\r\tinstanceVariableNames: 'parameters positionals aliases'\r\tclassVariableNames: ''\r\tpackage: 'Clap-Core-Specification'",			"comment" : [				"I am an abstract class specifying a parameter with nested positional parameters."			],			"category" : "Clap-Core-Specification"		},		"ZnLimitedReadStream" : {			"hash" : 1415936,			"definition" : "Object subclass: #ZnLimitedReadStream\r\tinstanceVariableNames: 'stream position limit'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Streaming'",			"comment" : [				"I am ZnLimitedReadStream, wrapping another read stream delegating to it ",				"but limiting reading to a fixed number of elements.",				"",				"I can be atEnd while my wrapped stream is not.",				"",				"I am binary if the stream that I wrap is binary, else I am textual.",				" ",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Streaming"		},		"SequenceableCollection" : {			"hash" : 856320,			"definition" : "Collection subclass: #SequenceableCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		},		"SortedCollection" : {			"hash" : 1137920,			"definition" : "OrderedCollection subclass: #SortedCollection\r\tinstanceVariableNames: 'sortBlock'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a Block.",				"Like my superclass, I am a collection that can grow in size but I keep my elements sorted.",				"Because of that you cannot add elements at a fix index (with #at:put: or #insert:before: methods for example).",				"",				"The sort block I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.",				"",				"I should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).",				"",				"### Public API and Key Messages",				"",				"- class method: #sortUsing:  aBlockOrSortFunction is a contructor. \t\t",				"- #sort: aBlock is a function to change the way I am sorted. I will also update the index of my elements with the new block.",				"",				"### Example",				"",				"```",				"\tsortColl := SortedCollection sortUsing: [ :elem1 :elem2 | elem1 < elem2 ].",				"\tsortColl",				"\t\tadd: 4;",				"\t\tadd: 2;",				"\t\tadd: 1;",				"\t\tadd: 2.",				"\tsortColl. \t\t\"result: a SortedCollection(1 2 2 4)\"",				"\t",				"\t\"But you can also add a collection.\"",				"\t",				"\tsortColl addAll: #(3 5 0 6).",				"\tsortColl. \t\t\"result: a SortedCollection(0 1 2 2 3 4 5 6)\"",				"\t\t\t",				"\t\"You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.\"",				"\t",				"\tsortColl ",				"\t\tsort:",				"\t\t\t[ :int1 :int2 | ",				"\t\t\t\t((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])",				"\t\t\t\t\tifTrue: [ int1 < int2 ]",				"\t\t\t\t\tifFalse: [ int1 odd ] ",				"\t\t\t].",				"\tsortColl \t\t\"result: a SortedCollection(1 3 5 0 2 2 4 6)\"",				"```",				" ",				"### Internal Representation and Key Implementation Points.",				"Instance Variables",				"-\tsortBlock:\t\t<Block> \t\tThis is  a sort block used to keep me sorted. I can take 2 parameters that are two values and I return true if the first parameter should be before the second.",				"",				"I refuse the methods that add elements at a fix index.",				"",				"When the user is adding an element, I use some methods like #reSort or #indexForInserting: to add an element at the right position.",				"",				"### Discussion",				"",				"- (1) sort: and sortBlock: can be used to set an order to my elements but uses different implementation of the sort algorithm... See  https://pharo.fogbugz.com/f/cases/17925/Why-SortedCollection-sort-and-sortBlock-do-not-uses-the-same-method-to-sort.",				"- (2) DO NOT USE ADDLAST:!!!! ",				"https://pharo.fogbugz.com/f/cases/14812/addLast-should-not-work-in-SortedCollection",				"",				"```",				"x := SortedCollection with: 4 with: 3 with: 2 with: 1 with: 7.",				"y:=x addLast: 6; yourself.",				"y isSorted ",				">>> false",				"```"			],			"category" : "Collections-Sequenceable-Ordered"		},		"JobProgressMorph" : {			"hash" : 757248,			"definition" : "Morph subclass: #JobProgressMorph\r\tinstanceVariableNames: 'bar endValue hasResult job labelMorph lastRefresh lock result startValue'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-ProgressBar'",			"comment" : [				"I combine a progress title and a JobPorgressBarMorph to a visual representation of a Job.",				"",				"Usually I am contained in the global instance of the SystemProgressMorph"			],			"category" : "Morphic-Base-ProgressBar"		},		"StdioStream" : {			"hash" : 1146368,			"definition" : "AbstractBinaryFileStream subclass: #StdioStream\r\tinstanceVariableNames: 'peekBuffer'\r\tclassVariableNames: ''\r\tpackage: 'Files-Streams'",			"comment" : [				"I am a concrete subclass of AbstractBinaryFileStream for stdio streams.",				"",				"StdioStreams map to one of three types of underlying file: ",				"",				"- Terminal input/output.",				"- Piped input/output and named pipes (FIFO files) such as created with the shell pipe character \"|\".",				"- A file mounted on the file system.",				"  This includes all the files that can be opened with a FileReference, including sysfs files such as /proc/cpuinfo and character devices such as /dev/urandom.",				"",				"The operations that can be performed on these vary, e.g. it is possible to position the stream for a regular file, but not for piped input.  Currently it is up to the user of StdioStream to know which type of input they are dealing with.",				"",				"As pipes can't be positioned and FilePlugin doesn't provide a peek primitive, simulate #peek by reading the next character and holding on to it until it is consumed.",				"",				"Despite providing both input and output methods, StdioStreams are either read-only or write-only.  Currently it is up to the user to know which type of stream they are dealing with.",				"",				"Normally instances of StdioStream are not created directly but via Stdio, e.g: ",				"",				"Stdio stdin.",				"Stdio stdout.",				"Stdio stderr.",				"",				"",				"Instance Variables:",				"",				"- peekBuffer     <SmallInteger or nil> The next character to be read from the stream or nil."			],			"category" : "Files-Streams"		},		"SpPanedLayout" : {			"hash" : 554752,			"definition" : "SpDirectionableLayout subclass: #SpPanedLayout\r\tinstanceVariableNames: 'childrenByPosition positionOfSlider'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Layout-Paned'",			"comment" : [				"A layout with two **adjustable** panels. ",				"A paned layout manages two and only two children, a first and a second one.",				"",				"From that perspective, a paned layout is like a `SpBoxLayout`: it places childen in vertical or horizontal fashion, but it will add a splitter in between, that user can drag to resize the panel."			],			"category" : "Spec2-Layout-Paned"		},		"PragmaMenuAndShortcutRegistration" : {			"hash" : 438528,			"definition" : "Object subclass: #PragmaMenuAndShortcutRegistration\r\tinstanceVariableNames: 'items currentRoot platform model'\r\tclassVariableNames: ''\r\tpackage: 'MenuRegistration-Core'",			"comment" : [				"A PragmaMenuAndShortcutRegistration is the list items holder"			],			"category" : "MenuRegistration-Core"		},		"DAPackage" : {			"hash" : 4731904,			"definition" : "Object subclass: #DAPackage\r\tinstanceVariableNames: 'dependencies included inStack tarjanIndex tarjanLowLink bfsParent seen rPackageSet'\r\tclassVariableNames: ''\r\tpackage: 'Tool-DependencyAnalyser-Core'",			"comment" : [				"I am a PDPackage and i represent a package (RPackageSet) and all his dependencies (PDPackageDependency).",				"",				"Instance variables :",				"",				"\t- dependencies : a collection of PDPackageDependency (actually the nodes of a graph dependency, from a source PDPackage to a target PDPackage)",				"\t- included : says if the PDPackage is included or not in the set of packages at the beginning.",				"\t- rpackage : the instance of asRPackageSet \t",				"\t- inStack : useful for tarjan algorithm and cycle algorithm. It avoid stack access",				"\t- tarjanIndex and tarjanLowLink : integer for the tarjan algorithm.",				"\t- bfsParent : see cycle algorithm",				"\t- seen : says if all dependencies have been added to the Package"			],			"category" : "Tool-DependencyAnalyser-Core"		},		"Random" : {			"hash" : 1104384,			"definition" : "Object subclass: #Random\r\tinstanceVariableNames: 'seed a m q r'\r\tclassVariableNames: ''\r\tpackage: 'Random-Core-Base'",			"comment" : [				"This Random Number Generator graciously contributed by David N. Smith.  It is an adaptation of the Park-Miller RNG [1] which uses Floats to avoid the need for LargeInteger arithmetic.",				"",				"If you just want a quick random integer, use:",				"\t\t10 atRandom",				"Every integer interval can give a random number:",				"\t\t(6 to: 12) atRandom",				"SequenceableCollections can give randomly selected elements:",				"\t\t'pick one of these letters randomly' atRandom",				"SequenceableCollections also respond to shuffled, as in:",				"\t\t($A to: $Z) shuffled",				"",				"The correct way to use class Random is to store one in an instance or class variable:",				"\t\tmyGenerator := Random new.",				"Then use it every time you need another number between 0.0 and 1.0 (excluding)",				"\t\tmyGenerator next",				"You can also generate a positive integer",				"\t\tmyGenerator nextInteger: 10",				"\t\t",				"[1] 'Random Number Generators:  Good Ones Are Hard to Find' ",				"by Stephen K. Park and Keith W. Miller ",				"(Comm. Asso. Comp. Mach., 31(10):1192--1201, 1988). http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf"			],			"category" : "Random-Core-Base"		},		"ExceptionSet" : {			"hash" : 954880,			"definition" : "Object subclass: #ExceptionSet\r\tinstanceVariableNames: 'exceptions'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Exceptions'",			"comment" : [				"An ExceptionSet is a grouping of exception handlers which acts as a single handler.  Within the group, the most recently added handler will be the last handler found during a handler search (in the case where more than one handler in the group is capable of handling a given exception). "			],			"category" : "Kernel-Exceptions"		},		"ZnChunkedReadStream" : {			"hash" : 1403648,			"definition" : "Object subclass: #ZnChunkedReadStream\r\tinstanceVariableNames: 'stream chunk position limit atEnd totalSize chunkCount extraHeaders'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Streaming'",			"comment" : [				"I am ZnChunkedReadStream, implementing HTTP 1.1 chunked transfer encoding on a wrapped streams.",				"",				"Clients should read me until I am atEnd.",				"",				"After I am completely read, I can tell you my totalSize and optional extraHeaders.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Streaming"		},		"LayoutClassScope" : {			"hash" : 814336,			"definition" : "AbstractLayoutScope variableSubclass: #LayoutClassScope\r\tinstanceVariableNames: 'parentScope'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Layout'",			"comment" : [				"I am layout scope for classes."			],			"category" : "Kernel-Layout"		},		"RubParagraphDecorator class" : {			"hash" : 2037504,			"definition" : "RubParagraphDecorator class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a decorator for the paragraph of a text area. I can be used to draw something on the paragraph "			],			"category" : "Rubric-Editing-Core"		},		"CoFetcherSequence" : {			"hash" : 6476544,			"definition" : "CoFetcher subclass: #CoFetcherSequence\r\tinstanceVariableNames: 'subcompletions'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Core'",			"comment" : [				"I'm a fetcher composed of a sequence of subfetchers. ",				"When executed, I execute my subfetchers one by one.",				"",				"Sequences are created by sending the message #, between two fetchers."			],			"category" : "HeuristicCompletion-Model-Core"		},		"ZnPositionableReadStream" : {			"hash" : 1217536,			"definition" : "Object subclass: #ZnPositionableReadStream\r\tinstanceVariableNames: 'stream buffer count index delta'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnPositionableReadStream.",				"I am polymorphic with (the most used/important methods of) ReadStream and PositionableStream.",				"",				"I wrap another read stream and store the elements that I read in a sliding circular buffer so that I am able to go back to any position inside that buffer. ",				"",				"Essentially, I implement #position and #position: to be used to back out of reading ahead.",				"",				"Note that the size of my buffer limits how far I can go backwards. A SubscriptOutOfBounds exception will be signalled when an attempt is made to go too far backwards.",				"",				"The index returned by #position should be considered abstract, without concrete meaning, but it is currently implemented as the count of elements read by #next on the wrapped stream. On a simple stream over an in memory collection, that will be equivalent to an integer index into that collection. But on network streams or streams that were already further along, this will no longer be the case.",				"",				"The most elementary example of my capabilities can be seen in my implementation of #peek. See also the unit tests #testPlainExcursion and #testSearch",				"",				"Of course, backing out of an excursion is only possible within the window of the buffer size.",				"",				"Implementation",				"",				"- stream <ReadStream> the read stream that I wrap and add positioning to",				"- buffer <String|ByteArray> sliding, circular buffer",				"- index <PositiveInteger> zero based index into buffer, where next will be stored",				"- count <PositiveInteger> number of next operations done on wrapped stream",				"- delta <PositiveInteger> number of positions that I was moved backwards",				"",				"The real core methods are #next, #atEnd, #position and #position: and are used to implement the rest.",				"",				"Part of Zinc HTTP Components"			],			"category" : "Zinc-Character-Encoding-Core"		},		"FLMapper" : {			"hash" : 740864,			"definition" : "Object subclass: #FLMapper\r\tinstanceVariableNames: 'next analysis'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Mappers'",			"comment" : [				"The purpose of my hierarchy is to map objects with clusters."			],			"category" : "Fuel-Core-Mappers"		},		"STONCStyleCommentsSkipStream" : {			"hash" : 344320,			"definition" : "Object subclass: #STONCStyleCommentsSkipStream\r\tinstanceVariableNames: 'stream peekedCharacter delimiter escape'\r\tclassVariableNames: ''\r\tpackage: 'STON-Core-Reader'",			"comment" : [				"I am STONCStyleCommentsSkipStream, a character ReadStream wrapping another character ReadStream. I skip C style comments, much like a classic C preprocessor.",				"",				"C, C++, Java, JavaScript style comments are either the multiline",				"",				"\t/* a comment */",				"\t",				"or the single line, up to end of line",				"",				"\t// a comment ",				"\t",				"I deal with any end of line convention. Multiline comments cannot be nested. ",				"",				"You create me #on: another character ReadStream. ",				"",				"Here is an example:",				"",				"\t(STONCStyleCommentsSkipStream on: 'abc/*comment*/def' readStream) upToEnd.",				"\t",				"Comments inside single and double quote delimited strings are ignored. Backslash escapes for single and double quotes inside strings are honored."			],			"category" : "STON-Core-Reader"		},		"SpMorphicMillerAdapter" : {			"hash" : 966912,			"definition" : "SpMorphicLayoutAdapter subclass: #SpMorphicMillerAdapter\r\tinstanceVariableNames: 'innerWidget lastExtent lastPageSize needRecalculatePages'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Morphic-Layout'",			"comment" : [				"I'm an adapter for Miller Layouts.",				"A paned layout will split (horizontally or vertically) panels (in fixed yet proportional spaces), ",				"and it will scroll the panels that exceed SpMillerLayout>>#visiblePages property.  "			],			"category" : "Spec2-Adapters-Morphic-Layout"		},		"AthensTextDisplayCommand" : {			"hash" : 900608,			"definition" : "Object subclass: #AthensTextDisplayCommand\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Athens-Text'",			"comment" : [				"An abstract base class for all text rendering commands.",				"",				"A text rendered takes a stream (or list) of my (sub)instances and in that way it renders the text"			],			"category" : "Athens-Text"		},		"SpMillerLayout" : {			"hash" : 555776,			"definition" : "SpExecutableLayout << #SpMillerLayout\r\ttraits: {TObservable};\r\tslots: {\r\t\t\t #direction .\r\t\t\t #spacing .\r\t\t\t #borderWidth .\r\t\t\t #visiblePages => ObservableSlot };\r\ttag: 'Miller';\r\tpackage: 'Spec2-Layout'",			"comment" : [				"I'm a layout to implement miller lists. ",				"Since I am intended to be used dynamically (adding/removing components on demand), I implement just `add:` and `remove:` related methods.",				"You can also control borderWith and spacing between elements."			],			"category" : "Spec2-Layout-Miller"		},		"CoHeuristicBuilder" : {			"hash" : 6481664,			"definition" : "Object subclass: #CoHeuristicBuilder\r\tinstanceVariableNames: 'heuristics'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-SystemIntegration'",			"comment" : [				"I am an heuristic builder.",				"I am composed with several small heuristics and generate a chain of responsibility from them in the right order.",				"",				"For example, given a list of heuristics:",				"",				"CoHeuristicBuilder new",				"\tadd: CoSelfMessageHeuristic new;",				"\tadd: CoSuperMessageHeuristic new;",				"\tadd: CoInitializeInferencedMessageHeuristic new;",				"\tyourself.",				"",				"I create the following chain:",				"",				"CoSelfMessageHeuristic -next-> CoSuperMessageHeuristic -next-> CoInitializeInferencedMessageHeuristic",				"\t",				"I am used also as a hook, that can be redefined in subclasses and build heuristics differently."			],			"category" : "HeuristicCompletion-Model-SystemIntegration"		},		"MetacelloMemberListSpec" : {			"hash" : 1486080,			"definition" : "MetacelloSpec subclass: #MetacelloMemberListSpec\r\tinstanceVariableNames: 'list memberMap'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Members'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tlist:\t\t<Object>",				"\tmemberMap:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-Core-Members"		},		"ZnEncodedReadStream" : {			"hash" : 1203456,			"definition" : "ZnEncodedStream subclass: #ZnEncodedReadStream\r\tinstanceVariableNames: 'peeked'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnEncodedReadStream, an abstract support class for read streams on a binary encoded wrapped stream.",				"",				"Part of Zinc HTTP Components"			],			"category" : "Zinc-Character-Encoding-Core"		},		"InflateStream" : {			"hash" : 1331456,			"definition" : "ReadStream subclass: #InflateStream\r\tinstanceVariableNames: 'state bitBuf bitPos source sourcePos sourceLimit litTable distTable sourceStream crc'\r\tclassVariableNames: 'BlockProceedBit BlockTypes FixedDistCodes FixedLitCodes MaxBits StateNewBlock StateNoMoreData'\r\tpackage: 'Compression-Streams'",			"comment" : [				"This class implements the Inflate decompression algorithm as defined by RFC1951 and used in PKZip, GZip and ZLib (and many, many more). It is a variant of the LZ77 compression algorithm described in",				"",				"[LZ77] Ziv J., Lempel A., \"A Universal Algorithm for Sequential Data Compression\", IEEE Transactions on Information Theory\", Vol. 23, No. 3, pp. 337-343.",				"",				"[RFC1951] Deutsch. P, \"DEFLATE Compressed Data Format Specification version 1.3\"",				"",				"For more information see the above mentioned RFC 1951 which can for instance be found at",				"",				"\thttp://www.leo.org/pub/comp/doc/standards/rfc/index.html",				"",				"Huffman Tree Implementation Notes:",				"===========================================",				"The huffman tree used for decoding literal, distance and length codes in the inflate algorithm has been encoded in a single Array. The tree is made up of subsequent tables storing all entries at the current bit depth. Each entry in the table (e.g., a 32bit Integer value) is either a leaf or a non-leaf node. Leaf nodes store the immediate value in its low 16 bits whereas non-leaf nodes store the offset of the subtable in its low 16bits. The high 8 bits of non-leaf nodes contain the number of additional bits needed for the sub table (the high 8 bits of leaf-nodes are always zero). The first entry in each table is always a non-leaf node indicating how many bits we need to fetch initially. We can thus travel down the tree as follows (written in sort-of-pseudocode the actual implementation can be seen in InflateStream>>decodeValueFrom:):",				"",				"\ttable := initialTable.",				"\tbitsNeeded := high 8 bits of (table at: 1).\t\t\"Determine initial bits\"",				"\ttable := initialTable + (low 16 bits of (table at: 1)). \"Determine start of first real table\"",				"\t[bits := fetch next bitsNeeded bits.\t\t\t\"Grab the bits\"",				"\tvalue := table at: bits.\t\t\t\t\t\t\"Lookup the value\"",				"\tvalue has high 8 bit set] whileTrue:[\t\t\"Check if it's leaf\"",				"\t\ttable := initialTable + (low 16 bits of value).\t\"No - compute new sub table start\"",				"\t\tbitsNeeded := high 8 bit of value].\t\t\"Compute additional number of bits needed\"",				"\t^value"			],			"category" : "Compression-Streams"		},		"LGitRevwalk" : {			"hash" : 7354368,			"definition" : "LGitRepositoryObject subclass: #LGitRevwalk\r\tinstanceVariableNames: 'currentCommit hasNext sorting'\r\tclassVariableNames: ''\r\tpackage: 'LibGit-Core-HelperObjects'",			"comment" : [				"See [https://libgit2.org/libgit2/#HEAD/group/revwalk](https://libgit2.org/libgit2/#HEAD/group/revwalk)"			],			"category" : "LibGit-Core-HelperObjects"		},		"PluggableMenuSpec" : {			"hash" : 438016,			"definition" : "Object subclass: #PluggableMenuSpec\r\tinstanceVariableNames: 'label model items parentMenu'\r\tclassVariableNames: ''\r\tpackage: 'MenuRegistration-Core'",			"comment" : [				"I'm a spec for a menu. The World menu pragma based registration uses it for now. I'm moved in this package so that later we can decide what to do with it. ",				"We could probably avoid MenuSpec and just use MenuMorph instead. "			],			"category" : "MenuRegistration-Core"		},		"IRRemoteArray" : {			"hash" : 1232128,			"definition" : "Object subclass: #IRRemoteArray\r\tinstanceVariableNames: 'size index'\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-Bytecode'",			"comment" : [				"I model the TempVector for the decompiler"			],			"category" : "OpalCompiler-Core-Bytecode"		},		"SharedRandom" : {			"hash" : 1128960,			"definition" : "Random subclass: #SharedRandom\r\tinstanceVariableNames: 'mutex'\r\tclassVariableNames: ''\r\tpackage: 'Random-Core-Base'",			"comment" : [				"I represent a Random number generator that can be shaded between different code.",				"",				"I wrap the access to my parent's functionality (#next, #nextInteger: and #next:into:)  through a mutex making me safe for multi threaded use.",				"",				"To access the default shared random number generator, do:",				"",				"\tSharedRandom globalGenerator.",				"\t",				"In principle it is better to use a shared generator since multiple users will create a more random pattern."			],			"category" : "Random-Core-Base"		},		"WeakSet" : {			"hash" : 809728,			"definition" : "Set subclass: #WeakSet\r\tinstanceVariableNames: 'flag'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Weak-Base'",			"comment" : [				"I'm a Set with weak elements. ",				"",				"Implementation.",				"",				"\tflag is a special object that indicates that at a given slot the set has a free entry."			],			"category" : "Collections-Weak-Base"		},		"OSSDLPasteEventFilter" : {			"hash" : 4929792,			"definition" : "Object subclass: #OSSDLPasteEventFilter\r\tinstanceVariableNames: 'next lastEvents currentState'\r\tclassVariableNames: ''\r\tpoolDictionaries: 'SDL2Constants'\r\tpackage: 'OSWindow-SDL2-Base'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcurrentState:\t\t<Object>",				"\tlastEvents:\t\t<Object>",				"\tnext:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "OSWindow-SDL2-Base"		},		"MTSession" : {			"hash" : 2280960,			"definition" : "Object subclass: #MTSession\r\tinstanceVariableNames: 'stackCounter trackers home'\r\tclassVariableNames: 'forbiddenMethods'\r\tpackage: 'MethodTracker'",			"comment" : [				"I am a container of method trackers and I manage their installation, execution and uninstallation."			],			"category" : "MethodTracker"		},		"SpBaseEventDefinition class" : {			"hash" : 580864,			"definition" : "SpBaseEventDefinition class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a base of event definitions for `SpEventHandler.` ",				"My children will define (and install in an adaptor/widget) a specific kind of low-level event."			],			"category" : "Spec2-Core-Base-Event"		},		"WeakKeyDictionary" : {			"hash" : 1177344,			"definition" : "Dictionary subclass: #WeakKeyDictionary\r\tinstanceVariableNames: 'expired finalizer'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Weak-Dictionaries'",			"comment" : [				"I am a dictionary holding only weakly on my keys. This is a bit dangerous since at any time my keys can go away. Clients are responsible to register my instances by WeakArray such that the appropriate actions can be taken upon loss of any keys. As key may disappear at any time, my reported size may be greater than the number of keys encountered in iterations.",				"",				"See WeakRegistry for an example of use.",				"",				"Implementation notes:",				"",				"I am a set of WeakAssociations. Each WeakAssociation can be in one of three states: a key is present, or the key has been garbage-collected, or the association is expired (meaning that the value has also been released). During finalization, associations with no key expire, but I still keep them to avoid rehashing the entire set. When adding a new entry, the new entry can either go into a slot that is nil, or one that has an expired association. I keep a count of expired associations and rehash when there are too many (currently, if they account for more than 25% of the space)."			],			"category" : "Collections-Weak-Dictionaries"		},		"WeakValueDictionary" : {			"hash" : 1179904,			"definition" : "Dictionary subclass: #WeakValueDictionary\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Weak-Dictionaries'",			"comment" : [				"I am a dictionary holding only weakly on my values. This mean that as long as my values are referenced (via a strong reference) by other objects, they will stay but in case no object is referencing them during a garbage collection, then my value will vanish and I will return nil instead.",				"Clients may expect to get a nil value for any object they request since they can be garbaged collected.",				"",				"Implementation details:",				"",				"To store keys and values I am using a WeakValueAssociation. This association has a key and a value.",				"The key is the key the user is giving me, but if the user gives me a nil as value, I wrap it into a CollectionElement. This is explained because I need to do a distinction between nil values given by the user and nil values created by the garbage collection.",				"When the value of a WeakValueAssociation is a collection element wrapper on nil, then it means the user directly gave us a nil. In case the value of the WeakValueAssociation is nil, it means that we originally had a value that was garbaged collected."			],			"category" : "Collections-Weak-Dictionaries"		},		"SpGridLayoutBuilder" : {			"hash" : 558336,			"definition" : "Object subclass: #SpGridLayoutBuilder\r\tinstanceVariableNames: 'currentColumn currentRow layout'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Layout-Grid'",			"comment" : [				"I build Grid Layouts using a fluent API.",				"You do not need to give elements position on the grid but you rather add elements in order (raw by raw) and you tell me when I need to go to next raw.",				"",				"Example:",				"SpGridLayout build: [ :builder |",				"\tbuilder",				"\t\tadd: 'Name:';",				"\t\tadd: #nameTextInput;",				"\t\tnextRow;",				"\t\tadd: 'Surname:';",				"\t\tadd: #surnameTextInput;",				"\t\tnextRow ]"			],			"category" : "Spec2-Layout-Grid"		},		"MCDefinitionIndex" : {			"hash" : 274688,			"definition" : "Object subclass: #MCDefinitionIndex\r\tinstanceVariableNames: 'definitions'\r\tclassVariableNames: ''\r\tpackage: 'Monticello-Patching'",			"comment" : [				"I'm a simple container of MCDefinitions which can be added or removed."			],			"category" : "Monticello-Patching"		},		"AtomicQueueItem" : {			"hash" : 1092352,			"definition" : "Object subclass: #AtomicQueueItem\r\tinstanceVariableNames: 'next object'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Atomic-Elements'",			"comment" : [				"I am a queue item, used by atomic queues.",				"All my new instances are circular i.e. next = self"			],			"category" : "Collections-Atomic-Elements"		},		"RunArray" : {			"hash" : 1661184,			"definition" : "SequenceableCollection subclass: #RunArray\r\tinstanceVariableNames: 'runs values lastIndex lastRun lastOffset'\r\tclassVariableNames: ''\r\tpackage: 'Text-Core-Utilities'",			"comment" : [				"My instances provide space-efficient storage of data which tends to be constant over long runs of the possible indices. Essentially repeated values are stored singly and then associated with a \"run\" length that denotes the number of consecutive occurrences of the value.",				"",				"My two important variables are",				"\truns\tAn array of how many elements are in each run",				"\tvalues\tAn array of what the value is over those elements",				"",				"The variables lastIndex, lastRun and lastOffset cache the last access",				"so that streaming through RunArrays is not an N-squared process.",				"",				"Many complexities of access can be bypassed by using the method",				"\tRunArray withStartStopAndValueDo:"			],			"category" : "Text-Core-Utilities"		},		"CharacterSet" : {			"hash" : 884224,			"definition" : "Collection subclass: #CharacterSet\r\tinstanceVariableNames: 'map'\r\tclassVariableNames: 'CrLf'\r\tpackage: 'Collections-Support-CharacterSets'",			"comment" : [				"A set of characters: ",				"",				"- Lookups for inclusion are very fast.",				"- CharacterSet will automatically convert itself to a WideCharacterSet if a character with value > 255 is added.",				"- Tests for inclusion can be done on any Character value (up to Character maxVal).",				"",				"See the package comments for a description of how each of the classes in Collections-Support-CharacterSets is used."			],			"category" : "Collections-Support-CharacterSets"		},		"IceEmptyNode" : {			"hash" : 7564544,			"definition" : "IceAbstractNode subclass: #IceEmptyNode\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Changes'",			"comment" : [				"I am a null object representing an empty node of a tree. I'm used together with IceNode."			],			"category" : "Iceberg-Changes"		},		"SourceFileCharacterReadWriteStream" : {			"hash" : 1141760,			"definition" : "Object subclass: #SourceFileCharacterReadWriteStream\r\tinstanceVariableNames: 'readStream writeStream'\r\tclassVariableNames: ''\r\tpackage: 'System-Sources-Streams'",			"comment" : [				"I am a read-write character stream. I am mainly used to open the Pharo source and changes files."			],			"category" : "System-Sources-Streams"		},		"Link" : {			"hash" : 1023488,			"definition" : "Object subclass: #Link\r\tinstanceVariableNames: 'nextLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."			],			"category" : "Collections-Support-Links"		},		"WeakRegistry" : {			"hash" : 1184256,			"definition" : "Collection subclass: #WeakRegistry\r\tinstanceVariableNames: 'list valueDictionary sema'\r\tclassVariableNames: 'Default'\r\tpackage: 'Collections-Weak-Registration'",			"comment" : [				"This kind of WeakRegistry using a new VM feature,",				"which allows a more robust finalization support.",				"",				"In contrast to old implementation, it doesn't spending linear time , checking what elements became garbage."			],			"category" : "Collections-Weak-Registration"		},		"CTOrderPreservingTree" : {			"hash" : 2270208,			"definition" : "Object subclass: #CTOrderPreservingTree\r\tinstanceVariableNames: 'parent'\r\tclassVariableNames: ''\r\tpackage: 'Containers-OrderPreservingTree'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tparent:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-OrderPreservingTree"		},		"CBCritiquesRuleGroup" : {			"hash" : 2619648,			"definition" : "Object subclass: #CBCritiquesRuleGroup\r\tinstanceVariableNames: 'name rules'\r\tclassVariableNames: ''\r\tpackage: 'NewTools-CodeCritiques-Utilities'",			"comment" : [				"I represent a group of rules in StCritiqueBrowserPresenter tree view."			],			"category" : "NewTools-CodeCritiques-Utilities"		},		"MetacelloLoadData" : {			"hash" : 337664,			"definition" : "Object subclass: #MetacelloLoadData\r\tinstanceVariableNames: 'dataMap versionInfoMap packageNameMap'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-MC-Loaders'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tdataMap:\t\t<Object>",				"\tpackageNameMap:\t\t<Object>",				"\tversionInfoMap:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-MC-Loaders"		},		"DependentsArray" : {			"hash" : 934912,			"definition" : "Collection weakSubclass: #DependentsArray\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Models'",			"comment" : [				"Act as an array of (weak) dependents of some object.",				"",				"When dependents are reclaimed, they are replaced by an UndefinedObject in the DependentsArray.",				"This is why instances of this class will take care to iterate only on non nil elements.",				"These nil also cause loops written as (1 to: self size do: [:i | (self at: i) doSomething]) to be inefficient.",				"This is because #size and #at: both require scanning for nils.",				"For this reason, DependentsArray though sequenceable, is not a subclass of SequenceableCollection."			],			"category" : "Kernel-Models"		},		"TextEmphasis" : {			"hash" : 1658112,			"definition" : "TextAttribute subclass: #TextEmphasis\r\tinstanceVariableNames: 'emphasisCode setMode'\r\tclassVariableNames: ''\r\tpackage: 'Text-Core-Attributes'",			"comment" : [				"A TextEmphasis, encodes a characteristic applicable to all fonts.  The encoding is as follows:",				"\t1\tbold",				"\t2\titallic",				"\t4\tunderlined",				"\t8\tnarrow",				"\t16\tstruck out"			],			"category" : "Text-Core-Attributes"		},		"AbstractBinaryFileStream" : {			"hash" : 834816,			"definition" : "Stream subclass: #AbstractBinaryFileStream\r\tinstanceVariableNames: 'file handle forWrite semaphore semaphoreIndex'\r\tclassVariableNames: ''\r\tpackage: 'Files-Streams'",			"comment" : [				"Provides a simple, platform-independent, file stream. I am ",				"- binary",				"- not buffered",				"- provide no encoding/conversions",				"",				"### Examples of usage",				"```",				"\"Creating a file\"",				"stream := (File named: 'asd.txt' asFileReference fullName) readStream.",				"",				"\"Accessing the stream properties\"",				"stream position.",				"stream atEnd.",				"",				"\"Writing\"",				"stream nextPut: 17.",				"stream nextPutAll: 'sdd'.",				"",				"\"Reading\"",				"stream next.",				"stream next: 2.",				"",				"\"Skipping\"",				"stream skip: 2. ",				"",				"\"reading up to something\"",				"stream upTo: 23.",				"stream upToAnyOf: #[ 13 30 ].",				"",				"\"peeking\"",				"stream peek.",				"```"			],			"category" : "Files-Streams"		},		"SpCollectionListModel" : {			"hash" : 586752,			"definition" : "Object << #SpCollectionListModel\r\ttraits: {TObservable};\r\tslots: {\r\t\t\t #announcer .\r\t\t\t #collection .\r\t\t\t #sorting => ObservableSlot };\r\ttag: 'Widgets-Table';\r\tpackage: 'Spec2-Core'",			"comment" : [				"A collection model to be used with list presenters (`SpAbstractListPresenter` and children).",				"",				"This model receives a `collection` of elements to be served to the list."			],			"category" : "Spec2-Core-Widgets-Table"		},		"SourceFileBufferedReadWriteStream" : {			"hash" : 1140992,			"definition" : "Object subclass: #SourceFileBufferedReadWriteStream\r\tinstanceVariableNames: 'innerStream buffer bufferLength streamSize bufferOffset nextPosition isDirty'\r\tclassVariableNames: ''\r\tpackage: 'System-Sources-Streams'",			"comment" : [				"I am Buffered Read Write Stream.",				"I should only be used in the SourceFile implementation"			],			"category" : "System-Sources-Streams"		},		"MetacelloRepositoriesSpec" : {			"hash" : 323328,			"definition" : "MetacelloMemberListSpec subclass: #MetacelloRepositoriesSpec\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Metacello-MC-Specs'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-MC-Specs"		},		"ZdcAbstractSocketStream" : {			"hash" : 310528,			"definition" : "Object subclass: #ZdcAbstractSocketStream\r\tinstanceVariableNames: 'socket readBuffer writeBuffer timeout debug'\r\tclassVariableNames: ''\r\tpackage: 'Zodiac-Core'",			"comment" : [				"I am ZdcAbstractSocketStream, a binary read/write stream for socket communication.",				"",				"Interally, IO is done through a read and a write ZdcIOBuffer.",				"",				"I am abstract, my subclasses should implement actual IO through a delegate."			],			"category" : "Zodiac-Core"		},		"DoubleLink" : {			"hash" : 1627136,			"definition" : "Object subclass: #DoubleLink\r\tinstanceVariableNames: 'value nextLink previousLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-DoubleLinkedList-Base'",			"comment" : [				"I am DoubleLink, the elementary part of a DoubleLinkedList.",				"",				"I hold a value, as well as a link to my successor (nextLink) and to my predecessor (previousLink) - both can be nil."			],			"category" : "Collections-DoubleLinkedList-Base"		},		"LinkedList" : {			"hash" : 1024256,			"definition" : "SequenceableCollection subclass: #LinkedList\r\tinstanceVariableNames: 'firstLink lastLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"I am a sequential collection where adjecent objects are linked.",				"I can store any kind of objects that I will wrap into a Link (See implementation points).",				"I act pretty much as an OrderedCollection, but my access times differs: the method #atIndex: is depending of the number of elements so is not constant. In the worse case, the whole list must be crossed.",				"Using the message #addFirst: / #removeLast causes the receiver to behave as a stack; using #addLast: / #removeFirst causes the receiver to behave as a queue.",				"",				"I use the Link class (or his subclasses) in my implementation. ",				"",				"### Public API and Key Messages",				"",				"- #new / #withAll: aCollection / #with: anObject \tare common constructors",				"- #add: anObject / #at: anIndex put: anObject \tallow to add new elements to myself.",				"- #remove: anObject \tallow to remove an element.",				"- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock \tare common iterators.",				"",				"### Example ",				"",				" \t\"There is many ways to create a LinkedList, here are some:\"",				"```",				"\tlinkedList := LinkedList new.",				"\tlinkedList",				"\t\tadd: 'one';",				"\t\tadd: 'two';",				"\t\taddFirst: 'zero';",				"\t\taddLast: 'three'.",				"\tlinkedList.\t\t\"returns: a LinkedList('zero' 'one' 'two' 'three')\"",				"",				"\t\"or\"",				"\tlinkedList := LinkedList with: 'one' with: 'two' with: 'three'.",				"\tlinkedList.\t\t\"returns: a LinkedList('one' 'two' 'three')\"",				"",				"\t\"or from an other collection (here an Array)\"",				"\tlinkedList := LinkedList withAll: #('one' 'two' 'three').",				"\tlinkedList.\t\t\"returns: a LinkedList('one' 'two' 'three')\"",				"",				"\t\"Some manipulations\"",				"\tlinkedList := LinkedList new.",				"\tlinkedList",				"\t\tadd: 1;",				"\t\tadd: 2.",				"\tlinkedList.\t\t\"returns: a LinkedList(1 2)\"",				"\tlinkedList remove: 1.",				"\tlinkedList.\t\t\"returns: a LinkedList(2)\"",				"",				"\t\"A last one\"",				"\tlinkedList := LinkedList with: $b with: $c with: $a.",				"\tlinkedList sort: [ :first :second | first < second ].\t\t\t\"returns: a LinkedList($a $b $c)\"",				"\tlinkedList collect: [ :element | element asUppercase ].\t\"returns:  a LinkedList($A $B $C)\"",				"\tlinkedList select: [ :element | element >= $b ].\t\t\t\"returns:  a LinkedList($b $c)\"",				"\tlinkedList do: [ :element | element inspect ].",				"\tlinkedList asArray\t\t\t\t\t\t\t\t\t\"returns: #($a $b $c)\"",				"```",				"\t\t\t",				"### Internal Representation and Key Implementation Points.",				"",				"Instance Variables",				"- firstLink:\t\t <Link> \tA link that contains the first value of the LinkedList.",				"- lastLink:\t\t <Link> \tA link that contains the last value of the LinkedList.",				"",				"If you attempt to add any object into a LinkedList that is not a Link, it will automatically be wrapped by a ValueLink."			],			"category" : "Collections-Sequenceable-Base"		},		"STONShortListWriter" : {			"hash" : 347392,			"definition" : "STONListWriter subclass: #STONShortListWriter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'STON-Core-Writer'",			"comment" : [				"STONShortArrayWriter helps in writing short array based STON representations."			],			"category" : "STON-Core-Writer"		},		"PragmaCollector" : {			"hash" : 1452288,			"definition" : "Model subclass: #PragmaCollector\r\tinstanceVariableNames: 'collected filter announcing selectors'\r\tclassVariableNames: ''\r\tpackage: 'PragmaCollector-Base'",			"comment" : [				"Note: In most cases it is better to use the class side methods of Pragma instead.",				"",				"PragmaCollector is useful if a client needs to be notified if pragmas are added or removed.",				"If you do not store the PragmaCollector instance, you most likely can just use the API of Pragma directly.",				"",				"A PragmaCollector is used in order to collect some Pragma instances. A PragmaCollector makes use of SystemChangeNotifier event notifications in order to maintain its contents up-to-date according to its filter: when a method is added, removed or updated, if the method is defined with a pragma which is acceptable according to its filter, then the collector contents is updated. A PragmaCollector makes use of an announcer in order to notify all registered listeners when a pragma is added, removed or updated. A PragmaAnnouncement is announced when a Pragma is added, removed or updated. Corresponding announcement classes are, respectiveley, PragmaAdded, PragmaRemoved and PragmaUpdated. ",				"",				"The filter is applied to all Pragmas or (faster) pragmas with the selectors defined by #selectors:.",				"",				"Explore the result of the expression below. In the collected instance variable should be stored all pragmas of the system:",				"---------------------------",				"(PragmaCollector filter: [:pragma | true]) reset",				"---------------------------",				"",				"In the following example, collected pragma are thoses with the 'primitive:' selector (<primitive:>)",				"---------------------------",				"(PragmaCollector filter: [:prg | prg selector = 'primitive:']) reset.",				"---------------------------",				"",				"In this case it is faster to specify selectors via #selector, as this avoids to iterate over all Pragmas of the system:",				"",				"---------------------------",				"(PragmaCollector selectors: #(primitive:)) reset",				"---------------------------",				"",				"We can specify both the selectors and an additional filter, e.g. filter for all Pragmas named primitive: in methods that have one Argument:",				" ",				"---------------------------",				"(PragmaCollector ",				"\tselectors: #(primitive:) ",				"\tfilter: [:prg | prg methodSelector numArgs = 1] ) reset",				"---------------------------",				"",				"Instance Variables\t",				"\tannouncer:\t\t<Announcer>\t",				"\tcollected:\t\t<Collection>",				"\tfilter:\t\t\t<Block or MessageSend>",				"\tselector:      <Array of symbols>",				"\t\t\t\t",				"announcer",				"\tthe announcer which is used to announce the adding, the removing or the updating of a method with an acceptable pragma declaration",				"",				"collected\t\t",				"\tthe current collection of Pragma",				"\t",				"filter",				"\ta block or a message send which is used in order to filter the pragma. This is a one argument valuable. When evaluated, the candidate pragam is passed as argument and the result must be a boolean. ",				"\t"			],			"category" : "PragmaCollector-Base"		},		"ReadWriteStream" : {			"hash" : 1106688,			"definition" : "WriteStream subclass: #ReadWriteStream\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I represent an accessor for a sequence of objects. My instances can both read and store objects."			],			"category" : "Collections-Streams-Base"		},		"RSCompositeAnimation" : {			"hash" : 7027968,			"definition" : "RSAbstractAnimation subclass: #RSCompositeAnimation\r\tinstanceVariableNames: 'animations'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Animation-Core'",			"comment" : [				"Super class of composite animations"			],			"category" : "Roassal3-Animation-Core"		},		"CTLinksLinkTest" : {			"hash" : 2245120,			"definition" : "TestCase subclass: #CTLinksLinkTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Links-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Links-Tests"		},		"Srfi41Stream" : {			"hash" : 8132352,			"definition" : "Object subclass: #Srfi41Stream\r\tinstanceVariableNames: 'promise'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Srfi41'",			"comment" : [				"Title",				"Streams",				"Author",				"Philip L. Bewig",				"Status",				"This SRFI is currently in ``final'' status. To see an explanation of each status that a SRFI can hold, see here. To comment on this SRFI, please mailto:srfi minus 41 at srfi dot schemers dot org. See instructions here to subscribe to the list. You can access the discussion via the archive of the mailing list. You can access post-finalization messages via the archive of the mailing list.",				"Received: 2007/10/24",				"Revised: 2007/11/14",				"Revised: 2007/11/14",				"Revised: 2007/12/17",				"Final: 2008/01/24",				"Post-finalization improvement to stream-constant: 2015/11/2",				"Draft: 2007/10/21 - 2007/12/22",				"Abstract",				"Streams, sometimes called lazy lists, are a sequential data structure containing elements computed only on demand. A stream is either null or is a pair with a stream in its cdr. Since elements of a stream are computed only when accessed, streams can be infinite. Once computed, the value of a stream element is cached in case it is needed again.",				"",				"Streams without memoization were first described by Peter Landin in 1965. Memoization became accepted as an essential feature of streams about a decade later. Today, streams are the signature data type of functional programming languages such as Haskell.",				"",				"This Scheme Request for Implementation describes two libraries for operating on streams: a canonical set of stream primitives and a set of procedures and syntax derived from those primitives that permits convenient expression of stream operations. They rely on facilities provided by R6RS, including libraries, records, and error reporting. To load both stream libraries, say:",				"",				"(import (streams))",				"",				"Rationale",				"Harold Abelson and Gerald Jay Sussman discuss streams at length, giving a strong justification for their use. The streams they provide are represented as a cons pair with a promise to return a stream in its cdr; for instance, a stream with elements the first three counting numbers is represented conceptually as (cons 1 (delay (cons 2 (delay (cons 3 (delay '())))))). Philip Wadler, Walid Taha and David MacQueen describe such streams as odd because, regardless of their length, the parity of the number of constructors (delay, cons, '()) in the stream is odd.",				"",				"The streams provided here differ from those of Abelson and Sussman, being represented as promises that contain a cons pair with a stream in its cdr; for instance, the stream with elements the first three counting numbers is represented conceptually as (delay (cons 1 (delay (cons 2 (delay (cons 3 (delay '()))))))); this is an even stream because the parity of the number of constructors in the stream is even.",				"",				"Even streams are more complex than odd streams in both definition and usage, but they offer a strong benefit: they fix the off-by-one error of odd streams. Wadler, Taha and MacQueen show, for instance, that an expression like (stream->list 4 (stream-map / (stream-from 4 -1))) evaluates to (1/4 1/3 1/2 1) using even streams but fails with a divide-by-zero error using odd streams, because the next element in the stream, which will be 1/0, is evaluated before it is accessed. This extra bit of laziness is not just an interesting oddity; it is vitally critical in many circumstances, as will become apparent below.",				"",				"When used effectively, the primary benefit of streams is improved modularity. Consider a process that takes a sequence of items, operating on each in turn. If the operation is complex, it may be useful to split it into two or more procedures in which the partially-processed sequence is an intermediate result. If that sequence is stored as a list, the entire intermediate result must reside in memory all at once; however, if the intermediate result is stored as a stream, it can be generated piecemeal, using only as much memory as required by a single item. This leads to a programming style that uses many small operators, each operating on the sequence of items as a whole, similar to a pipeline of unix commands.",				"",				"In addition to improved modularity, streams permit a clear exposition of backtracking algorithms using the “stream of successes” technique, and they can be used to model generators and co-routines. The implicit memoization of streams makes them useful for building persistent data structures, and the laziness of streams permits some multi-pass algorithms to be executed in a single pass. Savvy programmers use streams to enhance their programs in countless ways.",				"",				"There is an obvious space/time trade-off between lists and streams; lists take more space, but streams take more time (to see why, look at all the type conversions in the implementation of the stream primitives). Streams are appropriate when the sequence is truly infinite, when the space savings are needed, or when they offer a clearer exposition of the algorithms that operate on the sequence.",				"",				"Specification",				"The (streams primitive) library",				"The (streams primitive) library provides two mutually-recursive abstract data types: An object of the stream abstract data type is a promise that, when forced, is either stream-null or is an object of type stream-pair. An object of the stream-pair abstract data type contains a stream-car and a stream-cdr, which must be a stream. The essential feature of streams is the systematic suspensions of the recursive promises between the two data types.",				"",				"α stream",				"  :: (promise stream-null)",				"  |  (promise (α stream-pair))",				"α stream-pair",				"  :: (promise α) × (promise (α stream))",				"The object stored in the stream-car of a stream-pair is a promise that is forced the first time the stream-car is accessed; its value is cached in case it is needed again. The object may have any type, and different stream elements may have different types. If the stream-car is never accessed, the object stored there is never evaluated. Likewise, the stream-cdr is a promise to return a stream, and is only forced on demand.",				"",				"This library provides eight operators: constructors for stream-null and stream-pairs, type recognizers for streams and the two kinds of streams, accessors for both fields of a stream-pair, and a lambda that creates procedures that return streams.",				"",				"constructor: stream-null",				"Stream-null is a promise that, when forced, is a single object, distinguishable from all other objects, that represents the null stream. Stream-null is immutable and unique.",				"",				"constructor: (stream-cons object stream)",				"Stream-cons is a macro that accepts an object and a stream and creates a newly-allocated stream containing a promise that, when forced, is a stream-pair with the object in its stream-car and the stream in its stream-cdr. Stream-cons must be syntactic, not procedural, because neither object nor stream is evaluated when stream-cons is called. Since stream is not evaluated, when the stream-pair is created, it is not an error to call stream-cons with a stream that is not of type stream; however, doing so will cause an error later when the stream-cdr of the stream-pair is accessed. Once created, a stream-pair is immutable; there is no stream-set-car! or stream-set-cdr! that modifies an existing stream-pair. There is no dotted-pair or improper stream as with lists.",				"",				"recognizer: (stream? object)",				"Stream? is a procedure that takes an object and returns #t if the object is a stream and #f otherwise. If object is a stream, stream? does not force its promise. If (stream? obj) is #t, then one of (stream-null? obj) and (stream-pair? obj) will be #t and the other will be #f; if (stream? obj) is #f, both (stream-null? obj) and (stream-pair? obj) will be #f.",				"",				"recognizer: (stream-null? object)",				"Stream-null? is a procedure that takes an object and returns #t if the object is the distinguished null stream and #f otherwise. If object is a stream, stream-null? must force its promise in order to distinguish stream-null from stream-pair.",				"",				"recognizer: (stream-pair? object)",				"Stream-pair? is a procedure that takes an object and returns #t if the object is a stream-pair constructed by stream-cons and #f otherwise. If object is a stream, stream-pair? must force its promise in order to distinguish stream-null from stream-pair.",				"",				"accessor: (stream-car stream)",				"Stream-car is a procedure that takes a stream and returns the object stored in the stream-car of the stream. Stream-car signals an error if the object passed to it is not a stream-pair. Calling stream-car causes the object stored there to be evaluated if it has not yet been; the object’s value is cached in case it is needed again.",				"",				"accessor: (stream-cdr stream)",				"Stream-cdr is a procedure that takes a stream and returns the stream stored in the stream-cdr of the stream. Stream-cdr signals an error if the object passed to it is not a stream-pair. Calling stream-cdr does not force the promise containing the stream stored in the stream-cdr of the stream.",				"",				"lambda: (stream-lambda args body)",				"Stream-lambda creates a procedure that returns a promise to evaluate the body of the procedure. The last body expression to be evaluated must yield a stream. As with normal lambda, args may be a single variable name, in which case all the formal arguments are collected into a single list, or a list of variable names, which may be null if there are no arguments, proper if there are an exact number of arguments, or dotted if a fixed number of arguments is to be followed by zero or more arguments collected into a list. Body must contain at least one expression, and may contain internal definitions preceding any expressions to be evaluated.",				"",				"",				"(define strm123",				"  (stream-cons 1",				"    (stream-cons 2",				"      (stream-cons 3",				"        stream-null))))",				"(stream-car strm123) ⇒ 1",				"",				"(stream-car (stream-cdr strm123) ⇒ 2",				"",				"",				"(stream-pair?",				"  (stream-cdr",				"    (stream-cons (/ 1 0) stream-null))) ⇒ #f",				"(stream? (list 1 2 3)) ⇒ #f",				"",				"",				"(define iter",				"  (stream-lambda (f x)",				"    (stream-cons x (iter f (f x)))))",				"(define nats (iter (lambda (x) (+ x 1)) 0))",				"",				"(stream-car (stream-cdr nats)) ⇒ 1",				"",				"",				"(define stream-add",				"  (stream-lambda (s1 s2)",				"    (stream-cons",				"      (+ (stream-car s1) (stream-car s2))",				"      (stream-add (stream-cdr s1)",				"                  (stream-cdr s2)))))",				"(define evens (stream-add nats nats))",				"",				"(stream-car evens) ⇒ 0",				"",				"(stream-car (stream-cdr evens)) ⇒ 2",				"",				"(stream-car (stream-cdr (stream-cdr evens))) ⇒ 4",				"",				"The (streams derived) library",				"The (streams derived) library provides useful procedures and syntax that depend on the primitives defined above. In the operator templates given below, an ellipsis ... indicates zero or more repetitions of the preceding subexpression and square brackets […] indicate optional elements. In the type annotations given below, square brackets […] refer to lists, curly braces {…} refer to streams, and nat refers to exact non-negative integers.",				"",				"syntax: (define-stream (name args) body)",				"Define-stream creates a procedure that returns a stream, and may appear anywhere a normal define may appear, including as an internal definition, and may have internal definitions of its own, including other define-streams. The defined procedure takes arguments in the same way as stream-lambda. Define-stream is syntactic sugar on stream-lambda; see also stream-let, which is also a sugaring of stream-lambda.",				"",				"A simple version of stream-map that takes only a single input stream calls itself recursively:",				"",				"",				"(define-stream (stream-map proc strm)",				"  (if (stream-null? strm)",				"      stream-null",				"      (stream-cons",				"        (proc (stream-car strm))",				"        (stream-map proc (stream-cdr strm))))))",				"procedure: (list->stream list-of-objects)",				"[α] → {α}",				"List->stream takes a list of objects and returns a newly-allocated stream containing in its elements the objects in the list. Since the objects are given in a list, they are evaluated when list->stream is called, before the stream is created. If the list of objects is null, as in (list->stream '()), the null stream is returned. See also stream.",				"",				"(define strm123 (list->stream '(1 2 3)))",				"",				"",				"; fails with divide-by-zero error",				"(define s (list->stream (list 1 (/ 1 0) -1)))",				"procedure: (port->stream [port])",				"port → {char}",				"Port->stream takes a port and returns a newly-allocated stream containing in its elements the characters on the port. If port is not given it defaults to the current input port. The returned stream has finite length and is terminated by stream-null.",				"",				"It looks like one use of port->stream would be this:",				"",				"",				"(define s ;wrong!",				"  (with-input-from-file filename",				"    (lambda () (port->stream))))",				"But that fails, because with-input-from-file is eager, and closes the input port prematurely, before the first character is read. To read a file into a stream, say:",				"",				"",				"(define-stream (file->stream filename)",				"  (let ((p (open-input-file filename)))",				"    (stream-let loop ((c (read-char p)))",				"      (if (eof-object? c)",				"          (begin (close-input-port p)",				"                 stream-null)",				"          (stream-cons c",				"            (loop (read-char p)))))))",				"syntax: (stream object ...)",				"Stream is syntax that takes zero or more objects and creates a newly-allocated stream containing in its elements the objects, in order. Since stream is syntactic, the objects are evaluated when they are accessed, not when the stream is created. If no objects are given, as in (stream), the null stream is returned. See also list->stream.",				"",				"(define strm123 (stream 1 2 3))",				"",				"",				"; (/ 1 0) not evaluated when stream is created",				"(define s (stream 1 (/ 1 0) -1))",				"procedure: (stream->list [n] stream)",				"nat × {α} → [α]",				"Stream->list takes a natural number n and a stream and returns a newly-allocated list containing in its elements the first n items in the stream. If the stream has less than n items all the items in the stream will be included in the returned list. If n is not given it defaults to infinity, which means that unless stream is finite stream->list will never return.",				"",				"",				"(stream->list 10",				"  (stream-map (lambda (x) (* x x))",				"    (stream-from 0)))",				"  ⇒ (0 1 4 9 16 25 36 49 64 81)",				"procedure: (stream-append stream ...)",				"{α} ... → {α}",				"Stream-append returns a newly-allocated stream containing in its elements those elements contained in its input streams, in order of input. If any of the input streams is infinite, no elements of any of the succeeding input streams will appear in the output stream; thus, if x is infinite, (stream-append x y) ≡ x. See also stream-concat.",				"",				"Quicksort can be used to sort a stream, using stream-append to build the output; the sort is lazy; so if only the beginning of the output stream is needed, the end of the stream is never sorted.",				"",				"",				"(define-stream (qsort lt? strm)",				"  (if (stream-null? strm)",				"      stream-null",				"      (let ((x (stream-car strm))",				"            (xs (stream-cdr strm)))",				"        (stream-append",				"          (qsort lt?",				"            (stream-filter",				"              (lambda (u) (lt? u x))",				"              xs))",				"          (stream x)",				"          (qsort lt?",				"            (stream-filter",				"              (lambda (u) (not (lt? u x)))",				"              xs))))))",				"Note also that, when used in tail position as in qsort, stream-append does not suffer the poor performance of append on lists. The list version of append requires re-traversal of all its list arguments except the last each time it is called. But stream-append is different. Each recursive call to stream-append is suspended; when it is later forced, the preceding elements of the result have already been traversed, so tail-recursive loops that produce streams are efficient even when each element is appended to the end of the result stream. This also implies that during traversal of the result only one promise needs to be kept in memory at a time.",				"",				"procedure: (stream-concat stream)",				"{{α}} ... → {α}",				"Stream-concat takes a stream consisting of one or more streams and returns a newly-allocated stream containing all the elements of the input streams. If any of the streams in the input stream is infinite, any remaining streams in the input stream will never appear in the output stream. See also stream-append.",				"",				"",				"(stream->list",				"  (stream-concat",				"    (stream",				"      (stream 1 2) (stream) (stream 3 2 1))))",				"  ⇒ (1 2 3 2 1)",				"The permutations of a finite stream can be determined by interleaving each element of the stream in all possible positions within each permutation of the other elements of the stream. Interleave returns a stream of streams with x inserted in each possible position of yy:",				"",				"",				"(define-stream (interleave x yy)",				"  (stream-match yy",				"    (() (stream (stream x)))",				"    ((y . ys)",				"      (stream-append",				"        (stream (stream-cons x yy))",				"        (stream-map",				"          (lambda (z) (stream-cons y z))",				"          (interleave x ys))))))",				"",				"(define-stream (perms xs)",				"  (if (stream-null? xs)",				"      (stream (stream))",				"      (stream-concat",				"        (stream-map",				"          (lambda (ys)",				"            (interleave (stream-car xs) ys))",				"          (perms (stream-cdr xs))))))",				"procedure: (stream-constant object ...)",				"α ... → {α}",				"Stream-constant takes one or more objects and returns a newly-allocated stream containing in its elements the objects, repeating the objects in succession forever.",				"",				"(stream-constant 1) ⇒ 1 1 1 ...",				"",				"(stream-constant #t #f) ⇒ #t #f #t #f #t #f ...",				"",				"procedure: (stream-drop n stream) procedure",				"nat × {α} → {α}",				"Stream-drop returns the suffix of the input stream that starts at the next element after the first n elements. The output stream shares structure with the input stream; thus, promises forced in one instance of the stream are also forced in the other instance of the stream. If the input stream has less than n elements, stream-drop returns the null stream. See also stream-take.",				"",				"",				"(define (stream-split n strm)",				"  (values (stream-take n strm)",				"          (stream-drop n strm)))",				"procedure: (stream-drop-while pred? stream)",				"(α → boolean) × {α} → {α}",				"Stream-drop-while returns the suffix of the input stream that starts at the first element x for which (pred? x) is #f. The output stream shares structure with the input stream. See also stream-take-while.",				"",				"Stream-unique creates a new stream that retains only the first of any sub-sequences of repeated elements.",				"",				"",				"(define-stream (stream-unique eql? strm)",				"  (if (stream-null? strm)",				"      stream-null",				"      (stream-cons (stream-car strm)",				"        (stream-unique eql?",				"          (stream-drop-while",				"            (lambda (x)",				"              (eql? (stream-car strm) x))",				"            strm)))))",				"procedure: (stream-filter pred? stream)",				"(α → boolean) × {α} → {α}",				"Stream-filter returns a newly-allocated stream that contains only those elements x of the input stream for which (pred? x) is non-#f.",				"",				"",				"(stream-filter odd? (stream-from 0))",				"   ⇒ 1 3 5 7 9 ...",				"procedure: (stream-fold proc base stream)",				"(α × β → α) × α × {β} → α",				"Stream-fold applies a binary procedure to base and the first element of stream to compute a new base, then applies the procedure to the new base and the next element of stream to compute a succeeding base, and so on, accumulating a value that is finally returned as the value of stream-fold when the end of the stream is reached. Stream must be finite, or stream-fold will enter an infinite loop. See also stream-scan, which is similar to stream-fold, but useful for infinite streams. For readers familiar with other functional languages, this is a left-fold; there is no corresponding right-fold, since right-fold relies on finite streams that are fully-evaluated, at which time they may as well be converted to a list.",				"",				"Stream-fold is often used to summarize a stream in a single value, for instance, to compute the maximum element of a stream.",				"",				"",				"(define (stream-maximum lt? strm)",				"  (stream-fold",				"    (lambda (x y) (if (lt? x y) y x))",				"    (stream-car strm)",				"    (stream-cdr strm)))",				"Sometimes, it is useful to have stream-fold defined only on non-null streams:",				"",				"",				"(define (stream-fold-one proc strm)",				"  (stream-fold proc",				"    (stream-car strm)",				"    (stream-cdr strm)))",				"Stream-minimum can then be defined as:",				"",				"",				"(define (stream-minimum lt? strm)",				"  (stream-fold-one",				"    (lambda (x y) (if (lt? x y) x y))",				"    strm))",				"Stream-fold can also be used to build a stream:",				"",				"",				"(define-stream (isort lt? strm)",				"    (define-stream (insert strm x)",				"      (stream-match strm",				"        (() (stream x))",				"        ((y . ys)",				"          (if (lt? y x)",				"              (stream-cons y (insert ys x))",				"              (stream-cons x strm)))))",				"    (stream-fold insert stream-null strm))",				"procedure: (stream-for-each proc stream ...)",				"(α × β × ...) × {α} × {β} ...",				"Stream-for-each applies a procedure element-wise to corresponding elements of the input streams for its side-effects; it returns nothing. Stream-for-each stops as soon as any of its input streams is exhausted.",				"",				"The following procedure displays the contents of a file:",				"",				"",				"(define (display-file filename)",				"  (stream-for-each display",				"    (file->stream filename)))",				"procedure: (stream-from first [step])",				"number × number → {number}",				"Stream-from creates a newly-allocated stream that contains first as its first element and increments each succeeding element by step. If step is not given it defaults to 1. First and step may be of any numeric type. Stream-from is frequently useful as a generator in stream-of expressions. See also stream-range for a similar procedure that creates finite streams.",				"",				"Stream-from could be implemented as (stream-iterate (lambda (x) (+ x step)) first).",				"",				"(define nats (stream-from 0)) ⇒ 0 1 2 ...",				"",				"(define odds (stream-from 1 2)) ⇒ 1 3 5 ...",				"",				"procedure: (stream-iterate proc base)",				"(α → α) × α → {α}",				"Stream-iterate creates a newly-allocated stream containing base in its first element and applies proc to each element in turn to determine the succeeding element. See also stream-unfold and stream-unfolds.",				"",				"",				"(stream-iterate (lambda (x) (+ x 1)) 0)",				"  ⇒ 0 1 2 3 4 ...",				"",				"(stream-iterate (lambda (x) (* x 2)) 1)",				"  ⇒ 1 2 4 8 16 ...",				"Given a seed between 0 and 232, exclusive, the following expression creates a stream of pseudo-random integers between 0 and 232, exclusive, beginning with seed, using the method described by Stephen Park and Keith Miller:",				"",				"",				"(stream-iterate",				"  (lambda (x) (modulo (* x 16807) 2147483647))",				"  seed)",				"Successive values of the continued fraction shown below approach the value of the “golden ratio” φ ≈ 1.618:",				"",				"Continued fraction",				"",				"The fractions can be calculated by the stream",				"",				"(stream-iterate (lambda (x) (+ 1 (/ x))) 1)",				"",				"procedure: (stream-length stream)",				"{α} → nat",				"Stream-length takes an input stream and returns the number of elements in the stream; it does not evaluate its elements. Stream-length may only be used on finite streams; it enters an infinite loop with infinite streams.",				"",				"(stream-length strm123) ⇒ 3",				"",				"syntax: (stream-let tag ((var expr) ...) body)",				"Stream-let creates a local scope that binds each variable to the value of its corresponding expression. It additionally binds tag to a procedure which takes the bound variables as arguments and body as its defining expressions, binding the tag with stream-lambda. Tag is in scope within body, and may be called recursively. When the expanded expression defined by the stream-let is evaluated, stream-let evaluates the expressions in its body in an environment containing the newly-bound variables, returning the value of the last expression evaluated, which must yield a stream.",				"",				"Stream-let provides syntactic sugar on stream-lambda, in the same manner as normal let provides syntactic sugar on normal lambda. However, unlike normal let, the tag is required, not optional, because unnamed stream-let is meaningless.",				"",				"Stream-member returns the first stream-pair of the input strm with a stream-car x that satisfies (eql? obj x), or the null stream if x is not present in strm.",				"",				"",				"(define-stream (stream-member eql? obj strm)",				"  (stream-let loop ((strm strm))",				"    (cond ((stream-null? strm) strm)",				"          ((eql? obj (stream-car strm)) strm)",				"          (else (loop (stream-cdr strm))))))",				"procedure: (stream-map proc stream ...)",				"(α × β ... → ω) × {α} × {β} ... → {ω}",				"Stream-map applies a procedure element-wise to corresponding elements of the input streams, returning a newly-allocated stream containing elements that are the results of those procedure applications. The output stream has as many elements as the minimum-length input stream, and may be infinite.",				"",				"(define (square x) (* x x))",				"",				"(stream-map square (stream 9 3)) ⇒ 81 9",				"",				"",				"(define (sigma f m n)",				"  (stream-fold + 0",				"    (stream-map f (stream-range m (+ n 1)))))",				"(sigma square 1 100) ⇒ 338350",				"",				"In some functional languages, stream-map takes only a single input stream, and stream-zipwith provides a companion function that takes multiple input streams.",				"",				"syntax: (stream-match stream clause ...)",				"Stream-match provides the syntax of pattern-matching for streams. The input stream is an expression that evaluates to a stream. Clauses are of the form (pattern [fender] expr), consisting of a pattern that matches a stream of a particular shape, an optional fender that must succeed if the pattern is to match, and an expression that is evaluated if the pattern matches. There are four types of patterns:",				"",				"() — Matches the null stream.",				"(pat0 pat1 ...) — Matches a finite stream with length exactly equal to the number of pattern elements.",				"(pat0 pat1 ... . patrest) — Matches an infinite stream, or a finite stream with length at least as great as the number of pattern elements before the literal dot.",				"pat — Matches an entire stream. Should always appear last in the list of clauses; it’s not an error to appear elsewhere, but subsequent clauses could never match.",				"Each pattern element pati may be either:",				"",				"An identifier — Matches any stream element. Additionally, the value of the stream element is bound to the variable named by the identifier, which is in scope in the fender and expression of the corresponding clause. Each identifier in a single pattern must be unique.",				"A literal underscore — Matches any stream element, but creates no bindings.",				"The patterns are tested in order, left-to-right, until a matching pattern is found; if fender is present, it must evaluate as non-#f for the match to be successful. Pattern variables are bound in the corresponding fender and expression. Once the matching pattern is found, the corresponding expression is evaluated and returned as the result of the match. An error is signaled if no pattern matches the input stream.",				"",				"Stream-match is often used to distinguish null streams from non-null streams, binding head and tail:",				"",				"",				"(define (len strm)",				"  (stream-match strm",				"    (() 0)",				"    ((head . tail) (+ 1 (len tail)))))",				"Fenders can test the common case where two stream elements must be identical; the else pattern is an identifier bound to the entire stream, not a keyword as in cond.",				"",				"",				"(stream-match strm",				"  ((x y . _) (equal? x y) 'ok)",				"  (else 'error))",				"A more complex example uses two nested matchers to match two different stream arguments; (stream-merge lt? . strms) stably merges two or more streams ordered by the lt? predicate:",				"",				"",				"(define-stream (stream-merge lt? . strms)",				"  (define-stream (merge xx yy)",				"    (stream-match xx (() yy) ((x . xs)",				"      (stream-match yy (() xx) ((y . ys)",				"        (if (lt? y x)",				"            (stream-cons y (merge xx ys))",				"            (stream-cons x (merge xs yy))))))))",				"  (stream-let loop ((strms strms))",				"    (cond ((null? strms) stream-null)",				"          ((null? (cdr strms)) (car strms))",				"          (else (merge (car strms)",				"                       (apply stream-merge lt?",				"                         (cdr strms)))))))",				"syntax: (stream-of expr clause ...)",				"Stream-of provides the syntax of stream comprehensions, which generate streams by means of looping expressions. The result is a stream of objects of the type returned by expr. There are four types of clauses:",				"",				"(var in stream-expr) — Loop over the elements of stream-expr, in order from the start of the stream, binding each element of the stream in turn to var. Stream-from and stream-range are frequently useful as generators for stream-expr.",				"(var is expr) — Bind var to the value obtained by evaluating expr.",				"(pred? expr) — Include in the output stream only those elements x for which (pred? x) is non-#f.",				"The scope of variables bound in the stream comprehension is the clauses to the right of the binding clause (but not the binding clause itself) plus the result expression.",				"",				"When two or more generators are present, the loops are processed as if they are nested from left to right; that is, the rightmost generator varies fastest. A consequence of this is that only the first generator may be infinite and all subsequent generators must be finite. If no generators are present, the result of a stream comprehension is a stream containing the result expression; thus, (stream-of 1) produces a finite stream containing only the element 1.",				"",				"",				"(stream-of (* x x)",				"  (x in (stream-range 0 10))",				"  (even? x))",				"  ⇒ 0 4 16 36 64",				"",				"(stream-of (list a b)",				"  (a in (stream-range 1 4))",				"  (b in (stream-range 1 3))) ",				"  ⇒ (1 1) (1 2) (2 1) (2 2) (3 1) (3 2)",				"",				"(stream-of (list i j)",				"  (i in (stream-range 1 5))",				"  (j in (stream-range (+ i 1) 5)))",				"  ⇒ (1 2) (1 3) (1 4) (2 3) (2 4) (3 4)",				"procedure: (stream-range first past [step])",				"number × number × number → {number}",				"Stream-range creates a newly-allocated stream that contains first as its first element and increments each succeeding element by step. The stream is finite and ends before past, which is not an element of the stream. If step is not given it defaults to 1 if first is less than past and -1 otherwise. First, past and step may be of any numeric type. Stream-range is frequently useful as a generator in stream-of expressions. See also stream-from for a similar procedure that creates infinite streams.",				"",				"(stream-range 0 10) ⇒ 0 1 2 3 4 5 6 7 8 9",				"",				"(stream-range 0 10 2) → 0 2 4 6 8",				"",				"Successive elements of the stream are calculated by adding step to first, so if any of first, past or step are inexact, the length of the output stream may differ from (ceiling (- (/ (- past first) step) 1).",				"",				"procedure: (stream-ref stream n)",				"{α} × nat → α",				"Stream-ref returns the nth element of stream, counting from zero. An error is signaled if n is greater than or equal to the length of stream.",				"",				"",				"(define (fact n)",				"  (stream-ref",				"    (stream-scan * 1 (stream-from 1))",				"    n))",				"procedure: (stream-reverse stream)",				"{α} → {α}",				"Stream-reverse returns a newly-allocated stream containing the elements of the input stream but in reverse order. Stream-reverse may only be used with finite streams; it enters an infinite loop with infinite streams. Stream-reverse does not force evaluation of the elements of the stream.",				"",				"",				"> (define s (stream 1 (/ 1 0) -1))",				"> (define r (stream-reverse s))",				"> (stream-ref r 0)",				"> (stream-ref r 2)",				"1",				"> (stream-ref r 1)",				"error: division by zero",				"procedure: (stream-scan proc base stream)",				"(α × β → α) × α × {β} → {α}",				"Stream-scan accumulates the partial folds of an input stream into a newly-allocated output stream. The output stream is the base followed by (stream-fold proc base (stream-take i stream)) for each of the first i elements of stream.",				"",				"",				"(stream-scan + 0 (stream-from 1))",				"  ⇒ (stream 0 1 3 6 10 15 ...)",				"",				"(stream-scan * 1 (stream-from 1))",				"  ⇒ (stream 1 1 2 6 24 120 ...)",				"procedure: (stream-take n stream)",				"nat × {α} → {α}",				"Stream-take takes a non-negative integer n and a stream and returns a newly-allocated stream containing the first n elements of the input stream. If the input stream has less than n elements, so does the output stream. See also stream-drop.",				"",				"Mergesort splits a stream into two equal-length pieces, sorts them recursively and merges the results:",				"",				"",				"(define-stream (msort lt? strm)",				"  (let* ((n (quotient (stream-length strm) 2))",				"         (ts (stream-take n strm))",				"         (ds (stream-drop n strm)))",				"    (if (zero? n)",				"        strm",				"        (stream-merge lt?",				"          (msort < ts) (msort < ds)))))",				"procedure: (stream-take-while pred? stream)",				"(α → boolean) × {α} → {α}",				"Stream-take-while takes a predicate and a stream and returns a newly-allocated stream containing those elements x that form the maximal prefix of the input stream for which (pred? x) is non-#f. See also stream-drop-while.",				"",				"",				"(stream-car",				"  (stream-reverse",				"    (stream-take-while",				"      (lambda (x) (< x 1000))",				"        primes))) ⇒ 997",				"procedure: (stream-unfold map pred? gen base)",				"(α → β) × (α → boolean) × (α → α) × α → {β}",				"Stream-unfold is the fundamental recursive stream constructor. It constructs a stream by repeatedly applying gen to successive values of base, in the manner of stream-iterate, then applying map to each of the values so generated, appending each of the mapped values to the output stream as long as (pred? base) is non-#f. See also stream-iterate and stream-unfolds.",				"",				"The expression below creates the finite stream 0 1 4 9 16 25 36 49 64 81. Initially the base is 0, which is less than 10, so map squares the base and the mapped value becomes the first element of the output stream. Then gen increments the base by 1, so it becomes 1; this is less than 10, so map squares the new base and 1 becomes the second element of the output stream. And so on, until the base becomes 10, when pred? stops the recursion and stream-null ends the output stream.",				"",				"",				"(stream-unfold",				"  (lambda (x) (expt x 2)) ; map",				"  (lambda (x) (< x 10))   ; pred?",				"  (lambda (x) (+ x 1))    ; gen",				"  0)                      ; base",				"procedure: (stream-unfolds proc seed)",				"(α → (values α × β ...)) × α → (values {β} ...)",				"Stream-unfolds returns n newly-allocated streams containing those elements produced by successive calls to the generator proc, which takes the current seed as its argument and returns n+1 values",				"",				"(proc seed → seed result0 ... resultn-1",				"",				"where the returned seed is the input seed to the next call to the generator and resulti indicates how to produce the next element of the ith result stream:",				"",				"(value) — value is the next car of the result stream",				"#f — no value produced by this iteration of the generator proc for the result stream",				"() — the end of the result stream",				"It may require multiple calls of proc to produce the next element of any particular result stream. See also stream-iterate and stream-unfold.",				"",				"Stream-unfolds is especially useful when writing expressions that return multiple streams. For instance, (stream-partition pred? strm) is equivalent to",				"",				"",				"(values",				"  (stream-filter pred? strm)",				"  (stream-filter",				"    (lambda (x) (not (pred? x))) strm))",				"but only tests pred? once for each element of strm.",				"",				"",				"(define (stream-partition pred? strm)",				"  (stream-unfolds",				"    (lambda (s)",				"      (if (stream-null? s)",				"          (values s '() '())",				"          (let ((a (stream-car s))",				"                (d (stream-cdr s)))",				"            (if (pred? a)",				"                (values d (list a) #f)",				"                (values d #f (list a))))))",				"    strm))",				"",				"(call-with-values",				"  (lambda ()",				"    (stream-partition odd?",				"      (stream-range 1 6)))",				"  (lambda (odds evens)",				"    (list (stream->list odds)",				"          (stream->list evens))))",				"  ⇒ ((1 3 5) (2 4))",				"procedure: (stream-zip stream ...)",				"{α} × {β} × ... → {[α β ...]}",				"Stream-zip takes one or more input streams and returns a newly-allocated stream in which each element is a list (not a stream) of the corresponding elements of the input streams. The output stream is as long as the shortest input stream, if any of the input streams is finite, or is infinite if all the input streams are infinite.",				"",				"A common use of stream-zip is to add an index to a stream, as in (stream-finds eql? obj strm), which returns all the zero-based indices in strm at which obj appears; (stream-find eql? obj strm) returns the first such index, or #f if obj is not in strm.",				"",				"",				"(define-stream (stream-finds eql? obj strm)",				"  (stream-of (car x)",				"    (x in (stream-zip (stream-from 0) strm))",				"    (eql? obj (cadr x))))",				"",				"(define (stream-find eql? obj strm)",				"  (stream-car",				"    (stream-append",				"      (stream-finds eql? obj strm)",				"      (stream #f))))",				"",				"(stream-find char=? #\\l",				"  (list->stream",				"    (string->list \"hello\"))) ⇒ 2",				"",				"(stream-find char=? #\\l",				"  (list->stream",				"    (string->list \"goodbye\"))) ⇒ #f",				"Stream-find is not as inefficient as it looks; although it calls stream-finds, which finds all matching indices, the matches are computed lazily, and only the first match is needed for stream-find.",				"",				"Utilities",				"Streams, being the signature structured data type of functional programming languages, find useful expression in conjunction with higher-order functions. Some of these higher-order functions, and their relationship to streams, are described below.",				"",				"The identity and constant procedures are frequently useful as the recursive base for maps and folds; (identity obj) always returns obj, and (const obj) creates a procedure that takes any number of arguments and always returns the same obj, no matter its arguments:",				"",				"(define (identity obj) obj)",				"",				"(define (const obj) (lambda x obj))",				"",				"Many of the stream procedures take a unary predicate that accepts an element of a stream and returns a boolean. Procedure (negate pred?) takes a unary predicate and returns a new unary predicate that, when called, returns the opposite boolean value as the original predicate.",				"",				"",				"(define (negate pred?)",				"  (lambda (x) (not (pred? x))))",				"Negate is useful for procedures like stream-take-while that take a predicate, allowing them to be used in the opposite direction from which they were written; for instance, with the predicate reversed, stream-take-while becomes stream-take-until. Stream-remove is the opposite of stream-filter:",				"",				"",				"(define-stream (stream-remove pred? strm)",				"  (stream-filter (negate pred?) strm))",				"A section is a procedure which has been partially applied to some of its arguments; for instance, (double x), which returns twice its argument, is a partial application of the multiply operator to the number 2. Sections come in two kinds: left sections partially apply arguments starting from the left, and right sections partially apply arguments starting from the right. Procedure (lsec proc args ...) takes a procedure and some prefix of its arguments and returns a new procedure in which those arguments are partially applied. Procedure (rsec proc args ...) takes a procedure and some reversed suffix of its arguments and returns a new procedure in which those arguments are partially applied.",				"",				"",				"(define (lsec proc . args)",				"  (lambda x (apply proc (append args x))))",				"",				"(define (rsec proc . args)",				"  (lambda x (apply proc (reverse",				"    (append (reverse args) (reverse x))))))",				"Since most of the stream procedures take a stream as their last (right-most) argument, left sections are particularly useful in conjunction with streams.",				"",				"(define stream-sum (lsec stream-fold + 0))",				"",				"Function composition creates a new function by partially applying multiple functions, one after the other. In the simplest case there are only two functions, f and g, composed as ((compose f g) ≡ x)); the composition can be bound to create a new function, as in (define fg (compose f g)). Procedure (compose proc ...) takes one or more procedures and returns a new procedure that performs the same action as the individual procedures would if called in succession.",				"",				"",				"(define (compose . fns)",				"  (let comp ((fns fns))",				"    (cond",				"      ((null? fns) 'error)",				"      ((null? (cdr fns)) (car fns))",				"      (else",				"        (lambda args",				"          (call-with-values",				"            (lambda ()",				"              (apply",				"                (comp (cdr fns))",				"                args))",				"            (car fns)))))))",				"Compose works with sections to create succinct but highly expressive procedure definitions. The expression to compute the squares of the integers from 1 to 10 given above at stream-unfold could be written by composing stream-map, stream-take-while, and stream-iterate:",				"",				"",				"((compose",				"  (lsec stream-map (rsec expt 2))",				"  (lsec stream-take-while (negate (rsec > 10)))",				"  (lsec stream-iterate (rsec + 1)))",				" 1)",				"Examples",				"The examples below show a few of the myriad ways streams can be exploited, as well as a few ways they can trip the unwary user. All the examples are drawn from published sources; it is instructive to compare the Scheme versions to the originals in other languages.",				"",				"Infinite streams",				"As a simple illustration of infinite streams, consider this definition of the natural numbers:",				"",				"",				"(define nats",				"  (stream-cons 0",				"    (stream-map add1 nats)))",				"The recursion works because it is offset by one from the initial stream-cons. Another sequence that uses the offset trick is this definition of the fibonacci numbers:",				"",				"",				"(define fibs",				"  (stream-cons 1",				"    (stream-cons 1",				"      (stream-map +",				"        fibs",				"        (stream-cdr fibs)))))",				"Yet another sequence that uses the same offset trick is the Hamming numbers, named for the mathematician and computer scientist Richard Hamming, defined as all numbers that have no prime factors greater than 5; in other words, Hamming numbers are all numbers expressible as 2i·3j·5k, where i, j and k are non-negative integers. The Hamming sequence starts with 1 2 3 4 5 6 8 9 10 12 and is computed starting with 1, taking 2, 3 and 5 times all the previous elements with stream-map, then merging sub-streams and eliminating duplicates.",				"",				"",				"(define hamming",				"  (stream-cons 1",				"    (stream-unique =",				"      (stream-merge <",				"        (stream-map (lsec * 2) hamming)",				"        (stream-map (lsec * 3) hamming)",				"        (stream-map (lsec * 5) hamming)))))",				"It is possible to have an infinite stream of infinite streams. Consider the definition of power-table:",				"",				"",				"(define power-table",				"  (stream-of",				"    (stream-of (expt m n)",				"      (m in (stream-from 1)))",				"      (n in (stream-from 2))))",				"which evaluates to an infinite stream of infinite streams:",				"",				"",				"(stream",				"  (stream 1 4 9 16 25 ...)",				"  (stream 1 8 27 64 125 ...)",				"  (stream 1 16 81 256 625 ...)",				"  ...)",				"But even though it is impossible to display power-table in its entirety, it is possible to select just part of it:",				"",				"",				"(stream->list 10 (stream-ref power-table 1))",				"  ⇒ (1 8 27 64 125 216 343 512 729 1000)",				"This example clearly shows that the elements of a stream are computed lazily, as they are needed; (stream-ref power-table 0) is not computed, even when its successor is displayed, since computing it would enter an infinite loop.",				"",				"Chris Reade shows how to calculate the stream of prime numbers according to the sieve of Eratosthenes, using a method that eliminates multiples of the sifting base with addition rather than division:",				"",				"",				"(define primes (let ()",				"  (define-stream (next base mult strm)",				"    (let ((first (stream-car strm))",				"          (rest (stream-cdr strm)))",				"      (cond ((< first mult)",				"              (stream-cons first",				"                (next base mult rest)))",				"            ((< mult first)",				"              (next base (+ base mult) strm))",				"            (else (next base",				"                    (+ base mult) rest)))))",				"  (define-stream (sift base strm)",				"    (next base (+ base base) strm))",				"  (define-stream (sieve strm)",				"    (let ((first (stream-car strm))>",				"          (rest (stream-cdr strm)))",				"      (stream-cons first",				"        (sieve (sift first rest)))))",				"  (sieve (stream-from 2))))",				"A final example of infinite streams is a functional pearl from Jeremy Gibbons, David Lester and Richard Bird that enumerates the positive rational numbers without duplicates:",				"",				"",				"(define rats",				"  (stream-iterate",				"    (lambda (x)",				"      (let* ((n (floor x)) (y (- x n)))",				"        (/ (- n -1 y))))",				"    1))",				"Backtracking via the stream of successes",				"Philip Wadler describes the stream of successes technique that uses streams to perform backtracking search. The basic idea is that each procedure returns a stream of possible results, so that its caller can decide which result it wants; an empty stream signals failure, and causes backtracking to a previous choice point. The stream of successes technique is useful because the program is written as if to simply enumerate all possible solutions; no backtracking is explicit in the code.",				"",				"The Eight Queens puzzle, which asks for a placement of eight queens on a chessboard so that none of them attack any other, is an example of a problem that can be solved using the stream of successes technique. The algorithm is to place a queen in the first column of a chessboard; any column is satisfactory. Then a queen is placed in the second column, in any position not held in check by the queen in the first column. Then a queen is placed in the third column, in any position not held in check by the queens in the first two columns. And so on, until all eight queens have been placed. If at any point there is no legal placement for the next queen, backtrack to a different legal position for the previous queens, and try again.",				"",				"The chessboard is represented as a stream of length m, where there are queens in the first m columns, each position in the stream representing the rank on which the queen appears in that column. For example, stream 4 6 1 5 2 8 3 7 represents the following chessboard:",				"",				"Chessboard",				"",				"Two queens at column i row j and column m row n check each other if their columns i and m are the same, or if their rows j and n are the same, or if they are on the same diagonal with i + j = m + n or i – j = m – n. There is no need to test the columns, because the placement algorithm enforces that they differ, so the check? procedure tests if two queens hold each other in check.",				"",				"",				"(define (check? i j m n)",				"  (or (= j n)",				"      (= (+ i j) (+ m n))",				"      (= (- i j) (- m n))))",				"The algorithm walks through the columns, extending position p by adding a new queen in row n with (stream-append p (stream n)). Safe? tests if it is safe to do so, using the utility procedure stream-and.",				"",				"",				"(define (stream-and strm)",				"  (let loop ((strm strm))",				"    (cond ((stream-null? strm) #t)",				"          ((not (stream-car strm)) #f)",				"          (else (loop (stream-cdr strm))))))",				"",				"(define (safe? p n)",				"  (let* ((len (stream-length p))",				"         (m (+ len 1)))",				"    (stream-and",				"      (stream-of",				"        (not (check? (car ij) (cadr ij) m n))",				"          (ij in (stream-zip",				"                   (stream-range 1 m)",				"                   p))))))",				"Procedure (queens m) returns all the ways that queens can safely be placed in the first m columns.",				"",				"",				"(define (queens m)",				"  (if (zero? m)",				"      (stream (stream))",				"      (stream-of (stream-append p (stream n))",				"        (p in (queens (- m 1)))",				"        (n in (stream-range 1 9))",				"        (safe? p n))))",				"To see the first solution to the Eight Queens problem, say",				"",				"(stream->list (stream-car (queens 8)))",				"",				"To see all 92 solutions, say",				"",				"",				"(stream->list",				"  (stream-map stream->list",				"    (queens 8)))",				"There is no explicit backtracking in the code. The stream-of expression in queens returns all possible streams that satisfy safe?; implicit backtracking occurs in the recursive call to queens.",				"",				"Generators and co-routines",				"It is possible to model generators and co-routines using streams. Consider the task, due to Carl Hewitt, of determining if two trees have the same sequence of leaves:",				"",				"(same-fringe? = '(1 (2 3)) '((1 2) 3)) ⇒ #t",				"",				"(same-fringe? = '(1 2 3) '(1 (3 2))) ⇒ #f",				"",				"The simplest solution is to flatten both trees into lists and compare them element-by-element:",				"",				"",				"(define (flatten tree)",				"  (cond ((null? tree) '())",				"        ((pair? (car tree))",				"          (append (flatten (car tree))",				"                  (flatten (cdr tree))))",				"        (else (cons (car tree)",				"                    (flatten (cdr tree))))))",				"",				"(define (same-fringe? eql? tree1 tree2)",				"  (let loop ((t1 (flatten tree1))",				"             (t2 (flatten tree2)))",				"    (cond ((and (null? t1) (null? t2)) #t)",				"          ((or (null? t1) (null? t2)) #f)",				"          ((not (eql? (car t1) (car t2))) #f)",				"          (else (loop (cdr t1) (cdr t2))))))",				"That works, but requires time to flatten both trees and space to store the flattened versions; if the trees are large, that can be a lot of time and space, and if the fringes differ, much of that time and space is wasted.",				"",				"Hewitt used a generator to flatten the trees one element at a time, storing only the current elements of the trees and the machines needed to continue flattening them, so same-fringe? could stop early if the trees differ. Dorai Sitaram presents both the generator solution and a co-routine solution, which both involve tricky calls to call-with-current-continuation and careful coding to keep them synchronized.",				"",				"An alternate solution flattens the two trees to streams instead of lists, which accomplishes the same savings of time and space, and involves code that looks little different than the list solution presented above:",				"",				"",				"(define-stream (flatten tree)",				"  (cond ((null? tree) stream-null)",				"        ((pair? (car tree))",				"          (stream-append",				"            (flatten (car tree))",				"            (flatten (cdr tree))))",				"        (else (stream-cons",				"                (car tree)",				"                (flatten (cdr tree))))))",				"",				"(define (same-fringe? eql? tree1 tree2)",				"  (let loop ((t1 (flatten tree1))",				"             (t2 (flatten tree2)))",				"    (cond ((and (stream-null? t1)",				"                (stream-null? t2)) #t)",				"          ((or  (stream-null? t1)",				"                (stream-null? t2)) #f)",				"          ((not (eql? (stream-car t1)",				"                      (stream-car t2))) #f)",				"          (else (loop (stream-cdr t1)",				"                      (stream-cdr t2))))))",				"Note that streams, a data structure, replace generators or co-routines, which are control structures, providing a fine example of how lazy streams enhance modularity.",				"",				"A pipeline of procedures",				"Another way in which streams promote modularity is enabling the use of many small procedures that are easily composed into larger programs, in the style of unix pipelines, where streams are important because they allow a large dataset to be processed one item at a time. Bird and Wadler provide the example of a text formatter. Their example uses right-folds:",				"",				"",				"(define (stream-fold-right f base strm) ",				"  (if (stream-null? strm)",				"      base",				"      (f (stream-car strm)",				"         (stream-fold-right f base",				"           (stream-cdr strm)))))",				"",				"(define (stream-fold-right-one f strm)",				"  (stream-match strm",				"  ((x) x)",				"  ((x . xs)",				"    (f x (stream-fold-right-one f xs)))))",				"Bird and Wadler define text as a stream of characters, and develop a standard package for operating on text, which they derive mathematically (this assumes the line-separator character is a single #\\newline):",				"",				"",				"(define (breakon a)",				"  (stream-lambda (x xss)",				"    (if (equal? a x)",				"        (stream-append (stream (stream)) xss)",				"        (stream-append",				"          (stream (stream-append",				"              (stream x) (stream-car xss)))",				"          (stream-cdr xss)))))",				"",				"(define-stream (lines strm) ",				"  (stream-fold-right",				"    (breakon #\\newline)",				"    (stream (stream))",				"    strm))",				"",				"(define-stream (words strm)",				"  (stream-filter stream-pair?",				"    (stream-fold-right",				"      (breakon #\\space)",				"      (stream (stream))",				"      strm)))",				"",				"(define-stream (paras strm)",				"  (stream-filter stream-pair?",				"    (stream-fold-right",				"      (breakon stream-null)",				"      (stream (stream))",				"      strm)))",				"",				"(define (insert a)",				"  (stream-lambda (xs ys)",				"    (stream-append xs (stream a) ys)))",				"",				"(define unlines",				"  (lsec stream-fold-right-one",				"    (insert #\\newline)))",				"",				"(define unwords",				"  (lsec stream-fold-right-one",				"    (insert #\\space)))",				"",				"(define unparas",				"  (lsec stream-fold-right-one",				"    (insert stream-null)))",				"These versatile procedures can be composed to count words, lines and paragraphs; the normalize procedure squeezes out multiple spaces and blank lines:",				"",				"",				"(define countlines",				"  (compose stream-length lines))",				"",				"(define countwords",				"  (compose stream-length",				"           stream-concat",				"           (lsec stream-map words)",				"           lines))",				"",				"(define countparas",				"  (compose stream-length paras lines))",				"",				"(define parse",				"  (compose (lsec stream-map",				"             (lsec stream-map words))",				"           paras",				"           lines))",				"",				"(define unparse",				"  (compose unlines",				"           unparas",				"           (lsec stream-map",				"             (lsec stream-map unwords))))",				"",				"(define normalize (compose unparse parse))",				"More useful than normalization is text-filling, which packs as many words onto each line as will fit.",				"",				"",				"(define (greedy m ws)",				"  (- (stream-length",				"       (stream-take-while (rsec <= m)",				"         (stream-scan",				"           (lambda (n word)",				"             (+ n (stream-length word) 1))",				"           -1",				"           ws))) 1))",				"",				"(define-stream (fill m ws)",				"  (if (stream-null? ws)",				"      stream-null",				"      (let* ((n (greedy m ws))",				"             (fstline (stream-take n ws))",				"             (rstwrds (stream-drop n ws)))",				"        (stream-append",				"          (stream fstline)",				"          (fill m rstwrds)))))",				"",				"(define linewords",				"  (compose stream-concat",				"           (lsec stream-map words)))",				"",				"(define textparas",				"  (compose (lsec stream-map linewords)",				"           paras",				"           lines))",				"",				"(define (filltext m strm)",				"  (unparse (stream-map (lsec fill m) (textparas strm))))",				"To display filename in lines of n characters, say:",				"",				"",				"(stream-for-each display",				"  (filltext n (file->stream filename)))",				"Though each operator performs only a single task, they can be composed powerfully and expressively. The alternative is to build a single monolithic procedure for each task, which would be harder and involve repetitive code. Streams ensure procedures are called as needed.",				"",				"Persistent data",				"Queues are one of the fundamental data structures of computer science. In functional languages, queues are commonly implemented using two lists, with the front half of the queue in one list, where the head of the queue can be accessed easily, and the rear half of the queue in reverse order in another list, where new items can easily be added to the end of a queue. The standard form of such a queue holds that the front list can only be null if the rear list is also null:",				"",				"(define queue-null (cons '() '())",				"",				"",				"(define (queue-null? obj)",				"  (and (pair? obj) (null? (car obj))))",				"",				"(define (queue-check f r)",				"  (if (null? f)",				"      (cons (reverse r) '())",				"      (cons f r)))",				"",				"(define (queue-snoc q x)",				"  (queue-check (car q) (cons x (cdr q))))",				"",				"(define (queue-head q)",				"  (if (null? (car q))",				"      (error \"empty queue: head\")",				"      (car (car q))))",				"",				"(define (queue-tail q)",				"  (if (null? (car q))",				"      (error \"empty-head: tail\")",				"      (queue-check (cdr (car q)) (cdr q))))",				"This queue operates in amortized constant time per operation, with two conses per element, one when it is added to the rear list, and another when the rear list is reversed to become the front list. Queue-snoc and queue-head operate in constant time; queue-tail operates in worst-case linear time when the front list is empty.",				"",				"Chris Okasaki points out that, if the queue is used persistently, its time-complexity rises from linear to quadratic since each persistent copy of the queue requires its own linear-time access. The problem can be fixed by implementing the front and rear parts of the queue as streams, rather than lists, and rotating one element from rear to front whenever the rear list is larger than the front list:",				"",				"",				"(define queue-null",				"  (cons stream-null stream-null))",				"",				"(define (queue-null? x)",				"  (and (pair? x) (stream-null (car x))))",				"",				"(define (queue-check f r)",				"  (if (< (stream-length r) (stream-length f))",				"      (cons f r)",				"      (cons (stream-append f (stream-reverse r))",				"            stream-null)))",				"",				"(define (queue-snoc q x)",				"  (queue-check (car q) (stream-cons x (cdr q))))",				"",				"(define (queue-head q)",				"  (if (stream-null? (car q))",				"      (error \"empty queue: head\")",				"      (stream-car (car q))))",				"",				"(define (queue-tail q)",				"  (if (stream-null? (car q))",				"      (error \"empty queue: tail\")",				"      (queue-check (stream-cdr (car q))",				"                   (cdr q))))",				"Memoization solves the persistence problem; once a queue element has moved from rear to front, it need never be moved again in subsequent traversals of the queue. Thus, the linear time-complexity to access all elements in the queue, persistently, is restored.",				"",				"Reducing two passes to one",				"The final example is a lazy dictionary, where definitions and uses may occur in any order; in particular, uses may precede their corresponding definitions. This is a common problem. Many programming languages allow procedures to be used before they are defined. Macro processors must collect definitions and emit uses of text in order. An assembler needs to know the address that a linker will subsequently give to variables. The usual method is to make two passes over the data, collecting the definitions on the first pass and emitting the uses on the second pass. But Chris Reade shows how streams allow the dictionary to be built lazily, so that only a single pass is needed. Consider a stream of requests:",				"",				"",				"(define requests",				"  (stream",				"    '(get 3)",				"    '(put 1 \"a\")    ; use follows definition",				"    '(put 3 \"c\")    ; use precedes definition",				"    '(get 1)",				"    '(get 2)",				"    '(put 2 \"b\")    ; use precedes definition",				"    '(put 4 \"d\")))  ; unused definition",				"We want a procedure that will display cab, which is the result of (get 3), (get 1), and (get 2), in order. We first separate the request stream into gets and puts:",				"",				"",				"(define (get? obj) (eq? (car obj) 'get))",				"",				"(define-stream (gets strm)",				"  (stream-map cadr (stream-filter get? strm)))",				"",				"(define-stream (puts strm)",				"  (stream-map cdr  (stream-remove get? strm)))",				"Now, run-dict inserts each element of the puts stream into a lazy dictionary, represented as a stream of key/value pairs (an association stream), then looks up each element of the gets stream with stream-assoc:",				"",				"",				"(define-stream (run-dict requests)",				"  (let ((dict (build-dict (puts requests))))",				"    (stream-map (rsec stream-assoc dict)",				"      (gets requests))))",				"",				"(define (stream-assoc key dict)",				"    (cond ((stream-null? dict) #f)",				"          ((equal? key (car (stream-car dict)))",				"            (stream-car dict))",				"          (else (stream-assoc key",				"                  (stream-cdr dict)))))",				"Dict is created in the let, but nothing is initially added to it. Each time stream-assoc performs a lookup, enough of dict is built to satisfy the lookup, but no more. We are assuming that each item is defined once and only once. All that is left is to define the procedure that inserts new items into the dictionary, lazily:",				"",				"",				"(define-stream (build-dict puts)",				"  (if (stream-null? puts)",				"      stream-null",				"      (stream-cons",				"        (stream-car puts)",				"        (build-dict (stream-cdr puts)))))",				"Now we can run the requests and print the result:",				"",				"",				"(stream-for-each display",				"  (stream-map cadr (run-dict requests)))",				"The (put 4 \"d\") definition is never added to the dictionary because it is never needed.",				"",				"Pitfalls",				"Programming with streams, or any lazy evaluator, can be tricky, even for programmers experienced in the genre. Programming with streams is even worse in Scheme than in a purely functional language, because, though the streams are lazy, the surrounding Scheme expressions in which they are embedded are eager. The impedance between lazy and eager can occasionally lead to astonishing results. Thirty-two years ago, William Burge warned:",				"",				"Some care must be taken when a stream is produced to make sure that its elements are not really a list in disguise, in other words, to make sure that the stream elements are not materialized too soon.",				"",				"For example, a simple version of stream-map that returns a stream built by applying a unary procedure to the elements of an input stream could be defined like this:",				"",				"",				"(define-stream (stream-map proc strm) ;wrong!",				"  (let loop ((strm strm))",				"    (if (stream-null? strm)",				"        stream-null",				"        (stream-cons",				"          (proc (stream-car strm))",				"          (loop (stream-cdr strm))))))",				"That looks right. It properly wraps the procedure in stream-lambda, and the two legs of the if both return streams, so it type-checks. But it fails because the named let binds loop to a procedure using normal lambda rather than stream-lambda, so even though the first element of the result stream is lazy, subsequent elements are eager. Stream-map can be written using stream-let:",				"",				"",				"(define-stream (stream-map proc strm)",				"  (stream-let loop ((strm strm))",				"    (if (stream-null? strm)",				"        stream-null",				"        (stream-cons",				"          (proc (stream-car strm))",				"          (loop (stream-cdr strm))))))",				"Here, stream-let assures that each element of the result stream is properly delayed, because each is subject to the stream-lambda that is implicit in stream-let, so the result is truly a stream, not a “list in disguise.” Another version of this procedure was given previously at the description of define-stream.",				"",				"Another common problem occurs when a stream-valued procedure requires the next stream element in its definition. Consider this definition of stream-unique:",				"",				"",				"(define-stream (stream-unique eql? strm) ;wrong!",				"  (stream-match strm",				"    (() strm)",				"    ((_) strm)",				"    ((a b . _)",				"      (if (eql? a b)",				"          (stream-unique eql?",				"            (stream-cdr strm))",				"          (stream-cons a",				"            (stream-unique eql?",				"              (stream-cdr strm)))))))",				"The (a b . _) pattern requires the value of the next stream element after the one being considered. Thus, to compute the nth element of the stream, one must know the n+1st element, and to compute the n+1st element, one must know the n+2nd element, and to compute…. The correct version, given above in the description of stream-drop-while, only needs the current stream element.",				"",				"A similar problem occurs when the stream expression uses the previous element to compute the current element:",				"",				"",				"(define (nat n)",				"  (stream-ref",				"    (stream-let loop ((s (stream 0)))",				"      (stream-cons (stream-car s)",				"        (loop (stream (add1 (stream-car s))))))",				"    n))",				"This program traverses the stream of natural numbers, building the stream as it goes. The definition is correct; (nat 15) evaluates to 15. But it needlessly uses unbounded space because each stream element holds the value of the prior stream element in the binding to s.",				"",				"When traversing a stream, it is easy to write the expression in such a way that evaluation requires unbounded space, even when that is not strictly necessary. During the discussion of SRFI-40, Joe Marshall created this infamous procedure:",				"",				"",				"(define (times3 n)",				"  (stream-ref",				"    (stream-filter",				"      (lambda (x)",				"        (zero? (modulo x n)))",				"      (stream-from 0))",				"    3))",				"(times3 5) evaluates to 15 and (times3 #e1e9) evaluates to three billion, though it takes a while. In either case, times3 should operate in bounded space, since each iteration mutates the promise that holds the next value. But it is easy to write times3 so that it does not operate in bounded space, as the follies of SRFI-40 showed. The common problem is that some element of the stream (often the first element) is bound outside the expression that is computing the stream, so it holds the head of the stream, which holds the second element, and so on. In addition to testing the programmer, this procedure tests the stream primitives (it caught several errors during development) and also tests the underlying Scheme system (it found a bug in one implementation).",				"",				"Laziness is no defense against an infinite loop; for instance, the expression below never returns, because the odd? predicate never finds an odd stream element.",				"",				"",				"(stream-null?",				"  (stream-filter odd?",				"    (stream-from 0 2)))",				"Ultimately, streams are defined as promises, which are implemented as thunks (lambda with no arguments). Since a stream is a procedure, comparisons such as eq?, eqv? and equal? are not meaningful when applied to streams. For instance, the expression (define s ((stream-lambda () stream-null))) defines s as the null stream, and (stream-null? s) is #t, but (eq? s stream-null) is #f. To determine if two streams are equal, it is necessary to evaluate the elements in their common prefixes, reporting #f if two elements ever differ and #t if both streams are exhausted at the same time.",				"",				"",				"(define (stream-equal? eql? xs ys)",				"  (cond ((and (stream-null? xs)",				"              (stream-null? ys)) #t)",				"        ((or (stream-null? xs)",				"             (stream-null? ys)) #f)",				"        ((not (eql? (stream-car xs)",				"                    (stream-car ys))) #f)",				"        (else (stream-equal? eql?",				"                (stream-cdr xs)",				"                (stream-cdr ys)))))",				"It is generally not a good idea to mix lazy streams with eager side-effects, because the order in which stream elements are evaluated determines the order in which the side-effects occur. For a simple example, consider this side-effecting version of strm123:",				"",				"",				"(define strm123-with-side-effects",				"  (stream-cons (begin (display \"one\") 1)",				"    (stream-cons (begin (display \"two\") 2)",				"      (stream-cons (begin (display \"three\") 3)",				"        stream-null))))",				"The stream has elements 1 2 3. But depending on the order in which stream elements are accessed, \"one\", \"two\" and \"three\" could be printed in any order.",				"",				"Since the performance of streams can be very poor, normal (eager) lists should be preferred to streams unless there is some compelling reason to the contrary. For instance, computing pythagorean triples with streams",				"",				"",				"(stream-ref",				"  (stream-of (list a b c)",				"    (n in (stream-from 1))",				"    (a in (stream-range 1 n))",				"    (b in (stream-range a n))",				"    (c is (- n a b))",				"    (= (+ (* a a) (* b b)) (* c c)))",				"  50)",				"is about two orders of magnitude slower than the equivalent expression using loops.",				"",				"",				"(do ((n 1 (+ n 1))) ((> n 228))",				"  (do ((a 1 (+ a 1))) ((> a n))",				"    (do ((b a (+ b 1))) ((> b n))",				"      (let ((c (- n a b)))",				"        (if (= (+ (* a a) (* b b)) (* c c))",				"            (display (list a b c)))))))",				"Implementation",				"Bird and Wadler describe streams as either null or a pair with a stream in the tail:",				"",				"α list :: null | α * α list",				"",				"That works in a purely functional language such as Miranda or Haskell because the entire language is lazy. In an eager language like ML or Scheme, of course, it’s just a normal, eager list.",				"",				"Using ML, Wadler, Taha and MacQueen give the type of even streams as:",				"",				"",				"datatype 'a stream_",				"  = Nil_",				"  | Cons_ of 'a * 'a stream",				"withtype 'a stream",				"  = 'a stream_ susp;",				"Their susp type is similar to Scheme’s promise type. Since Scheme conflates the notions of record and type (the only way to create a new type disjoint from all other types is to create a record), it is necessary to distribute the suspension through the two constructors of the stream data type:",				"",				"",				"α stream",				"  :: (promise stream-null)",				"  |  (promise (α stream-pair))",				"",				"α stream-pair",				"  :: α × (α stream)",				"That type captures the systematic suspension of recursive promises that is the essence of “streamness.” But it doesn’t quite work, because Scheme is eager rather than lazy, and both the car and the cdr of the stream are evaluated too early. So the final type of streams delays both the car and the cdr of the stream-pair:",				"",				"",				"α stream",				"  :: (promise stream-null)",				"  |  (promise (α stream-pair))",				"",				"α stream-pair",				"  :: (promise α) × (promise (α stream))",				"The two outer promises, in the stream type, provide streams without memoization. The two inner promises, in the stream-pair type, add the memoization that is characteristic of streams in modern functional languages.",				"",				"Lists provide seven primitive operations: the two constructors '() and cons, the type predicates list?, null? and pair?, and the accessors car and cdr for pairs. All other list operations can be derived from those primitives.",				"",				"It would seem that the same set of primitives could apply to streams, but in fact one additional primitive is required. André van Tonder describes the reason in his discussion of the promise data type. The promises of R6RS are inadequate to support iterative algorithms because each time a promise is called iteratively it binds the old promise in the closure that defines the new promise (so the old promise can be forced later, if requested). However, in the case of iteration, the old promise becomes unreachable, so instead of creating a new promise that binds the old promise within, it is better to mutate the promise; that way, no space is wasted by the old promise.",				"",				"Van Tonder describes this new promise type, and provides a recipe for its use: all constructors are wrapped with delay, all accessors are wrapped with force, and all function bodies are wrapped with lazy. Given the seven primitives above, the first two parts of van Tonder’s recipe are simple: the two constructors stream-null and stream-pair hide delay, and the two accessors stream-car and stream-cdr hide force (stream-null? and stream-pair? also hide force, so they can distinguish the two constructors of the stream type).",				"",				"Although the new promise type prevents a space leak, it creates a new problem: there is no place to hide the lazy that is the third part of van Tonder’s recipe. SRFI-40 solved this problem by exposing it (actually, it exposed delay, which was incorrect). But that violates good software engineering by preventing the stream data type from being fully abstract. The solution of SRFI-41 is to create a new primitive, stream-lambda, that returns a function that hides lazy.",				"",				"Besides hiding lazy and making the types work out correctly, stream-lambda is obvious and easy-to-use for competent Scheme programmers, especially when augmented with the syntactic sugar of define-stream and named stream-let. The alternative of exposing stream-lazy would be less clear and harder to use.",				"",				"One of the hardest tasks when writing any program library is to decide what to include and, more importantly, what to exclude. One important guideline is minimalism, since once an operator enters a library it must remain forever: Il semble que la perfection soit atteinte non quand il n’y a plus rien à ajouter, mais quand il n’y a plus rien à retrancher.",				"",				"Since streams are substantially slower than lists (the stream primitives require numerous type conversions, and list operations in most Scheme implementations are heavily optimized), most programmers will use streams only when the sequence of elements is truly infinite (such as mathematical series) or when there is some clear advantage of laziness (such as reducing the number of passes though a large data set). Thus, the library is biased toward functions that work with infinite streams left-to-right. In particular, there is no right-fold; if you need to materialize an entire stream, it’s best to use a list.",				"",				"Implementation of (streams primitive)",				"(library (streams primitive)",				"",				"",				"  (export stream-null stream-cons stream? stream-null? stream-pair?",				"          stream-car stream-cdr stream-lambda)",				"",				"  (import (rnrs) (rnrs mutable-pairs))",				"",				"  (define-record-type (stream-type make-stream stream?)",				"    (fields (mutable box stream-promise stream-promise!)))",				"",				"  (define-syntax stream-lazy",				"    (syntax-rules ()",				"      ((stream-lazy expr)",				"        (make-stream",				"          (cons 'lazy (lambda () expr))))))",				"",				"  (define (stream-eager expr)",				"    (make-stream",				"      (cons 'eager expr)))",				"",				"  (define-syntax stream-delay",				"    (syntax-rules ()",				"      ((stream-delay expr)",				"        (stream-lazy (stream-eager expr)))))",				"",				"  (define (stream-force promise)",				"    (let ((content (stream-promise promise)))",				"      (case (car content)",				"        ((eager) (cdr content))",				"        ((lazy)  (let* ((promise* ((cdr content)))",				"                        (content  (stream-promise promise)))",				"                   (if (not (eqv? (car content) 'eager))",				"                       (begin (set-car! content (car (stream-promise promise*)))",				"                              (set-cdr! content (cdr (stream-promise promise*)))",				"                              (stream-promise! promise* content)))",				"                   (stream-force promise))))))",				"",				"  (define stream-null (stream-delay (cons 'stream 'null)))",				"",				"  (define-record-type (stream-pare-type make-stream-pare stream-pare?)",				"    (fields (immutable kar stream-kar) (immutable kdr stream-kdr)))",				"",				"  (define (stream-pair? obj)",				"    (and (stream? obj) (stream-pare? (stream-force obj))))",				"",				"  (define (stream-null? obj)",				"    (and (stream? obj)",				"         (eqv? (stream-force obj)",				"               (stream-force stream-null))))",				"",				"  (define-syntax stream-cons",				"    (syntax-rules ()",				"      ((stream-cons obj strm)",				"        (stream-eager (make-stream-pare (stream-delay obj) (stream-lazy strm))))))",				"",				"  (define (stream-car strm)",				"    (cond ((not (stream? strm)) (error 'stream-car \"non-stream\"))",				"          ((stream-null? strm) (error 'stream-car \"null stream\"))",				"          (else (stream-force (stream-kar (stream-force strm))))))",				"",				"  (define (stream-cdr strm)",				"    (cond ((not (stream? strm)) (error 'stream-cdr \"non-stream\"))",				"          ((stream-null? strm) (error 'stream-cdr \"null stream\"))",				"          (else (stream-kdr (stream-force strm)))))",				"",				"  (define-syntax stream-lambda",				"    (syntax-rules ()",				"      ((stream-lambda formals body0 body1 ...)",				"        (lambda formals (stream-lazy (let () body0 body1 ...)))))))",				"Implementation of (streams derived)",				"(library (streams derived)",				"",				"",				"  (export stream-null stream-cons stream? stream-null? stream-pair? stream-car",				"          stream-cdr stream-lambda define-stream list->stream port->stream stream",				"          stream->list stream-append stream-concat stream-constant stream-drop",				"          stream-drop-while stream-filter stream-fold stream-for-each stream-from",				"          stream-iterate stream-length stream-let stream-map stream-match _",				"          stream-of stream-range stream-ref stream-reverse stream-scan stream-take",				"          stream-take-while stream-unfold stream-unfolds stream-zip)",				"",				"  (import (rnrs) (streams primitive))",				"",				"  (define-syntax define-stream",				"    (syntax-rules ()",				"      ((define-stream (name . formal) body0 body1 ...)",				"        (define name (stream-lambda formal body0 body1 ...)))))",				"",				"  (define (list->stream objs)",				"    (define list->stream",				"      (stream-lambda (objs)",				"        (if (null? objs)",				"            stream-null",				"            (stream-cons (car objs) (list->stream (cdr objs))))))",				"    (if (not (list? objs))",				"        (error 'list->stream \"non-list argument\")",				"        (list->stream objs)))",				"",				"  (define (port->stream . port)",				"    (define port->stream",				"      (stream-lambda (p)",				"        (let ((c (read-char p)))",				"          (if (eof-object? c)",				"              stream-null",				"              (stream-cons c (port->stream p))))))",				"    (let ((p (if (null? port) (current-input-port) (car port))))",				"      (if (not (input-port? p))",				"          (error 'port->stream \"non-input-port argument\")",				"          (port->stream p))))",				"",				"  (define-syntax stream",				"    (syntax-rules ()",				"      ((stream) stream-null)",				"      ((stream x y ...) (stream-cons x (stream y ...)))))",				"",				"  (define (stream->list . args)",				"    (let ((n (if (= 1 (length args)) #f (car args)))",				"          (strm (if (= 1 (length args)) (car args) (cadr args))))",				"      (cond ((not (stream? strm)) (error 'stream->list \"non-stream argument\"))",				"            ((and n (not (integer? n))) (error 'stream->list \"non-integer count\"))",				"            ((and n (negative? n)) (error 'stream->list \"negative count\"))",				"            (else (let loop ((n (if n n -1)) (strm strm))",				"                    (if (or (zero? n) (stream-null? strm))",				"                        '()",				"                        (cons (stream-car strm) (loop (- n 1) (stream-cdr strm)))))))))",				"",				"  (define (stream-append . strms)",				"    (define stream-append",				"      (stream-lambda (strms)",				"        (cond ((null? (cdr strms)) (car strms))",				"              ((stream-null? (car strms)) (stream-append (cdr strms)))",				"              (else (stream-cons (stream-car (car strms))",				"                                 (stream-append (cons (stream-cdr (car strms)) (cdr strms))))))))",				"    (cond ((null? strms) stream-null)",				"          ((exists (lambda (x) (not (stream? x))) strms)",				"            (error 'stream-append \"non-stream argument\"))",				"          (else (stream-append strms))))",				"",				"  (define (stream-concat strms)",				"    (define stream-concat",				"      (stream-lambda (strms)",				"        (cond ((stream-null? strms) stream-null)",				"              ((not (stream? (stream-car strms)))",				"                (error 'stream-concat \"non-stream object in input stream\"))",				"              ((stream-null? (stream-car strms))",				"                (stream-concat (stream-cdr strms)))",				"              (else (stream-cons",				"                      (stream-car (stream-car strms))",				"                      (stream-concat",				"                        (stream-cons (stream-cdr (stream-car strms)) (stream-cdr strms))))))))",				"    (if (not (stream? strms))",				"        (error 'stream-concat \"non-stream argument\")",				"        (stream-concat strms)))",				"",				"  (define stream-constant",				"    (stream-lambda objs",				"      (cond ((null? objs) stream-null)",				"            ((null? (cdr objs)) (stream-cons (car objs) (stream-constant (car objs))))",				"            (else (stream-cons (car objs)",				"                               (apply stream-constant (append (cdr objs) (list (car objs)))))))))",				"",				"  (define (stream-drop n strm)",				"    (define stream-drop",				"      (stream-lambda (n strm)",				"        (if (or (zero? n) (stream-null? strm))",				"            strm",				"            (stream-drop (- n 1) (stream-cdr strm)))))",				"    (cond ((not (integer? n)) (error 'stream-drop \"non-integer argument\"))",				"          ((negative? n) (error 'stream-drop \"negative argument\"))",				"          ((not (stream? strm)) (error 'stream-drop \"non-stream argument\"))",				"          (else (stream-drop n strm))))",				"",				"  (define (stream-drop-while pred? strm)",				"    (define stream-drop-while",				"      (stream-lambda (strm)",				"        (if (and (stream-pair? strm) (pred? (stream-car strm)))",				"            (stream-drop-while (stream-cdr strm))",				"            strm)))",				"    (cond ((not (procedure? pred?)) (error 'stream-drop-while \"non-procedural argument\"))",				"          ((not (stream? strm)) (error 'stream-drop-while \"non-stream argument\"))",				"          (else (stream-drop-while strm))))",				"",				"  (define (stream-filter pred? strm)",				"    (define stream-filter",				"      (stream-lambda (strm)",				"        (cond ((stream-null? strm) stream-null)",				"              ((pred? (stream-car strm))",				"                (stream-cons (stream-car strm) (stream-filter (stream-cdr strm))))",				"              (else (stream-filter (stream-cdr strm))))))",				"    (cond ((not (procedure? pred?)) (error 'stream-filter \"non-procedural argument\"))",				"          ((not (stream? strm)) (error 'stream-filter \"non-stream argument\"))",				"          (else (stream-filter strm))))",				"",				"  (define (stream-fold proc base strm)",				"    (cond ((not (procedure? proc)) (error 'stream-fold \"non-procedural argument\"))",				"          ((not (stream? strm)) (error 'stream-fold \"non-stream argument\"))",				"          (else (let loop ((base base) (strm strm))",				"                  (if (stream-null? strm)",				"                      base",				"                      (loop (proc base (stream-car strm)) (stream-cdr strm)))))))",				"",				"  (define (stream-for-each proc . strms)",				"    (define (stream-for-each strms)",				"      (if (not (exists stream-null? strms))",				"          (begin (apply proc (map stream-car strms))",				"                 (stream-for-each (map stream-cdr strms)))))",				"    (cond ((not (procedure? proc)) (error 'stream-for-each \"non-procedural argument\"))",				"          ((null? strms) (error 'stream-for-each \"no stream arguments\"))",				"          ((exists (lambda (x) (not (stream? x))) strms)",				"            (error 'stream-for-each \"non-stream argument\"))",				"          (else (stream-for-each strms))))",				"",				"  (define (stream-from first . step)",				"    (define stream-from",				"      (stream-lambda (first delta)",				"        (stream-cons first (stream-from (+ first delta) delta))))",				"    (let ((delta (if (null? step) 1 (car step))))",				"      (cond ((not (number? first)) (error 'stream-from \"non-numeric starting number\"))",				"            ((not (number? delta)) (error 'stream-from \"non-numeric step size\"))",				"            (else (stream-from first delta)))))",				"",				"  (define (stream-iterate proc base)",				"    (define stream-iterate",				"      (stream-lambda (base)",				"        (stream-cons base (stream-iterate (proc base)))))",				"    (if (not (procedure? proc))",				"        (error 'stream-iterate \"non-procedural argument\")",				"        (stream-iterate base)))",				"",				"  (define (stream-length strm)",				"    (if (not (stream? strm))",				"        (error 'stream-length \"non-stream argument\")",				"        (let loop ((len 0) (strm strm))",				"          (if (stream-null? strm)",				"              len",				"              (loop (+ len 1) (stream-cdr strm))))))",				"",				"  (define-syntax stream-let",				"    (syntax-rules ()",				"      ((stream-let tag ((name val) ...) body1 body2 ...)",				"       ((letrec ((tag (stream-lambda (name ...) body1 body2 ...))) tag) val ...))))",				"",				"  (define (stream-map proc . strms)",				"    (define stream-map",				"      (stream-lambda (strms)",				"        (if (exists stream-null? strms)",				"            stream-null",				"            (stream-cons (apply proc (map stream-car strms))",				"                         (stream-map (map stream-cdr strms))))))",				"    (cond ((not (procedure? proc)) (error 'stream-map \"non-procedural argument\"))",				"          ((null? strms) (error 'stream-map \"no stream arguments\"))",				"          ((exists (lambda (x) (not (stream? x))) strms)",				"            (error 'stream-map \"non-stream argument\"))",				"          (else (stream-map strms))))",				"",				"  (define-syntax stream-match",				"    (syntax-rules ()",				"      ((stream-match strm-expr clause ...)",				"        (let ((strm strm-expr))",				"          (cond",				"            ((not (stream? strm)) (error 'stream-match \"non-stream argument\"))",				"            ((stream-match-test strm clause) => car) ...",				"            (else (error 'stream-match \"pattern failure\")))))))",				"",				"  (define-syntax stream-match-test",				"    (syntax-rules ()",				"      ((stream-match-test strm (pattern fender expr))",				"        (stream-match-pattern strm pattern () (and fender (list expr))))",				"      ((stream-match-test strm (pattern expr))",				"        (stream-match-pattern strm pattern () (list expr)))))",				"",				"  (define-syntax stream-match-pattern ",				"    (lambda (x)",				"      (define (wildcard? x)",				"        (and (identifier? x)",				"             (free-identifier=? x (syntax _))))",				"      (syntax-case x () ",				"        ((stream-match-pattern strm () (binding ...) body)",				"          (syntax (and (stream-null? strm) (let (binding ...) body))))",				"        ((stream-match-pattern strm (w? . rest) (binding ...) body)",				"          (wildcard? #'w?) ",				"          (syntax (and (stream-pair? strm)",				"                       (let ((strm (stream-cdr strm)))",				"                         (stream-match-pattern strm rest (binding ...) body)))))",				"        ((stream-match-pattern strm (var . rest) (binding ...) body)",				"          (syntax (and (stream-pair? strm)",				"                       (let ((temp (stream-car strm)) (strm (stream-cdr strm))) ",				"                         (stream-match-pattern strm rest ((var temp) binding ...) body)))))",				"        ((stream-match-pattern strm w? (binding ...) body)",				"          (wildcard? #'w?)",				"          (syntax (let (binding ...) body)))",				"        ((stream-match-pattern strm var (binding ...) body) ",				"          (syntax (let ((var strm) binding ...) body))))))",				"",				"  (define-syntax stream-of",				"    (syntax-rules ()",				"      ((_ expr rest ...)",				"        (stream-of-aux expr stream-null rest ...))))",				"",				"  (define-syntax stream-of-aux",				"    (syntax-rules (in is)",				"      ((stream-of-aux expr base)",				"        (stream-cons expr base))",				"      ((stream-of-aux expr base (var in stream) rest ...)",				"        (stream-let loop ((strm stream))",				"          (if (stream-null? strm)",				"              base",				"              (let ((var (stream-car strm)))",				"                (stream-of-aux expr (loop (stream-cdr strm)) rest ...)))))",				"      ((stream-of-aux expr base (var is exp) rest ...)",				"        (let ((var exp)) (stream-of-aux expr base rest ...)))",				"      ((stream-of-aux expr base pred? rest ...)",				"        (if pred? (stream-of-aux expr base rest ...) base))))",				"",				"  (define (stream-range first past . step)",				"    (define stream-range",				"      (stream-lambda (first past delta lt?)",				"        (if (lt? first past)",				"            (stream-cons first (stream-range (+ first delta) past delta lt?))",				"            stream-null)))",				"    (cond ((not (number? first)) (error 'stream-range \"non-numeric starting number\"))",				"          ((not (number? past)) (error 'stream-range \"non-numeric ending number\"))",				"          (else (let ((delta (cond ((pair? step) (car step)) ((< first past) 1) (else -1))))",				"                  (if (not (number? delta))",				"                      (error 'stream-range \"non-numeric step size\")",				"                      (let ((lt? (if (< 0 delta) < >)))",				"                        (stream-range first past delta lt?)))))))",				"",				"  (define (stream-ref strm n)",				"    (cond ((not (stream? strm)) (error 'stream-ref \"non-stream argument\"))",				"          ((not (integer? n)) (error 'stream-ref \"non-integer argument\"))",				"          ((negative? n) (error 'stream-ref \"negative argument\"))",				"          (else (let loop ((strm strm) (n n))",				"                  (cond ((stream-null? strm) (error 'stream-ref \"beyond end of stream\"))",				"                        ((zero? n) (stream-car strm))",				"                        (else (loop (stream-cdr strm) (- n 1))))))))",				"",				"  (define (stream-reverse strm)",				"    (define stream-reverse",				"      (stream-lambda (strm rev)",				"        (if (stream-null? strm)",				"            rev",				"            (stream-reverse (stream-cdr strm) (stream-cons (stream-car strm) rev)))))",				"    (if (not (stream? strm))",				"        (error 'stream-reverse \"non-stream argument\")",				"        (stream-reverse strm stream-null)))",				"",				"  (define (stream-scan proc base strm)",				"    (define stream-scan",				"      (stream-lambda (base strm)",				"        (if (stream-null? strm)",				"            (stream base)",				"            (stream-cons base (stream-scan (proc base (stream-car strm)) (stream-cdr strm))))))",				"    (cond ((not (procedure? proc)) (error 'stream-scan \"non-procedural argument\"))",				"          ((not (stream? strm)) (error 'stream-scan \"non-stream argument\"))",				"          (else (stream-scan base strm))))",				"",				"  (define (stream-take n strm)",				"    (define stream-take",				"      (stream-lambda (n strm)",				"        (if (or (stream-null? strm) (zero? n))",				"            stream-null",				"            (stream-cons (stream-car strm) (stream-take (- n 1) (stream-cdr strm))))))",				"    (cond ((not (stream? strm)) (error 'stream-take \"non-stream argument\"))",				"          ((not (integer? n)) (error 'stream-take \"non-integer argument\"))",				"          ((negative? n) (error 'stream-take \"negative argument\"))",				"          (else (stream-take n strm))))",				"",				"  (define (stream-take-while pred? strm)",				"    (define stream-take-while",				"      (stream-lambda (strm)",				"        (cond ((stream-null? strm) stream-null)",				"              ((pred? (stream-car strm))",				"                (stream-cons (stream-car strm) (stream-take-while (stream-cdr strm))))",				"              (else stream-null))))",				"    (cond ((not (stream? strm)) (error 'stream-take-while \"non-stream argument\"))",				"          ((not (procedure? pred?)) (error 'stream-take-while \"non-procedural argument\"))",				"          (else (stream-take-while strm))))",				"",				"  (define (stream-unfold mapper pred? generator base)",				"    (define stream-unfold",				"      (stream-lambda (base)",				"        (if (pred? base)",				"            (stream-cons (mapper base) (stream-unfold (generator base)))",				"            stream-null)))",				"    (cond ((not (procedure? mapper)) (error 'stream-unfold \"non-procedural mapper\"))",				"          ((not (procedure? pred?)) (error 'stream-unfold \"non-procedural pred?\"))",				"          ((not (procedure? generator)) (error 'stream-unfold \"non-procedural generator\"))",				"          (else (stream-unfold base))))",				"",				"  (define (stream-unfolds gen seed)",				"    (define (len-values gen seed)",				"      (call-with-values",				"        (lambda () (gen seed))",				"        (lambda vs (- (length vs) 1))))",				"    (define unfold-result-stream",				"      (stream-lambda (gen seed)",				"        (call-with-values",				"          (lambda () (gen seed))",				"          (lambda (next . results)",				"            (stream-cons results (unfold-result-stream gen next))))))",				"    (define result-stream->output-stream",				"      (stream-lambda (result-stream i)",				"        (let ((result (list-ref (stream-car result-stream) (- i 1))))",				"          (cond ((pair? result)",				"                  (stream-cons",				"                    (car result)",				"                    (result-stream->output-stream (stream-cdr result-stream) i)))",				"                ((not result)",				"                  (result-stream->output-stream (stream-cdr result-stream) i))",				"                ((null? result) stream-null)",				"                (else (error 'stream-unfolds \"can't happen\"))))))",				"    (define (result-stream->output-streams result-stream)",				"      (let loop ((i (len-values gen seed)) (outputs '()))",				"        (if (zero? i)",				"            (apply values outputs)",				"            (loop (- i 1) (cons (result-stream->output-stream result-stream i) outputs)))))",				"    (if (not (procedure? gen))",				"        (error 'stream-unfolds \"non-procedural argument\")",				"        (result-stream->output-streams (unfold-result-stream gen seed))))",				"",				"  (define (stream-zip . strms)",				"    (define stream-zip",				"      (stream-lambda (strms)",				"        (if (exists stream-null? strms)",				"            stream-null",				"            (stream-cons (map stream-car strms) (stream-zip (map stream-cdr strms))))))",				"    (cond ((null? strms) (error 'stream-zip \"no stream arguments\"))",				"          ((exists (lambda (x) (not (stream? x))) strms)",				"            (error 'stream-zip \"non-stream argument\"))",				"          (else (stream-zip strms)))))",				"Implementation of (streams)",				"(library (streams)",				"",				"",				"  (export stream-null stream-cons stream? stream-null? stream-pair? stream-car",				"          stream-cdr stream-lambda define-stream list->stream port->stream stream",				"          stream->list stream-append stream-concat stream-constant stream-drop",				"          stream-drop-while stream-filter stream-fold stream-for-each stream-from",				"          stream-iterate stream-length stream-let stream-map stream-match _",				"          stream-of stream-range stream-ref stream-reverse stream-scan stream-take",				"          stream-take-while stream-unfold stream-unfolds stream-zip)",				"",				"  (import (streams primitive) (streams derived)))",				"Acknowledgements",				"Jos Koot sharpened my thinking during many e-mail discussions, suggested several discussion points in the text, and contributed the final version of stream-match. Michael Sperber and Abdulaziz Ghuloum gave advice on R6RS.",				"",				"References",				"Harold Abelson and Gerald Jay Sussman with Julie Sussman. Structure and Interpretation of Computer Programs. MIT Press, Cambridge, Massachusetts. Second edition, 1996. mitpress.mit.edu/sicp. The classic text on computer science. Section 3.5 includes extensive discussion of odd streams.",				"",				"Anne L. Bewig. “Golden Ratio” (personal communication). Homework for the high school course Calculus. Teaching my daughter how to calculate the 200th element of a continued fraction was a moment of sheer joy in the development of the stream libraries.",				"",				"Philip L. Bewig. Scheme Request for Implementation 40: A Library of Streams. August, 2004. srfi.schemers.org/srfi-40. Describes an implementation of the stream data type.",				"",				"Richard Bird and Philip Wadler. Introduction to Functional Programming. Prentice Hall, 1988. The classic text on functional programming. Even streams are discussed in the context of purely functional programming.",				"",				"William H. Burge. Recursive Programming Techniques. Addison-Wesley, 1975. An early text on functional programming, and still one of the best, though the terminology is dated. Discusses even streams in Section 3.10.",				"",				"Jeremy Gibbons, David Lester and Richard Bird, “Functional Pearl: Enumerating the Rationals,” under consideration for publication in Journal of Functional Programming. http://web.comlab.ox.ac.uk/oucl/work/jeremy.gibbons/publications/rationals.pdf. Discusses a series of expressions that enumerate the rational numbers without duplicates.",				"",				"Carl Hewitt. “Viewing control structures as patterns of passing messages,” in Journal of Artificial Intelligence, Volume 8, Number 3 (June, 1977), pp 323-364. Also published as Artificial Intelligence Memo 410 by the Massachusetts Institute of Technology, ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-410.pdf. Describes the Actor message-passing system; one of the examples used is the same-fringe? problem.",				"",				"Peter J. Landin. “A correspondence between ALGOL 60 and Church’s lambda-notation: Part I,” Communications of the ACM, Volume 8, Number 2, February 1965., pages 89–101. The seminal description of streams.",				"",				"Joe Marshall. “Stream problem redux”, from Usenet comp.lang.scheme, June 28, 2002. groups.google.com/group/comp.lang.scheme/msg/db4b4a1f33e3eea8. The original post on comp.lang.scheme that describes the times3 problem.",				"",				"Chris Okasaki. Purely Functional Data Structures. Cambridge University Press, 2003. Revised version of Okasaki’s thesis Purely Functional Data Structures, Carnegie-Mellon University, 1996, www.cs.cmu.edu/~rwh/theses/okasaki.pdf. Provides a strong defense of laziness, and describes several data structures that exploit laziness, including streams and queues.",				"",				"Stephen K. Park and Keith W. Miller. “Random number generators: good ones are hard to find,” Communications of the ACM, Volume 31, Issue 10 (October 1988), pages 1192–1201. Describes a minimal standard random number generator.",				"",				"Simon Peyton-Jones, et al, editors. Haskell 98: Haskell 98 Language and Libraries: The Revised Report. December 2002. www.haskell.org/onlinereport. Haskell is the prototypical purely functional language, and includes even streams, which it calls lists, as its fundamental structured data type.",				"",				"Chris Reade. Elements of Functional Programming. Addison-Wesley, April 1989. A textbook on functional programming.",				"",				"Antoine de Saint-Exupéry. Chapter III “L’Avion” of Terre des Hommes. 1939. “Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.”",				"",				"Dorai Sitaram. Teach Yourself Scheme in Fixnum Days. www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html. A useful introduction to Scheme; includes generator and co-routine solutions to the same-fringe? problem.",				"",				"Michael Sperber, R. Kent Dybvig, Matthew Flatt, and Anton von Straaten, editors. Revised6 Report on the Algorithmic Language Scheme. September 26, 2007. www.r6rs.org. The standard definition of the Scheme programming language.",				"",				"André van Tonder. Scheme Request for Implementation 45: Primitives for Expressing Iterative Lazy Algorithms. srfi.schemers.org/srfi-45. April, 2004. Describes the problems inherent in the promise data type of R5RS (also present in R6RS), and provides the alternate promise data type used in the stream primitives.",				"",				"Philip Wadler. “How to replace failure by a list of successes,” in Proceedings of the conference on functional programming languages and computer architecture, Nancy, France, 1985, pages 113–128. Describes the “list of successes” technique for implementing backtracking algorithms using streams.",				"",				"Philip Wadler, Walid Taha, and David MacQueen, “How to add laziness to a strict language without even being odd.” 1998 ACM SIGPLAN Workshop on ML, pp. 24ff. homepages.inf.ed.ac.uk/wadler/papers/lazyinstrict/lazyinstrict.ps. Describes odd and even styles of lazy evaluation, and shows how to add lazy evaluation to the strict functional language SML.",				"",				"All cited web pages visited during September 2007.",				"",				"Copyright",				"Copyright (C) Philip L. Bewig (2007). All Rights Reserved.",				"",				"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:",				"",				"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.",				"",				"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",				"",				"Several files related to this document are available from srfi.schemers.org/srfi-41: A version of this document suitable for printing is available at streams.pdf. The complete source corresponding to the three Appendices is available in files streams.ss, primitive.ss, and derived.ss. Samples from the text are available at samples.ss, and a test suite is available at r6rs-test.ss. Source code and tests for R5RS are available at r5rs.ss, and r5rs-test.ss.",				"",				"Editor: Michael Sperber"			],			"category" : "Collections-Streams-Srfi41"		},		"SpToolbarPresenter" : {			"hash" : 634880,			"definition" : "SpAbstractWidgetPresenter << #SpToolbarPresenter\r\tslots: {\r\t\t\t #displayMode => ObservableSlot .\r\t\t\t #leftItems => ObservableSlot .\r\t\t\t #rightItems => ObservableSlot };\r\ttag: 'Widgets-Toolbar';\r\tpackage: 'Spec2-Core'",			"comment" : [				"A presenter to display a toolbar."			],			"category" : "Spec2-Core-Widgets-Toolbar"		},		"SpStubAbstractAdapter" : {			"hash" : 3019264,			"definition" : "SpAbstractAdapter subclass: #SpStubAbstractAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Stub-Adapters'",			"comment" : [				"I am an abstract class providing all the properties shared amongs all the stub adapters. They do not produce real views, only stub objects."			],			"category" : "Spec2-Adapters-Stub-Adapters"		},		"CoFetcher" : {			"hash" : 6469888,			"definition" : "Object subclass: #CoFetcher\r\tinstanceVariableNames: 'generator filter'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Core'",			"comment" : [				"I'm a kind of iterator (in the sense of GoF) that goes one by one over \"a stream\" of entities that can be consumed by the completion engine within a completion context.",				"",				"I provide access to the elements I return one by one (using the next message) in a controlled manner. ",				"At the root, I define the architecture to yield one entry at a time. ",				"The next method invokes the hook method #entriesDo: with a generator yielding capability.",				"This way any use of #next will be done step by step. ",				"",				"My subclasses implement the following method entriesDo: aBlock which defines the semantics of element fetching",				"Here is a simple example where a generic fetcher is used on a collection, and wrapped by a fetcher that avoids returning duplicate elements.",				"",				"[[[",				"fetcher := AvoidRepeatedComplishonFetcher new",				"\tcomplishonFetcher: (GenericComplishonFetcher onCollection: #( a b b a c )).",				"]]]",				"\t",				"Here are two examples of definition",				"",				"[[[",				"AvoidRepeatedComplishonFecther >> entriesDo: aBlock",				"\tdecoree",				"\t\tentriesDo: [ :elem | ",				"\t\t\t(self hasAlreadyReturned: elem)",				"\t\t\t\tifFalse: [ elements add: elem.",				"\t\t\t\t\taBlock value: elem ] ]",				"]]]",				"",				"[[[",				"GenericComplishonFetcher >> entriesDo: aBlock",				"",				"\tcollection do: aBlock",				"]]]",				"",				"",				"",				"\t"			],			"category" : "HeuristicCompletion-Model-Core"		},		"CharacterSetComplement" : {			"hash" : 884992,			"definition" : "Collection subclass: #CharacterSetComplement\r\tinstanceVariableNames: 'absent byteArrayMapCache'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-CharacterSets'",			"comment" : [				"CharacterSetComplement is a space efficient implementation of (CharacterSet complement) taking care of WideCharacter (code > 255)",				"",				"However, it will maintain a byteArrayMap for character <= 255 in a cache for performance",				"",				"instance variables:",				"\tabsent <CharacterSet> contains character that are not in the set (i.e. my complement)",				"\tbyteArrayMapCache <ByteArray | nil> cache this information because it has to be used in tight loops where efficiency matters"			],			"category" : "Collections-Support-CharacterSets"		},		"DAPackageRelationGraph" : {			"hash" : 4738560,			"definition" : "Object subclass: #DAPackageRelationGraph\r\tinstanceVariableNames: 'packages classToPackage'\r\tclassVariableNames: ''\r\tpackage: 'Tool-DependencyAnalyser-Core'",			"comment" : [				"I'm a package dependency graph. ",				"To build the dependency graph among packages, you have just to give a set of PDPackage on entry. Then :",				"",				"\t- use the message computeStaticDependencies messages to retrieve all the dependency among the packages.",				"\t- use the message removeInternalDependencies if you want to remove all the internal dependency.",				"\t- finally use combineDependencies to combine each dependency which have the same source and the target into \tcomposite dependency.",				"\t\t"			],			"category" : "Tool-DependencyAnalyser-Core"		},		"SpCompositeOutputPort" : {			"hash" : 2998528,			"definition" : "SpOutputPort subclass: #SpCompositeOutputPort\r\tinstanceVariableNames: 'ports'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Transmission-Base'",			"comment" : [				"A composited output port that allow presenters to trigger output transmissions to several subpresenters (or itself)"			],			"category" : "Spec2-Transmission-Base"		},		"RSQuadTreeF" : {			"hash" : 7071744,			"definition" : "RSObject subclass: #RSQuadTreeF\r\tinstanceVariableNames: 'charge leaf soleChild northEastQuad northWestQuad southEastQuad southWestQuad centerOfCharge rectangle'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Layouts-Util'",			"comment" : [				"TODO"			],			"category" : "Roassal3-Layouts-Util"		},		"ImageReadWriter" : {			"hash" : 1988608,			"definition" : "Object subclass: #ImageReadWriter\r\tinstanceVariableNames: 'stream'\r\tclassVariableNames: ''\r\tpackage: 'Graphics-Files'",			"comment" : [				"I am ImageReadWriter. ",				"I read an encoded image from a binary stream and return its as a Form. ",				"I write and encode an image as Form to a binary stream.",				"I am an abstract class, my subclasses implement concrete formats.",				"I can autodetect the format of some encoded images, so you can use me directly.",				"",				"Usage",				"",				"\tImageReadWriter formFromFileNamed: 'test.png'",				"\tImageReadWriter formFromStream: 'test.png' asFileReference binaryReadStream",				"",				"Implementation ",				"",				"Instance Variables:",				"\tstream\t\t<ReadStream|WriteStream>\tbinary stream that I read from or write to",				"",				"Subclasses must implement the following messages:",				"\taccessing",				"\t\tnextImage",				"\t\tnextPutImage:",				"\ttesting",				"\t\tcanUnderstand         (or my class side's #understandsImageFormat:)",				"\t\t\t",				"(original) copyright (c) Kazuki Yasumatsu, 1995. All rights reserved."			],			"category" : "Graphics-Files"		},		"StSpotterIterator" : {			"hash" : 1712128,			"definition" : "Object subclass: #StSpotterIterator\r\tinstanceVariableNames: 'context items'\r\tclassVariableNames: ''\r\tpackage: 'NewTools-Spotter-Iterators'",			"comment" : [				"Define an iterator to be used to feed items to spotter"			],			"category" : "NewTools-Spotter-Iterators"		},		"LayoutCell" : {			"hash" : 2009088,			"definition" : "Object subclass: #LayoutCell\r\tinstanceVariableNames: 'target cellSize extraSpace flags nextCell'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-Layouts'",			"comment" : [				"I am used in table layouts to hold temporary values while the layout is being computed.",				"",				"Instance variables:",				"\ttarget \t\t<Morph>\t\tThe morph contained in this cell",				"\tcellSize \t\t<Point>\t\tThe size of the cell",				"\textraSpace \t<nil | Point>\tAdditional space to add after this cell",				"\tnextCell \t<nil | LayoutCell>\tThe next cell in the arrangement.",				"",				"Implementation note:",				"Both, cellSize and extraSpace contains points where",				"\tx - represents the primary table direction",				"\ty - represents the secondary table direction"			],			"category" : "Morphic-Base-Layouts"		},		"KMStorage" : {			"hash" : 2008064,			"definition" : "Object subclass: #KMStorage\r\tinstanceVariableNames: 'namedRegistry anonymousRegistry'\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-Core-Base'",			"comment" : [				"I am a storage of shortcuts. I store and provide facilities to access named and annonimous shortcuts."			],			"category" : "Keymapping-Core-Base"		},		"SourceFile" : {			"hash" : 1139456,			"definition" : "Object subclass: #SourceFile\r\tinstanceVariableNames: 'path stream potentialLocations'\r\tclassVariableNames: ''\r\tpackage: 'System-Sources-Sources'",			"comment" : [				"asdasd"			],			"category" : "System-Sources-Sources"		},		"KMDispatchChain" : {			"hash" : 1994752,			"definition" : "Object subclass: #KMDispatchChain\r\tinstanceVariableNames: 'target dispatcher initialTarget'\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-Core-Dispatching'",			"comment" : [				"I am an object that controls the dispatch order of keymaps given a hierarchy of morphs."			],			"category" : "Keymapping-Core-Dispatching"		},		"STONListWriter" : {			"hash" : 346880,			"definition" : "STONStreamWriter subclass: #STONListWriter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'STON-Core-Writer'",			"comment" : [				"STONArrayWriter helps in writing array based STON representations."			],			"category" : "STON-Core-Writer"		},		"SpActionBarPresenter" : {			"hash" : 624128,			"definition" : "SpAbstractWidgetPresenter subclass: #SpActionBarPresenter\r\tinstanceVariableNames: 'items'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Widgets'",			"comment" : [				"A full width bar designed to present contextual actions. ",				"It is expected to be displayed below the content and expand horizontally to fill the area.",				"This is like the small action bars at the bottom of a list in most mobile apps (or macOS), which shows small icons with actions."			],			"category" : "Spec2-Core-Widgets"		},		"CTSkipListTest" : {			"hash" : 2312192,			"definition" : "TestCase subclass: #CTSkipListTest\r\tuses: TIceImagesExporting + MTTProfilingCopying + MTTUmlSequenceDiagramBuilderWithOutliners\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-SkipList-Tests'",			"comment" : [				"A CTSkipListTest is a test class for testing the behavior of CTSkipList"			],			"category" : "Containers-SkipList-Tests"		},		"IRSequence" : {			"hash" : 1234176,			"definition" : "Object subclass: #IRSequence\r\tinstanceVariableNames: 'sequence orderNumber method'\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-IR-Nodes'",			"comment" : [				"A sequence is corresponds to a block in the control flow graph."			],			"category" : "OpalCompiler-Core-IR-Nodes"		},		"SocketStream" : {			"hash" : 1365248,			"definition" : "Object subclass: #SocketStream\r\tinstanceVariableNames: 'recentlyRead socket inBuffer outBuffer inNextToWrite outNextToWrite lastRead timeout autoFlush bufferSize binary shouldSignal'\r\tclassVariableNames: ''\r\tpackage: 'Network-Kernel-Base'",			"comment" : [				"SocketStream is a wrapper for class Socket making it easy to write networking code by giving the programmer a stream-like protocol. A Socket is a two way communication link with two logically separate channels - input and output. The Socket class is the lowest level in Pharo for network communication and using it directly can be difficult and bug prone.",				"",				"A SocketStream can be in binary or ascii mode, ascii is the default which means you are transmitting and receiving Strings. Most Internet protocols are in clear text ascii, like for example HTTP. Another setting is what timeout you want to use - default is the standardTimeout from Socket. More settings can be found in the method category 'configuration'.",				"",				"Simplest example of connecting, sending/receiving and closing:",				"",				"| stream result |",				"stream := SocketStream openConnectionToHostNamed: 'www.pharo-project.org' port: 80.",				"[[stream nextPutAll: 'GET / HTTP/1.0'; crlf; crlf; flush.",				"result := stream upToEnd. \"Give us all data until the socket is closed.\"",				"Transcript show: result; cr.]",				"\tensure: [stream close]]",				"\t\ton: ConnectionTimedOut",				"\t\tdo: [:ex | Transcript show: ex asString;cr. ex resume]",				"",				"There are two important things to note above:",				"\t- The methods in category \"stream in\" can signal two exceptions (unless turned off with #shouldSignal:):",				"\t\tConnectionClosed and ConnectionTimedOut",				"\t- We close the stream using #ensure:, that is to make sure it isn't left opened.",				"\t- We use #on:do: to catch any signal. In this case we do not need to catch ConnectionClosed since #upToEnd does that for us intrinsically.",				"",				"----------------",				"SocketStream (below called SS) is a reimplementation of 'Old'-SocketStream (below called OSS) - the class that originates from the original Comanche implementation but now is included in standard Squeak. SS has the same protocol as OSS and is meant to replace it. SS is faster, more flexible, is better documented and adds a few features:",				"",				"1. #shouldSignal:, which decides if SS should signal low level Socket exceptions (true) or if it should swallow them like original OSS did. Default is true. The only reason I added this is for backwards compatibility - not signalling causes problems - see bug 4 below.",				"",				"2. #nextAllInBuffer, #nextInBuffer:, #skip:, #receiveData:, #nextPutAllFlush: and #recentlyRead are new additions to the public protocol.",				"",				"",				"It also fixes various bugs:",				"",				"1. #isDataAvailable could theoretically answer false, when there actually is some in the buffer in OSS. If #receiveDataIfAvailable reads the last byte then the following \"socket dataAvailable\" would answer false. So the last byte would be sitting in the inStream missed.",				"",				"2. #upToAll: in OSS has several problems, for example - #positionOfSubCollection:ifAbsent: which was introduced answers one position too low. This was compensated in upToAll:, but only in the pushBack: call, not the actual result being returned which was cut short 1 byte. Amusingly this makes KomHttpServer not use \"Keep-Alive\" since the last $e in 'Alive' was cut short. :)",				"",				"3. SS doesn't inherit from PositionableStream since that just breaks various inherited messages, like for example #skip:. OSS should IMHO be changed to inherit from Object - or of course, replaced in full with SS. :)",				"",				"4. Since SocketStream by default signals closes and timeouts the SocketStreamTest now passes. The reason for SocketStream to fail is that while it does timeout on a low level (#SocketStream>>receiveData doesn't hang forever) - the callers of #receiveData sometimes loop - like in #next:, and thus eliminates the timeout. SS warns about some methods (in their method comments) not honouring timeouts if shouldSignal is false, I really don't know what they should do in that case:",				"\t#next:, #upTo:, #upToAll: and #upToEnd (and #receiveData:)",				"",				"",				"The primary reason for the SS implementation is optimal performance. The main differences in implementation with the old OSS are:",				"",				"1. SS uses two buffers directly (inBuffer and outBuffer) with pointers marking start and stop within the buffer. OSS instead uses two regular streams, a ReadStream and a WriteStream. Using internal buffers makes it possible to avoid copying and reallocation in various ways, it also makes SS be able to have specialized growing/buffer moving behaviour.",				"",				"2. #upTo:, #upToAll: and #peekForAll: uses selectged String messages that in turn uses fast primitives for searching. OSS used other messages that fell back on byte per byte reading.",				"",				"3. #receiveData in OSS creates a temporary buffer stream for each call! During a long read operation, like say #upToAll: (which for example is used when uploading files using HTTP POST forms), this is devastating - especially since the default size is only 2000 bytes - and leads to a very high number of low level read operations on the Socket, typically 100 times more calls than with OSS. The buffer in OSS is held in an instvar (not recreated for each call), is larger from the start and above all - grows dynamically by doubling. OSS can also avoid a grow/reallocation by doing a \"move down\" if data has been read from the SS as it comes in and through that making room in the lower part of the inBuffer. The net result is that upToAll: for large files is about 10 times faster.",				"",				"4. The implementation of upTo: and upToAll: tries to avoid doing unnecessary find operations in the buffer and is greedy by default, which means it favors reading more data - if available - before searching for the stop sequence. If we had #findString:startingAt:stoppingAt: this wouldn't have to be greedy and we wouldn't be needlessly scanning dead buffer area. VM hackers? Also, while you are at it - make it work for ByteArrays too. :)",				"",				"",				"SS can not be run unbuffered, since that seems unneeded. The option to autoFlush is still available, with it set to true SocketStream (just like OSS) will flush on its own on each nextPut:/nextPutAll:, otherwise flushing it will have to be done manually but is done on close.",				"",				"The first performance tests shows that, as noted above, receiving large amounts of data using #upToAll: is greatly improved - factor of 10. Serving HTTP with small payloads seemed at first not be faster at all - but this is due to the high overhead of Socket connect/close and other things. Increasing payloads show a difference and especially with keep alive on - where the new SS roughly doubles the throughput!"			],			"category" : "Network-Kernel-Base"		},		"IceNode" : {			"hash" : 7565056,			"definition" : "IceAbstractNode subclass: #IceNode\r\tinstanceVariableNames: 'parent childrenDictionary value'\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Changes'",			"comment" : [				"I am a tree implementation used for diffing and merging.",				"",				"I work by composition and not inheritance. My users should use the values of the node (kept in the #value instance variable) and not subclass myself.",				"Each node stores its child nodes in a dictionary, indexed by a key.",				"",				"Tree API:",				" - #/ access to children",				" - #path get the path of the current node in the tree",				" - #parent get the parent node of the current node",				" - #rootNode get the root node of the current tree",				" - #children get the children of the current node",				" - #keys, #keysDo:, #includesKey: enumerate the keys of the node",				" - #at:put, #childAt:ifAbsentPut:, #childAt:ifPresent:",				" - #resolve:, #resolve:ifAbsent: resolve a path in the current node",				" - #replaceBy: replaces the current node by another node",				" - #replace:with: replaces the given child node by another node",				"",				"Enumerating API:",				" - #allSatisfy:",				" - #anySatisfy:",				" - #collect:",				" - #detect:",				" - #select:",				" - #count:",				" - #do:",				"",				"Visiting API:",				" - visit:"			],			"category" : "Iceberg-Changes"		},		"SmallDictionary" : {			"hash" : 1134848,			"definition" : "Collection subclass: #SmallDictionary\r\tinstanceVariableNames: 'keys values size'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Dictionaries'",			"comment" : [				"`SmallDictionary` is a special dictionary optimized for small collections. In addition to the normal dictionary protocol, it also supports an `#empty` message which \"empties\" the collection but may hang on to the original elements (so it could collect garbage). Without `#empty` we would either need to create a new dictionary or explicitly remove everything from the dictionary. Both of these take more time and `#empty`. Be careful, I cannot have *nil* as key. ",				"",				"### Public API and Key Messages",				"",				"- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue \t\tallow to add an element.  ",				"- #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock \t\tallow to access my values.",				"- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: \t\tallow to iterate on me effectively",				"",				"### Examples ",				"",				"",				"To create a dictiony with indexes as key: ",				"",				"```",				"SmallDictionary withAll: #(7 3 1 3)   \t\t",				"\">>>  a SmallDictionaryDictionary(1->7 2->3 3->1 4->3 \"",				"```",				"To use Objects as key (here symbols): ",				"",				"```",				"\tcolors := SmallDictionary new ",				"\t\t\t\tat: #yellow put: Color yellow; ",				"\t\t\t\tat: #blue put: Color blue;",				"\t\t\t\tat: #red put: Color red;",				"\t\t\t\tyourself.",				"\t\t\t\t",				"\tcolors at: #yellow. \t\"returns:  Color yellow\"",				"\tcolors keys          \t\t\"returns: a Set(#blue #yellow #red)\"",				"\tcolors values     \t\t\"returns:  {Color blue. Color yellow. Color red}\"",				"",				"\tcolors empty \t\"a SmallDictionary()\"",				"```",				"",				"### Internal Representation and Key Implementation Points.",				"Instance Variables",				"- keys:\t\t<Array>\t\tArray of keys (we don't use Associations for our key value pairs)",				"- size:\t\t\t<Integer>\tSize of the dictionary",				"- values:\t\t<Array>\t\tArray of our values",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Unordered-Dictionaries"		},		"IceTipStandardAction" : {			"hash" : 7661824,			"definition" : "IceTipAction subclass: #IceTipStandardAction\r\tinstanceVariableNames: 'message successAnnounceBlock actionBlock'\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-TipUI-Commands'",			"comment" : [				"I'm a generic UI action.",				"I will perform an action by informing user what's happening.",				"I will also check for errors happening while performing the task and try to recover from them."			],			"category" : "Iceberg-TipUI-Commands"		},		"RubParagraphDecorator" : {			"hash" : 2037760,			"definition" : "Object subclass: #RubParagraphDecorator\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Rubric-Editing-Core'",			"comment" : [				"I am a decorator for the paragraph of a text area. I can be used to draw something on the paragraph "			],			"category" : "Rubric-Editing-Core"		},		"StartupPreferencesLoader" : {			"hash" : 1448192,			"definition" : "Object subclass: #StartupPreferencesLoader\r\tinstanceVariableNames: 'errors actions'\r\tclassVariableNames: 'AllowStartupScript UniqueInstance'\r\tpackage: 'StartupPreferences'",			"comment" : [				"StartupPreferencesLoader searches for and executes .st files from certain locations such as Library/Preferences/pharo on Mac OS X.  ",				"",				"StartupPreferencesLoader looks within such locations for a 'pharo' folder. This contains the startup scripts common to all versions of Pharo, and also optionally a folder per Pharo version holding startup scripts suitable for that version only.  So a typical directory layout might be...",				"",				".../some/folders/pharo/Content/Resources/pharo.image.",				".../some/folders/pharo/Content/Resources/startup.st",				".../some/folders/.config/pharo/author.st",				".../some/folders/.config/pharo/useSharedCache.st",				".../some/folders/.config/pharo/1.4/mystartupFor14only.st",				".../some/folders/.config/pharo/2.0/mystartupFor20only.st",				"",				"(**Note however that '.config' is an invalid filename on Windows, so '..config' is used instead)",				"",				"To know the real values for you...",				"Print the result of \"StartupPreferencesLoader preferencesGeneralFolder\" which holds the startup scripts common to all versions of Pharo.",				"Print the result of \"StartupPreferencesLoader preferencesVersionFolder\" which holds the startup scripts specific to the version of the current image.",				"",				"-----------",				"",				"",				"StartupPreferencesLoader example",				"",				"will define a script sample startup.st in your unix root on unix ",				"",				"Its contents is ",				"",				"StartupPreferencesLoader default executeAtomicItems: {",				"\tStartupAtomicItem name: 'Open Help' code: 'Workspace openContents: ''Here is just an example of how to use the StartupPreferencesLoader.",				"I should only be displayed once.",				"\t",				"You can also see StartupPreferencesLoader class>>#example'' label: ''Help''' isSingleton: true.",				"\tStartupAtomicItem name: 'Open Workspace' code: 'Workspace openContents: ''I should be displayed each time'''.",				"}",				"",				"EXAMPLE 1",				"============",				"",				"\t\" an example of script generation \"",				"\t| item1 item2 |",				"\titem1 := StartupAction name: 'Open Help' code: 'Smalltalk tools workspace openContents: ''Here is just an example of how to use the StartupPreferencesLoader.",				"I should only be displayed once.",				"\t",				" You can also see StartupPreferencesLoader class>>#example'' label: ''Help''' runOnce: true.",				"\titem2 := StartupAction name: 'Open Workspace' code:  [ Workspace openContents: 'I should be displayed each time' ].",				"\tStartupPreferencesLoader default addAtStartupInGeneralPreferenceFolder: {item1. item2}.",				"\t",				"\tStartupPreferencesLoader default loadFromDefaultLocations.",				"\tStartupPreferencesLoader default loadFromDefaultLocations.",				"",				"EXAMPLE 2",				"============",				"",				"\t\" it's my personal script provided as example\"",				"\t| items |",				"\titems := OrderedCollection new.",				"\titems add: (StartupAction name: 'Set the Author' code: [ Author fullName: Author fullName printString ]). \"replace it by your name\"",				"\t",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'author.st'.",				"\titems removeAll.",				"\t",				"\titems add: (StartupAction name: 'Dragging Option' code: [ UITheme defaultSettings fastDragging: true ]).",				"\titems add: (StartupAction name: 'Dialog Auto Accept' code: [ TextEditorDialogWindow autoAccept: true ]).",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'settings.st'.",				"\titems removeAll.",				"\t",				"\titems add: (StartupAction name: 'Fonts option' code: [ FreeTypeSystemSettings loadFt2Library: true.\t",				"\tFreeTypeFontProvider current updateFromSystem.",				"\tStandardFonts defaultFont: (LogicalFont familyName: 'Lucida Grande' pointSize: 10) forceNotBold.",				"\tGraphicFontSettings resetAllFontToDefault.",				"\tStandardFonts codeFont: (LogicalFont familyName: 'Consolas' pointSize: 10).] runOnce: true).",				"\t",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'fonts.st'.",				"\titems removeAll.",				"\tStartupPreferencesLoader default addAtStartupInImageDirectory: items.",				"\t",				"\tStartupPreferencesLoader default loadFromDefaultLocations.",				"",				"EXAMPLE 3",				"============",				"",				"\t| items |",				"\titems := OrderedCollection new.",				"\t",				"\titems add: (StartupAction name: 'General Preferences for all Pharo versions' code: [ ",				"\t\tFileStream stdout lf; nextPutAll: 'Setting general preferences for all Pharo versions'; lf.",				"\t\tFileStream stdout lf; nextPutAll: 'Finished'; lf.",				"\t\t ]).",				"\tStartupPreferencesLoader default addAtStartupInGeneralPreferenceFolder: items named: 'generalSettings.st'.",				"\t",				"\titems removeAll.",				"\titems add: (StartupAction name: 'Settings' code: [ ",				"\t\tFileStream stdout lf; nextPutAll: 'Setting general preferences for Pharo 2.0'; lf.",				"\t\tFileStream stdout lf; nextPutAll: 'Finished'; lf.",				"\t\t ]).",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'settings.st'.",				"\t",				"\titems removeAll.",				"\titems add: (StartupAction name: 'Image diretory' code: [ ",				"\t\tFileStream stdout lf; nextPutAll: 'Setting preferences for image directory'; lf.",				"\t\tFileStream stdout lf; nextPutAll: 'Finished'; lf.",				"\t\t ]).",				"\tStartupPreferencesLoader default addAtStartupInImageDirectory: items "			],			"category" : "StartupPreferences"		},		"DoubleLinkedList" : {			"hash" : 1627648,			"definition" : "Object subclass: #DoubleLinkedList\r\tinstanceVariableNames: 'head tail'\r\tclassVariableNames: ''\r\tpackage: 'Collections-DoubleLinkedList-Base'",			"comment" : [				"I am DoubleLinkedList, an ordered list data structure consisting of objects, most likely DoubleLinks or something compatible, connected to each other by forward and backwards links.",				"",				"Note that some of my API deals with the elements that I hold, like any other collection, while some of my API references the links that I use internally (those usually have the word link in the selector name). Some methods accepts both values or links as argument (like #add:). Because I expose some if my internal structure, I can be broken quite easily.",				""			],			"category" : "Collections-DoubleLinkedList-Base"		},		"RelationSet" : {			"hash" : 4216576,			"definition" : "Collection subclass: #RelationSet\r\tinstanceVariableNames: 'owner slot set'\r\tclassVariableNames: ''\r\tpackage: 'Slot-Examples-Associations'",			"comment" : [				"I'm a Set like collection that is used to hold collections of associated objects. When an object is added to or removed from this collection the inverse side is also updated."			],			"category" : "Slot-Examples-Associations"		},		"Object" : {			"hash" : 805632,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		},		"OrderedCollection" : {			"hash" : 810240,			"definition" : "SequenceableCollection subclass: #OrderedCollection\r\tinstanceVariableNames: 'array firstIndex lastIndex'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I am one of the most common collection. I can grow, and elements can be added sequentially by the user.  ",				"I am more general than Array; my size grows on demand. I store data inside an Array and remember the first and last index. If I need, I can replace this Array by a larger one.",				"",				"I am usually used to store an unknown amount of objects. When my contents size will not move, one can send me the #asArray message to get better performances, but I cannot grow anymore (add: and remove: are not supported on Array).",				"",				"### Public API and Key Messages",				"",				"- #new / #withAll: aCollection / #with: anObject \tare common constructors",				"- #add: anObject / #at: anIndex put: anObject / #at: anIndex ifAbsentPut: anObject \tallow to add new elements to myself.",				"- #remove: anObject / #removeIndex: anIndex \tallow to remove an element.",				"- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock \tare common iterators.",				"",				"### Examples\t",				"",				"```\t",				"\t\"There is many ways to create an OrderedCollection, here are some:\"",				"\tordCol := OrderedCollection new.",				"\tordCol",				"\t\tadd: 'one';",				"\t\tadd: 'two';",				"\t\taddFirst: 'zero';",				"\t\taddLast: 'three'.",				"\tordCol.\t\t\"returns: an OrderedCollection('zero' 'one' 'two' 'three')\"",				"",				"\t\"or\"",				"\tordCol := OrderedCollection with: 'one' with: 'two' with: 'three'.",				"\tordCol.\t\t\"returns: an OrderedCollection('one' 'two' 'three')\"",				"",				"\t\"or from an other collection\"",				"\tordCol := OrderedCollection withAll: #('one' 'two' 'three').",				"\tordCol.\t\t\"returns: an OrderedCollection('one' 'two' 'three')\"",				"",				"\t\"or\"",				"\t#('one' 'two' 'three') asOrderedCollection.",				"",				"\t\"Some manipulations\"",				"\tordCol := OrderedCollection ofSize: 2.",				"\tordCol",				"\t\tat: 1 put: 'one';",				"\t\tat: 2 put: 'two';",				"\t\tat: 2 ifAbsentPut: 'three'.",				"\tordCol.\t\t\"returns: an OrderedCollection('one' 'two')\"",				"\tordCol",				"\t\tremove: 'two';",				"\t\tremoveIndex: 1.",				"\tordCol.\t\t\"returns:  an OrderedCollection()\"",				"",				"\t\"A last one\"",				"\tordCol := OrderedCollection with: $b with: $c with: $a.",				"\tordCol sort: [ :first :second | first < second ].\t\t\"returns: an OrderedCollection($a $b $c)\"",				"\tordCol collect: [ :element | element asUppercase ].\t\t\"returns:  an OrderedCollection($A $B $C)\"",				"\tordCol select: [ :element | element >= $b ].\t\t\"returns:  an OrderedCollection($b $c)\"",				"\tordCol do: [ :element | element inspect ].",				"\tordCol asArray\t\t\"returns: #($a $b $c)\"",				"``` ",				"",				"###Internal Representation and Key Implementation Points.",				"Instance Variables",				"- array:\t\t\t<Array> \t\tAn Array where I store my elements. If I need a bigger one I can remove this one and create a new one.",				"- firstIndex:\t\t<Integer> \tThe index of my first element.",				"- lastIndex:\t\t<Integer> \tThe index of my last element.",				"",				"I store my elements inside an array. This array is AT LEAST of the size of my elements. If someone adds an element and my array is not large enough, I remove it and I create a new one larger with the same elements (usually, the size double)."			],			"category" : "Collections-Sequenceable-Ordered"		},		"Integer" : {			"hash" : 1011968,			"definition" : "Number subclass: #Integer\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		},		"FLLargeIdentitySet" : {			"hash" : 754688,			"definition" : "FLLargeIdentityHashedCollection subclass: #FLLargeIdentitySet\r\tinstanceVariableNames: 'array includesNil'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Collections'",			"comment" : [				"A LargeIdentitySet is an IdentitySet for large collections.",				"Rather than using linear probing, it takes advantage of the fact that identityHash (on a classic, 32bit VM) ",				"in Pharo only has 4096 unique values, using a bucket for each of those.",				"It will still work if hash range changes (ie buckets are chosen mod 4096), ",				"but the potential gain will be lower the more diverse the hash space is.",				"",				"With linear probing you risk an array looking like this:",				"Index:\tHash:",				"\t1\tX",				"\t2\tX",				"\t3\tX",				"\t4\t4",				"\t5\t5",				"\t6\t4",				"\t7\t4",				"\t8\t7",				"\t9\t6",				"\t10\tX",				"",				"While with buckets the same dataset looks:",				"Index:\tHash:",				"\t1\tX",				"\t2\tX",				"\t3\tX",				"\t4\t[4, 4, 4]",				"\t5\t5",				"\t6\t6",				"\t7\t7",				"\t8\tX",				"\t9\tX",				"\t10\tX",				"",				"So includes: can generally be done faster (also sped up byusing a special primitive), ",				"and removal of objects does not have to do extensive cleanup if object was part of a chain."			],			"category" : "Fuel-Core-Collections"		},		"ZnBufferedReadWriteStream" : {			"hash" : 1196800,			"definition" : "Object subclass: #ZnBufferedReadWriteStream\r\tinstanceVariableNames: 'readStream writeStream lastRead'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnBufferedReadWriteStream.",				"I wrap a buffered read stream and a buffered write stream on the same file.",				"",				"I discard my read buffer on writes, and flush my write buffer on reads.",				"Make sure to always send me #flush or #close when you're done,",				"otherwise the last buffer might not yet have been written.",				"My class side's #on:do: helps to ensure this.",				"",				"I can wrap both binary or character streams and act accordingly.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-Character-Encoding-Core"		},		"Interval" : {			"hash" : 804608,			"definition" : "SequenceableCollection subclass: #Interval\r\tinstanceVariableNames: 'start stop step'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"I represent a finite arithmetic progression (a range of number).",				"",				"Description",				"--------------------------",				"",				"I allow to iterate easily on a range of number (for example to manupulate an index) with a define step (by default one by one).",				"",				"Zero step size is not allowed and will raise an error.",				"",				"I know at which number I begin, at which number I end and the step.",				"",				"I work with the Number class. I manipulate some numbers and I can be created from a Number.  ",				"",				"Public API and Key Messages",				"--------------------------",				"",				"- I implement most of the classic Iterators as #do: or #collect:.",				"",				"- #from: to: and #from: to: by:  are my two common contructors. But I am usually created by a message send on Number  (See examples).",				"",				"Examples ",				"--------------------------",				"",				"To create an Interval from 1 to 100 there is many ways:",				"",				"\tInterval from: 1 to: 100",				"\tor",				"\tInterval from: 1 to: 100 by: 1",				"\t",				"\tor from a Number ",				"\t",				"\t1 to: 100 ",				"\tor ",				"\t1 to: 100 by: 1",				"\t",				"\tYou can also use floats or fractions: ",				"\t",				"\t0.1 to: 0.5 by: 0.01",				"\tor",				"\t1/10 to: 1/2 by: 1/100",				"\t",				"\tNB: both expressions will not give exactly the same result. The first will contains only floats and the second only fractions.",				"\t",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------------",				"",				"    Instance Variables",				"\tstart:\t\t<Number> \tThe beginning of the Interval.",				"\tstep:\t\t<Number> \tThe end of the Interval.",				"\tstop:\t\t<Number> \tThe step of the interval. If the step is 3 and we begin at 1 the interval will be 1, 4, 7, 10, 13… until the end."			],			"category" : "Collections-Sequenceable-Base"		},		"SpTransmission" : {			"hash" : 3000576,			"definition" : "Object subclass: #SpTransmission\r\tinstanceVariableNames: 'fromPort toPort transformBlock preTransmission postTransmission'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Transmission-Base'",			"comment" : [				"! What is a transmission?",				"Transmissions are a way to connect presenters, thinking on the \"flow\" of information more than the way it is displayed. For example, think on a master-detail (A->B) relationship, when you navigate the elements in master A, you want to see the detail B. This is tipically solved showing a list with master elements and a form with the detail of each master. ",				"In Spec, this will be declared more or less like this: ",				"",				"[[[language=Smalltalk",				"layout := SpBoxLayout newHorizontal",				"\tadd: (list := self newList);",				"\tadd: (detail := self newText);",				"\tyourself.\t",				"]]]",				"",				"But this does not says how ==list== and ==detail== are linked. ",				"",				"The transmission sub-framework solves this in an elegant way: Each presenter defines ''output ports'' (ports to send information) and ''input ports'' (ports to receive information). Each presenter defines also a default input port and a default output port.",				"",				"!! Transmitting from an output port to an input port (==#transmitTo:==)",				"",				"A transmission connects a presenter's output port with a presenter's input port. ",				"See this example: ",				"",				"[[[language=Smalltalk",				"list transmitTo: detail.",				"]]]",				"",				"This will connect the ==list== presenter \"\"default output port\"\" with the ==detail== presenter \"\"default input port\"\". This line is equivallent (but a lot simpler) to this one:  ",				"",				"[[[language=Smalltalk",				"list defaultOutputPort transmitTo: detail defaultInputPort",				"]]]",				"",				"Is important to remark that a transmission does not connects two components, it connect two \"\"component ports\"\". The distinction is important because there can be many ports!  ",				"Take for example *class:SpListPresenter*, it defines two output ports (selection and activation), this means it is possible to define also this transmission: ",				"",				"[[[language=Smalltalk",				"list outputActivationPort transmitTo: detail defaultInputPort",				"]]]",				"",				"!! Transforming a transmission (==#transmitTo:transform:==)",				"The object transmitted from a presenter output port can be inadequate for the input port. To solve this problem a transmission allow transformations.",				"This is as simple as using the ==#transform:== protocol: ",				"",				"[[[language=Smalltalk",				"list ",				"\ttransmitTo: detail ",				"\ttransform: [ :aValue | aValue asString ].",				"]]]",				"",				"[[[language=Smalltalk",				"list defaultOutputPort ",				"\ttransmitTo: detail defaultInputPort ",				"\ttransform: [ :aValue | aValue asString ].",				"]]]",				"",				"!! Transmitting from an output port to an arbitrary input receiver (==#transmitDo:==, ==#transmitDo:transform:==)",				"It is possible that the user requires to listen an output port, but instead transmitting the value to another presenter, other operation is needed. ",				"There is the ==#transmitDo:== protocol to handle this situation: ",				"",				"[[[language=Smalltalk",				"list transmitDo: [ :aValue | aValue crTrace ].",				"]]]",				"",				"!! Acting after a transmission (==#postTransmission:==)",				"Sometimes after a transmission happens, the user needs to react to modify something given the new status achieved by the presenter (like, pre-selecting something).",				"The ==#postTransmission:== protocol allows you to handle that situation.",				"",				"[[[language=Smalltalk",				"list ",				"\ttransmitTo: detail ",				"\tpostTransmission: [ :fromPresenter :toPresenter :value | ",				"\t\t\"something to do here\"",				"\t\ttoPresenter enabled: value isEmptyOrNil not ].",				"]]]",				"",				"See *method:SpTransmission#postTransmission:*"			],			"category" : "Spec2-Transmission-Base"		},		"ZnMultiValueDictionary" : {			"hash" : 1307648,			"definition" : "OrderedDictionary subclass: #ZnMultiValueDictionary\r\tinstanceVariableNames: 'limit'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Resource-Meta-Core'",			"comment" : [				"I am ZnMultiValueDictionary. ",				"I am a Dictionary.",				"",				"I offer an #at:add: method to transparently create Array valued multi entries when needed.",				"My #keysAndValuesDo: is overwritten to transparently deal with multi entries.",				"To merge two instance preserving multiple values you can use #addAllMulti:",				"I normally limit the number of entries to protect me from resource abuse.",				"",				"Note that most other methods will show the actual value.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-Resource-Meta-Core"		},		"Set" : {			"hash" : 819456,			"definition" : "HashedCollection subclass: #Set\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Sets'",			"comment" : [				"I represent a set of objects without duplicates.  I can hold anything that responds to",				"`#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,",				"Note that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.",				"",				"",				"The core operation is #find`ElementOrNil:`, which either finds the position where an",				"object is stored in array, if it is present, or finds a suitable position holding nil, if",				"its argument is not present in array.",				"",				"### Instance structure:",				"",				"- array\tAn array whose non-nil elements are the elements of the set,",				"  and whose nil elements are empty slots.  There is always at least one nil.",				"  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.",				"",				"-  tally\tThe number of elements in the set.  The array size is always greater than this.",				""			],			"category" : "Collections-Unordered-Sets"		},		"Stream" : {			"hash" : 835328,			"definition" : "Object subclass: #Stream\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I am an abstract class that represents an accessor for a sequence of objects. This sequence is referred to as my \"contents\"."			],			"category" : "Collections-Streams-Base"		},		"ZnApplicationFormUrlEncodedEntity" : {			"hash" : 1410816,			"definition" : "ZnEntity subclass: #ZnApplicationFormUrlEncodedEntity\r\tinstanceVariableNames: 'fields representation'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Core'",			"comment" : [				"I am ZnApplicationFormUrlEncodedEntity, a concrete HTTP Entity ",				"holding a set of fields (key value pairs) that is form URL encoded.",				"I am a ZnEntity.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Core"		},		"SpAbstractMorphicAdapter" : {			"hash" : 683008,			"definition" : "SpAbstractAdapter subclass: #SpAbstractMorphicAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Morphic-Base'",			"comment" : [				"I am an abstract class providing all the properties shared amongs all the morphic specific adapters"			],			"category" : "Spec2-Adapters-Morphic-Base"		},		"MetacelloVersionNumber" : {			"hash" : 1515776,			"definition" : "Magnitude variableSubclass: #MetacelloVersionNumber\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Model'",			"comment" : [				"# Metacello version format",				"",				"Thanks to [Mozilla Toolkit version format](https://developer.mozilla.org/en/Toolkit_version_format) for inspiration.",				"",				"##Version Format",				"A version string consists of one or more version parts, separated with dots or dashes.",				"",				"A version part with a leading dot is numeric. A version part with a leading dash is string.",				"",				"The rationale behind splitting a version part into a sequence of strings and numbers is that when comparing version parts, the numeric parts are compared as numbers, e.g. '1.0-pre.1' < '1.0-pre.10', while the strings are compared bytewise. See the next section for details on how versions are compared.",				"",				"##Comparing versions",				"",				"When two version strings are compared, their version parts are compared left to right. Empty parts are ignored.",				"",				"If at some point a version part of one version string is greater than the corresponding version part of another version string, then the first version string is greater than the other one.",				"",				"If a version string has extra parts and the common parts are equal, the shorter version string is less than the longer version string (1.0 is less than 1.0.0).",				"",				"Otherwise, the version strings are equal. ",				"",				"##Comparing version parts",				"",				"Version parts are also compared left to right, A string-part that exists is always less-then a nonexisting string-part (1.6-a is less than 1.6).",				"",				"Examples",				"",				"```",				"1 == 1. < 1.0 == 1..--0",				"< 1.1-a < 1.1-aa < 1.1-ab < 1.1-b < 1.1-c",				"< 1.1-pre < 1.1-pre.0 ",				"< 1.1-pre.1-a < 1.1-pre.1-aa < 1.1-pre.1-b < 1.1-pre.1",				"< 1.1-pre.2",				"< 1.1-pre.10",				"< 1.1 < 1.1.0 < 1.1.00",				"< 1.10",				"< 2.0",				"```"			],			"category" : "Metacello-Core-Model"		},		"SDL2TouchStateMachine" : {			"hash" : 4971520,			"definition" : "Object subclass: #SDL2TouchStateMachine\r\tinstanceVariableNames: 'first finish move color'\r\tclassVariableNames: ''\r\tpackage: 'OSWindow-SDL2-Examples-Touch'",			"comment" : [				"my role is to record the movements of a finger and associate a color to this movement"			],			"category" : "OSWindow-SDL2-Examples-Touch"		},		"CacheWeight" : {			"hash" : 1630720,			"definition" : "Object subclass: #CacheWeight\r\tinstanceVariableNames: 'total maximum compute'\r\tclassVariableNames: ''\r\tpackage: 'System-Caching'",			"comment" : [				"I  am CacheWeight.",				"I keep track of the weight of a cache.",				"",				"The weight of a cache is the sum of the weight of all values currently present. The simplest and default weight calculation returns a constant 1 for each value, effectively counting the number of values.",				"",				"The default maximum is 16.",				"",				"Using compute, a selector or block, applied to a value, different calculation can be made. Consider for example #sizeInMemory."			],			"category" : "System-Caching"		},		"DACompositeDependency" : {			"hash" : 4733952,			"definition" : "DAPackageDependency subclass: #DACompositeDependency\r\tinstanceVariableNames: 'dependencies'\r\tclassVariableNames: ''\r\tpackage: 'Tool-DependencyAnalyser-Core'",			"comment" : [				"A PDCompositeDependency is a composite dependency. A composite pattern is using.",				"",				"Actually in all case this dependency contains the dependencies between two packages and the instance variable dependencies contains all the type of dependencies (Extension, Inheritance, Reference, Trait)."			],			"category" : "Tool-DependencyAnalyser-Core"		},		"FLLargeIdentityDictionary" : {			"hash" : 754176,			"definition" : "FLLargeIdentityHashedCollection subclass: #FLLargeIdentityDictionary\r\tinstanceVariableNames: 'keys values'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Collections'",			"comment" : [				"I am an IdentityDictionary optimized for including a large number of elements."			],			"category" : "Fuel-Core-Collections"		},		"MethodDictionary" : {			"hash" : 826624,			"definition" : "Dictionary variableSubclass: #MethodDictionary\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I'm a special dictionary holding methods. I am just like a normal Dictionary, except that I am implemented differently.  Each Class has an instance of MethodDictionary to hold the correspondence between selectors (names of methods) and methods themselves.",				"",				"In a normal Dictionary, the instance variable 'array' holds an array of Associations.  Since there are thousands of methods in the system, these Associations waste space.  ",				"",				"Each MethodDictionary is a variable object, with the list of keys (selector Symbols) in the variable part of the instance.  The variable 'array' holds the values, which are CompiledMethods.",				"",				"About flushCache methods and usage.",				"",				"The VM caches method lookups in a lookup cache from class,selector pairs to method,primitive pairs, where primitive may be null.  This is called the first-level method lookup cache.  The JIT VM caches message lookups in machine code, so that a particular piece of machine code exists in a state that invokes a method for a specific class very fast by embedding the class reference in a register load and the target method in a call instruction, and having the target method verify this \"cache probe\" (this is an \"in-line cache).  The JIT also caches the translation of a byte coded method to machine code, by hiding a reference to a machine code method in a byte coded method.",				"",				"These caches can be invalidated in several circumstances:",				"",				"1a. if one adds or removes a method from a class's method dictionary it may change the correct results of a lookup not merely of the class whose dictionary was updated but also subclasses of the class.",				"1b. if one replaces a method in a method dictionary this changes the target method for a lookup of the selector for the class and subclasses",				"",				"2. if one wants to rewrite the byte code or literals of a method, for example because a Slot definition has changed, then if the method has been compiled to machine code, the machine code must be discarded before the new code may be executed",				"",				"1a & 1b are done via Symbol>>flushCache.  In response the normal VM flushes its first-level method lookup cache, and the JIT also scans all of machine code looking for inline caches with that selector, and voiding them, reverting each send site for that selector to the \"unlinked\" state.",				"",				"There used to be confusion in Squeak, which Pharo inherited, that using CompiledMethod>>flushCache was somehow the right way to void caches when updating method dictionaries, flushing the old method in the dictionary, if any, and the new method.  It isn't, precisely because adding or removing methods affects the visibility of inherited methods with the same selector.  So MethodDictionary code should use Symbol>>flushCache, and only once, on each update of a method dictionary.  As a result, the VM will ensure that the necessary send caches are flushed for that selector.",				"",				"2. is done via CompiledMethod>>flushCache.  In response the VM searches the first-level method lookup cache and removes all entries whose target is the method.  In addition the JIT discards the machine code for the method, and searches for all send sites with that method's machine code as the target and voids them, reverting them to the unlinked state.",				"",				"The VM must be told to flush the cached state for a compiled method via CompiledMethod>>flushCache and will /try/ and void the state for that method.  But it can't always deal with existing activations of that method, because if there are activations running the machine code, that machine code can't merely be thrown away, and can't be replaced because its length may change, depending on literals or byte codes.  So this kind of byte coded method manipulation needs to be done with case and some understanding of the total system state."			],			"category" : "Kernel-Methods"		},		"StGenericGenerator" : {			"hash" : 6683136,			"definition" : "StIterator subclass: #StGenericGenerator\r\tinstanceVariableNames: 'generator'\r\tclassVariableNames: ''\r\tpackage: 'NewTools-Spotter-Processors-Iterators'",			"comment" : [				"I wrap a generator to provide the same API than the iterators.",				"My subclasses should implement #elementsDo: to iterate the collection or implement the values.",				"In this method, each of the generated values should be used with the valuable pased.",				"",				"",				"Ex:",				"elementsDo: aValuable",				"\t[ true ] whileTrue: [ aValuable value: 42  ].",				"\t",				"This example generates an infinite iterator always returning 42.",				"Using the generator will produce that the method is only executed on demand.",				"",				"This Iterator can also wrap collections, iterating one element at the time.",				"",				"Ex:",				"elementsDo: aValuable",				"\tSystemNavigation default allBehaviorsDo: aValuable"			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"MetacelloVersionLoadDirective" : {			"hash" : 335616,			"definition" : "MetacelloDirective subclass: #MetacelloVersionLoadDirective\r\tinstanceVariableNames: 'loadDirectives'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-MC-Directives'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tloadDirectives:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-MC-Directives"		},		"ArrayedCollection" : {			"hash" : 855808,			"definition" : "SequenceableCollection subclass: #ArrayedCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys."			],			"category" : "Collections-Abstract-Base"		},		"RSCanvas" : {			"hash" : 6945536,			"definition" : "RSObjectWithProperty subclass: #RSCanvas\r\tuses: RSTContainer\r\tinstanceVariableNames: 'shapes fixedShapes camera animations extent color morph clearBackground showRectangles nodes edges'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Core'",			"comment" : [				"<keyClass>",				"Roassal keeps its shapes (i.e., instance of a subclass of `RSShape`) into a canvas. The class `RSCanvas` implements the Roassal canvas.",				"",				"*Responsibility*: keep the (i) structure of the Roassal shapes (both fixed and non-fixed) and (ii) the animations. `RSCanvas` hides the creation of the `RSAthensMorph`.",				"",				"*Collaborators*: This class is the entry point of Roassal. As soon as one wishes to use Roassal, she has to go through a canvas.",				"",				"*Variables*:",				"- `shapes` keeps a collection of shapes (i.e., instance of a subclass of `RSShape`) as an instance of `RSGroup`. Shapes contained in `shapes` are considered as non-fixed, which means that they are subject to the camera.",				"- `fixedShapes` is an instance of `RSGroup` that contains \"fixed\" shapes. A fixed shape is a shape that is not subject to the state of the camera. A fixed shape remains at the same position, independently if the canvas is scrolled.",				"- `color` is an instance of the Pharo class `Color` and is used to paint the background.",				"- `morph` refers to an instance of the class `RSAthensMorph`, which is the object that intersects Roassal and Morphic.",				"- `camera` refers to the camera of the canvas.",				"- `clearBackground` is a boolean indicating whether the background must be cleared at each refresh. This is useful sometime to obtain some interesting visual effects.",				"",				"*Example*:",				"```Smalltalk",				"c := RSCanvas new.",				"c add: (RSLabel new text: 'Hello from Roassal').",				"c",				"```"			],			"category" : "Roassal3-Core"		},		"CTSkipList class" : {			"hash" : 2311424,			"definition" : "CTSkipList class\r\tinstanceVariableNames: ''",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SkipList"		},		"OSEnvironment" : {			"hash" : 1623552,			"definition" : "Object subclass: #OSEnvironment\r\tinstanceVariableNames: 'platform'\r\tclassVariableNames: 'Current'\r\tpackage: 'System-OSEnvironments-Base'",			"comment" : [				"I represent the user environment variables. See  `man environ` for more details.",				"Get access using: ",				"",				"\tSmalltalk os environment",				"",				"I have a Dictionary-like API to access the system environment variables.",				"The common denominator for all platforms implements a simple API that uses strings.",				"In other words, methods",				"",				"- #at:",				"- #at:put:",				"",				"and its variants receive normal strings and decide whether they have to encode those strings to platform bytes or not depending on the platform.",				"",				"My subclasses may or may not provide additional APIs to have more control on the particular encoding used."			],			"category" : "System-OSEnvironments-Base"		},		"Array2D" : {			"hash" : 857600,			"definition" : "Collection subclass: #Array2D\r\tinstanceVariableNames: 'contents numberOfColumns numberOfRows'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I represent a mathematical matrix or a two-dimensional array. I provide methods for creating matrices, operating on them arithmetically and algebraically. ",				"",				"Structure:",				" - numberOfRows : a non-negative integer saying how many rows there are.",				" - numberOfColumns : a non-negative integer saying how many columns there are.",				" - contents : an Array holding the elements in row-major order.  That is, for a 2x3 array the contents are (11 12 13 21 22 23).  ",				"",				"",				"Element-wise matrix arithmetic works; you can freely mix matrices and numbers but",				"don't try to mix matrices and arrays (yet).",				"Matrix multiplication, using the symbol +* (derived from APL's +.x), works between",				"(Matrix or Array) +* (Matrix or Array).  Don't try to use a number as an argument of +*.",				"Matrix * Number and Number * Matrix work fine, so you don't need +* with numbers."			],			"category" : "Collections-Sequenceable-Ordered"		},		"RSTContainer" : {			"hash" : 6942464,			"definition" : "Trait named: #RSTContainer\r\tinstanceVariableNames: ''\r\tpackage: 'Roassal3-Core'",			"comment" : [				"My users can have edges and nodes useful to build graphs with roassal"			],			"category" : "Roassal3-Core"		},		"IRBuilder" : {			"hash" : 1232896,			"definition" : "Object subclass: #IRBuilder\r\tinstanceVariableNames: 'ir currentScope jumpBackTargetStacks jumpAheadStacks currentSequence sourceMapNodes sourceMapByteIndex'\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-IR-Manipulation'",			"comment" : [				"I provide a simple interface for constructing an IRMethod.  For example, to create an ir method that compares first instVar to first arg and returns 'yes' or 'no' (same example as in BytecodeGenerator), do:",				"",				"\tIRBuilder new",				"\t\tnumArgs: 1;",				"\t\taddTemps: #(a z);",				"\t\tpushReceiver;",				"\t\tpushInstVar: 1;",				"\t\tpushTemp: #a;",				"\t\tsend: #>;",				"\t\tjumpAheadTo: #else if: false;",				"\t\tpushLiteral: 'yes';",				"\t\treturnTop;",				"\t\tjumpAheadTarget: #else;",				"\t\tpushLiteral: 'no';",				"\t\treturnTop;",				"\t\tir",				"",				"Sending #compiledMethod to an ir method will generate its compiledMethod.  Sending #methodNode to it will decompile to its parse tree."			],			"category" : "OpalCompiler-Core-IR-Manipulation"		},		"ZnBufferedReadStream" : {			"hash" : 1196032,			"definition" : "Object subclass: #ZnBufferedReadStream\r\tinstanceVariableNames: 'stream buffer position limit'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnBufferedReadStream.",				"",				"I wrap another ReadStream and add efficient buffering for the typical access pattern of parsers: sending lots of #next, #peek and #atEnd messages.",				"",				"By design I do not implement #position and #position: or anything based on that.",				"",				"I can wrap both binary or character streams and act accordingly.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-Character-Encoding-Core"		},		"ReadStream" : {			"hash" : 1105920,			"definition" : "PositionableStream subclass: #ReadStream\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I represent an accessor for a sequence of objects that can only read objects from the sequence."			],			"category" : "Collections-Streams-Base"		},		"RxmLink" : {			"hash" : 1436928,			"definition" : "Object subclass: #RxmLink\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Regex-Core-Links'",			"comment" : [				"-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov",				"--",				"A matcher is built of a number of links interconnected into some intricate structure. Regardless of fancy stuff, any link (except for the terminator) has the next one. Any link can match against a stream of characters, recursively propagating the match to the next link. Any link supports a number of matcher-building messages. This superclass does all of the above. ",				"",				"The class is not necessarily abstract. It may double as an empty string matcher: it recursively propagates the match to the next link, thus always matching nothing successfully.",				"",				"Principal method:",				"\tmatchAgainst: aMatcher",				"\t\tAny subclass will reimplement this to test the state of the matcher, most",				"\t\tprobably reading one or more characters from the matcher's stream, and",				"\t\teither decide it has matched and answer true, leaving matcher stream",				"\t\tpositioned at the end of match, or answer false and restore the matcher",				"\t\tstream position to whatever it was before the matching attempt.",				"",				"Instance variables:",				"\tnext\t\t<RxmLink | RxmTerminator> The next link in the structure."			],			"category" : "Regex-Core-Links"		},		"Link class" : {			"hash" : 1023232,			"definition" : "Link class\r\tinstanceVariableNames: ''",			"comment" : [				"An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."			],			"category" : "Collections-Support-Links"		},		"Heap" : {			"hash" : 1001984,			"definition" : "Collection subclass: #Heap\r\tinstanceVariableNames: 'array tally sortBlock indexUpdateBlock'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"Heap implements a special data structure commonly referred to as 'heap' [ http://en.wikipedia.org/wiki/Heap_%28data_structure%29 ]",				"",				"Heaps are good at handling priority queues because:",				"\t1) greatest priority element according to the sort block will be stored in first position and thus accessed in O(1) operations",				"\t2) worse time for inserting or removing an element is in O(log n) operations, where n is the size of the Heap",				"\tInsertion/Removal times are more efficient than above upper bound, provided that:",				"\t\ta) Elements are only removed at the beginning",				"\t\tb) Elements are added with arbitrary sort order.",				"\t3) there is no need to fully sort the Heap, which makes it more efficient than a SortedCollection",				"",				"The heap can be fully sorted by sending the message #fullySort.",				"Worse time for fully sorting the Heap is in O(n log n) operations, but this is rarely used a feature.",				"Remind that the Heap does not fully sort the collection if you don't ask.",				"Thus don't expect #do: and other iterators to enumerate elements according to the sortBlock order.",				"",				"Instance variables:",				"       array           <Array>         The data repository",				"       tally           <Integer>       The number of elements in the heap",				"       sortBlock       <Block|nil>     A two-argument block defining the sort order,",				"                                                       or nil in which case the default sort order is",				"                                                               [:element1 :element2| element1 <= element2]",				"       indexUpdateBlock        <Block|nil>",				"                                                       A two-argument block of the form [:data :index | ... ]",				"                                                       which allows an application object to keep track of its",				"                                                       index within the heap.  Useful for quick heap update",				"                                                       when object's sort value changes (for example, when an",				"                                                       object in a priority queue has its priority increased",				"                                                       by an external event, you don't want to have to search",				"                                                       through the whole heap to find the index before fixing",				"                                                      the heap).  No update occurs if nil.",				"",				"The Heap can be viewed as a binary tree (every node in the tree has at most two children).",				"The root is stored in first slot of internal array.",				"The children are stored in next two slots.",				"The children of children in next four slots.",				"etc...",				"",				"For a node A of index i (1 based), the two children B1 and B2 are thus stored in indices (2*i) and (2*i+1).",				"Of course, the children indices must be less than the tally otherwise they are considered inexistent.",				"",				"The Heap does arrange to preserve the following invariant:",				"For any children B of a node A, A is sorted before B, in other words, (self sort: A before: B) = true",				"This implies that the root is always the first element according to sort order."			],			"category" : "Collections-Sequenceable-Base"		},		"UndefinedObject" : {			"hash" : 787200,			"definition" : "Object subclass: #UndefinedObject\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"I describe the behavior of my sole instance, nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless."			],			"category" : "Kernel-Objects"		},		"WideCharacterSet" : {			"hash" : 1186560,			"definition" : "Collection subclass: #WideCharacterSet\r\tinstanceVariableNames: 'map byteArrayMap'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-CharacterSets'",			"comment" : [				"WideCharacterSet is used to store a Set of WideCharacter with fast access and inclusion test.",				"",				"Implementation should be efficient in memory if sets are sufficently sparse.",				"",				"Wide Characters are at most 32bits.",				"We split them into 16 highBits and 16 lowBits.",				"",				"map is a dictionary key: 16 highBits value: map of 16 lowBits.",				"",				"Maps of lowBits  are stored as arrays of bits in a ByteArray.",				"If a bit is set to 1, this indicate that corresponding character is present.",				"8192 bytes are necessary in each lowmap.",				"Empty lowmap are removed from the map Dictionary.",				"",				"A byteArrayMap is maintained in parallel with map for fast handling of ByteString.",				"(byteArrayMap at: i+1) = 0 means that character of asciiValue i is absent, = 1 means present."			],			"category" : "Collections-Support-CharacterSets"		},		"RBProgramNode" : {			"hash" : 1151488,			"definition" : "RBNode subclass: #RBProgramNode\r\tinstanceVariableNames: 'parent properties'\r\tclassVariableNames: 'FormatterClass'\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBProgramNode is an abstract class that represents an abstract syntax tree node in a Smalltalk program.",				"",				"Subclasses must implement the following messages:",				"\taccessing",				"\t\tstart",				"\t\tstop",				"\tvisitor",				"\t\tacceptVisitor:",				"\ttesting",				"\t\tisFaulty",				"",				"The #start and #stop methods are used to find the source that corresponds to this node. \"source copyFrom: self start to: self stop\" should return the source for this node.",				"",				"The #acceptVisitor: method is used by RBProgramNodeVisitors (the visitor pattern). This will also require updating all the RBProgramNodeVisitors so that they know of the new node.",				"",				"The #isFaulty method is used to distinguish between valid nodes and nodes created from an invalid source Smalltalk code. For example, code parsed with RBParsers #parseFaultyExpression: or #parseFaultyMethod:.",				"",				"Subclasses might also want to redefine match:inContext: and copyInContext: to do parse tree searching and replacing.",				"",				"Subclasses that contain other nodes should override equalTo:withMapping: to compare nodes while ignoring renaming temporary variables, and children that returns a collection of our children nodes.",				"",				"Instance Variables:",				"\tproperties\t<Dictionary of: Symbol -> Object>\tA set of properties set to this node, for example every node can have the Property #comment to attach the method comment or the comment of the code line this node represents. Other classes or tools may add more type of properties; for example, the reflectivity support adds properties for managing Metalinks. ",				"\tparent\t<RBProgramNode>\tthe node we're contained in",				"",				"Class Variables:",				"\tFormatterClass\t<Behavior>\tthe formatter class that is used when we are formatted"			],			"category" : "AST-Core-Nodes"		},		"CTSkipList" : {			"hash" : 2311680,			"definition" : "Object subclass: #CTSkipList\r\tinstanceVariableNames: 'lists sortBlock lowerBound upperBound random'\r\tclassVariableNames: ''\r\tpackage: 'Containers-SkipList'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tlists:\t\t<Object>",				"\tlowerBound:\t\t<Object>",				"\trandom:\t\t<Object>",				"\tsortBlock:\t\t<Object>",				"\tupperBound:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SkipList"		},		"NavigationHistory" : {			"hash" : 2022400,			"definition" : "Object subclass: #NavigationHistory\r\tinstanceVariableNames: 'storage index maxSize paused'\r\tclassVariableNames: ''\r\tpackage: 'Tool-Base-Utilities'",			"comment" : [				"I act as a web browser history"			],			"category" : "Tool-Base-Utilities"		},		"ProcessList" : {			"hash" : 1091072,			"definition" : "SequenceableCollection subclass: #ProcessList\r\tinstanceVariableNames: 'firstLink lastLink'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Processes'",			"comment" : [				"I am a VM Special class! Do not break me!",				"",				"I am a linked list that contains processes as Nodes. My implementation is tied to the VM: ",				"- every node I contain should have as first instance variable the next node in the list.",				"",				"My main user is ProcessScheduler, which contains an array with instances of myself. Each entry in that array a priority for processes. Processes are queues in each process list by the VM automatically."			],			"category" : "Kernel-Processes"		},		"RSComposite" : {			"hash" : 6982912,			"definition" : "RSBoundingShape subclass: #RSComposite\r\tuses: RSTContainer\r\tinstanceVariableNames: 'nodes edges children clipChildren'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Shapes-Bounding'",			"comment" : [				"I am a composite shapes. I can therefore contain other shapes.",				"",				"Here is a simple example:",				"```",				"c := RSCanvas new.",				"",				"box := RSBox new width: 40; height: 10; color: Color blue.",				"label := RSLabel new text: 'Hello Roassal3'.",				"RSLocation new above; move: box on: label.",				"composite := RSComposite new.",				"composite shapes: { label . box }.",				"composite @ RSDraggable.",				"",				"c add: composite.",				"c open",				"```",				"",				"A composite can also have a background color. Simply use #color: for this:",				"```",				"c := RSCanvas new.",				"",				"box := RSBox new width: 40; height: 10; color: Color blue.",				"label := RSLabel new color: Color black; text: 'Hello Roassal3'.",				"RSLocation new above; move: box on: label.",				"composite := RSComposite new.",				"composite color: Color gray.",				"composite shapes: { label . box }.",				"composite @ RSDraggable.",				"",				"c add: composite.",				"c open",				"```",				"",				"A padding describes a space between the border of the composite element and the inner shapes. It can be adjusted using the message #padding:",				"",				"```",				"c := RSCanvas new.",				"",				"box := RSBox new width: 40; height: 10; color: Color blue.",				"label := RSLabel new color: Color black; text: 'Hello Roassal3'.",				"RSLocation new above; move: box on: label.",				"composite := RSComposite new.",				"composite color: Color gray.",				"composite shapes: { label . box }.",				"composite @ RSDraggable.",				"composite padding: 10.",				"",				"c add: composite.",				"c open",				"```",				"",				"Inner nodes can be layouted:",				"```",				"classes := RSObject withAllSubclasses.",				"",				"c := RSCanvas new.",				"",				"classes do: [ :cls |",				"\tlabel := RSLabel new text: cls name.",				"\tmethods := ",				"\t\tcls methods collect: [ :m |",				"\t\t\tRSBox new model: m; size: m sourceCode size sqrt; color: Color blue ] as: RSGroup.",				"\tRSGridLayout on: methods.",				"\tmethods @ RSPopup.",				"\tRSLocation new above; move: label on: methods.",				"\tcomposite := RSComposite new.",				"\tcomposite color: Color gray.",				"\tcomposite shapes: { label }, methods.",				"\tcomposite @ RSDraggable.",				"\tcomposite padding: 10.",				"\tc add: composite.",				"].",				"",				"RSFlowLayout on: c shapes.",				"",				"c @ RSCanvasController.",				"c open",				"```",				"",				"Lines can be added between composite. Here is an example:",				"```",				"classes := RSObject withAllSubclasses.",				"",				"c := RSCanvas new.",				"",				"classes do: [ :cls |",				"\tlabel := RSLabel new text: cls name.",				"\tmethods := ",				"\t\tcls methods collect: [ :m |",				"\t\t\tRSBox new model: m; size: m sourceCode size sqrt; color: Color blue ] as: RSGroup.",				"\tRSGridLayout on: methods.",				"\tmethods @ RSPopup.",				"\tRSLocation new above; move: label on: methods.",				"\tcomposite := RSComposite new.",				"\tcomposite model: cls.",				"\tcomposite color: Color gray.",				"\tcomposite shapes: { label }, methods.",				"\tcomposite @ RSDraggable.",				"\tcomposite padding: 10.",				"\tc add: composite.",				"].",				"",				"RSEdgeBuilder orthoVertical",				"\tcanvas: c;",				"\twithVerticalAttachPoint;",				"\tconnectFrom: #superclass.",				"",				"RSTreeLayout on: c nodes.",				"",				"c @ RSCanvasController.",				"c open.",				"```"			],			"category" : "Roassal3-Shapes-Bounding"		}	},	"messages" : {		"add:atHeight:predecessors:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList>>#add:atHeight:",				"CTSkipListTest>>#testProfileAddingFromScratch",				"CTSkipListTest>>#testProfileAdditionOf35"			],			"implementors" : {				"CTSkipList" : {					"sourceCode" : [						"add: key atHeight: r predecessors: aLink",						"",						"\t| newLink predecessors |",						"\tpredecessors := aLink.",						"\tnewLink := nil.",						"",						"\tr timesRepeat: [ ",						"\t\t| predecessor |",						"\t\tpredecessor := predecessors value.",						"",						"\t\tnewLink := CTDoubleValueLink new",						"\t\t\t           value: key;",						"\t\t\t           previousLink: newLink;",						"\t\t\t           nextLink: predecessor nextLink;",						"\t\t\t           yourself.",						"",						"\t\tpredecessor nextLink: newLink.",						"",						"\t\tpredecessors := predecessors nextLink ].",						"",						"\t^ newLink"					],					"body" : [						"| newLink predecessors |",						"predecessors := aLink.",						"newLink := nil.",						"",						"r timesRepeat: [ ",						"\t| predecessor |",						"\tpredecessor := predecessors value.",						"",						"\tnewLink := CTDoubleValueLink new",						"\t\t           value: key;",						"\t\t           previousLink: newLink;",						"\t\t           nextLink: predecessor nextLink;",						"\t\t           yourself.",						"",						"\tpredecessor nextLink: newLink.",						"",						"\tpredecessors := predecessors nextLink ].",						"",						"^ newLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 54488124,					"argumentNames" : [						"key",						"r",						"aLink"					]				}			}		},		"onSortedCollection:lowerBound:upperBound:atRandom:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList class>>#onSortedCollection:lowerBound:upperBound:"			],			"implementors" : {				"CTSkipList class" : {					"sourceCode" : [						"onSortedCollection: aCollection lowerBound: lower upperBound: upper atRandom: aRandom",						"",						"\t| brgc lists cleanLists lowerJust upperJust times nothingObject |",						"\tnothingObject := nil asNothingMaybe asCategory.",						"\tlowerJust := lower asJustMaybe asCategory.",						"\tupperJust := upper asJustMaybe asCategory.",						"",						"\tbrgc := aCollection size asBRGCCollection.",						"",						"\tlists := nil.",						"",						"\ttimes := aCollection",						"\t\t         ifEmpty: [ 0 ]",						"\t\t         ifNotEmpty: [ (aCollection size log: 2) floor + 1 ].",						"",						"\ttimes timesRepeat: [ ",						"\t\t| list link nextLinkSafe |",						"\t\tlink := lists value.",						"",						"\t\tnextLinkSafe := [ link := link ifNotNil: [ link nextLink ] ].",						"",						"\t\tlist := CTDoubleValueLink new",						"\t\t\t        value: lowerJust;",						"\t\t\t        previousLink: link;",						"\t\t\t        nextLink: nil;",						"\t\t\t        yourself.",						"",						"\t\tnextLinkSafe value.",						"",						"\t\taCollection withIndexDo: [ :each :index | ",						"\t\t\t| left eachForList |",						"\t\t\tleft := brgc at: index.",						"",						"\t\t\teachForList := left > 0",						"\t\t\t\t               ifTrue: [ each asJustMaybe asCategory ]",						"\t\t\t\t               ifFalse: [ nothingObject ].",						"",						"\t\t\tbrgc at: index put: left - 1.",						"",						"\t\t\tlist := CTDoubleValueLink new",						"\t\t\t\t        value: eachForList;",						"\t\t\t\t        previousLink: link;",						"\t\t\t\t        nextLink: list;",						"\t\t\t\t        yourself.",						"",						"\t\t\tnextLinkSafe value ].",						"",						"\t\tlist := CTDoubleValueLink new",						"\t\t\t        value: upperJust;",						"\t\t\t        previousLink: link;",						"\t\t\t        nextLink: list;",						"\t\t\t        yourself.",						"",						"\t\tnextLinkSafe value.",						"",						"\t\tself assert: link isNil.",						"",						"\t\tlists := list reversed ~~> lists ].",						"",						"\tcleanLists := lists.",						"",						"\t[ cleanLists ] whileNotNil: [ ",						"\t\t| list |",						"\t\tlist := cleanLists value.",						"",						"\t\t[ list ] whileNotNil: [ ",						"\t\t\t| each |",						"\t\t\teach := list nextLink.",						"",						"\t\t\t[ each value == nothingObject ] whileTrue: [ each := each nextLink ].",						"",						"\t\t\tlist := list",						"\t\t\t\t        value: list value argument;",						"\t\t\t\t        nextLink: each;",						"\t\t\t\t        nextLink ].",						"",						"\t\tcleanLists := cleanLists nextLink ].",						"",						"",						"\t^ self new",						"\t\t  lists: lists;",						"\t\t  sortBlock: aCollection sortBlock;",						"\t\t  lowerBound: lower;",						"\t\t  upperBound: upper;",						"\t\t  random: aRandom;",						"\t\t  yourself"					],					"body" : [						"| brgc lists cleanLists lowerJust upperJust times nothingObject |",						"nothingObject := nil asNothingMaybe asCategory.",						"lowerJust := lower asJustMaybe asCategory.",						"upperJust := upper asJustMaybe asCategory.",						"",						"brgc := aCollection size asBRGCCollection.",						"",						"lists := nil.",						"",						"times := aCollection",						"\t         ifEmpty: [ 0 ]",						"\t         ifNotEmpty: [ (aCollection size log: 2) floor + 1 ].",						"",						"times timesRepeat: [ ",						"\t| list link nextLinkSafe |",						"\tlink := lists value.",						"",						"\tnextLinkSafe := [ link := link ifNotNil: [ link nextLink ] ].",						"",						"\tlist := CTDoubleValueLink new",						"\t\t        value: lowerJust;",						"\t\t        previousLink: link;",						"\t\t        nextLink: nil;",						"\t\t        yourself.",						"",						"\tnextLinkSafe value.",						"",						"\taCollection withIndexDo: [ :each :index | ",						"\t\t| left eachForList |",						"\t\tleft := brgc at: index.",						"",						"\t\teachForList := left > 0",						"\t\t\t               ifTrue: [ each asJustMaybe asCategory ]",						"\t\t\t               ifFalse: [ nothingObject ].",						"",						"\t\tbrgc at: index put: left - 1.",						"",						"\t\tlist := CTDoubleValueLink new",						"\t\t\t        value: eachForList;",						"\t\t\t        previousLink: link;",						"\t\t\t        nextLink: list;",						"\t\t\t        yourself.",						"",						"\t\tnextLinkSafe value ].",						"",						"\tlist := CTDoubleValueLink new",						"\t\t        value: upperJust;",						"\t\t        previousLink: link;",						"\t\t        nextLink: list;",						"\t\t        yourself.",						"",						"\tnextLinkSafe value.",						"",						"\tself assert: link isNil.",						"",						"\tlists := list reversed ~~> lists ].",						"",						"cleanLists := lists.",						"",						"[ cleanLists ] whileNotNil: [ ",						"\t| list |",						"\tlist := cleanLists value.",						"",						"\t[ list ] whileNotNil: [ ",						"\t\t| each |",						"\t\teach := list nextLink.",						"",						"\t\t[ each value == nothingObject ] whileTrue: [ each := each nextLink ].",						"",						"\t\tlist := list",						"\t\t\t        value: list value argument;",						"\t\t\t        nextLink: each;",						"\t\t\t        nextLink ].",						"",						"\tcleanLists := cleanLists nextLink ].",						"",						"",						"^ self new",						"\t  lists: lists;",						"\t  sortBlock: aCollection sortBlock;",						"\t  lowerBound: lower;",						"\t  upperBound: upper;",						"\t  random: aRandom;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "creation",					"comment" : [ ],					"hash" : 72969356,					"argumentNames" : [						"aCollection",						"lower",						"upper",						"aRandom"					]				}			}		},		"testLinkReferencingItself" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testLinkReferencingItself",						"",						"\t| l |",						"\tl := Link new.",						"",						"\tl next: l.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := Link new.",						"",						"l next: l.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3302448,					"argumentNames" : [ ]				}			}		},		"testThreeLinksTooMuchSkipping" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testThreeLinksTooMuchSkipping",						"",						"\t| l1 l2 l3 |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"\tl3 := Link new.",						"",						"\tl1 next: l2.",						"\tl2 next: l3.",						"",						"\t^ self shouldnt: [ l1 next: 10 ] raise: SubscriptOutOfBounds"					],					"body" : [						"| l1 l2 l3 |",						"l1 := Link new.",						"l2 := Link new.",						"l3 := Link new.",						"",						"l1 next: l2.",						"l2 next: l3.",						"",						"^ self shouldnt: [ l1 next: 10 ] raise: SubscriptOutOfBounds"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3828265,					"argumentNames" : [ ]				}			}		},		"testThreeLinksReferencingEachOther" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testThreeLinksReferencingEachOther",						"",						"\t| l1 l2 l3 |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"\tl3 := Link new.",						"",						"\tl1 next: l2.",						"\tl2 next: l3.",						"\tl3 next: l1.",						"",						"\t^ self exportSlotsGraphOf: l1"					],					"body" : [						"| l1 l2 l3 |",						"l1 := Link new.",						"l2 := Link new.",						"l3 := Link new.",						"",						"l1 next: l2.",						"l2 next: l3.",						"l3 next: l1.",						"",						"^ self exportSlotsGraphOf: l1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3828433,					"argumentNames" : [ ]				}			}		},		"next:" : {			"senders" : [				"AbstractBinaryFileStream>>#next",				"AbstractBinaryFileStream>>#skip:",				"AbstractBinaryFileStream>>#nextLittleEndianNumber:",				"AbstractFileReference>>#inspectionContents",				"AthensSimplePathBuilder>>#addSegment:",				"AthensTextDisplayCommand>>#insert:",				"AthensTextDisplayCommand>>#addLast:",				"AthensTextLine>>#addCommand:",				"BMPReadWriter>>#readColorMap",				"BMPReadWriter>>#readIndexedBmpFile:",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"BinaryFileStreamTest>>#testReadMoreThanAvailableYieldsOnlyAvailable",				"BinaryFileStreamTest>>#testReadLessThanAvailableYieldsJustRead",				"BinaryFileStreamTest>>#testReadMultipleBytes",				"CTLinksLinkTest>>#testLinkNext3",				"CTLinksLinkTest>>#testLinkReferencingAnotherLink",				"CTLinksLinkTest>>#testLinkReferencingItself",				"CTLinksLinkTest>>#testThreeLinksReferencingEachOther",				"CTLinksLinkTest>>#testThreeLinksTooMuchSkipping",				"CoBasicFetcherWithElementsTest>>#testResetShouldRestartGenerator",				"CoBasicFetcherWithElementsTest>>#testNextManyShouldReturnCollection",				"CoBasicFetcherWithElementsTest>>#testNextManyAfterLimitShouldStopAfterLimit",				"CoHeuristicBuilder>>#build",				"CoNarrowHistoryFetcherTest>>#testNarrowingReturnsSameElementsThatCallingDirectly",				"CoNarrowHistoryFetcherTest>>#testNarrowingAndUnnarrowingReturnsSameResult",				"CoResultSet>>#fetch:",				"CoSequenceFetcherTest>>#testCompletionCompositionNextManyShouldStopAfterEndOfElements",				"CoSequenceFetcherTest>>#testCompletionCompositionNextShouldReturnValuesOfSecondCompletionAfterFirst",				"CoSequenceFetcherTest>>#testNextManyAfterFirstSubfetcherShouldReturnCollectionWithSecondSubfetcherElements",				"CompilationContext class>>#cleanOptionString:",				"DateParser>>#parse:expectedSize:",				"EDEmergencyDebuggerTest>>#testComposeErrorTextFrom",				"FLAnalyzer>>#privateMappers",				"FLAnalyzer>>#mappers",				"FLPharoPlatform class>>#fuelNextWordsInto:",				"FileDialogWindow>>#updateTextPreview",				"FileList>>#streamFirst5000BytesWithEncodingFrom:",				"FileList>>#readContentsHex:",				"FileList>>#streamFirst5000BytesFrom:",				"Form>>#readResourceFrom:",				"GIFReadWriter>>#readCommentExtension",				"GIFReadWriter>>#readApplicationExtension",				"GeneratorTest>>#testFibonacci",				"HEBinaryReader>>#readInt32",				"HEBinaryReader>>#readByteArray",				"HEBinaryReader>>#readUInt32",				"IdentifierChooserMorph>>#newChoicesMorph",				"ImageReadWriter>>#hasMagicNumber:",				"ImageReadWriter>>#next:",				"InflateStream>>#getFirstBuffer",				"JPEGReadStream>>#nextBytes:",				"JPEGReadWriter>>#parseAPPn",				"JPEGReadWriter>>#parseHuffmanTable",				"JPEGReadWriter>>#skipMarker",				"KMKeyCombinationSequence class>>#first:next:",				"LIFOQueue>>#nextPut:",				"LIFOQueue>>#initialize",				"LIFOQueue>>#nextIfNone:",				"LIFOQueue>>#next",				"LzwGifDecoder>>#nextByte",				"LzwGifDecoder>>#peekByte",				"LzwGifDecoder>>#codeStream:",				"MCDataStream>>#readByteArray",				"ManifestHeuristicCompletionModel class>>#ruleReTempsReadBeforeWrittenRuleV1FalsePositive",				"MemoryFileSystemTest>>#testStreamWriteAndRead",				"NetNameResolver class>>#stringFromIPv6Address:",				"OSSDL2Driver>>#eventFilter",				"PNGReadWriter>>#processNextChunk",				"PharoFilesOpener>>#changesFileOrNilReadOnly:silent:",				"PopupChoiceDialogWindow>>#newChoicesMorph",				"PositionableStream>>#string",				"PositionableStream>>#upToPosition:",				"PositionableStream>>#nextLittleEndianNumber:",				"PositionableStream>>#fuelNextWordsInto:",				"PositionableStream>>#nextWordsInto:",				"RBScanner>>#scanNumber",				"Random>>#useUnixRandomGeneratorSeed",				"ReadStreamTest>>#testContents",				"ReadWriteStream>>#isZipArchive",				"ReadWriteStreamTest>>#testReset",				"ReadWriteStreamTest>>#testContents",				"ReadWriteStreamTest>>#testNext",				"RubAbstractTextArea>>#withDecorator:",				"RubAbstractTextArea>>#newParagraph",				"RubAbstractTextArea>>#withoutDecorator:",				"RubEditingArea>>#newParagraph",				"RubParagraphDecorator class>>#next:",				"RubShoutStylerDecorator>>#next:",				"RubTextFieldArea>>#newParagraph",				"RxMatcher>>#subexpressions:",				"RxMatcher>>#makeOptional:",				"RxMatcher>>#makeStar:",				"RxMatcher>>#hookBranchOf:onto:",				"RxMatcher>>#makePlus:",				"SHA1>>#hashStream:",				"STCommandLineHandler>>#skipShebangFrom:",				"SourceFile>>#getPreambleAt:",				"SourceFile>>#next:",				"SourceFileBufferedReadWriteStream>>#next:putAll:startingAt:",				"SourceFileBufferedReadWriteStream>>#upToEnd",				"SourceFileBufferedReadWriteStreamTest>>#testReadUpToEnd",				"SourceFileBufferedReadWriteStreamTest>>#testBuffering",				"SourceFileBufferedReadWriteStreamTest>>#testReadThenWrite",				"SourceFileCharacterReadWriteStream>>#next:",				"Srfi41AbstractTest>>#assert:equals:upto:modulo:",				"Srfi41ArithSequenceTest>>#testPrimeNumbers",				"Srfi41ArithSequenceTest>>#testSrfi41Iter",				"Srfi41ArithSequenceTest>>#testRandomNumbers",				"Srfi41ArithSequenceTest>>#testCollatz",				"Srfi41ArithSequenceTest>>#testPrimesScan",				"Srfi41ArithSequenceTest>>#testHamming",				"Srfi41ArithSequenceTest>>#testTriangularNumbers",				"Srfi41ArithSequenceTest>>#testFactorialNumbers",				"Srfi41ArithSequenceTest>>#testPrimeGaps",				"Srfi41ArithSequenceTest>>#testNthRootsOfUnity",				"Srfi41ArithSequenceTest>>#testCounting",				"Srfi41ArithSequenceTest>>#testEvenNumbers",				"Srfi41ArithSequenceTest>>#testGrayCodes",				"Srfi41ArithSequenceTest>>#testNaturalNumbers",				"Srfi41ArithSequenceTest>>#testRationalNumbers",				"Srfi41ArithSequenceTest>>#testLucasNumbers",				"Srfi41ArithSequenceTest>>#testContinuedFractions",				"Srfi41ArithSequenceTest>>#testFibonacciNumbers",				"Srfi41BacktrackingTest>>#test8Queens",				"Srfi41FormalPowerSeriesTest>>#testAt",				"Srfi41NumbersSequenceHamming>>#primes",				"Srfi41Stream>>#next:",				"Srfi41Stream>>#layersBy:",				"Srfi41StreamTest>>#testScan",				"Srfi41StreamTest>>#testCrossProduct",				"Srfi41StreamTest>>#testLayers",				"Srfi41StreamTest>>#testMerge",				"Srfi41StreamTest>>#testFundamentalCheck",				"Srfi41StreamTest>>#testPermutations",				"Srfi41StreamTest>>#testMonadBind",				"Srfi41StreamTest>>#testIntersperse",				"Srfi41StreamTest>>#testSort",				"Srfi41StreamTest>>#testRepeat",				"Srfi41StreamTest>>#testDovetail",				"Srfi41StreamTest>>#testNextEvery",				"Srfi41StreamTest>>#testPeriodic",				"Srfi41StreamTest>>#testConvolution",				"Srfi41StreamTest>>#testFoldr",				"Srfi41StreamTest>>#testCollect",				"StGeneratorBlockIteratorTest>>#testIteratorWithInfiniteBlockOnlyCallFirstTimes",				"StGeneratorIteratorTest>>#testCollectionWithSingleWithALotOfElementsReturnsTheRequestedInCollection",				"StGeneratorIteratorTest>>#testCollectionWithSingleManyElementsReturnsTheRequestedInCollection",				"StGeneratorIteratorTest>>#testResetRestartsIterationOnTheCollection",				"StGenericGenerator>>#next:",				"StIteratorsTest>>#testIteratorOnACollectionWithTwoCollectReturnsCorrectValues",				"StIteratorsTest>>#testNonDuplicatesRemoveDuplicates",				"StIteratorsTest>>#testIteratorOnACollectionWithCollectReturnsCorrectValues",				"StIteratorsTest>>#testNonDuplicatesRemoveDuplicatesWithThree",				"StIteratorsTest>>#testIteratorOnACollectionReturnsTheCollection",				"StIteratorsTest>>#testIteratorOnACollectedCollectionIsFiltered",				"StIteratorsTest>>#testIteratorOnACollectionIsFiltered",				"StIteratorsTest>>#testSequenceReturnsTheSequenceOfAllResults",				"StIteratorsTest>>#testNonDuplicatesRemoveDuplicatesResetReturnsWithoutDuplicates",				"StIteratorsTest>>#testSequenceDetectsAtEnd",				"StIteratorsTest>>#testSequenceReturnsTheSequenceOfAllResultsInParts",				"StreamBugsTest>>#testReadWriteStreamNextNBug",				"TextBackgroundColor class>>#scanFrom:",				"TextColor class>>#scanFrom:",				"TextDoIt class>>#scanFrom:",				"TonelParser>>#word:",				"UnixResolver>>#xdgParseUserDirLine:",				"WaitfreeQueue>>#flushAllSuchThat:",				"WaitfreeQueue>>#initializeWithAll:",				"WaitfreeQueue>>#nextOrNilSuchThat:",				"WaitfreeQueue>>#nextIfNone:",				"WaitfreeQueue>>#nextPut:",				"WaitfreeQueue>>#flush:",				"ZdcAbstractSocketStreamTest>>#testPlainClientRead10kInPieces1",				"ZdcAbstractSocketStreamTest>>#testReverseEchoUpToEnd",				"ZdcAbstractSocketStreamTest>>#testReverseEcho10kFixed",				"ZipArchive>>#readEndOfCentralDirectoryFrom:",				"ZipArchiveTest>>#testCreateWithRelativeNames",				"ZipArchiveTest>>#testZip",				"ZipCrcTest>>#testInvalidZipCrc",				"ZipCrcTest>>#testInvalidGZipCrc",				"ZipCrcTest>>#testMissingZipCrc",				"ZipCrcTest>>#testMissingZLibCrc",				"ZipCrcTest>>#testMissingGZipCrc",				"ZipCrcTest>>#testInvalidZLibCrc",				"ZipCrcTest>>#testValidZLibCrc",				"ZipCrcTest>>#testValidZipCrc",				"ZipFileMember>>#skipLocalDirectoryFileHeaderFrom:",				"ZipFileMember>>#readRawChunk:",				"ZipFileMember>>#readCentralDirectoryFileHeaderFrom:",				"ZipFileMember>>#readLocalDirectoryFileHeaderFrom:",				"ZipFileMember>>#uncompressDataTo:from:to:",				"ZipNewFileMember>>#readRawChunk:",				"ZipStringMember>>#readRawChunk:",				"ZnBufferedReadStream>>#upToEnd",				"ZnBufferedReadStream>>#fuelNextWordsInto:",				"ZnBufferedReadStreamTest>>#testReadUpToEnd",				"ZnBufferedReadStreamTest>>#testSetToEnd",				"ZnBufferedReadStreamTest>>#testBuffering",				"ZnBufferedReadWriteStream>>#next:",				"ZnBufferedReadWriteStreamTest>>#testReadUpToEnd",				"ZnBufferedReadWriteStreamTest>>#testBuffering",				"ZnBufferedReadWriteStreamTest>>#testReadThenWrite",				"ZnCharacterReadWriteStream>>#next:",				"ZnCharacterStreamTest>>#testPeek",				"ZnChunkedReadStream>>#getNextChunk",				"ZnChunkedStreamTest>>#testReadingNext",				"ZnEndianessReadWriteStream>>#nextLittleEndianNumber:",				"ZnLimitedReadStreamTest>>#testNextCount",				"ZnLimitedReadStreamTest>>#testNextCountShort",				"ZnPositionableReadStreamTest>>#testUTF8",				"ZnPositionableReadStreamTest>>#testNestedExcursion",				"ZnPositionableReadStreamTest>>#testSearch",				"ZnPositionableReadStreamTest>>#testSearchBinary",				"ZnPositionableReadStreamTest>>#testPositionErrors",				"ZnPositionableReadStreamTest>>#testPlainExcursion"			],			"implementors" : {				"FLMapper" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18574486,					"argumentNames" : [						"anObject"					]				},				"SourceFileBufferedReadWriteStream" : {					"sourceCode" : [						"next: aQuantity",						"",						"\t| read collection |",						"\tcollection := self collectionSpecies new: aQuantity.",						"",						"\tread := self readInto: collection startingAt: 1 count: aQuantity.",						"",						"\t^ read = aQuantity",						"\t\t  ifTrue: [ collection ]",						"\t\t  ifFalse: [ collection copyFrom: 1 to: read - 1 ]"					],					"body" : [						"| read collection |",						"collection := self collectionSpecies new: aQuantity.",						"",						"read := self readInto: collection startingAt: 1 count: aQuantity.",						"",						"^ read = aQuantity",						"\t  ifTrue: [ collection ]",						"\t  ifFalse: [ collection copyFrom: 1 to: read - 1 ]"					],					"isTestMethod" : false,					"category" : "reading",					"comment" : [ ],					"hash" : 19501299,					"argumentNames" : [						"aQuantity"					]				},				"CoFetcher" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ Array new: anInteger streamContents: [ :stream | ",						"\t\t  | total last |",						"\t\t  total := 0.",						"\t\t  [ ",						"\t\t  (last := self next) ifNotNil: [ :each | ",						"\t\t\t  stream nextPut: each.",						"\t\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t\t  total < anInteger and: [ last notNil ] ] ]"					],					"body" : [						"^ Array new: anInteger streamContents: [ :stream | ",						"\t  | total last |",						"\t  total := 0.",						"\t  [ ",						"\t  (last := self next) ifNotNil: [ :each | ",						"\t\t  stream nextPut: each.",						"\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t  total < anInteger and: [ last notNil ] ] ]"					],					"isTestMethod" : false,					"category" : "fetching",					"comment" : [ ],					"hash" : 24303863,					"argumentNames" : [						"anInteger"					]				},				"ZdcAbstractSocketStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount bytes and return them as a ByteArray.",						"\tIf less are available, a smaller ByteArray will be returned.\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "stream in",					"comment" : [						"Read requestedCount bytes and return them as a ByteArray.",						"\tIf less are available, a smaller ByteArray will be returned."					],					"hash" : 18144623,					"argumentNames" : [						"requestedCount"					]				},				"PositionableStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection.\"",						"",						"\t| newArray |",						"\tnewArray := collection species new: anInteger.",						"\t1 to: anInteger do: [ :index | newArray at: index put: self next ].",						"\t^ newArray"					],					"body" : [						"| newArray |",						"newArray := collection species new: anInteger.",						"1 to: anInteger do: [ :index | newArray at: index put: self next ].",						"^ newArray"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection."					],					"hash" : 19383340,					"argumentNames" : [						"anInteger"					]				},				"ImageReadWriter" : {					"sourceCode" : [						"next: size",						"",						"\t^ stream next: size"					],					"body" : [						"^ stream next: size"					],					"isTestMethod" : false,					"category" : "stream access",					"comment" : [ ],					"hash" : 19822196,					"argumentNames" : [						"size"					]				},				"RxmLink" : {					"sourceCode" : [						"next: aLink",						"",						"\t\"Set the next link, either an RxmLink or an RxmTerminator.\"",						"",						"\tnext := aLink"					],					"body" : [						"next := aLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Set the next link, either an RxmLink or an RxmTerminator."					],					"hash" : 19270550,					"argumentNames" : [						"aLink"					]				},				"StdioStream" : {					"sourceCode" : [						"next: n",						"",						"\t\"Return a string with the next n characters of the filestream in it.\"",						"",						"\t| readBuffer read startingAt |",						"\treadBuffer := ByteArray new: n.",						"\tstartingAt := 1.",						"\tpeekBuffer ifNotNil: [ ",						"\t\treadBuffer at: 1 put: peekBuffer.",						"\t\tstartingAt := startingAt + 1.",						"\t\tpeekBuffer := nil ].",						"\tread := File",						"\t\t        read: handle",						"\t\t        into: readBuffer",						"\t\t        startingAt: startingAt",						"\t\t        count: n - startingAt + 1.",						"\t^ read = (n - startingAt + 1)",						"\t\t  ifTrue: [ readBuffer ]",						"\t\t  ifFalse: [ readBuffer copyFrom: 1 to: read ]"					],					"body" : [						"| readBuffer read startingAt |",						"readBuffer := ByteArray new: n.",						"startingAt := 1.",						"peekBuffer ifNotNil: [ ",						"\treadBuffer at: 1 put: peekBuffer.",						"\tstartingAt := startingAt + 1.",						"\tpeekBuffer := nil ].",						"read := File",						"\t        read: handle",						"\t        into: readBuffer",						"\t        startingAt: startingAt",						"\t        count: n - startingAt + 1.",						"^ read = (n - startingAt + 1)",						"\t  ifTrue: [ readBuffer ]",						"\t  ifFalse: [ readBuffer copyFrom: 1 to: read ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return a string with the next n characters of the filestream in it."					],					"hash" : 19767973,					"argumentNames" : [						"n"					]				},				"ZnLimitedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 19250031,					"argumentNames" : [						"requestedCount"					]				},				"AthensPathSegment" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 21445526,					"argumentNames" : [						"anObject"					]				},				"ZnCharacterReadWriteStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ readStream next: anInteger"					],					"body" : [						"^ readStream next: anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19038836,					"argumentNames" : [						"anInteger"					]				},				"OSSDLPasteEventFilter" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22763414,					"argumentNames" : [						"anObject"					]				},				"Srfi41Stream" : {					"sourceCode" : [						"next: n",						"",						"\t^ [ ",						"\t  (self isEmpty or: [ n isZero ])",						"\t\t  ifTrue: [ {  } asSrfi41Stream ]",						"\t\t  ifFalse: [ [ self car ] srfi41Cons: [ self cdr next: n - 1 ] ] ]",						"\t\t  srfi41Stream"					],					"body" : [						"^ [ ",						"  (self isEmpty or: [ n isZero ])",						"\t  ifTrue: [ {  } asSrfi41Stream ]",						"\t  ifFalse: [ [ self car ] srfi41Cons: [ self cdr next: n - 1 ] ] ]",						"\t  srfi41Stream"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 25966194,					"argumentNames" : [						"n"					]				},				"SourceFile" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ stream next: anInteger"					],					"body" : [						"^ stream next: anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18973045,					"argumentNames" : [						"anInteger"					]				},				"ZnBufferedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned.\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned."					],					"hash" : 19030127,					"argumentNames" : [						"requestedCount"					]				},				"StIterator" : {					"sourceCode" : [						"next: aQuantity",						"",						"\t^ OrderedCollection streamContents: [ :stream | ",						"\t\t  | total last |",						"\t\t  total := 0.",						"\t\t  [ ",						"\t\t  last := self next.",						"\t\t  last ifNotNil: [ ",						"\t\t\t  stream nextPut: last.",						"\t\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t\t  total < aQuantity and: [ last notNil ] ] ]"					],					"body" : [						"^ OrderedCollection streamContents: [ :stream | ",						"\t  | total last |",						"\t  total := 0.",						"\t  [ ",						"\t  last := self next.",						"\t  last ifNotNil: [ ",						"\t\t  stream nextPut: last.",						"\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t  total < aQuantity and: [ last notNil ] ] ]"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 24516518,					"argumentNames" : [						"aQuantity"					]				},				"ReadWriteStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection.  overriden for efficiency\"",						"",						"\t| ans endPosition |",						"\treadLimit := readLimit max: position.",						"",						"\tendPosition := position + anInteger min: readLimit.",						"\tans := collection copyFrom: position + 1 to: endPosition.",						"\tposition := endPosition.",						"\t^ ans"					],					"body" : [						"| ans endPosition |",						"readLimit := readLimit max: position.",						"",						"endPosition := position + anInteger min: readLimit.",						"ans := collection copyFrom: position + 1 to: endPosition.",						"position := endPosition.",						"^ ans"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection.  overriden for efficiency"					],					"hash" : 19466221,					"argumentNames" : [						"anInteger"					]				},				"CoASTNodeFetcherHeuristic" : {					"sourceCode" : [						"next: nextHeuristic",						"",						"\tnext := nextHeuristic"					],					"body" : [						"next := nextHeuristic"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 24293270,					"argumentNames" : [						"nextHeuristic"					]				},				"RubShoutStylerDecorator" : {					"sourceCode" : [						"next: aDecorator",						"",						"\tsuper next: aDecorator.",						"\taDecorator ifNotNil: [ ",						"\t\tself paragraph textArea announcer",						"\t\t\twhen: RubTextAcceptRequest",						"\t\t\tsend: #whenTextAcceptRequest:",						"\t\t\tto: self ]"					],					"body" : [						"super next: aDecorator.",						"aDecorator ifNotNil: [ ",						"\tself paragraph textArea announcer",						"\t\twhen: RubTextAcceptRequest",						"\t\tsend: #whenTextAcceptRequest:",						"\t\tto: self ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22414017,					"argumentNames" : [						"aDecorator"					]				},				"AbstractBinaryFileStream" : {					"sourceCode" : [						"next: n",						"",						"\t\"Return a string with the next n characters of the filestream in it.\"",						"",						"\t^ self next: n into: (ByteArray new: n)"					],					"body" : [						"^ self next: n into: (ByteArray new: n)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return a string with the next n characters of the filestream in it."					],					"hash" : 18668722,					"argumentNames" : [						"n"					]				},				"Link" : {					"sourceCode" : [						"next: anObject",						"",						"\t^ anObject nextFromLink: self"					],					"body" : [						"^ anObject nextFromLink: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18857152,					"argumentNames" : [						"anObject"					]				},				"ReadStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection.  overriden for efficiency\"",						"",						"\t| ans endPosition |",						"\tendPosition := position + anInteger min: readLimit.",						"\tans := collection copyFrom: position + 1 to: endPosition.",						"\tposition := endPosition.",						"\t^ ans"					],					"body" : [						"| ans endPosition |",						"endPosition := position + anInteger min: readLimit.",						"ans := collection copyFrom: position + 1 to: endPosition.",						"position := endPosition.",						"^ ans"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection.  overriden for efficiency"					],					"hash" : 19465081,					"argumentNames" : [						"anInteger"					]				},				"UndefinedObject" : {					"sourceCode" : [						"next: n",						"",						"\t^ self"					],					"body" : [						"^ self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18620556,					"argumentNames" : [						"n"					]				},				"AthensTextDisplayCommand" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18734230,					"argumentNames" : [						"anObject"					]				},				"SourceFileCharacterReadWriteStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ readStream next: anInteger"					],					"body" : [						"^ readStream next: anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18975348,					"argumentNames" : [						"anInteger"					]				},				"SocketStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Read count elements and return them in a collection.",						"\tIf the receiver is #atEnd before count elements were read, ",						"\treturn a smaller collection and don't signal ConnectionClosed.\"",						"",						"\t^ self nextInto: (self streamBuffer: anInteger)"					],					"body" : [						"^ self nextInto: (self streamBuffer: anInteger)"					],					"isTestMethod" : false,					"category" : "stream in",					"comment" : [						"Read count elements and return them in a collection.",						"\tIf the receiver is #atEnd before count elements were read, ",						"\treturn a smaller collection and don't signal ConnectionClosed."					],					"hash" : 19199152,					"argumentNames" : [						"anInteger"					]				},				"ZnEncodedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 19037551,					"argumentNames" : [						"requestedCount"					]				},				"MCDataStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer an Array of the next anInteger objects in the stream.\"",						"",						"\t| array |",						"\tarray := Array new: anInteger.",						"\t1 to: anInteger do: [ :i | array at: i put: self next ].",						"\t^ array"					],					"body" : [						"| array |",						"array := Array new: anInteger.",						"1 to: anInteger do: [ :i | array at: i put: self next ].",						"^ array"					],					"isTestMethod" : false,					"category" : "other",					"comment" : [						"Answer an Array of the next anInteger objects in the stream."					],					"hash" : 19709883,					"argumentNames" : [						"anInteger"					]				},				"RubParagraphDecorator" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19871382,					"argumentNames" : [						"anObject"					]				},				"ZnPositionableReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned.\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned."					],					"hash" : 19051631,					"argumentNames" : [						"requestedCount"					]				},				"StGenericGenerator" : {					"sourceCode" : [						"next: aQuantity",						"",						"\t^ generator next: aQuantity"					],					"body" : [						"^ generator next: aQuantity"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 24516725,					"argumentNames" : [						"aQuantity"					]				},				"SDL_PixelFormat" : {					"sourceCode" : [						"next: anObject",						"",						"\t\"This method was automatically generated\"",						"",						"\thandle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"body" : [						"handle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"isTestMethod" : false,					"category" : "accessing - structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 22785296,					"argumentNames" : [						"anObject"					]				},				"ZnChunkedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 19237743,					"argumentNames" : [						"requestedCount"					]				},				"Random" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ self next: anInteger into: (Array new: anInteger)"					],					"body" : [						"^ self next: anInteger into: (Array new: anInteger)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18938290,					"argumentNames" : [						"anInteger"					]				},				"InflateStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection.  overriden for simplicity\"",						"",						"\t| newArray |",						"\t\"try to do it the fast way\"",						"\tposition + anInteger < readLimit ifTrue: [ ",						"\t\tnewArray := collection",						"\t\t\t            copyFrom: position + 1",						"\t\t\t            to: position + anInteger.",						"\t\tposition := position + anInteger.",						"\t\t^ newArray ].",						"",						"\t\"oh, well...\"",						"\tnewArray := collection species new: anInteger.",						"\t1 to: anInteger do: [ :index | ",						"\t\tnewArray",						"\t\t\tat: index",						"\t\t\tput: (self next ifNil: [ ^ newArray copyFrom: 1 to: index - 1 ]) ].",						"\t^ newArray"					],					"body" : [						"| newArray |",						"\"try to do it the fast way\"",						"position + anInteger < readLimit ifTrue: [ ",						"\tnewArray := collection",						"\t\t            copyFrom: position + 1",						"\t\t            to: position + anInteger.",						"\tposition := position + anInteger.",						"\t^ newArray ].",						"",						"\"oh, well...\"",						"newArray := collection species new: anInteger.",						"1 to: anInteger do: [ :index | ",						"\tnewArray",						"\t\tat: index",						"\t\tput: (self next ifNil: [ ^ newArray copyFrom: 1 to: index - 1 ]) ].",						"^ newArray"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection.  overriden for simplicity"					],					"hash" : 19691182,					"argumentNames" : [						"anInteger"					]				},				"NullStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection.\"",						"",						"\tposition := position + anInteger.",						"\t^ self collectionSpecies new: anInteger"					],					"body" : [						"position := position + anInteger.",						"^ self collectionSpecies new: anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection."					],					"hash" : 18909852,					"argumentNames" : [						"anInteger"					]				},				"ZnLoggingReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 19251055,					"argumentNames" : [						"requestedCount"					]				},				"RubParagraphDecorator class" : {					"sourceCode" : [						"next: aDecoratorOrAParagraph",						"",						"\t^ self new next: aDecoratorOrAParagraph"					],					"body" : [						"^ self new next: aDecoratorOrAParagraph"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 19871293,					"argumentNames" : [						"aDecoratorOrAParagraph"					]				},				"Stream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger number of objects accessible by the receiver.\"",						"",						"\t| aCollection |",						"\taCollection := OrderedCollection new.",						"\tanInteger timesRepeat: [ aCollection addLast: self next ].",						"\t^ aCollection"					],					"body" : [						"| aCollection |",						"aCollection := OrderedCollection new.",						"anInteger timesRepeat: [ aCollection addLast: self next ].",						"^ aCollection"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger number of objects accessible by the receiver."					],					"hash" : 18932050,					"argumentNames" : [						"anInteger"					]				},				"KMKeyCombinationSequence" : {					"sourceCode" : [						"next: aShortcut",						"",						"\tself addShortcut: aShortcut"					],					"body" : [						"self addShortcut: aShortcut"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19831701,					"argumentNames" : [						"aShortcut"					]				},				"ZnBufferedReadWriteStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ self readingActionDo: [ readStream next: anInteger ]"					],					"body" : [						"^ self readingActionDo: [ readStream next: anInteger ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19030735,					"argumentNames" : [						"anInteger"					]				},				"STONCStyleCommentsSkipStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 18178415,					"argumentNames" : [						"requestedCount"					]				},				"AtomicQueueItem" : {					"sourceCode" : [						"next: anObject",						"",						"\t\"Set the value of next\"",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Set the value of next"					],					"hash" : 18925974,					"argumentNames" : [						"anObject"					]				},				"FTGlyphSlotRec" : {					"sourceCode" : [						"next: anObject",						"",						"\t\"This method was automatically generated\"",						"",						"\thandle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"body" : [						"handle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"isTestMethod" : false,					"category" : "accessing - structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 19978768,					"argumentNames" : [						"anObject"					]				}			}		},		"add:" : {			"senders" : [				"AIDijkstra>>#run",				"AIGraphAlgorithm>>#addNodeFor:",				"AIGraphAlgorithm>>#addEdge:from:to:",				"AIGraphNode>>#to:",				"AIGraphReducer>>#reduceNodesInCircuit:",				"AIGraphReducer>>#replaceReferencesToMergedNode:",				"AIKruskal>>#run",				"AIKruskalTest>>#setUp",				"AINodeWithPrevious>>#from:",				"AIPathDistanceNode>>#to:edge:",				"AITarjan>>#addNewSccForNode:",				"AITopologicalSorting>>#removeEdgesOf:",				"AIWeightedHitsNode>>#to:edge:",				"AIWeightedHitsNode>>#from:edge:",				"ASPathConverter>>#addSegment",				"ASTClassBuilderTest>>#testCreateNormalClassWithSharedPools",				"AbstractFileReference>>#childGeneratorBlock:matching:",				"AbstractTonelTest>>#trait1",				"AbstractTonelTest>>#trait2",				"AbstractTonelTest>>#classWithTraits",				"AbstractTonelTest>>#classWithTraitsWithClassComposition",				"AbstractTool class>>#protocolSuggestionsFor:",				"AbstractTool class>>#undoLastRefactoring",				"ActiveClassAnnotationsTest>>#testCanBeEnumeratedForGivenUser",				"ActiveClassAnnotationsTest>>#testCanBeEnumeratedForGivenClassAndUser",				"AndreasSystemProfilerTest>>#testGetNewTab",				"Announcement class>>#-",				"AnnouncementSet>>#-",				"AnnouncementSet>>#,",				"AnnouncementSetWithExclusions>>#addExclusion:",				"Announcer>>#when:do:",				"Announcer>>#basicSubscribe:",				"ArrayTest>>#testKeysAndValuesDo",				"ArrayTest>>#firstIndexesOf:in:",				"ArrayTest>>#testDo",				"ArrayTest>>#testFromToDo",				"ArrayTest>>#testKeysAndValuesDoEmpty",				"ArrayTest>>#testAllButLastDo",				"ArrayTest>>#collectionWithCopy",				"ArrayTest>>#collectionWithIdentical",				"ArrayTest>>#testDo2",				"ArrayTest>>#testReverseDo",				"ArrayTest>>#testWithIndexDo",				"ArrayTest>>#testReverseDoEmpty",				"ArrayTest>>#testAllButFirstDo",				"AthensBalloonPath>>#visitMoveSegment:",				"AthensBalloonPath>>#visitLineSegment:",				"AthensBalloonPath>>#duplicateLastPoint",				"AthensBalloonPath>>#visitCloseSegment:",				"AthensBalloonPath>>#visitQuadSegment:",				"AthensDemoPresenter>>#initializeWidgets",				"AthensDemoPresenter class>>#defaultLayout",				"AthensPolygon>>#moveTo:",				"AthensPolygon>>#lineTo:",				"AthensPolygon>>#newContour",				"AthensTextScanner>>#newLine:",				"AthensTiger>>#readParts",				"AthensTreeDemo>>#rowAt:",				"AthensTreeDemo>>#buildSubtreeFor:level:",				"Bag>>#asShapeHistogram",				"BagTest>>#testAdd",				"BagTest>>#testPrintOnDelimiterLast",				"BagTest>>#testOccurrencesOf",				"BagTest>>#testAsCommaStringMore",				"BagTest>>#testTAddTwice",				"BagTest>>#testTAdd",				"BagTest>>#testEqual",				"BagTest>>#testRemove",				"BagTest>>#testPrintElementsOn",				"BagTest>>#testPrintOnDelimiter",				"BagTest>>#testFlatCollect",				"BagTest>>#testPrintOn",				"BagTest>>#setUp",				"BagTest>>#nonEmpty1Element",				"BagTest>>#test0FixtureOccurrencesTest",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"BaselineOfIDE>>#additionalInitialization",				"BasicBehaviorClassMetaclassTest>>#testSuperclass",				"BasicBehaviorClassMetaclassTest>>#testMetaclassSuperclassHierarchy",				"Behavior>>#allSubInstances",				"Behavior>>#dependentClasses",				"Behavior>>#allSelectorsAboveUntil:",				"Behavior>>#activatedPackages:classes:methods:",				"Behavior>>#withAllSubclasses",				"Behavior>>#selectSubclasses:",				"Behavior>>#allSelectorsBelow:",				"Behavior>>#inspectorCanvasSubclassesTree",				"Behavior>>#selectSuperclasses:",				"Behavior>>#allSubclassesWithLevelDo:startingLevel:",				"BehaviorTest>>#testAllMethods",				"BlockClosure>>#kissingFractions",				"BlockClosureTest>>#testOnForkSplit",				"BlockClosureTest>>#testOneArgument",				"BlockClosuresTestCase>>#continuationExample3:",				"BlockClosuresTestCase>>#testNestedLoopsExample1",				"BlockClosuresTestCase>>#continuationExample2:",				"BlockClosuresTestCase>>#example2:",				"BlockClosuresTestCase>>#continuationExample1:",				"Breakpoint class>>#addBreakpoint:",				"ByteArray>>#inspectorCanvasBitsDumpBigEndian",				"CBCritiquesCache>>#addFalsePositiveClass:",				"CBCritiquesCache>>#addCritique:forRule:",				"CBCritiquesCache>>#addToDo:forRule:",				"CBCritiquesCache>>#addFalsePositive:forRule:",				"CBCritiquesCache>>#addFalsePositiveRule:forPackage:",				"CBCritiquesCache>>#replaceAll:by:",				"CBUnifiedDiffJoinSection>>#createHighlights",				"CDBehaviorDefinitionNode>>#addSlot:",				"CDFluidClassParserTest>>#testWithRB9",				"CDFluidClassParserTest>>#testWithRB6",				"CDFluidClassParserTest>>#testWithRB8",				"CDFluidClassParserTest>>#testWithRB4",				"CDFluidClassParserTest>>#testWithRB5",				"CDFluidClassParserTest>>#testWithRB7",				"CDFluidClassParserTest>>#testWithRB3",				"CDNode>>#addChild:",				"CTBinaryTreeAbstractTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTBinaryTreeAbstractTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"CTBinaryTreeNode>>#shapes:edges:",				"CTBinomialTree>>#shapes:edges:",				"CTCollapsedSccDfsPainter>>#treeTuples:lineBuilder:",				"CTCollapsedSccDfsPainter>>#dfsWalk:",				"CTCollapsedSccDfsPainter>>#crossTuples:lineBuilder:",				"CTDfsPainter>>#forbiddenShapes:withDfsEdgesDo:",				"CTDfsSCCsWalker>>#createStronglyConnectedComponentIfNecessaryOnShape:",				"CTDfsWalker>>#enteringShape:atLevel:",				"CTDfsWalker>>#recurring:",				"CTHeapQ>>#inspectorCanvasValuesTree",				"CTHeapQ>>#inspectorCanvasBubblesTree",				"CTLinkedStoragePoolPolynomialTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTLinkedStoragePoolPolynomialTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnStack",				"CTLinkedStoragePoolTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnCircular",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnQueue",				"CTLinkedStoragePoolTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTLinksLinkTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTLinksLinkTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"CTLinksValueLinkTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"CTLinksValueLinkTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTOrderPreservingTree>>#roots",				"CTOrderPreservingTree>>#inspectorCanvasValuesTree",				"CTOrderPreservingTree>>#asShapeValuesHorizontalTreeModelShape:indexBlock:",				"CTOrderPreservingTree>>#children:",				"CTSBRALBinaryTreeNode>>#shapes:edges:",				"CTSccDfsPainter>>#layoutTuples:lineBuilder:",				"CTSkipList>>#asShapeList:",				"CTSkipListTest>>#testProfileAddingFromScratch",				"CTSkipListTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTSkipListTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"CTSkipListTest>>#testInspectBigList",				"CTSkipListTest>>#testProfileAdditionOf35",				"CalendarMorph>>#computeDays",				"Categorizer>>#changeFromCategorySpecs:",				"ChangeSet>>#checkForSlips",				"ChangeSet>>#changedMessageList",				"ChangeSet>>#methodsWithoutComments",				"ChangeSet>>#fileOutChangesFor:on:",				"ChangeSet>>#methodsWithoutClassifications",				"ChangeSet class>>#gatherChangeSets",				"ChangeSet class>>#reorderChangeSets",				"ChangeSet class>>#scanFile:category:class:meta:stamp:",				"ChangeSet class>>#promoteToTop:",				"ChangeSet class>>#fileOutChangeSetsNamed:",				"ChangeSet class>>#basicNewChangeSet:",				"ChangesBrowser>>#initializePresenters",				"ChangesBrowser class>>#defaultLayout",				"CharacterSet>>#add:",				"CharacterSet class>>#allCharacters",				"CharacterSetComplement>>#remove:",				"ChunkFileFormatParser>>#addDeclaration:",				"ChunkReadStream>>#decodeString:andRuns:",				"ClapCodeEvaluator class>>#evaluate",				"ClapCommand>>#addFlag:",				"ClapCommand>>#addSubcommand:",				"ClapCommand class>>#forHelp",				"ClapCommandLineExamples class>>#git",				"ClapCommandLineExamples class>>#hello",				"ClapCommandTest>>#testMatchesWithSingleSubcommand",				"ClapCommandTest>>#testMatchingStopsAtWrongFlag",				"ClapCommandTest>>#testAddFlag",				"ClapCommandTest>>#testAddSubcommand",				"ClapCommandTest>>#testMatchesWithSingleFlag",				"ClapCommandTest>>#testMatchesWithSinglePositional",				"ClapCompositeMatch>>#addChild:",				"ClapContext>>#validateOn:",				"ClapContext class>>#defaultRoot",				"ClapHelloWorldTest>>#testLanguageFlag",				"ClapHelloWorldTest>>#setUp",				"ClapImage class>>#image",				"ClapImage class>>#cleanupCommand",				"ClapImage class>>#saveCommand",				"ClapMatchesTest>>#testFlagOmittedValue",				"ClapMatchesTest>>#testMultiplePositional",				"ClapMatchesTest>>#setUp",				"ClapMeaningsTest>>#testArgFlagScalarMeaning",				"ClapMeaningsTest>>#testArgFlagBasicMeaning",				"ClapMeaningsTest>>#testArgFlagCollectionMeaning",				"ClapMetacello class>>#metacello",				"ClapParameterized>>#addPositional:",				"ClapParameterizedTest>>#testIdentifierConflict",				"ClapParameterizedTest>>#testAddPositional",				"ClapPharoVersion class>>#version",				"ClapTestRunner class>>#test",				"ClapValidationReport>>#add:",				"ClapValidationReport>>#addAll:",				"Class>>#removeSharedPool:",				"Class>>#basicDeclareClassVariable:",				"Class>>#dependentClassesWithOccurences",				"Class>>#addSharedPool:",				"Class>>#sharing:",				"ClassAnnotationRegistry>>#addAnnotation:",				"ClassAnnotationRegistry>>#createAnnotationsForAllSubclassesFromPragma:",				"ClassAnnotationRegistry class>>#collectAnnotationPragmas",				"ClassChangeRecord>>#allChangeTypes",				"ClassChangeRecord>>#noteChangeType:fromClass:",				"ClassChangeRecord>>#checkCoherence",				"ClassDescription>>#packages",				"ClassDescription>>#classesThatImplementAllOf:",				"ClassFactoryForTestCase>>#redefineClass:subclassOf:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:",				"ClassFactoryForTestCase>>#newTraitNamed:uses:tag:",				"ClassFactoryForTestCase>>#duplicateClass:withNewName:",				"ClassFactoryForTestCase>>#newSubclassOf:uses:instanceVariableNames:classVariableNames:poolDictionaries:category:",				"ClassFactoryForTestCaseTest class>>#lastStoredRun",				"ClassFactoryWithOrganization>>#newSubclassOf:instanceVariableNames:classVariableNames:category:",				"ClassFactoryWithOrganization>>#newClassNamed:subclassOf:instanceVariableNames:classVariableNames:category:",				"ClyAbstractClassScope>>#processDynamicMethodGroups:by:",				"ClyAbstractClassScope>>#collectAllClasses",				"ClyActiveBreakpointsQueryTest>>#installBreakpointInto:",				"ClyAllClassGroupsQuery>>#buildResult:",				"ClyAllClassVariablesQuery>>#buildResult:",				"ClyAllInstanceVariablesQuery>>#buildResult:",				"ClyAllMethodGroupsQuery>>#buildResult:",				"ClyAllPackagesQuery>>#buildResult:",				"ClyAllVariablesQuery>>#buildResult:",				"ClyAsyncBrowserQueryResultAdapter>>#findItemsSimilarTo:",				"ClyBothMetaLevelClassScopeTest>>#testClassEnumerationWhenMetaClassIsBasis",				"ClyBothMetaLevelClassScopeTest>>#testMethodsEnumerationWhenBasisIsMetaclass",				"ClyBothMetaLevelClassScopeTest>>#testClassEnumeration",				"ClyBothMetaLevelClassScopeTest>>#testMethodsEnumerationWhenBasisIsClass",				"ClyBrowserItem>>#addProperty:",				"ClyBrowserMorph>>#addPlugin:",				"ClyBrowserMorph>>#newNavigationView",				"ClyBrowserMorph>>#allContexts",				"ClyBrowserQueryResult>>#findItemsSimilarTo:",				"ClyBrowserToolMorph>>#addDecorator:",				"ClyClassCommentsQuery>>#buildResult:",				"ClyClassGroupProviderTest>>#buildGroupsForAll:",				"ClyClassGroupProviderTest>>#buildGroupsFor:",				"ClyClassHierarchyMap>>#addActualChild:to:",				"ClyClassQuery>>#buildResult:",				"ClyClassScopeTest>>#testClassVarsEnumeration",				"ClyClassScopeTest>>#testVariablesEnumerationForObject",				"ClyClassScopeTest>>#testVariablesEnumerationForClassWithInstanceVariables",				"ClyClassScopeTest>>#testClassEnumeration",				"ClyClassScopeTest>>#testClassVarsEnumerationFromClassSideOfDefiningClass",				"ClyClassScopeTest>>#testVariablesEnumerationWhenThereAreNoVariables",				"ClyClassScopeTest>>#testInstVarsEnumeration",				"ClyClassScopeTest>>#testClassVarsEnumerationWhenTheyNotExist",				"ClyClassScopeTest>>#testInstVarsEnumerationWhenThereAreNoVariables",				"ClyClassScopeTest>>#testMethodsEnumeration",				"ClyClassScopeTest>>#testVariablesEnumerationForTwoClassesWithClassAndInstanceVars",				"ClyClassScopeTest>>#testMethodGroupsEnumeration",				"ClyClassSideScopeTest>>#testClassEnumeration",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsClass",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClassClassSide",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsMetaclass",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClass",				"ClyCollapsedDataSource>>#expand:",				"ClyCompositeScope>>#collectAllClasses",				"ClyConstantMethodQuery>>#scopedMethods",				"ClyDataSourceSelection>>#groupItemsByType",				"ClyDataSourceUpdateScheduler>>#processQueue",				"ClyExpandedDataSource>>#collapse:",				"ClyExtendingPackagesQuery>>#buildResult:",				"ClyExtensionLastSortedClassResult>>#fillWith:",				"ClyFailedTestMethodsQuery>>#buildResult:",				"ClyFullEnvironmentUpdateStrategy>>#announceChangesOf:",				"ClyGroupedCritiqueResult>>#fillWith:",				"ClyGroupedExtendingPackagesResult>>#fillWith:",				"ClyGroupedInstanceVariablesResult>>#addClassVariableGroup",				"ClyGroupedInstanceVariablesResult>>#addInheritedMethodGroup",				"ClyGroupedVariablesResult>>#groupVariablesByTypeAndDefinition:",				"ClyGroupedVariablesResult>>#fillWithVariables:type:",				"ClyHierarchicalSystemItemsResult>>#buildItemsPerClassFrom:",				"ClyHierarchicallySortedClassesResult>>#buildItemFor:from:depth:",				"ClyInheritanceAnalysisEnvironmentPlugin>>#cacheMethod:",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsMetaclass",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClass",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClassClasSide",				"ClyInstanceSideScopeTest>>#testClassEnumeration",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsClass",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationOverMetaclassBasisWhenClassSideIsLocalScope",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationShouldStopAtObject",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationOverClassShouldStopAtObject",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationOverMetaclassBasisWhenInstanceSideIsLocalScope",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationWhenObjectIsFirstSuperclass",				"ClyMainItemCellMorph>>#addExtraTool:",				"ClyMetaLinkInstallationPresenter>>#toolbarButtons",				"ClyMetaLinkInstallationPresenter class>>#defaultLayout",				"ClyMethodCallCountersQueryTest>>#installCounterInto:",				"ClyMethodQuery>>#buildResult:",				"ClyMethodScopeTest>>#testMethodsEnumeration",				"ClyMethodVisibilityGroupsResult>>#buildGroupFor:depth:toShowMethodsFrom:",				"ClyMethodVisibilityGroupsResult>>#fillWith:",				"ClyMethodWatchQueryTest>>#installWatchInto:",				"ClyNavigationEnvironment>>#addPlugin:",				"ClyNavigationHistory>>#recordState:",				"ClyNoTagClassGroup>>#importClass:",				"ClyNotebookManager>>#updateToolsForChangedEnvironment",				"ClyNotebookManager>>#updateTabsWith:",				"ClyNotebookManager>>#buildToolsOn:for:",				"ClyNotebookManager>>#addTool:",				"ClyNotebookMorph>>#addPage:label:",				"ClyNotebookPageHeaderPresenter class>>#defaultLayout",				"ClyOldMessageBrowserQuery>>#selectsMethod:",				"ClyOverriddenMethodTableDecorator class>>#decorateMainTableCell:inContext:",				"ClyPackageExtensionScopeTest>>#testPackageEnumeration",				"ClyPackageExtensionScopeTest>>#testMethodsEnumeration",				"ClyPackageExtensionScopeTest>>#testClassesEnumeration",				"ClyPackageScopeTest>>#testPackageEnumeration",				"ClyPackageScopeTest>>#testMethodsEnumeration",				"ClyPackageScopeTest>>#testClassesEnumeration",				"ClyPackageScopeTest>>#testClassGroupEnumeration",				"ClyProjectManagerRegistry>>#registerProjectManager:",				"ClyQueryBrowserContext>>#selectedPackageItems",				"ClyQueryBrowserContext>>#selectedClassItems",				"ClyQueryBrowserMorph>>#setUpActiveScope",				"ClyQueryResultBrowserAdapter>>#itemsWhere:",				"ClyQueryResultBrowserAdapter>>#findItemsSimilarTo:",				"ClyQueryResultMetadata>>#addProperty:",				"ClyRunTestsFromMethodsCommand>>#targetTestCasesFor:",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenConcreteClassScopeIsLocal",				"ClySubclassScopeTest>>#testMethodsEnumerationWhenBothMetaLevels",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenClassSideIsLocalScope",				"ClySubclassScopeTest>>#testClassEnumeration",				"ClySubclassScopeTest>>#testMethodsEnumeration",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenInstanceSideIsLocalScope",				"ClySubclassScopeTest>>#testMethodsEnumerationWhenInstanceSideMetaLevel",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenBothMetaLevelsAreLocalScope",				"ClySubclassScopeTest>>#testClassEnumerationOverMetaClass",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassWhenConcreteClassScopeIsLocal",				"ClySuperclassScopeTest>>#testClassEnumeration",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverInstanceSideWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverMetaclassWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassBasisWhenInstanceSideIsLocalScope",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassWhenClassSideIsLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumeration",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testClassEnumerationOverInstanceSideBasisWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverMetaclassWhenConcreteClassScopeIsScope",				"ClySuperclassScopeTest>>#testMethodsEnumerationWithBothMetaLevelScopeShouldNotDublicateMethods",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverMetaclassWhenClassSideIsLocalScope",				"ClyTabManager>>#updateToolsForChangedEnvironment",				"ClyTabManager>>#updateTabsWith:",				"ClyTabManager>>#buildToolsOn:for:",				"ClyTabManager>>#restoreSelectedTools:",				"ClyTabManager>>#addTool:",				"ClyTaggedClassGroup>>#importClass:",				"ClyTraitUserScopeTest>>#testMethodsEnumerationWhenBothMetaLevels",				"ClyTraitUserScopeTest>>#testMethodsEnumeration",				"ClyTraitUserScopeTest>>#testClassEnumeration",				"ClyTypedQuery class>>#mergeOwnInstances:unifiedBy:",				"ClyTypedScope>>#withExtraBasisObjects:",				"ClyUnimplementedMethodsQuery>>#methodsToImplementIn:",				"ClyVariableReferencesQuery>>#buildResult:",				"CmCommandCollector>>#visitCommand:",				"CmUILeftPositionStrategy>>#addButton:toActionBar:",				"CmdCommandActivationStrategy class>>#createActivatorsExecutableInContext:",				"CmdCommandActivationStrategyTest>>#testIteratingInstancesShouldSkipAbstractCommands",				"CmdMenu>>#groupsWithCommandLike:",				"CmdMenuGroup>>#allItemsWhich:",				"CmdMenuGroup>>#addItem:",				"CmdMenuGroup>>#allGroupsWhich:",				"CoASTHeuristicsResultSetBuilder>>#messageHeuristic",				"CoASTHeuristicsResultSetBuilder>>#methodNodeHeuristic",				"CoASTHeuristicsResultSetBuilder>>#variablesHeuristic",				"CoASTSessionResultSetBuilder>>#messageHeuristic",				"CoAvoidRepeatedFetcher>>#entriesDo:",				"CoFetcher>>#,",				"CoFetcherSequence>>#add:",				"CoHeuristicBuilder>>#add:",				"CoNarrowHistoryFetcher>>#entriesDo:",				"CoStaticBenchmarks>>#benchCallsite:atPosition:",				"CoStatistics>>#logAcceptEvent:",				"CoStatistics>>#logCancelEvent:",				"CoStatisticsHeuristicBuilder>>#add:",				"CoStatisticsTest>>#testHeuristicBuilderForSingleHeuristicLastIsNullHeuristic",				"CoStatisticsTest>>#testHeuristicBuilderForSingleHeuristicWrapsNonWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicNextIsWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicBuildsWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicWrapsNonWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForSingleHeuristicBuildsWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicSecondWrapperWrapsNonWrapper",				"CoTypeInferencer>>#visitMethodNode:",				"CoTypeInferencer>>#initialize",				"Collection>>#addIfNotPresent:ifPresentDo:",				"Collection>>#asSBRAL",				"Collection>>#addAll:",				"Collection>>#groupedBy:",				"Collection>>#fillFrom:with:",				"Collection>>#unzip",				"Collection>>#select:",				"Collection>>#addIfNotPresent:",				"Collection>>#add:withOccurrences:",				"Collection>>#collect:",				"Collection>>#copyWith:",				"Collection>>#selectEvery:",				"Collection class>>#with:with:with:",				"Collection class>>#fromSton:",				"Collection class>>#with:with:",				"Collection class>>#with:with:with:with:",				"Collection class>>#with:with:with:with:with:",				"Collection class>>#with:",				"Collection class>>#with:with:with:with:with:with:",				"CollectionRootTest>>#testDo2",				"CollectionRootTest>>#testDoWithout",				"CollectionTest>>#testGroupedByGroupsOrderWithSortedCollectionOfDates",				"CollectionTest>>#testGroupedByGroupsOrderSimple",				"CollectionValueHolder>>#add:",				"CollectionValueHolderTest>>#testAddOne",				"CollectionValueHolderTest>>#testChangeAddOne",				"Color class>>#initializeGrayToIndexMap",				"ColorForm>>#colorsUsed",				"CompilationContext>>#addASTTransformationPlugin:",				"CompilationContext class>>#addDefaultTransformationPlugin:",				"CompilationContext class>>#writeDefaultOption:value:",				"CompiledCode>>#inspectorNodes",				"CompiledCode>>#withAllBlocks",				"CompiledMethod>>#activatedPackages:classes:methods:",				"CompiledMethod>>#referencedClasses",				"CompiledMethod>>#dependentClassesWithOccurences",				"ComplexUnit>>#calculateBaseUnits",				"ConfigurationCommandLineHandler>>#printMetacelloProjectDetails:",				"Context>>#exceptionsToCaptureWhenStepping",				"Context class>>#tallyInstructions:",				"Context class>>#tallyMethods:",				"ContinuationTest>>#testRemoveUptoLast",				"CoverageDemo>>#initialize",				"CoverageDemo>>#exampleNotCompleteCoverage",				"CoverageDemo class>>#defaultLayout",				"CustomHelpHelpBuilder>>#createTopicFrom:",				"DAAddPackagePresenter>>#defaultLayout",				"DACompositeDependency>>#add:",				"DACycleDetectionTreePresenter>>#defaultLayout",				"DADependencyChecker>>#computeDependenciesOf:visitedPackages:",				"DADependencyReport>>#addWarning:",				"DADependencyReport>>#transitiveDependenciesOf:visited:",				"DADependencyTreePresenter>>#relationGraph:",				"DADependencyTreePresenter class>>#defaultLayout",				"DAMessageSendAnalyzer>>#implementedMessages",				"DAPackage>>#add:",				"DAPackage>>#dependentPackages",				"DAPackageAnalyzerDiffTreePresenter>>#defaultLayout",				"DAPackageAnalyzerPresenter>>#defaultLayout",				"DAPackageCycle>>#addPackage:",				"DAPackageCycleDetector>>#addVisitedNodes:",				"DAPackageCycleDetector>>#addCycle:",				"DAPackageCycleDetectorTest>>#testfindCycles",				"DAPackageCycleDetectorTest>>#testCyclesWithAtLeast",				"DAPackageCycleDetectorTest>>#testFindCyclesOne",				"DAPackageCycleDetectorTest>>#graphWithThreeCycles",				"DAPackageCycleGenerator>>#buildNodes",				"DAPackageCycleTest>>#testIsAtLeastInCycle",				"DAPackageCycleTest>>#testRemoveOutgoingDependencies",				"DAPackageDependencyTest>>#testReferenceDependenciesFrom",				"DAPackageDependencyTest>>#testExtensionDependencies",				"DAPackageDependencyTest>>#testDependenciesFrom",				"DAPackageDependencyTest>>#testDependenciesWithoutExtensionDependency",				"DAPackageDependencyTest>>#testDependenciesSize",				"DAPackageDependencyTest>>#testReferenceDependencies",				"DAPackageDependencyTest>>#testContainsOnlyExtensionDependency",				"DAPackageRelationGraph>>#addTraitDependencies:",				"DAPackageRelationGraph>>#usersOf:",				"DAPackageRelationGraph>>#addPoolDictionaryDependencies:",				"DAPackageRelationGraph>>#predecessors:",				"DAPackageRelationGraph>>#combineDependencies:",				"DAPackageRelationGraph>>#addInheritanceDependencies:",				"DAPackageRelationGraph>>#findReferencesIn:for:",				"DAPackageRelationGraph>>#addExtensionDependencies:",				"DAPackageRelationGraph>>#successors:",				"DAPackageRelationGraph>>#outgoing",				"DAPackageRelationGraph>>#addMessageSendDependencies:",				"DAPackageRelationGraphDiff>>#addNewPackage:",				"DAPackageRelationGraphDiff>>#addUndeterminatePackage:",				"DAPackageRelationGraphDiff>>#addNewDependentPackage:from:",				"DAPackageRelationGraphDiff>>#addRemovedPackage:",				"DAPackageRelationGraphDiff>>#addUndeterminateDependentPackage:from:",				"DAPackageRelationGraphDiff>>#addRemovedDependentPackage:from:",				"DAPackageRelationGraphGenerator>>#buildNodes",				"DAPackageRelationGraphTest>>#testAllDependentPackages",				"DAPackageRelationGraphTest>>#testDependenciesFrom",				"DAPackageRelationGraphTest>>#testAllDependentPackagesFromSeenPackages",				"DAPackageRelationGraphTest>>#testPredecessors",				"DAPackageRelationGraphTest>>#testPackages",				"DAPackageRelationGraphTest>>#testIncludedPackages",				"DAPackageRelationGraphTest>>#testSuccessors",				"DAPackageRelationGraphTest>>#testCombineDependencies",				"DAPackageRelationGraphTest>>#testUsersOf",				"DAPackageTest>>#testDependentPackagesSize",				"DAPackageTest>>#testNumberOfDependentPackage",				"DAPackageTest>>#testDependenciesSizeTo",				"DAPackageTest>>#testDependenciesSize",				"DAPackageTest>>#testDependantPackages",				"DAPackageTest>>#testRemoveAllInternal",				"DAPackageTest>>#setUp",				"DAPackageTest>>#testAdd",				"DAReverseTreePresenter>>#defaultLayout",				"DATarjanAlgorithm>>#popStackAndUpdateCurrentSCC:until:",				"DATarjanAlgorithmTest>>#testRunTarjan",				"DAWelcomePresenter>>#defaultLayout",				"DTDefaultPluginPresenter class>>#defaultLayout",				"DTFilterableListPresenter class>>#defaultLayout",				"DTLeavesCollector>>#visitDTTreeLeaf:",				"DTTestsProfilerVisitor>>#visitTestCase:",				"DeepCopier>>#basicCheckClass:",				"DelayBasicScheduler>>#scheduleAtTimingPriority",				"Deprecation>>#defaultAction",				"Deprecation>>#transform",				"DialogItemsChooserUI>>#unselectedSelectionItems",				"DialogItemsChooserUI>>#selectedSelectionItems",				"Dictionary>>#associationsSelect:",				"Dictionary>>#keysAndValuesRemove:",				"Dictionary>>#declare:from:",				"Dictionary>>#at:inOrderedCollectionAdd:",				"Dictionary>>#difference:",				"Dictionary>>#select:",				"Dictionary class>>#newFromAssociations:",				"Dictionary class>>#newFrom:",				"DictionaryTest>>#testAsSet",				"DictionaryTest>>#testKeysAndValuesDo",				"DictionaryTest>>#testSelect",				"DictionaryTest>>#testIncludesAssociationWithValue",				"DictionaryTest>>#testAssociationsSelect",				"DictionaryTest>>#testAsCommaStringMore",				"DictionaryTest>>#collectionWithElement",				"DictionaryTest>>#testPrintElementsOn",				"DictionaryTest>>#testAssociationsDo",				"DictionaryTest>>#testDo",				"DictionaryTest>>#testIncludesAssociationNoValue",				"DictionaryTest>>#testCollect",				"DictionaryTest>>#testKeysDo",				"DictionaryTest>>#testAddWithKeyAlreadyIn",				"DictionaryTest>>#testPrintOnDelimiterLast",				"DictionaryTest>>#testAddAll",				"DictionaryTest>>#testValuesDo",				"DictionaryTest>>#testDeclareFrom",				"DictionaryTest>>#testAddWithKeyNotIn",				"DictionaryTest>>#testPrintOnDelimiter",				"DictionaryTest>>#testPrintOn",				"DictionaryTest>>#setUp",				"DictionaryTest>>#testNewFromPairs",				"DictionaryTest>>#test0FixtureOccurrencesTest",				"DictionaryTest>>#testAdd",				"DiffBuilder>>#applyDiff:origin:dest:",				"DiffMorph>>#calculatedJoinMappings",				"DoubleLinkedList>>#addAll:",				"DoubleLinkedList>>#reject:",				"DoubleLinkedList>>#collect:",				"DoubleLinkedList>>#select:",				"DoubleLinkedListTest>>#testThreeRemoveFirst",				"DoubleLinkedListTest>>#testOneRemoveFirst",				"DoubleLinkedListTest>>#testAddBeforeLink",				"DoubleLinkedListTest>>#testAddFirst",				"DoubleLinkedListTest>>#testLinksDo",				"DoubleLinkedListTest>>#testReverseLinksDo",				"DoubleLinkedListTest>>#testThreeRemoveLink",				"DoubleLinkedListTest>>#testOne",				"DoubleLinkedListTest>>#testOneRemoveLast",				"DoubleLinkedListTest>>#testAddAfterLink",				"DoubleLinkedListTest>>#testFirstAndLastLink",				"DoubleLinkedListTest>>#testThreeRemoveLast",				"DoubleLinkedListTest>>#testAddLast",				"DoubleLinkedListTest>>#testThree",				"DrTests class>>#defaultLayout",				"DrTestsUITest>>#testMultipleSelectingPackagesWillUpdateTheClassesList",				"DynamicMessageImplementor>>#argumentNameAt:",				"EmbeddedFreeTypeFontInstaller>>#cacheEmbeddedFileInfo:index:",				"EpDashboardPresenter class>>#defaultLayout",				"EpEntryItem>>#asMorph",				"EpLog>>#priorEntriesFrom:upTo:",				"EpLogBrowserPresenter class>>#defaultLayout",				"EpLogBrowserToolbarPresenter class>>#defaultLayout",				"EpLogNode>>#populateReferencedNodesWith:",				"EpLogNodeGraphPresenter>>#initializePresenters",				"EpUnifiedBrowserPresenter>>#initializeToolbar",				"EpUnifiedBrowserPresenter>>#initializePresenters",				"EphemeronRegistry>>#registerEphemeron:",				"EssentialsObjectTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"EssentialsObjectTest>>#testInspectProbabilisticMedianRatioWithSorting",				"EssentialsObjectTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"EssentialsObjectTest>>#testInspectHeap",				"EventManagerTest>>#addArg1:addArg2:",				"EventManagerTest>>#testOneArgumentEvent",				"EventManagerTest>>#testBlockReceiverOneArg",				"EventManagerTest>>#testNoArgumentEventDependentSuppliedArgument",				"ExampleSetTest>>#testAdd",				"ExampleSetTest>>#testOccurrences",				"Exception class>>#,",				"Exception class>>#-",				"ExceptionSet>>#,",				"ExceptionSet>>#add:",				"ExceptionSet>>#-",				"ExceptionSetWithExclusions>>#addExclusion:",				"ExceptionTester>>#simpleTimeoutWithZeroDurationTestResults",				"ExceptionTester>>#log:",				"ExceptionTester>>#simpleNoTimeoutTestResults",				"ExceptionTester>>#doublePassOuterTestResults",				"ExceptionTester>>#simpleOuterTestResults",				"ExceptionTester>>#signalFromHandlerActionTestResults",				"ExceptionTester>>#simplePassTestResults",				"ExceptionTester>>#doubleResumeTestResults",				"ExceptionTester>>#simpleEnsureTestWithNotificationResults",				"ExceptionTester>>#simpleResignalAsTestResults",				"ExceptionTester>>#simpleEnsureTestResults",				"ExceptionTester>>#doubleOuterPassTestResults",				"ExceptionTester>>#simpleEnsureTestWithErrorResults",				"ExceptionTester>>#simpleTimeoutTestResults",				"ExceptionTester>>#logTest:",				"ExceptionTester>>#resumableFallOffTheEndHandlerResults",				"ExceptionTester>>#simpleReturnTestResults",				"ExceptionTester>>#simpleIsNestedTestResults",				"ExceptionTester>>#nonResumableFallOffTheEndHandlerResults",				"ExceptionTester>>#simpleRetryTestResults",				"ExceptionTester>>#simpleRetryUsingTestResults",				"ExceptionTester>>#simpleResumeTestResults",				"ExceptionTester>>#simpleEnsureTestWithUparrowResults",				"ExecutionEnvironmentStub>>#prepareForNewProcess:",				"ExternalAddress>>#autoRelease",				"ExternalAddress class>>#gcallocate:",				"ExternalBrowser>>#initializePresenter",				"ExternalBrowser class>>#defaultLayout",				"ExternalChangesBrowser class>>#defaultLayout",				"ExternalChangesBrowser class>>#fileReaderServicesForFile:suffix:",				"ExternalDropHandler class>>#registerHandler:",				"ExternalStructure class>>#sortStructs:into:",				"FBDDecompiler>>#generateNativeBoostCallErrorMethodFrom:",				"FBDExamples>>#exampleCascadeIfTrueIfFalse2",				"FBDExamples>>#exampleInlineBlockCollectionLR3",				"FBDExamples>>#exampleWhileWithTempNotInlined",				"FBDExamples>>#exampleWhileWithTemp",				"FBDExamples>>#exampleWhileModificationBefore",				"FBDExamples>>#singleRemoteTempVar",				"FBDExamples>>#exampleWhileModificationAfterNotInlined",				"FBDExamples>>#exampleToDoOutsideTempNotInlined",				"FBDExamples>>#exampleCascadeIfNil",				"FBDExamples>>#exampleWhileModificationBeforeNotInlined",				"FBDExamples>>#exampleBlockNumCopied",				"FBDExamples>>#exampleToDoInsideTempNotInlined",				"FBDExamples>>#exampleToDoArgument",				"FBDExamples>>#exampleToDoArgumentNotInlined",				"FBDExamples>>#exampleToDoInsideTemp",				"FBDExamples>>#exampleToDoOutsideTemp",				"FBDExamples>>#exampleCascadeIntoBlockWithTempIfTrueIfFalse",				"FBDLoopScanner>>#jump:",				"FBDOptimizedMessagesRewriter>>#analyseSeq:",				"FFICalloutMethodBuilder>>#addFunctionResolveStrategy:",				"FFIExternalStructureFlatLayout>>#addField:size:alignment:",				"FFIExternalStructureFlatLayout>>#reduce:inGroupsOfSize:with:",				"FFIFunctionSpec>>#addArgument:",				"FFIMethodRegistry>>#registerMethod:",				"FFIStructure class>>#resetStructureIfNotIn:",				"FIFOQueueTest>>#runValidationTest",				"FIFOQueueTest>>#testHeavyContention2",				"FIFOQueueTest>>#testHeavyContention",				"FLAnalyzer>>#when:substituteBy:",				"FLAnalyzer>>#privateMappers",				"FLAnalyzer>>#considerGlobal:",				"FLAnalyzer>>#mappers",				"FLBasicSerializationTest>>#testBag",				"FLBasicSerializationTest>>#testSet",				"FLBasicSerializationTest>>#testLotsOfCharacters",				"FLBasicSerializationTest>>#testCyclicIdentitySet",				"FLClusterization>>#clusterBuckets",				"FLDictionaryCollectionCluster>>#materializeReferencesOf:with:",				"FLGZippedBasicSerializationTest>>#testCompleteBinaryTree",				"FLGZippedBasicSerializationTest>>#testWideString",				"FLHashedCollectionSerializationTest>>#testSetRehash",				"FLHeader>>#addPreMaterializationAction:",				"FLHeader>>#addPostMaterializationAction:",				"FLIteratingCluster>>#addReferenceFrom:to:",				"FLLightGlobalMapper class>>#valuesFor:in:",				"FLMaterialization>>#clusterInstancesStep",				"FLSerializationTest>>#registerBehavior:",				"FLSerializationTest>>#newSubclassNamed:of:instanceVariableNames:classVariableNames:",				"FLSimpleCollectionCluster>>#materializeReferencesOf:with:",				"FLSubstitutionCluster>>#add:substitutedBy:traceWith:",				"FLVariableObjectCluster>>#addVariableReferenceFrom:to:",				"FLVariablesMapping>>#instanceVariableNamesToSerialize",				"FT2Outline>>#contoursCollection",				"FTAllItemsStrategy>>#filter",				"FTAllItemsStrategy>>#searchIn:",				"FTExampleMethodListGeneratorDataSource>>#elementAt:ifAbsent:",				"FTOutlineDataSource>>#searchText:",				"FTPluggableIconListMorphAdaptorDataSource>>#searchText:",				"FTRootItemsStrategy>>#realSearch",				"FTSimpleDataSource>>#searchText:",				"FTTableContainerMorph>>#drawRowsOn:",				"FTVisibleItemsStrategy>>#filter",				"FTVisibleItemsStrategy>>#realSearch",				"File class>>#register:",				"FileDialogWindow>>#initialDirectories",				"FileHandle class>>#register:",				"FileList>>#itemsForAnyFile",				"FileList>>#fileContentsMenu:shifted:",				"FileList>>#itemsForDirectory:",				"FileSystemGuide>>#push:",				"FileSystemTest>>#markForCleanup:",				"Finder>>#classSearch:",				"Finder>>#pragmaSearch:",				"Finder>>#constructDictionaryWithMessagesNameSearch:",				"Finder>>#constructSourceDictionary",				"Finder>>#constructDictionaryWithPragmaSearch:",				"Finder>>#methodSearch:",				"Finder>>#constructDictionaryWithMethodFinder:",				"FloatArrayTest>>#testKeysAndValuesDo",				"FloatArrayTest>>#firstIndexesOf:in:",				"FloatArrayTest>>#testFromToDo",				"FloatArrayTest>>#testKeysAndValuesDoEmpty",				"FloatArrayTest>>#testAllButLastDo",				"FloatArrayTest>>#collectionWithCopy",				"FloatArrayTest>>#collectionWithIdentical",				"FloatArrayTest>>#testReverseDo",				"FloatArrayTest>>#testWithIndexDo",				"FloatArrayTest>>#testReverseDoEmpty",				"FloatArrayTest>>#testAllButFirstDo",				"FloatTest>>#testNaN3",				"FloatTest>>#testNaNCompare",				"FloatTest>>#testComparison",				"FloatTest>>#testSetOfFloat",				"Form>>#colorsUsed",				"Form class>>#fileReaderServicesForFile:suffix:",				"Form class>>#services",				"Fraction>>#inspectorCanvasRepresentations",				"Fraction>>#kissingFractions",				"Fraction>>#inspectorCanvasFordCircles",				"Fraction>>#asShapeNaturalRepresentation",				"FreeTypeCache>>#removeAllForFont:",				"FreeTypeCache>>#removeAllForType:",				"FreeTypeCacheTest>>#validateCollections:",				"FreeTypeCacheTest>>#testGlyphAccessIsThreadSafe",				"FreeTypeCacheTest>>#testGlyphAccessIsThreadSafeWhenAskingWidth",				"FreeTypeFont>>#hasDistinctGlyphsForAll:",				"FreeTypeFontFamily>>#addSimulatedMembers",				"FreeTypeFontFamily>>#addMember:",				"FreeTypeFontProvider>>#fileInfosByFamilyAndGroup",				"FreeTypeFontProvider>>#updateFromDirectory:done:",				"FreeTypeFontProvider>>#cacheFileInfo:index:",				"FreeTypeFontProvider>>#winFontDirectories",				"FreeTypeFontProvider>>#addFileInfo:",				"FreeTypeFontProvider>>#guessWindowsFontFolderPath",				"FreeTypeFontProvider>>#addFontInstaller:",				"FreeTypeFontProvider>>#addFileInfo:index:",				"FreeTypeNameParser>>#tokenize:",				"FuzzyMatcher class>>#allSortedByScoreMatching:in:by:",				"FuzzyMatcherExample>>#match:for:",				"FuzzyMatcherExample class>>#exampleAuthors",				"GIFReadWriter>>#readBody",				"GIFReadWriterTest>>#animatedColorFrames",				"GPolygon>>#edges",				"GPolygon class>>#convexHullOn:",				"GZipReadStream class>>#fileReaderServicesForFile:suffix:",				"GoferFetch>>#initializeOn:",				"GoferPush>>#initializeOn:",				"GoferResource>>#setUpVersionReferences",				"GradientPaint>>#atStop:put:",				"GreatestCommonDivisor>>#initialize",				"GuideTest>>#visitFile:",				"GuideTest>>#visitDirectory:",				"HDCoverageReport>>#addTestsIn:to:",				"HEPackage>>#addClass:",				"HEPackage>>#readClassFrom:",				"HEPackage>>#readFrom:",				"HashTableSizes>>#computeSizes",				"HashTableSizes>>#initialize",				"HashTableSizes>>#primeAlmostFactorsOf:",				"HashedCollection>>#add:withOccurrences:",				"Heap>>#inspectorCanvasBubblesTree",				"Heap>>#inspectorCanvasValuesTree",				"Heap class>>#heapExample",				"HeapTest>>#testAddNonEmptyGrowsWhenNewElement",				"HeapTest>>#test1",				"HeapTest>>#testTAddTwice",				"HeapTest>>#testTAdd",				"HeapTest>>#testRemove",				"HeapTest>>#testAddEmptyGrows",				"HeapTest>>#testDo",				"HeapTest>>#testFirst",				"HeapTest>>#setUp",				"HeapTest>>#collectionWithCopy",				"HeapTest>>#test0FixtureOccurrencesTest",				"HeapTest>>#collectionWithIdentical",				"HeapTest>>#testHeap",				"HeapTest>>#testAdd",				"HelpTopic>>#addSubtopic:",				"HiNode>>#addIncomingLink:",				"HiNode>>#addOutgoingLink:",				"HiRuler>>#addLinkFrom:to:",				"HiSpecExample>>#initializeActionBar",				"HiSpecExample>>#defaultLayout",				"HistoryNode>>#addItem:",				"HookGenerator>>#preamble",				"HookGenerator>>#wrapCondition:link:",				"IRBuilder>>#storeTemp:",				"IRBuilder>>#pushLiteralVariable:",				"IRBuilder>>#pushLiteral:",				"IRBuilder>>#createTempVectorNamed:withVars:",				"IRBuilder>>#startNewSequence",				"IRBuilder>>#pushThisContext",				"IRBuilder>>#add:",				"IRBuilder>>#jumpAheadTo:if:",				"IRBuilder>>#pushThisProcess",				"IRBuilder>>#storeRemoteTemp:inVector:",				"IRBuilder>>#pushDup",				"IRBuilder>>#send:toSuperOf:",				"IRBuilder>>#initialize",				"IRBuilder>>#blockReturnTop",				"IRBuilder>>#popTop",				"IRBuilder>>#pushReceiver",				"IRBuilder>>#pushRemoteTemp:inVector:",				"IRBuilder>>#pushNewArray:",				"IRBuilder>>#pushInstVar:",				"IRBuilder>>#jumpAheadTo:",				"IRBuilder>>#returnTop",				"IRBuilder>>#storeInstVar:",				"IRBuilder>>#pushConsArray:",				"IRBuilder>>#jumpBackTo:",				"IRBuilder>>#send:",				"IRBuilder>>#storeIntoLiteralVariable:",				"IRBuilder>>#pushTemp:",				"IRBuilder>>#pushFullClosureCompiledBlock:copiedValues:",				"IRBytecodeGenerator>>#irPrimitive:",				"IRBytecodeGenerator>>#nextPut:",				"IRBytecodeGenerator>>#addLiteral:",				"IRBytecodeGenerator>>#mapBytesTo:",				"IRBytecodeScope>>#newTempVector:at:",				"IRFix>>#visitPop:",				"IRFix>>#visitReturn:",				"IRMethod>>#addAdditionalLiteral:",				"IRMethod>>#addPragma:",				"IRMethod>>#predecessorsOf:",				"IRMethod>>#allInstructions",				"IRMethod>>#allInstructionsMatching:",				"IRReconstructor>>#createTempVectorNamed:withVars:",				"IRReconstructor>>#rememberReference:to:in:",				"IRSequence>>#addInstructions:",				"IRSequence>>#withAllSuccessors",				"IRSequence>>#add:",				"IRSequence>>#absorbJumpToSingleInstr:",				"IRSequence>>#withNonBodySuccessorsDo:alreadySeen:",				"IRSequence>>#withAllSuccessorsDo:alreadySeen:",				"IRSequence>>#splitAfter:",				"IRSequence>>#instructionsForDecompiling",				"IRSequence>>#addLast:",				"IRTransformTest>>#testAddIntructionsBeforeFromLList",				"IRTransformTest>>#testAddBefore",				"IRTransformTest>>#testAdd",				"IRTranslator>>#pushOuterVectors:",				"ISOLanguageDefinition class>>#buildIso3166CodesTables",				"IceAbstractCommitWalk>>#commits",				"IceAbstractNode>>#allChildren",				"IceAnnouncer>>#suspendAllMatching:while:",				"IceCherrypicker>>#addClassDependencyOf:",				"IceCherrypicker>>#addMetaclassDependency:",				"IceCherrypicker>>#addPackageDependency:",				"IceCherrypicker>>#addDependency:",				"IceCherrypicker>>#addExtendedClassDependency:",				"IceCherrypicker>>#addMethodDependencyOf:",				"IceCherrypicker>>#addTraitDependencyOf:",				"IceCherrypickerDiffPruner>>#visitRemoval:",				"IceCherrypickerDiffPruner>>#visitAddition:",				"IceCherrypickerDiffPruner>>#visitModification:",				"IceGitHubAcceptPullRequestModel class>>#defaultLayout",				"IceGitHubCreatePullRequestModel class>>#defaultLayout",				"IceGitHubNewBranchFromIssuePanel class>>#defaultLayout",				"IceGitHubNewPullRequestAction>>#validateMakePullRequestOn:",				"IceGitHubPullRequestDetailModel class>>#defaultLayout",				"IceGitHubRejectPullRequestModel class>>#defaultLayout",				"IceGitHubRemoveBranchesModel>>#initializePresenters",				"IceGitHubRemoveBranchesModel class>>#defaultLayout",				"IceGitHubSelectItem>>#addItem",				"IceGitHubTipPullRequestBrowser class>>#defaultLayout",				"IceGitIndex>>#addPath:",				"IceGitIndex>>#storeMCVersion:",				"IceGitIndex>>#addPackage:",				"IceGitNetworkRemote>>#projectPath",				"IceHistory>>#lookupCommits",				"IceLibgitFiletreeLog>>#fileNameForMethod:",				"IceLibgitFiletreeLogReader>>#loadDefinitions",				"IceLibgitTonelLog>>#fileNameForMethod:",				"IceLibgitTreeBuilder>>#addEntryNamed:withContents:",				"IceLog>>#collectCommitsFor:path:",				"IceLog>>#collectVersionsFrom:method:path:",				"IceMetacelloLoadSession>>#recordChoice:",				"IceMetadatalessStCypressWriter>>#writeDefinitions:",				"IceNodeQuery>>#visitMethodNode:",				"IceNodeQuery>>#visitExtensionDefinition:",				"IceNodeQuery>>#visitClassDefinition:",				"IceNodeQuery>>#visitPackage:",				"IceNodeQuery>>#visitTraitDefinition:",				"IceRepository class>>#registerRepository:",				"IceTipAddNewPackagesDialog>>#initializePackagesList",				"IceTipAddNewPackagesDialog class>>#defaultLayout",				"IceTipAddPackagesDialog>>#initializePackagesList",				"IceTipAddPackagesDialog class>>#defaultLayout",				"IceTipAddPlaintextCredentialsModel class>>#defaultLayout",				"IceTipAddRemoteDialog class>>#defaultLayout",				"IceTipAddSSHCredentialsModel class>>#defaultLayout",				"IceTipAddTokenCredentialsModel class>>#defaultLayout",				"IceTipAskForPlaintextCredentialsModel class>>#defaultLayout",				"IceTipAskForPlaintextOtpCredentialsModel class>>#defaultLayout",				"IceTipBranchModel>>#commitModels",				"IceTipCheckoutNewBranchPanel class>>#defaultLayout",				"IceTipCheckoutPreviewBrowser class>>#defaultLayout",				"IceTipCherrypickPreviewBrowser>>#initializePresenters",				"IceTipCherrypickPreviewBrowser class>>#defaultLayout",				"IceTipCommentPanel>>#initializePresenters",				"IceTipCommentPanel class>>#defaultLayout",				"IceTipCommitBrowser class>>#defaultLayout",				"IceTipCommitInfoPresenter class>>#defaultLayout",				"IceTipCommitModel>>#commitModels",				"IceTipCreateTagPanel class>>#defaultLayout",				"IceTipCredentialsStoreBrowser class>>#defaultLayout",				"IceTipCritiquesBeforeCommitBrowser class>>#defaultLayout",				"IceTipDiffPanel class>>#defaultLayout",				"IceTipDiffSelectingPanel>>#activateItem:",				"IceTipDiffSelectingPanel>>#refresh",				"IceTipDiffSelectingPanel>>#initialize",				"IceTipEditPlaintextCredentialsModel class>>#defaultLayout",				"IceTipEditProjectDialog>>#expandAndSelect:",				"IceTipEditProjectDialog class>>#defaultLayout",				"IceTipEditSSHCredentialsModel class>>#defaultLayout",				"IceTipErrorDialog class>>#defaultLayout",				"IceTipExistingBranchPanel class>>#defaultLayout",				"IceTipFiletreeToTonelDialog class>>#defaultLayout",				"IceTipGitHubPullRequestListBrowser class>>#defaultLayout",				"IceTipGitProviderRepositoryPanel class>>#defaultLayout",				"IceTipGitRepositoryPanel class>>#defaultLayout",				"IceTipGitUsernameAndEmailDialog class>>#defaultLayout",				"IceTipHistoryActionBrowser>>#initializePresenters",				"IceTipHistoryBrowser class>>#defaultLayout",				"IceTipHistoryBrowser class>>#panelSpec",				"IceTipLocationPresenter class>>#defaultLayout",				"IceTipMergeSelectingPanel>>#changeListColumn",				"IceTipMergeSelectingPanel>>#refresh",				"IceTipMergeSelectingPanel>>#initialize",				"IceTipMergeSelectingPanel class>>#defaultLayout",				"IceTipNewRepositoryPanel class>>#defaultLayout",				"IceTipOptionDialog class>>#defaultLayout",				"IceTipPreviewBrowser>>#initializePresenters",				"IceTipPreviewBrowser class>>#defaultLayout",				"IceTipReadOnlyFormBuilder>>#newRowPresenterForLabel:value:",				"IceTipRemovePackageDialog class>>#defaultLayout",				"IceTipRemoveRepositoryDialog class>>#defaultLayout",				"IceTipRepositoriesBrowser class>>#defaultLayout",				"IceTipRepositoryBrowser class>>#defaultLayout",				"IceTipRepositoryModel>>#status",				"IceTipSelectRemotePresenter class>>#defaultLayout",				"IceTipTagModel>>#commitModels",				"IceTipTreeGroup>>#addChild:",				"IceTipVersionHistoryBrowser class>>#defaultLayout",				"IceTipWorkingCopyBrowser class>>#defaultLayout",				"IceWorkingCopy>>#changesTo:",				"IdentifierChooserMorph>>#newChoicesMorph",				"IdentityBagTest>>#testIdentityAdd",				"IdentityBagTest>>#identityCollectionWithElementsCopyNotIdentical",				"IdentityBagTest>>#testIdentity",				"IdentitySetTest>>#testGrowWithNil",				"IdentitySetTest>>#identityCollectionWithElementsCopyNotIdentical",				"IdentitySetTest>>#testIdentity",				"ImageCleaner>>#createLiteralTable",				"IndentingListItemMorph>>#recursiveAddTo:",				"IndentingListItemMorph>>#children",				"InitializePackagesCommandLineHandler>>#initializePackagesFrom:",				"InlineTextDiffBuilder>>#split:",				"InstructionStream>>#addSelectorTo:",				"InstructionStreamTest>>#pushLiteralVariable:",				"InstructionStreamTest>>#blockReturnTop",				"InstructionStreamTest>>#directedSuperSend:numArgs:",				"InstructionStreamTest>>#pushConstant:",				"InstructionStreamTest>>#pushReceiver",				"InstructionStreamTest>>#send:super:numArgs:",				"Integer>>#inspectorCanvasRepresentations",				"IntervalTest>>#testKeysAndValuesDo",				"IntervalTest>>#firstIndexesOf:in:",				"IntervalTest>>#testPermutationsDo",				"IntervalTest>>#testFromToDo",				"IntervalTest>>#testKeysAndValuesDoEmpty",				"IntervalTest>>#testAllButLastDo",				"IntervalTest>>#testWithIndexDo",				"IntervalTest>>#testReverseDoEmpty",				"IntervalTest>>#testAllButFirstDo",				"IntervalTest>>#test0FixtureOccurrencesTest",				"JPEGHuffmanTable>>#makeDerivedTables",				"JPEGReadWriter class>>#initialize",				"Job>>#addChild:",				"JobTest>>#testJobAnnouncements",				"JoinSection>>#addHighlightsFrom:to:to:color:",				"JoinSection>>#createHighlights",				"KMBuffer>>#addEvent:",				"KMCatcherMorph>>#keyStroke:",				"KMCategory>>#addKeymapEntry:at:",				"KMCategory>>#addKeymapEntry:",				"KMCombinationTest>>#testCombinationSeveralShortcuts",				"KMComposedModifier>>#command",				"KMComposedModifier>>#meta",				"KMComposedModifier>>#alt",				"KMComposedModifier>>#control",				"KMComposedModifier>>#modifiedBy:",				"KMComposedModifier>>#shift",				"KMDescriptionPresenter class>>#defaultLayout",				"KMDispatcher>>#attachCategory:targetting:",				"KMDispatcher>>#attachCategory:onProperty:",				"KMKeyCombinationSequence>>#addShortcut:",				"KMRepository>>#attach:to:",				"KMRepository>>#setAsGlobalCategory:",				"KMStorage>>#add:",				"KMStorage>>#addAll:",				"LGitBlob>>#names",				"LGitDiff>>#files",				"LGitIndex>>#entriesSelect:",				"LGitTree>>#names",				"LIFOQueueTest>>#testHeavyContention",				"LRUCache>>#testSupportGetCachedAssociations",				"LRUCache>>#addWeight:",				"LRUCache>>#validateInvariantWith:",				"LayoutClassScope>>#slots",				"LayoutClassScope>>#visibleSlots",				"LayoutClassScope>>#allVisibleSlots",				"LazyListMorph>>#selectRow:",				"LazyMorphListMorph>>#selectRow:",				"LinkInstallerTest>>#testLinkTargetsObjectsByIdentity",				"LinkedList>>#collect:",				"LinkedList>>#copyWith:",				"LinkedList>>#copyWithout:",				"LinkedList>>#collect:thenReject:",				"LinkedList>>#select:thenCollect:",				"LinkedList>>#collect:thenSelect:",				"LinkedList>>#reject:",				"LinkedList>>#reject:thenCollect:",				"LinkedList>>#select:",				"LinkedListTest>>#testKeysAndValuesDo",				"LinkedListTest>>#test12remove",				"LinkedListTest>>#firstIndexesOf:in:",				"LinkedListTest>>#testTAdd",				"LinkedListTest>>#testPrintElementsOn",				"LinkedListTest>>#test13remove",				"LinkedListTest>>#test11removeLast",				"LinkedListTest>>#testFromToDo",				"LinkedListTest>>#test08addAfter",				"LinkedListTest>>#testKeysAndValuesDoEmpty",				"LinkedListTest>>#test01add",				"LinkedListTest>>#testAllButLastDo",				"LinkedListTest>>#testAddAfterLast",				"LinkedListTest>>#test07addAfter",				"LinkedListTest>>#testDo2",				"LinkedListTest>>#test10removeFirst",				"LinkedListTest>>#test14removeIfAbsent",				"LinkedListTest>>#test09addAfter",				"LinkedListTest>>#testReverseDo",				"LinkedListTest>>#testPrintOnDelimiterLast",				"LinkedListTest>>#test06addAfter",				"LinkedListTest>>#testAddAfter",				"LinkedListTest>>#testWithIndexDo",				"LinkedListTest>>#testDoWithout",				"LinkedListTest>>#testPrintOnDelimiter",				"LinkedListTest>>#testReverseDoEmpty",				"LinkedListTest>>#testAtPut",				"LinkedListTest>>#testPrintOn",				"LinkedListTest>>#test22addAll",				"LinkedListTest>>#test04addBefore",				"LinkedListTest>>#testAllButFirstDo",				"LinkedListTest>>#test05addBefore",				"LinkedListTest>>#setUp",				"LinkedListTest>>#test0FixtureOccurrencesTest",				"LinkedListTest>>#testRemoveAll",				"LocalRecursionStopper class>>#stopMethod:during:",				"LogicalFont class>>#new",				"LogicalFontManager>>#bestFontFor:whenFindingAlternativeIgnoreAll:",				"MCAncestry>>#breadthFirstAncestorsDo:",				"MCAncestry>>#hasAncestor:alreadySeen:",				"MCAnnouncementTest>>#testMCVersionSaved",				"MCCacheRepository>>#rescan",				"MCChangeSelector>>#listSelectionAt:put:",				"MCClassTraitParser>>#addDefinitionsTo:",				"MCConfiguration>>#upgradeByLoading",				"MCConfiguration>>#upgradeByMerging",				"MCConfiguration>>#merge",				"MCConfiguration>>#load",				"MCConfiguration>>#updateFromRepositories",				"MCConfiguration class>>#fromArray:",				"MCConfigurationBrowser>>#add",				"MCConfigurationBrowser>>#addRepository",				"MCConfigurationBrowser>>#addDependency",				"MCConfigurationBrowser>>#migrate",				"MCDefinitionIndex>>#addAll:",				"MCDependencySorter>>#addToOrder:",				"MCDependencySorter>>#addProvision:",				"MCDependencySorter>>#addAll:",				"MCDependencySorter>>#addRequirement:for:",				"MCFileBasedRepository>>#addVersionInformationExtractedFrom:to:",				"MCFileRepositoryInspector>>#refresh",				"MCFileRepositoryInspector>>#packageListUpdate",				"MCFileTreeAbstractReader>>#addDefinitionFromFile:inDirectory:",				"MCFileTreeAbstractReader>>#loadDependencies",				"MCFileTreeAbstractReader>>#addClassAndMethodDefinitionsFromDirectoryEntries:",				"MCFileTreeStCypressReader>>#addMethodDefinitionsForClass:methodProperties:in:extensionMethod:",				"MCFileTreeStCypressReader>>#loadDefinitions",				"MCFileTreeStCypressReader>>#addTraitDefinitionFrom:comment:",				"MCFileTreeStCypressReader>>#addClassDefinitionFrom:comment:",				"MCFileTreeStCypressWriter>>#writeDefinitions:",				"MCFileTreeStCypressWriter>>#fileNameMapFor:",				"MCFileTreeStSnapshotWriter>>#visitClassDefinition:",				"MCFileTreeStSnapshotWriter>>#visitTraitDefinition:",				"MCFileTreeStSnapshotWriter>>#writeDefinitions:",				"MCFileTreeStSnapshotWriter>>#visitMethodDefinition:",				"MCFileTreeStSnapshotWriter>>#visitClassTraitDefinition:",				"MCFileTreeStWriter>>#visitClassDefinition:",				"MCFileTreeStWriter>>#visitTraitDefinition:",				"MCFileTreeStWriter>>#visitClassTraitDefinition:",				"MCFrontier>>#remove:",				"MCFtpRepository>>#parseDirectoryListing:",				"MCHttpRepository>>#parseFileNamesFromStream:",				"MCMcdWriter>>#writePatch:",				"MCMerger>>#addConflictWithOperation:",				"MCMethodDefinition>>#addMethodAdditionTo:",				"MCPackage>>#basicSnapshot",				"MCPackage>>#snapshot",				"MCPackageLoader>>#tryToLoad:",				"MCPackageLoader>>#removeDefinition:",				"MCPackageLoader>>#loadClassDefinition:",				"MCPackageLoader>>#addDefinition:",				"MCPackageManager class>>#bestMatchingManagerForCategory:do:",				"MCPackageManagerTest>>#testManagersForCategoryDo",				"MCPatch>>#initializeWithBase:target:",				"MCPatcher>>#addDefinition:",				"MCRepository>>#retrieveVersionsWithPackageNames:",				"MCRepositoryGroup>>#addBasicRepository:",				"MCScriptParser>>#addDefinitionsTo:",				"MCSnapshotBrowser>>#visibleProtocols",				"MCSnapshotBrowserTest>>#morphsOfClass:",				"MCStReader>>#loadDefinitions",				"MCStWriter>>#writeMethodInitializer:",				"MCSubDirectoryRepository>>#loadAllFileNames",				"MCSubDirectoryRepository>>#findFullNameForWriting:",				"MCSystemCategoryParser>>#addDefinitionsTo:",				"MCThreeWayMerger>>#addBaseSnapshot:",				"MCThreeWayMerger>>#addDefinition:",				"MCThreeWayMerger>>#addOperation:",				"MCTraitParser>>#addDefinitionsTo:",				"MCVersionInfo>>#allAncestorsTo:",				"MCVersionInfoWriter>>#wrote:",				"MCVersionLoader>>#addVersion:",				"MCVersionMerger>>#addVersion:",				"MCVersionSorter>>#addToCurrentLayer:",				"MCVersionSorter>>#addAllAncestorsOf:to:",				"MCVersionSorter>>#addVersionInfo:",				"MCVersionSorter>>#pushLayer",				"MCVersionSorter>>#registerStepChildrenOf:seen:",				"MCVersionTest>>#assert:orders:as:",				"MCVersionTest>>#assert:orders:as:unresolved:",				"MCWorkingCopy>>#requirePackage:",				"MCWorkingCopy>>#requiredPackagesParallelCollect:withMessage:",				"MIMEDocument>>#parts",				"MTCompiledMethodChoosePresenter>>#initializePresenters",				"MTContextsTree>>#asShapeUMLSequenceDiagram:metadata:",				"MTHandlerProfiling>>#run:with:in:preContext:tracker:",				"MTHandlerSenderPropagating>>#run:with:in:context:tracker:",				"MTHandlerTest>>#testCountIfTrueDuringSlowFactorial",				"MTHandlerTest>>#testCountSlowFactorial",				"MTHandlerTest>>#testProfileSlowFibonacciMemoing",				"MTObservedDataset>>#statistics",				"MTOverviewSpPresenter>>#initializePresenters",				"MTOverviewSpPresenter>>#connectPresenters",				"MTSession class>>#initialize",				"MTSession class>>#compiledMethods:thenSelect:",				"MTSpContextsTreePresenter>>#initializePresenters",				"MTTemperaturePresenter>>#initializePresenters",				"MTTemperaturePresenter>>#heatmap:xLabels:yLabels:matrix:",				"MTTemperaturePresenter>>#runSequenceDiagramMethodsTemperaturesStCommand:",				"MTTemperaturePresenter>>#xLabels:yLabels:matrix:",				"MTTemperaturePresenter class>>#defaultLayout",				"MTVisualizationsTest>>#testInspectProbabilisticMedian",				"MTVisualizationsTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"MTVisualizationsTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"MailMessage>>#parseParts",				"MailMessage>>#fromRfc822:",				"ManyTestResourceTestCase>>#testTearDownOrder",				"MemoryLogger>>#nextPut:",				"MenuRegistration>>#buildMenuSpec:",				"MenuRegistration>>#addItem:",				"MenuRegistration>>#collectMisplacedItemsIn:",				"MeshGradientPaint>>#addPatch:",				"MessageBrowser>>#handleMethodModified:",				"MessageBrowser>>#setFocus",				"MessageBrowser>>#handleMethodAdded:",				"MessageBrowser class>>#defaultLayout",				"MessageCatcher>>#doesNotUnderstand:",				"MessageList class>>#defaultLayout",				"MessageTally>>#bump:fromSender:",				"MetaLink>>#optionArgsAsArray:",				"MetaLink>>#optionAnnounce:",				"MetaLink>>#optionOneShot:",				"MetaLink>>#optionInlineMetaObject:",				"MetaLink>>#allReifications",				"MetaLink>>#optionCompileOnLinkInstallation:",				"MetaLink>>#checkForCompatibilityWith:",				"MetaLink>>#installOnVariable:",				"MetaLink>>#installOn:",				"MetaLink>>#optionInlineCondition:",				"MetaLink>>#optionDisabledLink:",				"MetaLink>>#optionMetalevel:",				"MetaLinkAnonymousClassBuilder>>#newAnonymousSubclassFor:",				"MetaLinkInstaller>>#canRemoveMethodNodeContaining:",				"MetaLinkInstaller>>#installSuperJumpLinksInMethodNode:",				"MetaLinkNodesMapper>>#addNode:forObject:",				"MetaLinkObjectAPITest>>#tagExec:",				"MetaLinkRegistry>>#registerPermaLink:",				"MetaLinkRegistry>>#addMetaLink:forObject:",				"MetaLinkRegistryTest>>#setUp",				"Metacello>>#execute:args:",				"Metacello>>#addStatement:args:",				"MetacelloAbstractConstructor>>#extractPragmas:for:into:",				"MetacelloAbstractVersionConstructor>>#packageForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#setFor:do:",				"MetacelloAbstractVersionConstructor>>#projectForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#groupForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#packageForVersion:",				"MetacelloAbstractVersionConstructor>>#addAttribute:",				"MetacelloAddMemberSpec>>#applyToList:",				"MetacelloAlternateResource>>#setUpVersionReferences",				"MetacelloAtomicLoadDirective>>#loadPostloadDirective:",				"MetacelloAtomicLoadDirective>>#loadPackageDirective:gofer:",				"MetacelloAtomicLoadDirective>>#loadPreloadDirective:",				"MetacelloAtomicMonticelloResource>>#setUpVersionReferences",				"MetacelloCommonMCSpecLoader>>#repositoriesFrom:ignoreOverrides:",				"MetacelloDictionaryRepositoryTest>>#setUp",				"MetacelloDirective>>#addTo:",				"MetacelloFetchingMCSpecLoader>>#resolveDependencies:nearest:into:",				"MetacelloIssue108Resource>>#setUpVersionReferences",				"MetacelloLoaderPolicy>>#pushLoadDirective:during:",				"MetacelloLoadingMCSpecLoader>>#packagesNeedSavingUsing:into:",				"MetacelloMCBaselineOfProjectSpec>>#validateVersionString:withDefaultVersionString:",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageD",				"MetacelloMCPackagesSpecTestCase>>#testMergePackageD",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageA",				"MetacelloMCPackagesSpecTestCase>>#testMergePackageB",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageA",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageB",				"MetacelloMCPackagesSpecTestCase>>#testMergePackageA",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageC",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageD",				"MetacelloMCPackagesSpecTestCase>>#testCopyToPackage",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageC",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageB",				"MetacelloMCProjectSpec>>#validateForScriptLoad:withDefaultVersionString:withDefaultRepositoryDecription:",				"MetacelloMCProjectSpec>>#validateVersionString:withDefaultVersionString:",				"MetacelloMCProjectSpec>>#loadedPackageNames:",				"MetacelloMCVersion>>#packageAndProjectNamesToLoad:loader:",				"MetacelloMCVersion>>#packages",				"MetacelloMCVersionSpec>>#isPartiallyCurrentAgainst:",				"MetacelloMCVersionSpec>>#repository:",				"MetacelloMCVersionSpec>>#packageSpecsInLoadOrderForMap:",				"MetacelloMCVersionSpecTestCase>>#testMCVersionSpec",				"MetacelloMCVersionValidator>>#validateBaselineVersionSpec:",				"MetacelloMCVersionValidator>>#validateVersionLoad:loads:",				"MetacelloMCVersionValidator>>#validateVersionTests:",				"MetacelloMemberListSpec>>#specListSelect:",				"MetacelloMemberListSpec>>#collect:",				"MetacelloMemberListSpec>>#select:",				"MetacelloMemberListSpec>>#addMember:",				"MetacelloMonticelloResource>>#setUpVersionReferences",				"MetacelloNullRecordingMCSpecLoader>>#packages",				"MetacelloNullRecordingMCSpecLoader>>#loadedPackages",				"MetacelloNullRecordingMCSpecLoader>>#preLoad:",				"MetacelloNullRecordingMCSpecLoader>>#postLoad:",				"MetacelloPackagesSpec>>#sortPackageSpecs:packageSpec:groupLoops:for:",				"MetacelloPackagesSpec>>#applyIncludesTo:for:firstTime:for:",				"MetacelloPackagesSpec>>#packageSpecsInLoadOrderFor:",				"MetacelloPackagesSpec>>#slideIn:spec:baseIndex:seen:firstTime:for:",				"MetacelloPackagesSpecTestCase>>#testMergeGroupB",				"MetacelloPackagesSpecTestCase>>#testMergeProjectB",				"MetacelloPackagesSpecTestCase>>#testRemoveGroupB",				"MetacelloPackagesSpecTestCase>>#testRemoveGroupC",				"MetacelloPackagesSpecTestCase>>#testAddProjectA",				"MetacelloPackagesSpecTestCase>>#testRemoveProjectA",				"MetacelloPackagesSpecTestCase>>#testMergeGroupA",				"MetacelloPackagesSpecTestCase>>#testRemoveProjectB",				"MetacelloPackagesSpecTestCase>>#testAddGroupA",				"MetacelloPackagesSpecTestCase>>#testCopyToProject",				"MetacelloPackagesSpecTestCase>>#testCopyToGroup",				"MetacelloPackagesSpecTestCase>>#testMergeProjectA",				"MetacelloPackagesSpecTestCase>>#testRemoveGroupA",				"MetacelloPackagesSpecTestCase>>#testAddGroupB",				"MetacelloPackagesSpecTestCase>>#testAddProjectB",				"MetacelloPharoCommonPlatform>>#defaultPlatformAttributes",				"MetacelloPostLoadDirective>>#addTo:",				"MetacelloPreLoadDirective>>#addTo:",				"MetacelloProjectReferenceSpec>>#packagesNeedSavingVisited:using:into:",				"MetacelloProjectRegistration class>>#configurationClasses",				"MetacelloProjectRegistry>>#configurationProjectSpecs",				"MetacelloProjectRegistry>>#baselineProjectSpecs",				"MetacelloRepositoriesSpecTestCase>>#testRemoveC",				"MetacelloRepositoriesSpecTestCase>>#testRemoveB",				"MetacelloRepositoriesSpecTestCase>>#testMergeA",				"MetacelloRepositoriesSpecTestCase>>#testAddA",				"MetacelloRepositoriesSpecTestCase>>#testCopyTo",				"MetacelloRepositoriesSpecTestCase>>#testMergeB",				"MetacelloRepositoriesSpecTestCase>>#testAddC",				"MetacelloRepositoriesSpecTestCase>>#testRemoveD",				"MetacelloRepositoriesSpecTestCase>>#testMergeC",				"MetacelloRepositoriesSpecTestCase>>#testRemoveA",				"MetacelloRepositoriesSpecTestCase>>#testAddB",				"MetacelloScriptApiExecutor>>#projectSpecsFromRepositoryArg",				"MetacelloScriptExecutor>>#execute:",				"MetacelloSemanticVersionNumber class>>#fromString:forPattern:",				"MetacelloSymbolicVersionMethodSpec>>#addMethodSection:versionString:",				"MetacelloToolBox>>#modifySection:sectionIndex:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#editVersionSpecsForImport:projectAttributes:active:fullVersionSpec:updateProjects:updatePackages:visited:updated:",				"MetacelloToolBox>>#updateVersionMethodForVersion:projectAttributes:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox>>#modifyBaselineOf",				"MetacelloToolBox>>#updateVersionSpec:fullVersionSpec:updateProjects:updatePackages:visited:updated:",				"MetacelloToolBox class>>#validatePlatformLoad:for:version:",				"MetacelloToolBox class>>#modifyDevelopmentVersionIn:imports:requiredProjects:packages:description:",				"MetacelloToolBox class>>#validatePlatformLoad:for:",				"MetacelloToolBoxConstructor>>#methodSection:inEvaluationOrder:do:",				"MetacelloToolBoxConstructor>>#methodSectionsInEvaluationOrder:do:",				"MetacelloToolBoxConstructor>>#setFor:do:",				"MetacelloToolBoxConstructor>>#setFor:version:",				"MetacelloVersion>>#projects",				"MetacelloVersion>>#groups",				"MetacelloVersionConstructor>>#collectAllVersionsFromVersionImportPragmasInto:using:satisfiedPragmas:",				"MetacelloVersionConstructor>>#calculate:project:",				"MetacelloVersionLoadDirective>>#add:",				"MetacelloVersionMethodSection>>#addMethodSection:",				"MetacelloVersionMethodSpec>>#addMethodSection:versionSpec:",				"MetacelloVersionNumber class>>#fromString:",				"MetacelloVersionSpec>>#configPackagesSpecMethodOn:indent:",				"MetacelloVersionValidator>>#recordValidationWarning:versionString:callSite:reasonCode:",				"MetacelloVersionValidator>>#recordValidationError:versionString:callSite:reasonCode:",				"MetacelloVersionValidator>>#validateProjectCreationFrom:onError:",				"MetacelloVersionValidator>>#recordValidationCriticalWarning:versionString:callSite:reasonCode:",				"MetacelloVersionValidator>>#validatePragmas",				"MetacelloVersionValidator>>#validateProject:",				"MetacelloVersionValidator>>#validateProject:version:",				"MetacelloVersionValidator>>#validateBaselineProject:",				"MetacelloVisitedPackages>>#visit:doing:",				"MetaclassForTraits>>#addUser:",				"MethodClassifier>>#protocolByOtherImplementors:",				"MethodConstantTest>>#testUsingConstJustInSameMethod",				"MethodDictionaryTest>>#testAssociationsDoGoesOverEntireDictionary",				"MicAbstractBlock>>#addChild:",				"MicInlineParser>>#addInlineBlock:",				"MicInlineParser>>#linkOrFigureProcess:",				"MicInlineParser>>#addATextFrom:to:toFinalArray:",				"MicInlineParser>>#insertBasicText:withFinalArray:from:to:",				"MicTableBlock>>#addLineAndReturnNextNode:",				"MiniDrTests class>>#defaultLayout",				"MockObject>>#on:withArguments:verify:",				"MonitorTest>>#testExample2",				"MonitorTest>>#testExample1",				"MonthTest>>#testEnumerating",				"Morph>>#allMorphsInto:",				"Morph>>#showActions",				"Morph>>#ownerChain",				"Morph>>#allStringsAfter:",				"Morph>>#removeAllMorphsIn:",				"Morph class>>#morphsUnknownToTheirOwners",				"MorphTreeMorph>>#headerBounds",				"MorphTreeMorph>>#addMorphsTo:from:withExpandedItems:atLevel:",				"MorphTreeMorph>>#buildTopHeader",				"MorphTreeMorph>>#addMorphsAfter:fromCollection:",				"MorphTreeMorphMultipleSelection>>#addNodePath:",				"MorphTreeNodeModel>>#pathIn:",				"MorphTreeNodeMorph>>#recursiveAddTo:",				"MorphTreeNodeMorph>>#selected:",				"MorphTreeNodeMorph>>#path",				"MorphTreeNodeMorph>>#buildRowMorph",				"MorphTreeNodeMorph>>#children",				"MorphicEventHandler>>#methodRefList",				"MorphicEventHandler>>#addSubscription:toEvent:",				"MultistateButtonMorph>>#fillStyles",				"MutexTest>>#fork:at:",				"MutexTest>>#fork:",				"NECDetailMorph>>#drawArrowOn:",				"NSInterpolator>>#gtCanvasForInspector",				"NSOrdinalScale>>#scale:",				"NSOrdinalScale>>#domain:",				"NSPolylinearScale>>#rescale",				"NetNameResolver class>>#findLongestIPv6ZerosIn:",				"NetNameResolver class>>#stringFromIPv6Address:",				"NetNameResolver class>>#splitIPv6HextetsOn:",				"NetworkSystemSettings class>>#addHttpProxyException:",				"OCASTDoubleBlockTranslatorTest>>#testComposedExample:withTemps:withFirstBlock:withSecondBlock:",				"OCASTSingleBlockTranslatorTest>>#testComposedExample:withTemps:withBlock:withArguments:",				"OCASTVariableTranslatorTest>>#testAssignGlobalVariable",				"OCASTVariableTranslatorTest>>#testPushGlobalVariable",				"OCClosureCompilerTest>>#testInlineBlockCollectionEM1",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR3",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR1",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR2",				"OCClosureCompilerTest>>#testInlineBlockCollectionSD1",				"OCClosureTest>>#testWhileModificationBefore",				"OCClosureTest>>#testWhileModificationAfter",				"OCClosureTest>>#testWhileWithTempNotInlined",				"OCClosureTest>>#testWhileWithTempIsNil",				"OCClosureTest>>#testWhileModificationAfterNotInlined",				"OCClosureTest>>#testToDoInsideTemp",				"OCClosureTest>>#testToDoOutsideTemp",				"OCClosureTest>>#testWhileModificationBeforeNotInlined",				"OCClosureTest>>#testWhileWithTemp",				"OCClosureTest>>#testToDoInsideTempNotInlined",				"OCClosureTest>>#testToDoArgument",				"OCClosureTest>>#testToDoArgumentNotInlined",				"OCClosureTest>>#testToDoOutsideTempNotInlined",				"OCCompiledMethodIntegrityTest>>#testUndeclaredVariableWhenItIsAlreadyRegisteredAsAssociation",				"OCLiteralList>>#addLast:",				"OCOpalExamples>>#exampleInlineBlockCollectionLR3",				"OCOpalExamples>>#exampleWhileWithTempNotInlined",				"OCOpalExamples>>#singleRemoteTempVar",				"OCOpalExamples>>#exampleWhileWithTemp",				"OCOpalExamples>>#exampleWhileModificationBefore",				"OCOpalExamples>>#exampleWhileModificationAfterNotInlined",				"OCOpalExamples>>#exampleToDoOutsideTempNotInlined",				"OCOpalExamples>>#exampleWhileModificationBeforeNotInlined",				"OCOpalExamples>>#exampleToDoInsideTempNotInlined",				"OCOpalExamples>>#exampleToDoArgument",				"OCOpalExamples>>#exampleToDoArgumentNotInlined",				"OCOpalExamples>>#exampleToDoInsideTemp",				"OCOpalExamples>>#exampleToDoOutsideTemp",				"OCScopesCollector>>#visitBlockNode:",				"OCScopesCollector>>#visitMethodNode:",				"OCUndeclaredVariableWarning>>#openMenuIn:",				"OSSDL2Driver>>#registerGlobalListener:",				"OSSDLPasteEventFilter>>#addEvent:",				"OSTouchFingerTracker>>#addToMove:",				"OSWindowGestureHandler>>#registerGesture:",				"OSWindowGestureHandler>>#trackFinger:",				"OSWindowJoystickExample>>#shoot",				"OSWindowRenderThread>>#createdWindow:",				"Object>>#inspectorCanvasSlotsGraphTopologicallySorted",				"Object>>#inspectorCanvasSlotsGraph",				"Object>>#recursivelySetIsReadOnlyObject:exceptObjectsIn:",				"Object>>#split:",				"Object>>#inspectorCanvasSlotsGraphCollapsedSCCs",				"Object>>#inspectorCanvasSlotsGraphLayered",				"Object>>#inspectorCanvasSlotsGraphSCCs",				"ObservableValueHolder>>#whenChangedDo:",				"OmBlockFileStore>>#refreshNewBlocksFrom:",				"OmMemoryStore>>#newEntry:",				"OmReference>>#stonOn:",				"OmSTONEntryReader>>#entryPositionsUpTo:",				"OmSessionStore class>>#register:",				"OmStore>>#entries",				"OrderedCollection>>#at:ifAbsentPut:",				"OrderedCollection>>#copyWith:",				"OrderedCollection>>#removeDuplicates",				"OrderedCollection>>#copyReplaceFrom:to:with:",				"OrderedCollectionTest>>#testAdd",				"OrderedCollectionTest>>#testKeysAndValuesDo",				"OrderedCollectionTest>>#firstIndexesOf:in:",				"OrderedCollectionTest>>#testTAddTwice",				"OrderedCollectionTest>>#testTAdd",				"OrderedCollectionTest>>#collectionWith1TimeSubcollection",				"OrderedCollectionTest>>#unsortedCollection",				"OrderedCollectionTest>>#testCompact",				"OrderedCollectionTest>>#testFromToDo",				"OrderedCollectionTest>>#collectionWith2TimeSubcollection",				"OrderedCollectionTest>>#testKeysAndValuesDoEmpty",				"OrderedCollectionTest>>#nonEmpty1Element",				"OrderedCollectionTest>>#testAllButLastDo",				"OrderedCollectionTest>>#collectionWithCopy",				"OrderedCollectionTest>>#collectionWithIdentical",				"OrderedCollectionTest>>#testReverseDo",				"OrderedCollectionTest>>#collectionNotIncluded",				"OrderedCollectionTest>>#testWithIndexDo",				"OrderedCollectionTest>>#replacementCollectionSameSize",				"OrderedCollectionTest>>#testReverseDoEmpty",				"OrderedCollectionTest>>#testRemoveIfAbsent",				"OrderedCollectionTest>>#testEndsWithAnyOf",				"OrderedCollectionTest>>#testAllButFirstDo",				"OrderedCollectionTest>>#setUp",				"OrderedCollectionTest>>#test0FixtureOccurrencesTest",				"OrderedCollectionTest>>#testCapacityFromAsOrderedCollection",				"OrderedCollectionTest>>#sortedInAscendingOrderCollection",				"OrderedCollectionTest>>#testBeginsWithAnyOf",				"OrderedDictionary>>#add:",				"OrderedDictionary>>#keysAndValuesRemove:",				"OrderedDictionary>>#declare:from:",				"OrderedDictionary>>#addAll:",				"OrderedDictionaryTest>>#testKeyAtValueIfAbsent",				"OrderedDictionaryTest>>#testKeysAndValuesDo",				"OrderedDictionaryTest>>#testKeyAtIdentityValue",				"OrderedDictionaryTest>>#testKeyAtIdentityValueIfAbsent",				"OrderedDictionaryTest>>#testIdentityIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testIdentityIndexOfKey",				"OrderedDictionaryTest>>#testAssociationAtIfAbsent",				"OrderedDictionaryTest>>#testValuesDo",				"OrderedDictionaryTest>>#testKeyAtValue",				"OrderedDictionaryTest>>#testDeclareFrom",				"OrderedDictionaryTest>>#testAtIfAbsent",				"OrderedDictionaryTest>>#testIncludes",				"OrderedDictionaryTest>>#testEquals",				"OrderedDictionaryTest>>#should:enumerate:",				"OrderedDictionaryTest>>#testIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testAt",				"OrderedDictionaryTest>>#testIncludesKey",				"OrderedDictionaryTest>>#testAssociationsDo",				"OrderedDictionaryTest>>#testBindingsDo",				"OrderedDictionaryTest>>#testKeyForIdentity",				"OrderedDictionaryTest>>#testDo",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsent",				"OrderedDictionaryTest>>#testHash",				"OrderedDictionaryTest>>#testKeyAtIndex",				"OrderedDictionaryTest>>#testAtIfPresent",				"OrderedDictionaryTest>>#testKeysDo",				"OrderedDictionaryTest>>#testValues",				"OrderedDictionaryTest>>#testIncludesAssociation",				"OrderedDictionaryTest>>#testIndexOfKey",				"OrderedDictionaryTest>>#testKeysSortedSafely",				"OrderedDictionaryTest>>#testKeys",				"OrderedDictionaryTest>>#testSize",				"OrderedDictionaryTest>>#testAssociationAt",				"OrderedDictionaryTest>>#testAssociationAtIfPresent",				"OrderedDictionaryTest>>#testKeyAtIndexIfAbsent",				"OrderedDictionaryTest>>#testAssociations",				"OrderedDictionaryTest>>#testIncludesIdentity",				"OrderedDictionaryTest>>#testAdd",				"OupsDebugRequest>>#computePreDebugActions",				"OupsDummyDebugRequest>>#computePreDebugActions",				"PNGReadWriter>>#processNextChunk",				"PNGReadWriter>>#processNonInterlaced",				"PNGReadWriter>>#processInterlaced",				"POP3Client class>>#example",				"PSMCChangesGrouper>>#ensureClassChangeWrapperNamed:",				"PSMCChangesGrouper>>#visitOrganizationDefinition:",				"PSMCChangesGrouper>>#visitDefaultDefinition:",				"PaSimpleMatrixExampleTest>>#testIncludes",				"PaSimpleMatrixExampleTest>>#testAddAndRemove",				"PaSimpleMatrixExampleTest>>#testAdd",				"Paragraph>>#selectionRectsFrom:to:",				"ParametrizedTestMatrix>>#addCase:",				"ParametrizedTestMatrix>>#forSelector:addOptions:",				"Path>>#stonOn:",				"Path>>#withParents",				"Path>>#segments",				"Path class>>#addEmptyElementTo:",				"Path class>>#addElement:to:",				"Path class>>#addParentElementTo:",				"PathShape>>#addVertex:",				"PharoCommonTools>>#register:as:",				"PluggableDictionaryTest>>#testEqualBlock",				"PluggableMenuSpec>>#addMenuItem",				"PluggableMenuSpec class>>#exampleWithSubMenu",				"Point>>#stonOn:",				"PolygonMorph>>#midVertices",				"PolygonMorph>>#intersectionsWith:",				"PopupChoiceDialogWindow>>#newChoicesMorph",				"PositionableStream>>#decodeString:andRuns:",				"Pragma class>>#addToCache:",				"PragmaCollector>>#addPragma:",				"PragmaMenuAndShortcutRegistration>>#createNewItem",				"PragmaMenuBuilder>>#pragmaKeyword:",				"PreorderGuide>>#pushAll:",				"Process>>#pvtSignal:list:",				"Process class>>#updateInheritableKeys",				"ProcessBrowser class>>#registerWellKnownProcess:label:allowStop:allowDebug:",				"ProcessList>>#select:thenCollect:",				"ProcessList>>#collect:thenSelect:",				"ProcessList>>#collect:",				"ProcessList>>#copyWith:",				"ProcessList>>#copyWithout:",				"ProcessList>>#select:",				"ProcessMonitorTestService>>#handleNewProcess:",				"ProcessorScheduler>>#tallyCPUUsageFor:every:",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedInProtocols:whenSubclassOf:",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedIn:whenSubclassOf:",				"ProperMethodCategorizationTest>>#testNoLeadingOrTrailingSpacesInCategoryNames",				"ProperPackagesTest>>#testProperClassTagCasing",				"ProperPackagesTest>>#testProperManifestCategorization",				"ProperlyImplementedSUnitClassesTest>>#testAndMakeSureSuperTearDownIsCalledAsLastMessageInTearDownMethodsOfTestCases",				"ProperlyImplementedSUnitClassesTest>>#testAndMakeSureSuperSetupIsCalledAsFirstMessageInSetupMethodsOfTestCases",				"ProportionalSplitterMorph>>#addRightOrBottom:",				"ProportionalSplitterMorph>>#addLeftOrTop:",				"ProtoObject>>#pointersToExcept:",				"Protocol>>#addMethodSelector:",				"ProtocolClient>>#pushResponse:",				"ProtocolClient>>#logProgressToTranscript",				"ProtocolOrganizer>>#addProtocolNamed:",				"ProtocolOrganizer>>#addProtocol:",				"QSystemTally>>#bump:fromSender:",				"QueryAnnotationsFromClassTest>>#testCanBeEnumerated",				"RBAbstractBlockVisitor class>>#visit:select:",				"RBAbstractClass>>#withAllSuperclasses",				"RBAbstractClass>>#removeMethod:",				"RBAbstractClass>>#withAllSuperclassesUntil:",				"RBAbstractClass>>#allSuperclasses",				"RBAbstractClass>>#whichSelectorsReferToClassVariable:",				"RBAbstractClass>>#addSubclass:",				"RBAbstractClass>>#withAllSubclasses",				"RBAbstractClass>>#whichSelectorsReferToInstanceVariable:",				"RBAbstractClass>>#whichSelectorsReferToSymbol:",				"RBAbstractClass>>#allSuperclassesUntil:",				"RBAbstractClass>>#addInstanceVariable:",				"RBAbstractClass>>#whichSelectorsReferToClass:",				"RBAbstractRefactoringTest>>#extractMethodTestData",				"RBAbstractRefactoringTest>>#abstractVariableTestData",				"RBAbstractSelectionPresenter class>>#defaultLayout",				"RBAbstractVariablesRefactoring>>#processAssignmentNode:",				"RBAbstractVariablesRefactoring>>#processReferenceNode:",				"RBAbstractVariablesTransformation>>#processAssignmentNode:",				"RBAbstractVariablesTransformation>>#processReferenceNode:",				"RBAddParameterRefactoring>>#senders",				"RBAddParameterTransformation>>#senders",				"RBArrayErrorNode>>#repairCollectionFromStart",				"RBArrayErrorNode>>#repairCollectionFromStop",				"RBArrayNode>>#addNode:",				"RBAssignmentNode>>#tagType:",				"RBBasicDummyLintRuleTest class>>#collectionMessagesToExternalObject",				"RBBasicDummyLintRuleTest class>>#returnsBooleanAndOther",				"RBBlockErrorNode>>#repairCollectionFromStart",				"RBBrowserEnvironment>>#methods",				"RBBrowserEnvironment>>#forClasses:",				"RBBrowserEnvironment>>#allMetaClasses",				"RBBrowserEnvironment>>#allClassesAndTraits",				"RBBrowserEnvironment>>#selectorsForClass:",				"RBBrowserEnvironment>>#keys",				"RBBrowserEnvironment>>#addSearchString:",				"RBBrowserEnvironment>>#classes",				"RBBrowserEnvironment>>#allNonMetaClasses",				"RBBrowserEnvironment>>#traits",				"RBBrowserEnvironment>>#classesAndTraits",				"RBBrowserEnvironment>>#allClasses",				"RBBrowserEnvironment>>#classNames",				"RBBrowserEnvironmentTest>>#uniqueClassesIn:",				"RBBrowserEnvironmentTest>>#testSystemIntegrity",				"RBBrowserEnvironmentTest>>#testConstructedSelectorEnvironment",				"RBCategoryEnvironment>>#addCategory:",				"RBClass>>#addPoolDictionary:",				"RBClass>>#addClassVariable:",				"RBClassEnvironment>>#addClass:",				"RBCombinatorVisitor>>#visitSequenceNode:",				"RBCompositeLintRule class>>#rulesFor:",				"RBCompositeRefactoryChange>>#addChange:",				"RBCreateCascadeRefactoring>>#addStatementNode:",				"RBDeprecateMethodTransformation>>#buildTransformations",				"RBDummyRefactoryTestDataApp>>#collectionProtocol",				"RBDummyRefactoryTestDataApp>>#missingYourself",				"RBEnvironmentsPresenter class>>#defaultLayout",				"RBExpandReferencedPoolsRefactoring>>#computePoolsToMove",				"RBExpandReferencedPoolsTransformation>>#computePoolsToMove",				"RBExtractMethodTransformation>>#buildTransformations",				"RBFindAndReplacePreviewPresenter>>#initializeChangeList",				"RBFindAndReplacePreviewPresenter class>>#defaultLayout",				"RBFindAndReplaceRefactoring>>#argumentsOf:",				"RBFindAndReplaceRefactoring>>#matchNodes",				"RBInlineParameterRefactoring>>#expressionsToInlineFrom:",				"RBItemsSelectionPresenter class>>#defaultLayout",				"RBLintRule>>#check:ifNoCritiques:",				"RBMessageNode>>#sentMessages",				"RBMethodArgumentsSelector>>#removeAssociation",				"RBMethodNameEditor>>#add",				"RBMethodNode>>#addReplacement:",				"RBMethodNode>>#children",				"RBMoveInstVarToClassRefactoring>>#collectSendersOfInstVar",				"RBMoveMethodRefactoring>>#getNewMethodName",				"RBMoveMethodRefactoring>>#checkTemporaryVariableNames",				"RBMoveMethodTransformation>>#getNewMethodName",				"RBMoveMethodTransformation>>#checkTemporaryVariableNames",				"RBMoveTemporaryVariableDefinitionTransformation>>#checkAllBlocksIn:",				"RBMoveTemporaryVariableDefinitionTransformation>>#buildTransformations",				"RBMoveTemporaryVariableDefinitionTransformation>>#checkLocationsIn:",				"RBMoveVariableDefinitionRefactoring>>#subblocksIn:",				"RBMoveVariableDefinitionRefactoring>>#checkNodes:",				"RBNamespace>>#defineClass:",				"RBNamespace>>#privateImplementorsOf:in:",				"RBNamespace>>#markPackageAsRemoved:",				"RBNamespace>>#removeClassNamed:",				"RBNamespace>>#removeClassKeepingSubclassesNamed:",				"RBNamespace>>#allClassesDo:",				"RBNamespace>>#privateReferencesTo:inPackages:",				"RBNamespace>>#privateImplementorsOf:",				"RBNamespace>>#privateReferencesTo:",				"RBNamespace>>#allClassesInPackages:do:",				"RBNamespace>>#markAsRemoved:",				"RBNamespace>>#privateReferencesTo:in:",				"RBNamespace>>#privateRootClasses",				"RBOrEnvironment>>#classesDo:",				"RBOrEnvironment>>#selectorsForClass:do:",				"RBPackageEnvironment>>#classesDo:",				"RBPackageEnvironment>>#addPackage:",				"RBParseTreeRewriter>>#visitCascadeNode:",				"RBParseTreeRewriter class>>#mapArguments:toValues:in:",				"RBParseTreeSearcher>>#addRule:",				"RBParseTreeSearcher>>#addArgumentRule:",				"RBParseTreeSearcher class>>#treeMatchings:in:",				"RBParseTreeSearcherTest>>#testMatchesArgumentToTestImplicitAddArgument",				"RBParser>>#parseLiteralArray",				"RBParser>>#parseKeywordMessageWith:",				"RBParser>>#parseStatementInto:periodList:withAcceptedStatementClosers:",				"RBParser>>#parsePrimitiveKeywordPragma",				"RBParser>>#parseStatementList:into:until:",				"RBParser>>#parseStatementInto:periodList:",				"RBParser>>#parseArgs",				"RBParser>>#parseKeywordPattern",				"RBParser>>#parseCascadeMessage",				"RBParser>>#parseStatementList:into:untilAnyCloserOf:",				"RBParser>>#parseKeywordPragma",				"RBParser>>#parseIncompleteExpression:",				"RBParser>>#parseBlockArgsInto:",				"RBParser>>#parseTemps",				"RBParserTest>>#testLiteralArray",				"RBParserTest>>#testIsA",				"RBParserTest>>#testLiteralArrayContainsLiteralValues",				"RBParserTest>>#testParseFaultyMethod",				"RBPragmaEnvironment>>#addKeyword:",				"RBPragmaNode>>#sentMessages",				"RBProgramNode>>#inspectorRoassalTree",				"RBProgramNode>>#link:",				"RBProgramNode>>#addBreakpoint:",				"RBProtectInstanceVariableRefactoring>>#getterSetterMethods",				"RBProtocolEnvironment>>#addProtocol:",				"RBPullUpMethodParametrizedTest>>#testPullUpWhenSuperClassDoesNotDirectlyImplement",				"RBPullUpMethodTransformation>>#checkInstVarsFor:",				"RBPullUpVariableTransformation>>#buildTransformations",				"RBPushDownVariableTransformation>>#buildTransformations",				"RBReadBeforeWrittenTester>>#read",				"RBReadBeforeWrittenTester>>#createScope",				"RBReadBeforeWrittenTester>>#processStatementNode:",				"RBRefactoryChangeManager>>#undoOperation",				"RBRefactoryChangeManager>>#redoOperation",				"RBRefactoryDefinitionChange>>#namesIn:",				"RBRefactoryTestDataApp>>#collectionProtocol",				"RBRefactoryTestDataApp>>#missingYourself",				"RBRefactoryTyper>>#processCollectionMessagesFor:in:",				"RBRefactoryTyper>>#implementorsOf:in:storeIn:",				"RBRefactoryTyper>>#typesFor:in:model:",				"RBRefactoryTyper>>#guessTypeFromAssignment:",				"RBRefactoryTyper>>#backpointersSetWith:",				"RBRefactoryTyper>>#processCollectionFor:messagesTo:in:",				"RBRefactoryTyper>>#refineTypes:with:",				"RBRefactoryTyper>>#computeMessagesSentToVariables",				"RBRefactoryTyper class>>#typesFor:in:model:",				"RBRegexRefactoring>>#replace:with:ignoreCase:",				"RBRemoveAllSendersRefactoring>>#selfSendIn:",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownClassVarsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownInstVarsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownMethodsOf:",				"RBRemoveHierarchyMethodTransformation>>#delete:in:",				"RBRemoveMethodRefactoring>>#checkSuperMethods",				"RBRemoveMethodRefactoring>>#justSendsSuper:",				"RBRemoveMethodRefactoring>>#checkReferencesToAnyOf:",				"RBRemoveMethodTransformation>>#checkReferences",				"RBRemoveMethodTransformation>>#justSendsSuper:",				"RBRenamePackageTransformation>>#renameManifestClass",				"RBReplacePreview class>>#defaultLayout",				"RBScanner>>#scanComment",				"RBSearchTest>>#createSearchWith:selectors:inClass:",				"RBSearchTest>>#buildSimpleLiteralSearch",				"RBSearchTest>>#createArgumentSearchWith:selectors:inClass:",				"RBSearchTest>>#createMethodSearchWith:selectors:inClass:",				"RBSelectorEnvironment>>#addClass:selector:",				"RBSelectorEnvironment>>#packages",				"RBSelectorEnvironment>>#smallLintCritics",				"RBSelectorEnvironment class>>#implementorsMatching:in:",				"RBSequenceNode>>#replaceNode:withNodes:",				"RBSequenceNode>>#statementsIntersectingInterval:",				"RBSequenceNode>>#addNode:",				"RBSequenceNode>>#addFaultyNode:",				"RBSequenceNodeTest>>#testModifyParametersShouldNotModifyPeriods",				"RBSmalllintContext>>#checkLiteral:",				"RBSmalllintTestObject>>#collectionProtocol",				"RBSmalllintTestObject>>#missingYourself",				"RBSmalllintTestObject>>#multiplePeriodsTerminatingAssignmentStatement",				"RBSplitClassTransformation>>#addInstanceVariables",				"RBSplitClassTransformation>>#addClass",				"RBSplitClassTransformation>>#createReference",				"RBSplitClassTransformation>>#abstractReferenceTo:",				"RBTransformationTest>>#abstractVariableTestData",				"RBTransformationsTest>>#testCompositeTransform",				"RBValueNode>>#addParenthesis:",				"RBVariableEnvironment>>#addClass:instanceVariableReader:",				"RBVariableEnvironment>>#addClass:instanceVariableWriter:",				"RBVariableEnvironment>>#addClass:classVariable:",				"RBVariableEnvironment>>#addClass:instanceVariable:",				"RFArgumentsReification>>#preambleForMessage:",				"RFArgumentsReification>>#preambleSequence:",				"RFArgumentsReification>>#preambleForMethod:",				"RFMethodToExecuteReification>>#preambleForMessage:",				"RFOperationReification>>#preambleForMessage:",				"RFOperationReification>>#preambleForArray:",				"RFOperationReification>>#preambleForMethod:",				"RFReceiverReification>>#preambleForMessage:",				"RFValueReification>>#preambleForArray:",				"RGAbstractContainer>>#addElement:in:",				"RGAnnouncementsTest>>#testBehaviorDefinitionModifiedForSuperclass",				"RGAnnouncementsTest>>#testAnnouncerSuspending",				"RGAnnouncementsTest>>#testBehaviorParentRenamed",				"RGAnnouncementsTest>>#testBehaviorCommentModified",				"RGAnnouncementsTest>>#testAnnouncerSuspendingWithStoring",				"RGAnnouncementsTest>>#testBehaviorDefinitionModifiedForCategory",				"RGAnnouncementsTest>>#testUnsubscribe",				"RGAnnouncementsTest>>#testDirectAnnouncement",				"RGAnnouncementsTest>>#testBehaviorAdded",				"RGAnnouncementsTest>>#testAnnouncementTimestamps",				"RGBehavior>>#localMethodsSet",				"RGBehavior>>#pvtTagWith:",				"RGBehavior>>#subclasses",				"RGBehavior>>#pvtAddMethodTag:",				"RGBehavior>>#withAllSubclasses",				"RGBehavior>>#pvtAddLocalMethod:",				"RGBehavior>>#tagsForMethods",				"RGBehavior>>#tagsForMethodsSet",				"RGBehavior>>#tagsSet",				"RGBehaviorDefinition>>#addSubclass:",				"RGBehaviorDefinition>>#addProtocol:",				"RGBehaviorDefinition>>#allSuperclasses",				"RGChunkImporter>>#visitDoItChunk:",				"RGClassDefinition>>#addUser:",				"RGClassDefinitionTest>>#testRemovingMethods",				"RGClassDefinitionTest>>#testAddingMethods",				"RGClassDefinitionTest>>#testWithProtocols",				"RGClassDescriptionDefinition>>#addVariable:in:",				"RGClassStrategy>>#sharedPoolNames",				"RGClassStrategy>>#pvtAddSharedPool:",				"RGClassStrategy>>#sharedPools",				"RGClassStrategy>>#pvtAddClassVariable:",				"RGContainer>>#loadPackagesFromImage",				"RGEnvironment>>#pvtAddGlobalVariable:",				"RGEnvironment>>#removeUnusedPackages",				"RGEnvironment>>#pvtAddPackage:",				"RGEnvironment>>#pvtAddBehavior:",				"RGEnvironment>>#cleanUnusedUnreferencedBehaviors",				"RGEnvironmentAnnouncer>>#announce:",				"RGEnvironmentQueryInterface>>#behaviors",				"RGEnvironmentQueryInterface>>#globalVariables",				"RGEnvironmentQueryInterface>>#packages",				"RGMethod>>#tags",				"RGMethod>>#pvtTagWith:",				"RGMethodDefinitionTest>>#testDifferentObjectButSameMethodInSet",				"RGMethodDefinitionTest>>#testExistingMethodWithoutClass",				"RGMethodDefinitionTest>>#testSameMethodInSet",				"RGMethodDefinitionTest>>#testExistingMethodWithClass",				"RGMonticelloTest>>#testConvertingMCMethodDefinition",				"RGPackage>>#pvtAddDefinedBehavior:",				"RGPackage>>#tagsForClasses",				"RGPackage>>#pvtAddExtensionMethod:",				"RGPackage>>#definedBehaviors",				"RGPackage>>#extensionMethods",				"RGPackage>>#pvtAddClassTag:",				"RGPointerLayout>>#slots",				"RGPointerLayout>>#pvtAddSlot:",				"RGTraitAlias>>#pvtAddAlias:",				"RGTraitAlias>>#aliases",				"RGTraitComposition>>#transformations",				"RGTraitComposition>>#pvtAddTransformation:",				"RGTraitCompositionVisitor>>#visitMessageNode:",				"RGTraitDescriptionDefinition>>#addUser:",				"RGTraitDescriptionStrategy>>#users",				"RGTraitDescriptionStrategy>>#methods",				"RGTraitExclusion>>#exclusions",				"RGTraitExclusion>>#pvtAddExclusion:",				"RGTraitV2Strategy>>#sharedPoolNames",				"RGTraitV2Strategy>>#pvtAddSharedPool:",				"RGTraitV2Strategy>>#sharedPools",				"RGTraitV2Strategy>>#pvtAddClassVariable:",				"RGVariableDefinitionTest>>#testPoolVariable",				"RGVariableDefinitionTest>>#testClassVariable",				"RPackage>>#definedClasses",				"RPackage>>#methods",				"RPackage>>#addSelector:ofMetaclassName:",				"RPackage>>#renameTo:",				"RPackage>>#activatedPackages:classes:methods:",				"RPackage>>#addMethod:",				"RPackage>>#addSelector:ofClassName:",				"RPackage>>#basicAddClassTag:",				"RPackage>>#addClassDefinitionName:",				"RPackage>>#extensionMethods",				"RPackage>>#updateDefinedClassNamed:withNewName:",				"RPackage>>#updateExtensionSelector:inClass:withNewSelector:",				"RPackage>>#updateDefinedSelector:inClass:withNewSelector:",				"RPackageIncrementalTest>>#testPrivateClassRegisterUnregister",				"RPackageOrganizer>>#registerExtendingPackage:forClassName:",				"RPackageOrganizer>>#registerExtendingPackage:forClass:",				"RPackageOrganizer>>#addPackageNameToCache:",				"RPackageTag>>#addClassNamed:",				"RPackageTestCase>>#createNewClassNamed:inCategory:",				"RPackageTestCase>>#createNewPackageNamed:",				"RPackageTestCase>>#createNewTraitNamed:inCategory:",				"RSAbstractChartPlot>>#addShape:",				"RSAbstractConnection>>#output:",				"RSAbstractGraphLayout>>#childrenFor:",				"RSAbstractGraphLayout>>#parentsFor:",				"RSAbstractGraphLayout>>#validateCycleFor:path:",				"RSAbstractLabelDecoration>>#renderIn:",				"RSAbstractTreeBuilder>>#createElements:nesting:leaves:depth:",				"RSAbstractTreeBuilder>>#createElements:using:depth:",				"RSAbstractUMLClassRenderer>>#createEllipsisIfNecessaryOn:",				"RSAcrossPathBuilder>>#renderIn:",				"RSAdjacencyMatrixBuilder>>#getAllCycles",				"RSAdjacencyMatrixBuilder>>#renderIn:",				"RSAdjacencyMatrixBuilder>>#hasCycleStartingFrom:visiting:",				"RSAlgoritmia>>#doSimpleOutline:",				"RSAlpharo>>#renderIn:",				"RSAlpharo>>#updateRedLine",				"RSAnimationExamples>>#example08ArcTree",				"RSAnimationExamples>>#example13ArcNoise",				"RSAnimationExamples>>#example25AnimationCircle",				"RSAnimationExamples>>#example07CircleParty",				"RSAnimationExamples>>#example43Waves",				"RSAnimationExamples>>#example09b",				"RSAnimationExamples>>#example32SimpleClock",				"RSAnimationExamples>>#example41River",				"RSAnimationExamples>>#example05ElasticEllipses",				"RSAnimationExamples>>#example45Beziers",				"RSAnimationExamples>>#example46Lines",				"RSAnimationExamples>>#example28AlteredWorld",				"RSAnimationExamples>>#example21Lines",				"RSAnimationExamples>>#example27RSLocate",				"RSAnimationExamples>>#example29Tick",				"RSAnimationExamples>>#example06LinePatterns",				"RSAnimationExamples>>#example36Title",				"RSAnimationExamples>>#example02BoxesLineCircles",				"RSAnimationExamples>>#example16Gris",				"RSAnimationExamples>>#example23PerlinNoise",				"RSAnimationExamples>>#example26Bezier",				"RSAnimationExamples>>#example09PerlinParticles",				"RSAnimationExamples>>#example42OneLine",				"RSAnimationExamples>>#example04Phyco",				"RSAnimationExamples>>#example18Rainbow",				"RSAnimationExamples>>#example40Circles",				"RSAnimationExamples>>#example22Lines",				"RSAnimationTest>>#addingInComposite:duration:",				"RSAreaPlot>>#renderIn:",				"RSAttachPoint>>#commonParents:in:",				"RSAttachPointTest>>#testCenteredAttachPoint",				"RSAttachPointTest>>#testBorderAttachPoint",				"RSAttachPointTest>>#testVerticalAttachPoint",				"RSAttachPointTest>>#testHorizontalAttachPoint",				"RSBarChartExample>>#example03TilePaint",				"RSBaselineCalypso>>#setLevels:in:level:",				"RSBaselineCalypso>>#buildLegendOn:",				"RSBaselineCalypso>>#buildMenuOn:",				"RSBasicAnimationExamples>>#example08Markers",				"RSBasicAnimationExamples>>#example06Parallel",				"RSBasicAnimationExamples>>#example05LoopEvent",				"RSBasicAnimationExamples>>#example07CornerRadius",				"RSBasicShapeExamples>>#example31BorderAttachPointWithOffset",				"RSBasicShapeExamples>>#example42GhostDraggable",				"RSBasicShapeExamples>>#example32RotateShapeByMouse",				"RSBasicShapeExamples>>#example46NoteLoremIpsum",				"RSBasicShapeExamples>>#example37AngleDirection",				"RSBasicShapeExamples>>#example33EdgesBetweenChildren",				"RSBasicShapeExamples>>#example41PopupAndMarkers",				"RSBasicShapeExamples>>#example03BasicComposite",				"RSBasicShapeExamples>>#example34PaletteVisualization",				"RSBasicShapeExamples>>#example05BasicGroup",				"RSBasicShapeExamples>>#example39YikigeiAnimated",				"RSBasicShapeExamples>>#example46NoteInteger",				"RSBasicShapeExamples>>#example04BasicComposite",				"RSBasicShapeExamples>>#example38Interaction",				"RSBasicSpecExample>>#initializeRoassal3:",				"RSBasicSpecExample class>>#defaultSpec",				"RSBasicUMLClassRenderer>>#addLines:title:",				"RSBoundingShape>>#addConnectedLine:",				"RSBoundingShape>>#addConnectedEdge:",				"RSBoundingShape>>#allRecursiveConnectedShapesIn:",				"RSCameraTest>>#testPosition",				"RSCanvas>>#addLine:",				"RSCanvas>>#addEdge:",				"RSCanvas>>#withAllChildren",				"RSCanvas>>#addBasicShape:",				"RSCanvas>>#addFixedShape:",				"RSCanvas>>#deepShapeFromModel:result:",				"RSCanvas>>#addAll:",				"RSCanvas>>#addAnimation:",				"RSCanvas>>#addNode:",				"RSCanvasTest>>#testShapeFromModelAndComposite2",				"RSCanvasTest>>#testPushFront",				"RSCanvasTest>>#testShapeFromModelAndComposite3",				"RSCanvasTest>>#testShapeFromModelAndComposite",				"RSCanvasTest>>#testPushBackEdges",				"RSCanvasTest>>#testNestedShape",				"RSCanvasTest>>#testNestedShapeNotAddedToACanvas",				"RSCanvasTest>>#testDeepNodes",				"RSCanvasTest>>#testEventKnowsItsCanvas02",				"RSCanvasTest>>#testDrawCanvasWithGroup",				"RSCanvasTest>>#testAddShapeBefore",				"RSCanvasTest>>#testPush",				"RSCat>>#tileFor:pos:in:",				"RSCat>>#newStar",				"RSCellLayout>>#doExecute:",				"RSChannel>>#mark:",				"RSChannelExample>>#exampleBasic",				"RSChannelTest>>#testAnnouncement",				"RSChannelTest>>#testBasicWithCallbacks",				"RSChannelTest>>#testLocationsOfUnderlines",				"RSChart>>#addDecoration:",				"RSChart>>#addPlot:",				"RSChartExample>>#example12ScatterPlotAndNormalizer",				"RSChartExample>>#example18Animation",				"RSChartExample>>#example17CLPvsUSD",				"RSChartExample>>#example09LinearSqrtSymlog",				"RSChartExample>>#example08TwoCharts",				"RSChartSpineDecoration>>#renderIn:",				"RSChartTest>>#testMustInclude05",				"RSChartTest>>#testMustInclude04",				"RSChartTickTest>>#testFromNames",				"RSChessBackgroundInteraction>>#onShape:",				"RSClusterLayout>>#initializeNode:",				"RSClusteringLayout>>#getClusterFor:",				"RSClusteringLayoutTest>>#testCycles",				"RSColorPaletteChooser>>#paletteFor:",				"RSColorPaletteChooser class>>#defaultLayout",				"RSColoredTreePalette>>#allLeavesAccessibleFrom:in:",				"RSComposite>>#addLine:",				"RSComposite>>#deepShapesFromModel:result:",				"RSComposite>>#deepShapesFromModels:result:",				"RSComposite>>#addEdge:",				"RSComposite>>#deepShapeFromModel:result:",				"RSComposite>>#addAll:",				"RSComposite>>#addNode:",				"RSComposite>>#withAllChildren",				"RSComposite>>#addBasicShape:",				"RSCompositeAnimation>>#add:",				"RSCompositeTest>>#testPaddingOkay",				"RSCompositeTest>>#testAdjustChildren",				"RSCompositeTest>>#testPositionInCanvas",				"RSCompositeTest>>#testEdgesCanvasAndComposite04",				"RSCompositeTest>>#testEdgesCanvasAndComposite03",				"RSCompositeTest>>#testEdgesCanvasAndComposite05",				"RSContextInteraction>>#initialize",				"RSDelaunay class>>#generateMesh:circle:vertices:",				"RSDelaunay class>>#generateEdge:closed:vertices:c:j:edges:",				"RSDelaunayExample>>#girlFrom:",				"RSDelaunayExample>>#step",				"RSDelaunayExample>>#addParticle:",				"RSDelaunayExample>>#run",				"RSDelaunayExample>>#run2",				"RSDraggableCanvasTest>>#setUp",				"RSEasel class>>#defaultLayout",				"RSEdgeBuilderTest>>#testInferCanvas3",				"RSEdgeBuilderTest>>#testSource",				"RSExpandingBoxes>>#run",				"RSExporterExamples>>#example11PDFExport",				"RSExporterExamples>>#example12SVGRelax",				"RSFlowCanvas>>#clickOnModel:",				"RSFlowCanvas>>#updateBreadcrumbs",				"RSFlowCanvas>>#initializeCanvas",				"RSFlowCanvasTest>>#testNestedNodes",				"RSFlowLayout>>#linesFor:",				"RSGhostDraggable>>#createGhost:",				"RSGhostDraggableTest>>#testComposite",				"RSGhostDraggableTest>>#testBasic",				"RSGraphCanvasMonitorInteraction>>#updateShape",				"RSGroup>>#add:",				"RSGroupTest>>#testModels",				"RSGroupTest>>#testAddShape",				"RSGroupTest>>#testDrawGroup",				"RSGroupTest>>#testTranslucent",				"RSHanoiRoassal>>#createLink",				"RSHanoiRoassal>>#createGroup:length:size:index:",				"RSHierarchyPackerInteraction>>#fill:with:",				"RSHighlightable>>#withLines",				"RSHighlightable>>#withEdges",				"RSHighlightable>>#withIncomingLines",				"RSHighlightable>>#withIncomingEdges",				"RSHighlightable>>#record:selector:value:",				"RSHighlightableExamples>>#example13Click",				"RSHorizontalFlowLayout>>#linesFor:",				"RSHorizontalTreeLayoutTest>>#testCycles",				"RSHorizontalVanDerPloegTreeLayout>>#initialize:associations:ifMultipleRoots:",				"RSInspectableExample>>#example02Inspect",				"RSInspectableExample>>#example04ChagingContext",				"RSKeyNavigationCanvasInteraction>>#processKeyDown:",				"RSLabel>>#emphasisAdd:",				"RSLayoutExamples>>#example20FlowLayout",				"RSLayoutExamples>>#example15SimpleClassHierarchy",				"RSLayoutExamples>>#example16SimpleClassHierarchy",				"RSLayoutExamples>>#example13VisualizeQuatree",				"RSLayoutExamples>>#example19AutomaticLayoutWhenWindowIsResized",				"RSLegend>>#text:description:",				"RSLegend>>#boxText:icon:",				"RSLegend>>#customText:shape:",				"RSLegend>>#text:withShape:",				"RSLegend>>#renderFixedOn:",				"RSLegend>>#renderOnDemandIn:",				"RSLegend>>#polymetricWidth:height:box:",				"RSLineBuilder>>#source:connectFromAll:to:",				"RSLineBuilder>>#source:connectFrom:toAll:",				"RSLineBuilder>>#source:connectFrom:to:",				"RSLineBuilder>>#createEdgeIfNecessaryFrom:to:",				"RSLineBuilder>>#edgeFrom:to:",				"RSLineDrivenLayout>>#executeOnElements:",				"RSLinePlot>>#renderIn:",				"RSLissajous>>#createLineAnimationFor:",				"RSLissajous>>#createBigCircleFor:",				"RSLissajous>>#createAnimationFor:and:",				"RSMondrian>>#nodes:forEach:",				"RSMondrianTest>>#testWithNullElement",				"RSMondrianTest>>#testWithNullElementWithFixed",				"RSMondrianTest>>#testComposingMondrian",				"RSMonitorEventsTest>>#testWriteToFile",				"RSMultiBezierEdgeBuilder>>#commonShapes:with:",				"RSMultiBezierEdgeBuilder>>#followersOf:with:",				"RSNiceStepSizeGenerator>>#next",				"RSPAnimationTest>>#testError",				"RSParallelAnimationTest>>#testDuration",				"RSParallelAnimationTest>>#testStep",				"RSParallelAnimationTest>>#testStepEvent",				"RSParametricCurveTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"RSParametricCurveTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"RSParametricCurveTest>>#groupBaricentricCoordinatesPoint:anotherPoint:baricentricPoint:at:",				"RSParametricCurveTest>>#groupBaricentricCoordinatesPoint:anotherPoint:yetAnotherPoint:baricentricPoint:at:at:",				"RSParametricLineExamples>>#example45ParametricTrochoid",				"RSParametricLineExamples>>#example45ParametricButterfly",				"RSParametricLineExamples>>#example45ParametricLissajous",				"RSParametricLineExamples>>#example45ParametricNeil2",				"RSParametricLineExamples>>#example45ParametricUnitCircle",				"RSParametricLineExamples>>#example45ParametricHypotrochoid",				"RSParametricLineExamples>>#example45ParametricNeil",				"RSParticleD>>#moveIn:",				"RSPieChartExample>>#visualizeChart:package:",				"RSPieChartExample class>>#defaultLayout",				"RSPieExamples>>#example20AddingRemoving",				"RSPieExamples>>#esportPrizepool",				"RSPieExamples>>#example25Massiva",				"RSPieExamples>>#example23RotatedAnimation",				"RSPieExamples>>#example24ManyPies",				"RSPieExamples>>#example22RotatedAnimation",				"RSPieLabeledInteraction>>#onShape:",				"RSPieTitleInteraction>>#onShape:",				"RSPopupTest>>#testPopupSimple",				"RSPunchCardBuilder>>#renderDots:",				"RSQuadTreeF>>#addChild:",				"RSQuadTreeF>>#visibleShapesFrom:list:",				"RSQuadTreeF class>>#withAll:rectangle:",				"RSSVGAnimationExamples>>#example05Corona",				"RSSVGAnimationExamples>>#example06AnimatedSVG",				"RSSVGAnimationExamples>>#example03Boat",				"RSSVGExporter>>#writePathLabel:",				"RSSVGExporterTest>>#testLine",				"RSSVGExporterTest>>#testLabelsWithoutFonts",				"RSSVGExporterTest>>#testBezier",				"RSSVGPath>>#computePolygons",				"RSSankey>>#createLines",				"RSSankeyExamples>>#sankeyData",				"RSScatterPlot>>#renderIn:",				"RSSearchInCanvasInteraction>>#searchForShapes:",				"RSSearchInCanvasTest>>#testWithEdgeAndhighlightable",				"RSSearchInCanvasTest>>#testWithEdge",				"RSSegmentedBeziersPolyline>>#controlPoints:",				"RSSelectionPresentationTest>>#testCanvasInspect",				"RSSequentialAnimationTest>>#testDuration",				"RSSequentialAnimationTest>>#testStep",				"RSSequentialAnimationTest>>#testStepEvent",				"RSShape>>#newAnimation",				"RSShape>>#deepShapesFromModel:result:",				"RSShape>>#deepShapesFromModels:result:",				"RSShape>>#addRecursivelyIn:",				"RSShape>>#deepShapeFromModel:result:",				"RSShape>>#asCanvas",				"RSShapeExamples>>#example02BasicEdge",				"RSShapeExamples>>#example09Polyline",				"RSShapeExamples>>#example03LinePath",				"RSShapeExamples>>#example38Transformable",				"RSShapeExamples>>#example18ExampleFromMondrian",				"RSShapeExamples>>#example36ShapePosition",				"RSShapeExamples>>#example04LineDashes",				"RSShapeExamples>>#example27MultilineLabelBasic",				"RSShapeExamples>>#example31BasicGrapher",				"RSShapeExamples>>#example32RSLabeledOnComposite",				"RSShapeExamples>>#example34MorphicPopup",				"RSShapeExamples>>#example35Lines",				"RSShapeExamples>>#example05CapStyles",				"RSShapeExamples>>#example13Arrow",				"RSShapeExamples>>#example41Butterfly",				"RSShapeExamples>>#example06JoinStyles",				"RSShapeExamples>>#example16Bezier",				"RSShapeExamples>>#example14Marker",				"RSShapeExamples>>#example30EdgesToChildren",				"RSShapeExamples>>#example40LabelingLine",				"RSShapeExamples>>#example26AnimatedPopup",				"RSShapeExamples>>#example17Labeled",				"RSShapeExamples>>#example12Polygons",				"RSShapeExamples>>#example11ClassTree",				"RSShapeTest>>#testTranslateMiddleRightTo",				"RSShowProgressLabelDecorator>>#render",				"RSSimpleChartPopupBuilder>>#rowShapeFor:point:",				"RSSugiyamaLayout>>#assignLabels:",				"RSSugiyamaLayout>>#addDummyNodes",				"RSSugiyamaLayout>>#buildLayers:",				"RSSunburstExamples>>#example06Rotation",				"RSSunburstExamples>>#example07FadeInteraction",				"RSSunburstFadeInteraction>>#pathFor:",				"RSTContainer>>#deepShapeFromModel:result:",				"RSTContainer>>#addLine:",				"RSTContainer>>#addAll:",				"RSTContainer>>#addNode:",				"RSTContainer>>#deepShapesFromModel:result:",				"RSTContainer>>#deepShapesFromModels:result:",				"RSTContainer>>#withAllChildren",				"RSTContainer>>#addEdge:",				"RSTWalkBasedRegularTreeLayout>>#initialize:associations:ifMultipleRoots:",				"RSTimeLinePlot>>#renderIn:",				"RSTransformable>>#createHandlesFor:",				"RSTreeLayoutTest>>#testCycles",				"RSUMLCalypsoRenderer>>#methodFor:",				"RSUMLSequenceBuilder>>#initialize",				"RSUMLSequenceBuilder>>#lifeLines:selfMessageSends:lineBuilder:descriptor:startShape:endShape:",				"RSUMLSequenceBuilder>>#lifeLines:",				"RSUMLSequenceDescriptor>>#selectorShapeOfMessageSend:",				"RSVanDerPloegTreeLayout>>#initialize:associations:ifMultipleRoots:",				"RSWrapStrategy>>#wordsAndSpacesFor:",				"RSWrapStrategy>>#wrapLineShapesFor:with:",				"RSXmasBranch>>#addThickness:",				"RSXmasBranch>>#addPosition:",				"RSXmasBranch>>#addBaseIndex:",				"RSXmasExample>>#title",				"RSXmasExample>>#myIcon",				"RSXmasExample>>#icon",				"RSXmasExample>>#background",				"RSXmasTree>>#renderIn:",				"RSXmasTree>>#initializeBraches",				"RSdeCasteljauLine>>#addPoint:",				"RSdeCasteljauLine>>#splitWhile:",				"RSdeCasteljauLine>>#addPoint:via:via:",				"RandomTest>>#testDistribution",				"RandomTestDistributions>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"RandomTestDistributions>>#exportShapeOf:accessorBlock:pathSuffix:",				"ReAbstractCritique>>#actions",				"ReAbstractRule>>#check:",				"ReAbstractRule>>#check:ifNoCritiques:",				"ReAbstractRuleTestCase>>#critiguesFor:onMethod:",				"ReAbstractRuleTestCase>>#myCritiquesOnClass:",				"ReAbstractRuleTestCase>>#myCritiques",				"ReAbstractRuleTestCase>>#myCritiquesOnMethod:",				"ReBasicScenarioExceptionStrategyTest>>#validationScenario",				"ReCriticEngine>>#nodeCritiquesOf:",				"ReCriticEngine>>#critiquesOf:",				"ReInvocationSequenceRule>>#add:requiresPreSend:",				"ReInvocationSequenceRule>>#add:requiresPostSend:",				"ReInvocationSequenceRule class>>#exampleSequenceMethods",				"ReNoPrintStringInPrintOnRuleTest>>#testRule",				"ReNodeMatchRule>>#addMatchingMethod:",				"ReNodeMatchRule>>#addMatchingExpression:",				"ReSmalllintChecker>>#addCritique:",				"ReSmalllintChecker>>#reParseRule",				"ReSmalllintTest>>#testUniqueIdentifierName",				"ReUsesAddRule>>#basicCheck:",				"ReUtilityMethodsRuleTest>>#myCritiques",				"RealEstateAgent class>>#standardPositionsInWorld:",				"RectangleTest>>#testMergingOneRectangleReturnsThisRectangle",				"RectangleTest>>#testAreasOutside1",				"RectangleTest>>#testMergingDisjointRectangles",				"RectangleTest>>#testMergingOverlappingRectangles",				"RectangleTest>>#testAreasOutside2",				"RectangleTest>>#testMergingOverlappingRects",				"RectangleTest>>#testMergingTwoRectangles",				"RectangleTest>>#testMergingNestedRectanglesReturnTheContainer",				"RecursionStopper>>#stopMethod:during:",				"RefactoringSettings class>>#addScope:",				"RefactoringSettings class>>#addScope:withKey:",				"ReferenceFinder>>#findAllPaths:",				"ReferenceFinder>>#addBacklinkLevel",				"ReferenceFinder>>#processLinkTo:from:",				"ReferenceFinder>>#computePathFor:",				"RegisteredClassAnnotationsTest>>#testCanBeEnumerated",				"RelationSet>>#add:",				"RelationSet>>#inverseAdd:",				"ReleaseTest>>#testWorldMenuHasHelpForAllEntries",				"ResumableTestFailureTestCase>>#logFailure:",				"ResumableTestFailureTestCase class>>#lastStoredRun",				"RewriteRuleChangesBrowser>>#initializePresenters",				"RewriteRuleChangesBrowser class>>#defaultLayout",				"RewriteRuleEditor>>#initializePresenters",				"RingChunkImporter>>#visitDoItChunk:",				"RingChunkImporter>>#removedMethod:with:",				"RubAbstractTextArea>>#addEmbeddedMorph:",				"RubAbstractTextArea>>#addSegment:",				"RubParagraph>>#verticesFrom:to:",				"RubScrolledTextMorph>>#withRuler:",				"RubSegmentMorph>>#midVertices",				"RubSmalltalkEditor>>#widenSelectionIn:selection:ifFound:",				"RubTextSegmentMorph>>#computeSmoothVertices",				"RubTextSegmentMorph>>#computeStraightVertices",				"RubUnderlinedSegmentMorph>>#computeVertices",				"RubUnderlinedSegmentMorph>>#underlineShapeFromPosition:toPosition:",				"RunArray>>#select:",				"RunArray class>>#scanFrom:",				"RunArrayTest>>#testAddAddsAsLastElement",				"RunArrayTest>>#testWithStartStopAndValueDo",				"RunArrayTest>>#testAdd",				"RxCharSetParser>>#parseEscapeChar",				"RxCharSetParser>>#addRangeFrom:to:",				"RxCharSetParser>>#parseNamedSet",				"RxCharSetParser>>#addChar:",				"RxMatchOptimizer>>#syntaxEndOfLine",				"RxMatchOptimizer>>#syntaxMessagePredicate:",				"RxMatchOptimizer>>#determineTestMethod",				"RxMatchOptimizer>>#syntaxBeginningOfWord",				"RxMatchOptimizer>>#syntaxWordBoundary",				"RxMatchOptimizer>>#syntaxEndOfWord",				"RxMatchOptimizer>>#syntaxBeginningOfLine",				"RxMatchOptimizer>>#syntaxAny",				"RxMatchOptimizer>>#syntaxNonWordBoundary",				"RxMatchOptimizer>>#syntaxCharacter:",				"RxMatchOptimizer>>#initialize:ignoreCase:",				"RxMatchOptimizer>>#syntaxLookaround:",				"RxMatchOptimizer>>#syntaxPredicate:",				"RxMatcher>>#subexpressions:",				"RxMatcher>>#matchesIn:",				"RxMatcher>>#matchesOnStream:",				"RxMatcher>>#matchesIn:collect:",				"RxMatcher>>#matchesOnStream:collect:",				"RxMatcher>>#matchingRangesIn:",				"RxMatcherTest>>#testStringRegexMatchesDo",				"RxsCharacter>>#enumerateTo:ignoringCase:",				"RxsRange>>#enumerateTo:ignoringCase:",				"SDL2AthensDrawingExample>>#startStrokeAt:",				"SDL2AthensDrawingExample>>#moveAt:",				"SDL2TouchExample>>#move:at:",				"SDL2TouchStateMachine>>#finish:",				"SDL2TouchStateMachine>>#add:",				"SHStyleElement>>#styleForTable",				"STONWriteReadTest>>#testCustomAssociations",				"STONWriteReadTest>>#testAssociations",				"SUnitExtensionsTest class>>#lastStoredRun",				"SUnitTest>>#hangedChildProcessTest",				"SUnitTest>>#failedChildProcessTest",				"SUnitTest class>>#lastStoredRun",				"Schedule>>#dateAndTimes",				"ScheduleTest>>#testFromDateAndTime",				"ScheduleTest>>#testDaysOfWeekAreConsistent",				"SelfPropagatingLinkDemo>>#installOnAllSendsInMethod:",				"SemaphoreTest>>#testMutualExclusion",				"SequenceableCollection>>#kth:ranking:atRandom:",				"SequenceableCollection>>#groupsOf:",				"SequenceableCollection>>#piecesCutWhere:",				"SequenceableCollection>>#stFasterDifferencePreservingOrder:",				"SessionManager>>#createCategory:",				"Set>>#collect:",				"Set>>#parseOptions:",				"Set>>#intersection:",				"SetTest>>#testAddNonEmptyGrowsWhenNewElement",				"SetTest>>#testAdd",				"SetTest>>#testAllowInclusionOfNils",				"SetTest>>#testAsSet",				"SetTest>>#testAtRandom",				"SetTest>>#testPrintOnDelimiterLast",				"SetTest>>#testAsCommaStringMore",				"SetTest>>#testCopyWithout",				"SetTest>>#testUnion",				"SetTest>>#testAddAlreadyThereDoesNotCount",				"SetTest>>#testPrintElementsOn",				"SetTest>>#testCopy",				"SetTest>>#testAddEmptyGrows",				"SetTest>>#testPrintOnDelimiter",				"SetTest>>#testPrintOn",				"SetTest>>#testCollect2",				"SetTest>>#testDoWithoutNoDuplicates",				"SetTest>>#testSize2",				"SetTest>>#testIntersection",				"SetTest>>#setUp",				"SetTest>>#testMax",				"SetTest>>#test0FixtureOccurrencesTest",				"SetTest>>#testAddNewElementIncrementsSize",				"SetTest>>#testOccurrences",				"SetTest>>#testIsHealthy",				"SettingBrowser>>#addToSearchedTextList:",				"SettingBrowser>>#setViewedPackageNames:",				"SettingDeclaration>>#addToList:",				"SettingDeclaration>>#listenersForEvent:",				"SettingNode>>#deeplySelect:in:",				"SettingTree>>#retainedNodesFromList:",				"SettingTreeBuilder>>#nodeClass:name:",				"SettingsStonWriter>>#addSetting:",				"ShClassChanged>>#propagateToSubclasses:",				"ShInstanceShapeChanged>>#propagateToSubclasses:",				"ShMetaclassChanged>>#propagateToSubclasses:",				"ShSuperclassChanged>>#propagateToSubclasses:",				"ShiftClassBuilder>>#addChange:",				"ShiftClassBuilder>>#addChangeComparer:",				"ShiftClassInstaller>>#migrateClassTo:",				"ShiftClassInstaller>>#migrateInstancesTo:",				"SimpleHierarchicalListMorph>>#addSubmorphsAfter:fromCollection:allowSorting:",				"SimpleHierarchicalListMorph>>#addMorphsTo:from:allowSorting:withExpandedItems:atLevel:",				"SimpleTestResourceTestCase class>>#lastStoredRun",				"SindarinDebugger>>#messageArguments",				"SindarinDebugger>>#addStepHook:",				"SindarinDebugger>>#stepBatchAndReturnNodeHashAndStackSize",				"SindarinDebuggerTest>>#tearDown",				"SlotAnnouncementsTest>>#subscribeOn:",				"SlotExampleMovie>>#addActor:",				"SlotExampleMovieAndPersonTest>>#testAddMovieDirectorTwice",				"SlotExampleMovieAndPersonTest>>#testAddMovieDirectorInvalid",				"SlotExampleMovieAndPersonTest>>#testAddMovieDirector",				"SmallDictionary>>#associationsSelect:",				"SmallDictionary>>#keysAndValuesRemove:",				"SmallDictionary>>#isHealthy",				"SmallDictionary>>#declare:from:",				"SmallDictionary>>#difference:",				"SmallDictionary>>#select:",				"SmallDictionary class>>#newFrom:",				"SmallDictionaryTest>>#testStoreOnRoundTrip",				"SmalltalkImage>>#extractMinusParameters",				"SmalltalkImage>>#removeAllLineFeedsQuietlyCalling:",				"Socket class>>#register:",				"SortedCollection>>#addAll:",				"SortedCollection>>#groupedBy:",				"SortedCollectionTest>>#testSpeciesLooseSortBlock",				"SortedCollectionTest>>#testKeysAndValuesDo",				"SortedCollectionTest>>#testMedianForOddSizeCollection",				"SortedCollectionTest>>#testSortBlock",				"SortedCollectionTest>>#testTAddTwice",				"SortedCollectionTest>>#testTAdd",				"SortedCollectionTest>>#testAddAll2",				"SortedCollectionTest>>#collectionWithElement",				"SortedCollectionTest>>#collectionWith1TimeSubcollection",				"SortedCollectionTest>>#testCopy",				"SortedCollectionTest>>#testCollect",				"SortedCollectionTest>>#testFromToDo",				"SortedCollectionTest>>#testKeysAndValuesDoEmpty",				"SortedCollectionTest>>#collectionWith2TimeSubcollection",				"SortedCollectionTest>>#testAllButLastDo",				"SortedCollectionTest>>#collectionWithCopy",				"SortedCollectionTest>>#otherCollection",				"SortedCollectionTest>>#collectionWithIdentical",				"SortedCollectionTest>>#testDo2",				"SortedCollectionTest>>#testReverseDo",				"SortedCollectionTest>>#testAddAll",				"SortedCollectionTest>>#subCollectionNotIn",				"SortedCollectionTest>>#testEquals",				"SortedCollectionTest>>#testWithIndexDo",				"SortedCollectionTest>>#testReverseDoEmpty",				"SortedCollectionTest>>#testSort",				"SortedCollectionTest>>#testAllButFirstDo",				"SortedCollectionTest>>#setUp",				"SortedCollectionTest>>#test0FixtureOccurrencesTest",				"SortedCollectionTest>>#testRemoveAll",				"SortedCollectionTest>>#testAdd",				"SourceFileArray>>#changeRecordsFrom:className:isMeta:",				"SpAbstractWidgetPresenter>>#traverseInFocusOrderDo:excluding:",				"SpAbstractWidgetPresenter>>#traversePresentersDo:excluding:",				"SpActionBarPresenter>>#add:",				"SpActionBarPresenter>>#addLast:",				"SpActionBarPresenter class>>#example",				"SpApplication>>#registerWindow:",				"SpApplicationWithToolbar>>#defaultLayout",				"SpApplicationWithToolbar>>#initializePresenters",				"SpBoxLayout class>>#exampleHAlignCenter",				"SpBoxLayout class>>#exampleVAlignEnd",				"SpBoxLayout class>>#exampleVAlignCenter",				"SpBoxLayout class>>#exampleVAlignStart",				"SpBoxLayout class>>#exampleVAlignAndHAlign",				"SpBoxLayout class>>#exampleExpand",				"SpBoxLayout class>>#exampleHAlignStart",				"SpBoxLayout class>>#exampleHAlignEnd",				"SpBoxLayout class>>#exampleBeHomogeneous",				"SpBoxLayoutAdapterTest>>#testLayoutCanHaveMoreThanTwoChildren",				"SpBoxLayoutAdapterTest>>#testReplaceElementAfterOpen",				"SpBoxLayoutAdapterTest>>#testRemoveElementRemovesFromAdapter",				"SpBoxLayoutAdapterTest>>#testReplaceElementBeforeOpenAppliesStyle",				"SpBoxLayoutAdapterTest>>#testReplaceElementAppliesStyle",				"SpBoxLayoutAdapterTest>>#testAdapterElementsAreInSameOrderThanLayout",				"SpBoxLayoutAdapterTest>>#testAddElementAfterOpenAddsToAdapter",				"SpBoxLayoutAdapterTest>>#testAddElementAddsToAdapter",				"SpBoxLayoutAdapterTest>>#testRemoveElementAddedAfterOpenRemovesFromAdapter",				"SpBoxLayoutAlignmentExample>>#newVerticalAlignmentLayout",				"SpBoxLayoutAlignmentExample>>#initializePresenters",				"SpBoxLayoutAlignmentExample>>#newHorizontalAlignmentLayout",				"SpBoxLayoutReplacePresenterExample>>#initializePresenters",				"SpBoxLayoutTest>>#testReplaceAtindexWith",				"SpBoxLayoutTest>>#testElementsAreAddedInOrder",				"SpBoxLayoutTest>>#testRemoveElementFromLayoutTakesItOut",				"SpBoxLayoutTest>>#testReplaceWith",				"SpBoxLayoutTest>>#testLayoutWithOneElementIsNotEmpty",				"SpBoxLayoutWithTableForTestPresenter class>>#defaultLayout",				"SpButtonBarPresenter>>#add:",				"SpButtonBarPresenter class>>#example",				"SpChangeSorterPresenter>>#setFocus",				"SpChangeSorterPresenter class>>#defaultLayout",				"SpCheckBoxExample>>#defaultLayout",				"SpCheckBoxExample>>#setFocus",				"SpChooserPresenter>>#defaultLayout",				"SpClassMethodBrowser>>#defaultLayout",				"SpClassMethodBrowser>>#initializePresenters",				"SpClassStyle>>#mergedStylesWith:",				"SpCodePresenterTest>>#testDoBrowseMethodReferences",				"SpCodePresenterTest>>#testDoBrowseSendersOfClassNameWhenInPlayground",				"SpCodePresenterTest>>#testDoBrowseSendersOfClassNameShouldSelectClassUsers",				"SpCodeScriptingInteractionModel>>#addBinding:",				"SpComponentListPresenter>>#addPresenter:",				"SpCompositeTableColumn>>#addColumn:",				"SpConfirmDialog class>>#defaultLayout",				"SpDatePresenter class>>#defaultLayout",				"SpDemo>>#initializePresenters",				"SpDemo>>#connectPresenters",				"SpDemo>>#defaultLayout",				"SpDemoAbstractModalPresenter>>#defaultLayout",				"SpDemoActionBarPresenter>>#defaultLayout",				"SpDemoActionBarPresenter>>#initializePresenters",				"SpDemoButtonsPresenter>>#defaultLayout",				"SpDemoButtonsPresenter>>#initializePresenters",				"SpDemoCheckboxesPresenter>>#defaultLayout",				"SpDemoFilteringListsPresenter>>#defaultLayout",				"SpDemoFormPresenter>>#defaultLayout",				"SpDemoFormPresenter>>#initializePresenters",				"SpDemoImagePresenter>>#defaultLayout",				"SpDemoLinksPresenter>>#defaultLayout",				"SpDemoListsPresenter>>#defaultLayout",				"SpDemoMenuButtonPresenter>>#defaultLayout",				"SpDemoMessageBrowser>>#initializePresenters",				"SpDemoModalPresenter>>#defaultLayout",				"SpDemoNotebookPresenter>>#defaultLayout",				"SpDemoPage>>#defaultLayout",				"SpDemoRadioButtonsPresenter>>#defaultLayout",				"SpDemoStandaloneFormPresenter>>#defaultLayout",				"SpDemoTablePresenter>>#defaultLayout",				"SpDemoTablePresenter>>#initializePresenters",				"SpDemoToolbarPresenter>>#defaultLayout",				"SpDemoTreeTablePresenter>>#defaultLayout",				"SpDialogWindowPresenter>>#addButton:",				"SpDropListExample>>#setFocus",				"SpDropListExample class>>#defaultLayout",				"SpDropListPresenter>>#addItemLabeled:do:icon:",				"SpDualChangeSorterPresenter>>#setFocusOrder",				"SpDualChangeSorterPresenter class>>#defaultLayout",				"SpDynamicLayoutExamplePresenter>>#defaultLayout",				"SpDynamicWidgetChange>>#defaultLayout",				"SpEditableListPresenter>>#connectPresenters",				"SpEditableListPresenter class>>#layoutWithOrdering:",				"SpEventHandler>>#register:",				"SpEventHandlerTest>>#testEventIsTransmittedOnText",				"SpEventHandlerTest>>#testEventIsInstalledDynamically",				"SpEventHandlerTest>>#testEventIsInstalledOnBuild",				"SpFilteringListPresenter class>>#bottomLayout",				"SpFilteringListPresenter class>>#topLayout",				"SpFilteringSelectableListPresenter>>#activateItem:",				"SpFontStyle class>>#addFontToCache:",				"SpGeneratorListModel>>#at:ifAbsent:",				"SpGridLayoutBuilderTest>>#testBuilderCanAddElementsOnMultipleRaws",				"SpGridLayoutBuilderTest>>#testBuilderAddsElementsOnRaw",				"SpHorizontalBoxLayoutTest>>#testPresenterExtentFollowsChildrenExtent",				"SpHorizontalBoxLayoutTest>>#testReplaceWithFixedWidth",				"SpHorizontalBoxLayoutTest>>#testReplaceWithFixedWidthComposed",				"SpInformDialog class>>#defaultLayout",				"SpInitializeWindowExample>>#defaultLayout",				"SpJob>>#addChild:",				"SpLabeledPresenter>>#input:",				"SpLabeledPresenter class>>#defaultLayout",				"SpListPresenter class>>#exampleDragAndDrop",				"SpListSelectionPresenter>>#defaultLayout",				"SpMenuBarPresenter class>>#example",				"SpMenuGroupPresenter>>#addMenuItem:",				"SpMenuPresenter>>#fromSpec:",				"SpMenuPresenter>>#addMenuGroup:",				"SpMethodBrowser>>#initializePresenters",				"SpMethodBrowser class>>#defaultLayout",				"SpMethodToolbarPresenter>>#setFocusOrder",				"SpMethodToolbarPresenter class>>#defaultLayout",				"SpMillerColumnPresenter>>#addPresenter:",				"SpMillerPaginatorPresenter>>#initializePresenters",				"SpMockDynamicPresenter class>>#defaultLayout",				"SpMockFocusOrderPresenter class>>#defaultLayout",				"SpMockPesenterWithoutGetter class>>#defaultLayout",				"SpMorphStyle>>#calculateMergedProperties",				"SpMorphStyle>>#propertiesLike:",				"SpMorphStyle class>>#fromStylesheet:baseStyleName:otherStyles:",				"SpMorphicBoxLayoutTest>>#testBeHomogeneousWorksWhenContractingWindow",				"SpMorphicBoxLayoutTest>>#testBeHomogeneous",				"SpMorphicBoxLayoutTest>>#testBeHomogeneousWorksWhenExpandingWindow",				"SpMorphicBoxLayoutTest>>#testLayoutHeightTakesAllSpaceNeeded",				"SpMorphicButtonBarAdapter>>#addModelTo:",				"SpMorphicDialogWindowAdapter>>#buildButtonBar",				"SpMorphicMenuBarAdapter>>#adoptMenuItemModel:accumulator:",				"SpMorphicPanedAdapter>>#basicAdd:constraints:to:",				"SpMorphicPanedLayoutTest>>#testListTakesAssignedSpace",				"SpMorphicPatchLineVisitor>>#visitInsert:",				"SpMorphicPatchLineVisitor>>#visitDelete:",				"SpMorphicStatusBarAdapter>>#pushMessage:to:",				"SpMorphicTreeTableAdapter>>#suspendSelectionEventsDuring:",				"SpNotebookPresenter>>#addPage:",				"SpNotebookPresenter>>#traverseInFocusOrderDo:excluding:",				"SpNullMillerPresenter class>>#defaultLayout",				"SpObjectInspector>>#initializePresenters",				"SpOpenOnIntExample>>#defaultLayout",				"SpOpenOnStringExample>>#defaultLayout",				"SpOptionListPresenter>>#selectionChanged:",				"SpOptionListPresenter>>#defaultLayout",				"SpOptionPresenterExample>>#defaultLayout",				"SpOutputPort>>#,",				"SpOverlayLayout>>#addOverlay:",				"SpOverlayLayout>>#addOverlay:withConstraints:",				"SpPaginatorExample>>#initializePresenters",				"SpPaginatorPresenter>>#addPage:",				"SpPaginatorPresenter>>#pages:",				"SpPanedLayoutTest>>#testElementsAreAddedInOrderWhenUsingAdd",				"SpPanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"SpPanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"SpPanelMorphWithSplitters>>#addMorph:fullFrame:",				"SpPanelMorphWithSplitters>>#addMorph:",				"SpPopoverContentExample>>#initializePresenters",				"SpPopoverExample>>#showPopover:relativeTo:",				"SpPopoverPresenterTest>>#initializeTestedInstance",				"SpPresenter>>#traversePresentersDo:excluding:",				"SpPresenterFocusOrderTest>>#testCustomFocusOrder",				"SpPresenterSelectorExample>>#defaultLayout",				"SpPresenterSelectorExample>>#initializePresenters",				"SpPresenterSelectorPresenter>>#updatePresenter",				"SpPresenterTest>>#testTraversePresentersDoIncludesPresentersAddedToTheLayout",				"SpPresenterTest>>#testPresentersIncludesPresentersAddedToTheLayout",				"SpPresenterTest>>#testAdapterDoesNotRemainsAsDependencyWhenReplacingIt",				"SpProgressBarDemo>>#defaultLayout",				"SpRGBSlidersPresenter>>#initializePresenters",				"SpRGBSlidersPresenter class>>#defaultLayout",				"SpRGBWidget>>#initializePresenters",				"SpRGBWidget class>>#defaultLayout",				"SpRadioButtonExample>>#defaultLayout",				"SpRequestDialog class>>#defaultLayout",				"SpRequestTextDialog class>>#defaultLayout",				"SpRubFindReplaceDialog>>#initializePresenters",				"SpRubFindReplaceDialog>>#initializeDialogWindow:",				"SpRubFindReplaceDialog class>>#defaultLayout",				"SpScrollSyncExample>>#defaultSpecLayout",				"SpScrollSyncExample class>>#defaultLayout",				"SpSelectDialog class>>#defaultLayout",				"SpSelectEntity>>#initializePresenters",				"SpSelectEntity class>>#defaultLayout",				"SpSliderInputPresenter class>>#sliderTop",				"SpSliderInputPresenter class>>#sliderBottom",				"SpSliderInputPresenter class>>#sliderLeft",				"SpSliderInputPresenter class>>#sliderRight",				"SpSliderPresenter>>#addMark:at:",				"SpStatusBarPresenter class>>#example",				"SpTablePresenter class>>#exampleDragAndDrop",				"SpTestPresenterWithThreeRadioButtons class>>#defaultLayout",				"SpTestPresenterWithToolbar class>>#defaultLayout",				"SpTestingPresenter class>>#defaultLayout",				"SpTestingPresenterWithAdditionalPresenters class>>#defaultLayout",				"SpTestingPresenterWithModel class>>#defaultLayout",				"SpTextFieldExample>>#defaultLayout",				"SpTextInputFieldWithValidationPresenter>>#addValidation:",				"SpTextInputFieldWithValidationPresenter>>#addValidationError:",				"SpTextInputFieldWithValidationPresenter>>#defaultLayout",				"SpToggleButtonExample>>#defaultLayout",				"SpToolbarPresenter>>#addItemRight:",				"SpToolbarPresenter>>#addItemLeft:",				"SpToolbarPresenter class>>#example",				"SpToolbarToggleButtonExample>>#defaultLayout",				"SpToolbarToggleButtonExample>>#initializePresenters",				"SpTransmissionExample>>#defaultLayout",				"SpValidationReport>>#add:",				"SpValidationReportTest>>#testCanAddValidationFailure",				"SpValueHolder>>#whenChangedDo:",				"SpVersatileDialogPresenter>>#layout",				"SpVerticalBoxLayoutTest>>#testReplaceWithFixedHeightComposed",				"SpVerticalBoxLayoutTest>>#testPresenterExtentFollowsChildrenExtent",				"SpVerticalBoxLayoutTest>>#testReplaceWithFixedHeight",				"SpaceTally>>#printSpaceDifferenceFrom:to:",				"SpaceTallyResult>>#addItem:",				"Srfi41ArithSequenceTest>>#testGrayCodes",				"Srfi41NQueens>>#queens:subproblem:",				"Srfi41StreamTest>>#testCrossProduct",				"Srfi41StreamTest>>#testChoose",				"Srfi41StreamTest>>#testLayers",				"Srfi41StreamTest>>#testMerge",				"Srfi41StreamTest>>#testCdrs",				"Srfi41StreamTest>>#testCorrelation",				"Srfi41StreamTest>>#testInits",				"Srfi41StreamTest>>#testPermutations",				"Srfi41StreamTest>>#testIntersperse",				"Srfi41StreamTest>>#testCombinations",				"StAbstractStringFilter>>#next",				"StBaseFilter>>#addItem:",				"StCritiqueBrowserPresenter>>#initializePresenters",				"StCritiqueBrowserPresenter class>>#defaultLayout",				"StCritiquePackageSelectorPresenter>>#initializeLayout",				"StCritiqueRuleSelectorPresenter>>#initializeLayout",				"StCritiqueRuleSelectorPresenter>>#addSelected",				"StCritiqueToolbarPresenter>>#setFocusOrder",				"StCritiqueToolbarPresenter class>>#defaultLayout",				"StDebugger>>#warning:for:",				"StDebugger>>#registerExtensionTool:",				"StDebugger class>>#debuggerWithoutExtensionsSpec",				"StDebugger class>>#stackAndCodeLayout",				"StDebugger class>>#codeLayout",				"StDebugger class>>#debuggerWithExtensionsSpec",				"StDebugger class>>#stackLayout",				"StDebuggerActionModelTest>>#testFilterDNUStack",				"StDebuggerActionModelTest>>#testFilterMissingSubclassResponsibilityStack",				"StDebuggerActionModelTest>>#testFilterStack",				"StDebuggerContext>>#doesNotUnderstandNodesFor:",				"StDebuggerContext>>#buildInspectorNodes",				"StDebuggerContext>>#exceptionNodesFor:",				"StDebuggerInspector>>#initializeLateralToolbar",				"StDebuggerInspector>>#defaultLayout",				"StDebuggerInspector>>#assertionFailureLayout",				"StDebuggerRawObjectInspector>>#defaultLayout",				"StDebuggerRawObjectInspector class>>#noHeaderSpec",				"StDebuggerTest>>#testPrintReceiverClassInContext",				"StDebuggerUsingSpecSelectorMock>>#availableSpecSelectors",				"StFailingAssertionInspector class>>#defaultLayout",				"StFailingAssertionInspector class>>#stringSpec",				"StFilterAlike>>#applyFilterWithQuery",				"StFilterSubstring>>#doApplyFilterWithQuery",				"StFontChooserPresenter class>>#defaultSpec",				"StFontChooserPresenter class>>#defaultLayout",				"StFontChooserPresenter class>>#pangrams",				"StHaltAndBreakpointControlTest>>#methodWithHaltSources",				"StHaltCache>>#cacheNode:forSelector:",				"StHeaderPanel>>#presenter:",				"StInspector class>>#defaultLayout",				"StInspectorRefreshService>>#register:",				"StMetaBrowser class>>#defaultLayout",				"StMockCandidatesList>>#addCandidate:in:",				"StMockCandidatesList>>#addObject:inProcessor:",				"StMockContext>>#stepIntoQuickMethod:",				"StNodeCollector>>#indexedNodes",				"StNullFilter>>#doApplyFilterWithQuery",				"StObjectBreakpointInspection class>>#defaultLayout",				"StObjectContextPresenter>>#intializePresentersWithEvaluator",				"StObjectContextPresenter>>#intializePresentersWithoutEvaluator",				"StObjectInspectorPresenter>>#keepPresenter:",				"StObjectInspectorPresenter>>#defaultLayout",				"StPharoApplication>>#addSharedBinding:",				"StPlaygroundBindingsPresenter class>>#defaultLayout",				"StPlaygroundInteractionModel>>#bindings",				"StPlaygroundInteractionModel>>#addBinding:",				"StPlaygroundPagePresenter class>>#defaultLayout",				"StPlaygroundPageVersionsPresenter>>#initializePresenters",				"StPlaygroundPagesPresenter class>>#defaultLayout",				"StPresenterInspection class>>#defaultLayout",				"StQuery>>#updateFromContext:",				"StQuery>>#toggleFilter:",				"StRawInspection class>>#defaultLayout",				"StReporter>>#addTopicSpec:",				"StReporter class>>#defaultLayout",				"StResetWindowPresenter>>#setFocusOrder",				"StResetWindowPresenter class>>#defaultSpec",				"StRewriteCritiqueChangesBrowserPresenter class>>#defaultSpec",				"StSelector>>#addMethod:",				"StSindarinBytecodeContextInspectorModel>>#allInspectorNodes",				"StSindarinBytecodeDebuggerPresenter class>>#defaultLayout",				"StSindarinDebuggerPresenter class>>#defaultLayout",				"StSindarinDebuggerScriptingPresenter class>>#defaultLayout",				"StSingleCritiqueResultListPresenter>>#initializePresenters",				"StSingleCritiqueResultListPresenter>>#setFocusOrder",				"StSingleCritiqueResultListPresenter class>>#defaultSpec",				"StSpotter>>#addPreviewPanelTo:",				"StSpotter>>#updateResultList:",				"StSpotter>>#showPreview:",				"StSpotter>>#addTipsPanel",				"StSpotter>>#initializeLayout",				"StSpotterCandidateLinkPresenter>>#initializePresenters",				"StSpotterCandidatesList>>#addProcessor:",				"StSpotterCandidatesList>>#getCandidateLinks:",				"StSpotterHeaderPresenter>>#addCandidate:inSpotter:",				"StSpotterIterator>>#reject:as:",				"StSpotterIterator>>#select:thenCollect:as:",				"StSpotterIterator>>#reject:thenCollect:as:",				"StSpotterIterator>>#collect:as:",				"StSpotterIterator>>#do:",				"StSpotterIterator>>#items",				"StSpotterIterator>>#select:as:",				"StSpotterProcessor>>#allFilteredCandidates",				"StSpotterProcessor>>#newSource",				"StSpotterProcessor>>#executeQuery",				"StSpotterQuery>>#candidateAdded:",				"StSpotterStep>>#addProcessor:",				"StStringFilter>>#applyFilterWithoutQuery",				"StSystemReporter>>#topicSpec",				"StUnifiedDiffChangesMorph>>#calculatedJoinMappings",				"StUnifiedProcessor>>#newSource",				"StUnifiedProcessor>>#calculateLowercaseSourcesOn:",				"StUnifiedProcessor>>#calculateUppercaseSourcesOn:",				"StUnorderedFilter>>#doApplyFilterWithQuery",				"StWithoutDuplicatesDecorator>>#next",				"StartupAction>>#execute",				"StartupPreferencesHandler>>#lookInFolder:forFilesMatching:",				"StartupPreferencesHandler>>#buildActionList",				"StartupPreferencesHandler>>#lookInFolder:",				"StartupPreferencesLoader>>#executeAtomicItems:",				"Stopwatch>>#activate",				"Stopwatch>>#duration",				"StoredSettingsFactory>>#fromSettingNodes:",				"StoredSettingsMerger>>#addStoredSetting:",				"Stream>>#upToEnd",				"String>>#findTokens:escapedBy:",				"String>>#findTokens:",				"String>>#splitCamelCase",				"String>>#findBetweenSubstrings:",				"String>>#findTokens:keep:",				"String>>#correctAgainstEnumerator:continuedFrom:",				"StringTest>>#testKeysAndValuesDo",				"StringTest>>#testFromToDo",				"StringTest>>#testAllButLastDo",				"StringTest>>#testAllButFirstDo",				"StringTest>>#firstIndexesOf:in:",				"StringTest>>#testLinesDo",				"StringTest>>#testKeysAndValuesDoEmpty",				"StringTest>>#testReverseDo",				"StringTest>>#testWithIndexDo",				"StringTest>>#testReverseDoEmpty",				"StringTest>>#test0FixtureOccurrencesTest",				"SubclassResponsibilityDebugAction>>#askForSuperclassOf:to:toImplement:ifCancel:",				"SubscriptionRegistry>>#replace:with:",				"SubscriptionRegistry>>#add:",				"SubscriptionRegistry>>#getInteractionsForClass:",				"SycMethodArgumentsRemoverPresenter>>#setFocus",				"SycMethodArgumentsRemoverPresenter class>>#defaultLayout",				"SycMethodNameEditorPresenter>>#setFocus",				"SycMethodNameEditorPresenter class>>#defaultLayout",				"SycRefactoringPreviewPresenter>>#setFocus",				"SycRefactoringPreviewPresenter class>>#defaultLayout",				"SycRemoveClassStrategy class>>#createForBrowser:references:subclasses:users:",				"SycRemoveMethodStrategy class>>#createAllForBrowser:",				"Symbol class>>#possibleSelectorsFor:",				"Symbol class>>#rebuildSelectorTable",				"Symbol class>>#selectorsContaining:",				"Symbol class>>#intern:",				"Symbol class>>#internSelector:",				"SymbolTest>>#testKeysAndValuesDo",				"SymbolTest>>#firstIndexesOf:in:",				"SymbolTest>>#testFromToDo",				"SymbolTest>>#testKeysAndValuesDoEmpty",				"SymbolTest>>#testAllButLastDo",				"SymbolTest>>#testReverseDo",				"SymbolTest>>#testWithIndexDo",				"SymbolTest>>#testReverseDoEmpty",				"SymbolTest>>#testAllButFirstDo",				"SymbolTest>>#test0FixtureOccurrencesTest",				"SymbolicBytecodeBuilder>>#addBytecode:",				"SymbolicIntegerTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"SymbolicIntegerTest>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"SymbolicIntegerTest>>#testGCDofAdjacentFibonacciNumbers",				"SystemAnnouncer>>#announce:",				"SystemDictionary>>#declare:from:",				"SystemDictionary>>#renameClass:from:to:",				"SystemDictionary>>#fillCaches",				"SystemDictionary>>#poolUsers",				"SystemNavigation>>#allMethodsSelect:",				"SystemNavigation>>#allSentMessages",				"SystemNavigation>>#chooseInstVarFrom:thenDo:",				"SystemNavigation>>#browseClassVarRefs:",				"SystemNavigation>>#browseClassCommentsWithString:matchCase:",				"SystemNavigation>>#allMethodsWithSourceString:matchCase:",				"SystemNavigation>>#obsoleteClasses",				"SystemNavigation>>#allSentMessagesInClass:",				"SystemNavigation>>#allSentMessagesInPackage:",				"SystemOrganizer>>#fileOutCategory:on:initializing:",				"SystemWindow>>#setUpdatablePanesFrom:",				"SystemWindow>>#addPaneHSplitterBetween:and:",				"SystemWindow>>#addPaneVSplitterBetween:and:",				"T2AbstractTest>>#newClass:superclass:with:trait:category:",				"T2AbstractTest>>#newClass:superclass:with:uses:category:",				"T2AbstractTest>>#newTrait:with:trait:category:",				"T2AbstractTest>>#newTrait:with:uses:category:",				"TAddForUniquenessTest>>#testAddAlreadyThereDoesNotCount",				"TAddForUniquenessTest>>#testAddNewElementIncrementsSize",				"TAddTest>>#testTAddTwice",				"TAddTest>>#testTAdd",				"TAsStringCommaAndDelimiterTest>>#testAsCommaStringMore",				"TConvertAsSetForMultiplinessIdentityTest>>#collectionWithCopy",				"TConvertAsSetForMultiplinessIdentityTest>>#collectionWithIdentical",				"TCopySequenceableWithReplacement>>#firstIndexesOf:in:",				"TDictionaryAddingTest>>#testDeclareFrom",				"TDictionaryAddingTest>>#testAddAll",				"TDictionaryAddingTest>>#testAddWithKeyNotIn",				"TDictionaryAddingTest>>#testAddWithKeyAlreadyIn",				"TDictionaryEnumeratingTest>>#testSelect",				"TDictionaryEnumeratingTest>>#testAssociationsDo",				"TDictionaryEnumeratingTest>>#testAssociationsSelect",				"TDictionaryEnumeratingTest>>#testKeysAndValuesDo",				"TDictionaryEnumeratingTest>>#testValuesDo",				"TDictionaryEnumeratingTest>>#testDo",				"TDictionaryEnumeratingTest>>#testCollect",				"TDictionaryEnumeratingTest>>#testKeysDo",				"TFStringType>>#allocateString:",				"TFUFFIFunctionCallTest>>#testLongCalloutDoesNotBlockImage",				"TFinalizable>>#noteNeedsToBeFinalized",				"TGrowableTest>>#testAddNonEmptyGrowsWhenNewElement",				"TGrowableTest>>#testAddEmptyGrows",				"TIceImagesExporting>>#exportShapeOf:accessorBlock:pathSuffix:",				"TIceImagesExporting>>#exportSlotsGraphOf:slotDescriptorsVisitor:pathSuffix:",				"TIdentityAddTest>>#testIdentityAdd",				"TIncludesForIdentityCollectionsTest>>#testIncludesAllOfForIdentityCollections",				"TIncludesForIdentityCollectionsTest>>#testIncludesAnyOfForIdentityCollections",				"TIterateSequencedReadableTest>>#testReverseDoEmpty",				"TIterateSequencedReadableTest>>#testAllButLastDo",				"TIterateSequencedReadableTest>>#testFromToDo",				"TIterateSequencedReadableTest>>#testReverseDo",				"TIterateSequencedReadableTest>>#testKeysAndValuesDoEmpty",				"TIterateSequencedReadableTest>>#testKeysAndValuesDo",				"TIterateSequencedReadableTest>>#testWithIndexDo",				"TIterateSequencedReadableTest>>#testAllButFirstDo",				"TIterateTest>>#testDo2",				"TIterateTest>>#testDoWithout",				"TKTCommonQueueWorkerPool>>#privateNewWorker",				"TKTFuture>>#addSuccessCallback:",				"TKTFuture>>#addFailureCallback:",				"TKTFuture class>>#fromCollectionOfFutures:",				"TKTFutureTest>>#testFutureSuccessCallbackExecutesInNewProcess",				"TKTFutureTest>>#testFutureAndThenSuccessIfAndThenFails",				"TKTFutureTest>>#testFutureAndThenThenFailuresAreJustSkipped",				"TKTFutureTest>>#testFutureAndThenFailsIfFirstFails",				"TKTFutureTest>>#testFutureAndThenExecutesInOrder",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsInNewProcessEveryTime",				"TKTService>>#onStoppedDo:",				"TKTServiceManager>>#startService:",				"TKTWatchDog>>#watch:",				"TKTWorker>>#noteNeedsToBeFinalized",				"TKTWorkerPool>>#newWorker",				"TModelBuilder>>#extractMethodTestData",				"TModelBuilder>>#abstractVariableTestData",				"TOccurrencesForMultiplinessTest>>#test0FixtureOccurrencesTest",				"TOccurrencesTest>>#test0FixtureOccurrencesTest",				"TPrintTest>>#testPrintOnDelimiter",				"TPrintTest>>#testPrintOnDelimiterLast",				"TPrintTest>>#testPrintElementsOn",				"TPrintTest>>#testPrintOn",				"TTLCache>>#removeStaleValues",				"TaSequence>>#addMember:",				"TabBarMorph>>#addTab:",				"TabExample>>#tabs",				"TabGroupMorph>>#addPage:label:selected:",				"TabGroupMorph>>#addPage:label:",				"TabManagerMorph>>#addTabContents:at:delta:",				"TabManagerMorph>>#addSplitterOn:delta:",				"TabManagerMorph>>#addLastTabContents:among:delta:",				"TabManagerMorph>>#setTabContentFrom:",				"TabMorph>>#addAction:",				"TabSelectorMorph>>#addTab:",				"TabSelectorMorph>>#addTab:selected:",				"TabSelectorMorph>>#calculateVisibleTabs",				"TabSelectorMorph>>#tabsAndControls",				"TabState>>#buildBorderVertices",				"TaskbarMorph>>#updateOrderedTasksFrom:",				"TaskbarMorphTest>>#updateOrderedTasksFrom:",				"TaskbarMorphTest>>#addWindowToWorld",				"TestCase class>>#lastStoredRun",				"TestCaseTest>>#testAnnouncement",				"TestCommandLineHandler>>#addPackagesMatchingRegex:to:",				"TestCommandLineHandler>>#addPackagesMatchingGlob:to:",				"TestCommandLineHandler>>#addPackagesMatching:to:",				"TestExecutionEnvironment>>#registerService:",				"TestExecutionEnvironmentTestCase>>#newProcess:toImmediatelyExecute:",				"TestResource class>>#resetOrAddResourcesTo:",				"TestResult>>#addSkip:",				"TestResult>>#addPass:",				"TestResult>>#addFailure:",				"TestResult>>#addError:",				"TestResult>>#updateResultsInHistory",				"TestResult class>>#updateTestHistoryFor:status:",				"TestRunner>>#findPackages",				"TestRunner>>#addMethodsUnderTestIn:to:",				"TestRunner>>#addDeclaredPackagesUnderTestTo:",				"TestRunner>>#showProgress",				"TestServiceExample>>#handleNewProcess:",				"TestServiceExample>>#handleException:",				"TestSuite>>#defaultResources",				"TestSuite>>#addTest:",				"TestWorkingSession>>#handleError:",				"Text>>#embeddedMorphs",				"Text>>#embeddedMorphsFrom:to:",				"TextAlignmentTest>>#setUp",				"TextAnchorTest>>#setUp",				"TextEmphasisTest>>#testRemove",				"TextEmphasisTest>>#setUp",				"TextEmphasisTest>>#testAdd",				"TextFontChangeTest>>#setUp",				"TextFontChangeTest>>#testHash",				"TextFontReferenceTest>>#setUp",				"TextKernTest>>#setUp",				"TextLineTest>>#setUp",				"TheManifestBuilder>>#addManuallyResolvedDependency:",				"TheManifestBuilder>>#addRejectClass:",				"TheManifestBuilder>>#unwrap:",				"TheManifestBuilder>>#addRejectRule:",				"Timespan>>#years",				"Timespan>>#months",				"Timespan>>#weeks",				"Timespan>>#dates",				"TonelWriter>>#writeMethodExtensions",				"Trait>>#classDefinitions",				"Trait>>#addUser:",				"TraitBuilderEnhancer>>#eliminateDuplicates:withSuperclassSlots:",				"TraitChange>>#add:into:changes:",				"TraitChange>>#remove:into:changes:",				"TraitChange>>#update:into:changes:",				"TraitCompositionTest>>#testClassMethodsTakePrecedenceOverTraitsMethods",				"TraitFileOutTest>>#testFileOutTrait",				"TraitMethodDescription>>#addLocatedMethod:",				"TraitedClass class>>#addUser:",				"TraitsResource>>#createClassNamed:superclass:uses:",				"TraitsResource>>#createTraitNamed:uses:",				"TraitsTestCase>>#createClassNamed:superclass:uses:",				"TraitsTestCase>>#createTraitNamed:uses:",				"TreeChunkPagerMorph>>#buildPanel",				"TreeNavigationBarMorph>>#pageSearchText:",				"TreePagerMorph>>#choosePage",				"TreePagerMorph>>#buildPanel",				"TreePagerMorph>>#allIntervals",				"UITheme>>#verticesForSimpleArrow:",				"UITheme>>#verticesForComplexArrow:",				"UUIDGeneratorTest>>#testUniqueness",				"UUIDPrimitivesTest>>#testDuplicationsKinda",				"UndeclaredVariable>>#register",				"Unit>>#multipliedBy:",				"UserInterruptHandler>>#killAllProcess",				"VTermOutputStyle>>#addStyle:",				"Variable>>#link:",				"VariableBreakpointTest>>#argNodes",				"VariableBreakpointTest>>#nodesForV2InVariableBreakpointMockSubclass",				"VariableBreakpointTest>>#tempWriteNodes",				"VariableBreakpointTest>>#tempReadNodes",				"VariableBreakpointTest>>#nodesForV1InFieldWatchpointMockClass",				"VariableBreakpointTest>>#nodesForV1InVariableBreakpointMockSubclass",				"VersionBrowser>>#defaultLayout",				"VersionBrowser>>#replaceSourceWith:",				"VileFinalizer>>#initialize:",				"VirtualBreakpoint>>#whenHit:",				"VirtualBreakpoint class>>#newOnNode:setBy:",				"VisibleClassAnnotationsTest>>#testCanBeEnumeratedForGivenUser",				"VisibleClassAnnotationsTest>>#testCanBeEnumeratedForGivenClassAndUser",				"WaitfreeQueueTest>>#newItems:",				"Watch>>#addValue:",				"WatchesWindowPresenter class>>#defaultLayout",				"WeakFinalizerItem>>#add:",				"WeakIdentitySetTest>>#testAddIdenticalElements",				"WeakIdentitySetTest>>#testAddEqualElements",				"WeakKeyDictionaryTest class>>#timingMany",				"WeakMessageSendTest>>#testCollectArguments",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionSomeGarbageCollected",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionAllGarbageCollected",				"WeakRegistry>>#finalizeValues",				"WeakRegistry>>#add:executor:",				"WeakRegistryTest>>#testRemovingDoesntLeak",				"WeakRegistryTest>>#testFinalization",				"WeakRegistryTest>>#testRemovingByAHighPriorityProcessDoesntLeak",				"WeakSet>>#asArray",				"WeakSet>>#collect:",				"WeakSetTest>>#testCollisions",				"WeakSetTest>>#testAddNil",				"WeakSetTest>>#testGrowWithNil",				"WeakSetTest>>#testDontGrowWhenUnecessary",				"WeakSetTest>>#testIncludesNil",				"WeakSetTest>>#testGrowWhenNecessary",				"WeakSetTest>>#testIncludes",				"WeakSetTest>>#testAddEqualElements",				"WeakSetTest>>#testAsArray",				"WeakSetTest>>#testAddIncludesSizeReclaim",				"WeakSetTest>>#testDoDontIterateOnReclaimedObjects",				"WeekTest>>#testEnumerating",				"WideCharacterSetTest>>#testAddingToCharacterSet",				"WidgetExample class>>#exampleBasicControls",				"WindowAnnouncementTest>>#testResizingClosing",				"WorkingSession>>#addDeferredStartupAction:",				"Workspace>>#whenTextAccepted:",				"Workspace>>#bindingOf:",				"WorldState>>#startStepping:at:selector:arguments:stepTime:",				"WorldState>>#addAlarm:withArguments:for:at:",				"WorldState>>#runLocalStepMethodsIn:",				"WorldState>>#drawWorld:submorphs:invalidAreasOn:",				"ZdcSecurePOP3Client class>>#retrieveMessagesFromGMailAccount:password:limit:",				"ZipArchive class>>#fileReaderServicesForFile:suffix:",				"ZipEncoderTree>>#buildTree:maxDepth:",				"ZipEncoderTree>>#buildHierarchyFrom:",				"ZnClient>>#formAdd:",				"ZnClient>>#receiveCookies",				"ZnClientTest>>#testLogging",				"ZnCookieJar>>#add:",				"ZnMagicCookieJarTest>>#testCookiesForUrl",				"ZnMagicCookieJarTest>>#testCookieAtForUrl",				"ZnMagicCookieJarTest>>#testAdd",				"ZnManagingMultiThreadedServer>>#socketStreamOn:",				"ZnMimePart>>#contentDispositionValues",				"ZnMultiPartFormDataEntity>>#addPart:",				"ZnMultiThreadedServer>>#exceptionSet:",				"ZnMultiValueDictionary>>#add:",				"ZnMultiValueDictionaryTest>>#testMultiValues",				"ZnRequestTest>>#testCookiesWriting",				"ZnServer class>>#register:",				"ZnUrl>>#addPathSegment:"			],			"implementors" : {				"MethodDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\t^ self at: anAssociation key put: anAssociation value"					],					"body" : [						"^ self at: anAssociation key put: anAssociation value"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18660573,					"argumentNames" : [						"anAssociation"					]				},				"StartupPreferencesLoader" : {					"sourceCode" : [						"add: anAction",						"",						"\t| action |",						"\taction := actions at: anAction name ifAbsentPut: [ anAction ].",						"\t\"make sure the possible existing action ueses new code or",						"\tchanged runOnce-behavior\"",						"\taction code: anAction code.",						"\taction runOnce: anAction runOnce.",						"\t^ action"					],					"body" : [						"| action |",						"action := actions at: anAction name ifAbsentPut: [ anAction ].",						"\"make sure the possible existing action ueses new code or",						"\tchanged runOnce-behavior\"",						"action code: anAction code.",						"action runOnce: anAction runOnce.",						"^ action"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19546031,					"argumentNames" : [						"anAction"					]				},				"CoFetcherSequence" : {					"sourceCode" : [						"add: aCompletion",						"",						"\tsubcompletions add: aCompletion"					],					"body" : [						"subcompletions add: aCompletion"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 24310347,					"argumentNames" : [						"aCompletion"					]				},				"CacheWeight" : {					"sourceCode" : [						"add: value",						"",						"\t| weight |",						"\tweight := compute cull: value.",						"\ttotal := total + weight"					],					"body" : [						"| weight |",						"weight := compute cull: value.",						"total := total + weight"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19727025,					"argumentNames" : [						"value"					]				},				"SpMorphicMillerAdapter" : {					"sourceCode" : [						"add: aPresenter",						"",						"\tself add: aPresenter constraints: SpLayoutConstraints new"					],					"body" : [						"self add: aPresenter constraints: SpLayoutConstraints new"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18800965,					"argumentNames" : [						"aPresenter"					]				},				"CTSBRAL" : {					"sourceCode" : [						"add: x",						"",						"\tlastAddedObject := x.",						"",						"\t^ self increment"					],					"body" : [						"lastAddedObject := x.",						"",						"^ self increment"					],					"isTestMethod" : false,					"category" : "API",					"comment" : [ ],					"hash" : 20131194,					"argumentNames" : [						"x"					]				},				"DAPackage" : {					"sourceCode" : [						"add: aDependency",						"",						"\t^ dependencies add: aDependency"					],					"body" : [						"^ dependencies add: aDependency"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 22565492,					"argumentNames" : [						"aDependency"					]				},				"Heap" : {					"sourceCode" : [						"add: anObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject.\"",						"",						"\ttally = array size ifTrue: [ self grow ].",						"\tarray at: (tally := tally + 1) put: anObject.",						"\tself updateObjectIndex: tally.",						"\tself upHeap: tally.",						"\t^ anObject"					],					"body" : [						"tally = array size ifTrue: [ self grow ].",						"array at: (tally := tally + 1) put: anObject.",						"self updateObjectIndex: tally.",						"self upHeap: tally.",						"^ anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject."					],					"hash" : 18838025,					"argumentNames" : [						"anObject"					]				},				"IRSequence" : {					"sourceCode" : [						"add: anInstruction",						"",						"\tsequence add: anInstruction.",						"\tanInstruction sequence: self.",						"\t^ anInstruction"					],					"body" : [						"sequence add: anInstruction.",						"anInstruction sequence: self.",						"^ anInstruction"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19068568,					"argumentNames" : [						"anInstruction"					]				},				"SpCompositeOutputPort" : {					"sourceCode" : [						"add: aPort",						"",						"\tports := ports copyWith: aPort"					],					"body" : [						"ports := ports copyWith: aPort"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20832321,					"argumentNames" : [						"aPort"					]				},				"Dictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\t\"Add anAssociation to the dictionary. If the key is already in the dictionary then the value ",						"\twill overwrite the one currently present.",						"\t",						"\t```",						"\td := Dictionary new at: 5 put: 1; yourself.  \"\"a Dictionary(5->1)\"\"",						"\td add: 5-> 12.  \"\"a Dictionary(5->12)\"\"",						"\ta add: 4->4. \"\"a Dictionary(5->12,4->4)\"\"",						"\t```",						"\t\"",						"",						"\t| index element |",						"\tindex := self findElementOrNil: anAssociation key.",						"\telement := array at: index.",						"\telement",						"\t\tifNil: [ self atNewIndex: index put: anAssociation ]",						"\t\tifNotNil: [ element value: anAssociation value ].",						"\t^ anAssociation"					],					"body" : [						"| index element |",						"index := self findElementOrNil: anAssociation key.",						"element := array at: index.",						"element",						"\tifNil: [ self atNewIndex: index put: anAssociation ]",						"\tifNotNil: [ element value: anAssociation value ].",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add anAssociation to the dictionary. If the key is already in the dictionary then the value ",						"\twill overwrite the one currently present.",						"\t",						"\t```",						"\td := Dictionary new at: 5 put: 1; yourself.  \"\"a Dictionary(5->1)\"\"",						"\td add: 5-> 12.  \"\"a Dictionary(5->12)\"\"",						"\ta add: 4->4. \"\"a Dictionary(5->12,4->4)\"\"",						"\t```",						"\t"					],					"hash" : 19162675,					"argumentNames" : [						"anAssociation"					]				},				"OrderedCollection" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Add a new object at the end of the collection, and returns the object itself\"",						"",						"\t\"((OrderedCollection new add: 42; yourself) add: 43; yourself) asArray >>> #(42 43)\"",						"",						"\t\"Add returns the object itself\"",						"",						"\t\"(OrderedCollection new add: 42) >>> 42\"",						"",						"\t\"You may want to use yourself to return the collection itself\"",						"",						"\t\"(OrderedCollection new add: 42; yourself) class >>> OrderedCollection\"",						"",						"\t\"(OrderedCollection new add: 42; yourself) size >>> 1\"",						"",						"\t^ self addLast: newObject"					],					"body" : [						"^ self addLast: newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add a new object at the end of the collection, and returns the object itself"					],					"hash" : 18643904,					"argumentNames" : [						"newObject"					]				},				"Interval" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Adding to an Interval is not allowed.\"",						"",						"\tself shouldNotImplement"					],					"body" : [						"self shouldNotImplement"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Adding to an Interval is not allowed."					],					"hash" : 18638404,					"argumentNames" : [						"newObject"					]				},				"SortedCollection" : {					"sourceCode" : [						"add: newObject",						"",						"\t^ super insert: newObject before: (self indexForInserting: newObject)"					],					"body" : [						"^ super insert: newObject before: (self indexForInserting: newObject)"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18971990,					"argumentNames" : [						"newObject"					]				},				"DoubleLinkedList" : {					"sourceCode" : [						"add: anObjectOrLink",						"",						"\t\"Add anObjectOrLink at the end of me.",						"\tReturn the internal link object.\"",						"",						"\t^ self addLast: anObjectOrLink"					],					"body" : [						"^ self addLast: anObjectOrLink"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add anObjectOrLink at the end of me.",						"\tReturn the internal link object."					],					"hash" : 19461312,					"argumentNames" : [						"anObjectOrLink"					]				},				"STONListWriter" : {					"sourceCode" : [						"add: anObject",						"",						"\tfirst",						"\t\tifTrue: [ first := false ]",						"\t\tifFalse: [ writer listElementSeparator ].",						"\twriter nextPut: anObject"					],					"body" : [						"first",						"\tifTrue: [ first := false ]",						"\tifFalse: [ writer listElementSeparator ].",						"writer nextPut: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18181674,					"argumentNames" : [						"anObject"					]				},				"CTSkipList" : {					"sourceCode" : [						"add: key",						"",						"\t^ self add: key atHeight: random next"					],					"body" : [						"^ self add: key atHeight: random next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20145481,					"argumentNames" : [						"key"					]				},				"Set" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject.\"",						"",						"\t| index |",						"\tindex := self scanFor: newObject.",						"\t(array at: index) ifNil: [ ",						"\t\tself atNewIndex: index put: newObject asCollectionElement ].",						"\t^ newObject"					],					"body" : [						"| index |",						"index := self scanFor: newObject.",						"(array at: index) ifNil: [ ",						"\tself atNewIndex: index put: newObject asCollectionElement ].",						"^ newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject."					],					"hash" : 18916886,					"argumentNames" : [						"newObject"					]				},				"SpActionBarPresenter" : {					"sourceCode" : [						"add: aButtonPresenter",						"",						"\t\"Add a button presenter to be shown at the start of the action bar (at the left).\"",						"",						"\t(items at: #start ifAbsentPut: [ OrderedCollection new ]) add:",						"\t\taButtonPresenter"					],					"body" : [						"(items at: #start ifAbsentPut: [ OrderedCollection new ]) add:",						"\taButtonPresenter"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"Add a button presenter to be shown at the start of the action bar (at the left)."					],					"hash" : 18458687,					"argumentNames" : [						"aButtonPresenter"					]				},				"NavigationHistory" : {					"sourceCode" : [						"add: anEntry",						"",						"\tself addEntry: anEntry"					],					"body" : [						"self addEntry: anEntry"					],					"isTestMethod" : false,					"category" : "collection compatibility",					"comment" : [ ],					"hash" : 19856277,					"argumentNames" : [						"anEntry"					]				},				"IRBuilder" : {					"sourceCode" : [						"add: instr",						"",						"\t\"Associate instr with current parse node or byte range\"",						"",						"\tinstr sourceNode: self sourceNode.",						"\tinstr bytecodeIndex: self sourceByteIndex.",						"\t^ currentSequence add: instr"					],					"body" : [						"instr sourceNode: self sourceNode.",						"instr bytecodeIndex: self sourceByteIndex.",						"^ currentSequence add: instr"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [						"Associate instr with current parse node or byte range"					],					"hash" : 19067832,					"argumentNames" : [						"instr"					]				},				"ZnApplicationFormUrlEncodedEntity" : {					"sourceCode" : [						"add: association",						"",						"\tself at: association key put: association value"					],					"body" : [						"self at: association key put: association value"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19244978,					"argumentNames" : [						"association"					]				},				"SpGridLayoutBuilder" : {					"sourceCode" : [						"add: aChild",						"",						"\tlayout add: aChild at: self nextColumn @ self currentRow"					],					"body" : [						"layout add: aChild at: self nextColumn @ self currentRow"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [ ],					"hash" : 18392712,					"argumentNames" : [						"aChild"					]				},				"MCDependencySorter" : {					"sourceCode" : [						"add: anItem",						"",						"\t| requirements |",						"\trequirements := self unresolvedRequirementsFor: anItem.",						"\trequirements isEmpty",						"\t\tifTrue: [ self addToOrder: anItem ]",						"\t\tifFalse: [ self addRequirements: requirements for: anItem ].",						"\t^ anItem"					],					"body" : [						"| requirements |",						"requirements := self unresolvedRequirementsFor: anItem.",						"requirements isEmpty",						"\tifTrue: [ self addToOrder: anItem ]",						"\tifFalse: [ self addRequirements: requirements for: anItem ].",						"^ anItem"					],					"isTestMethod" : false,					"category" : "building",					"comment" : [ ],					"hash" : 18373020,					"argumentNames" : [						"anItem"					]				},				"WeakRegistry" : {					"sourceCode" : [						"add: anObject",						"",						"\t\"Add anObject to the receiver. Store the object as well as the associated executor.\"",						"",						"\t^ self add: anObject executor: anObject executor"					],					"body" : [						"^ self add: anObject executor: anObject executor"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add anObject to the receiver. Store the object as well as the associated executor."					],					"hash" : 19018148,					"argumentNames" : [						"anObject"					]				},				"Bag" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject.\"",						"",						"\t^ self add: newObject withOccurrences: 1"					],					"body" : [						"^ self add: newObject withOccurrences: 1"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject."					],					"hash" : 18698018,					"argumentNames" : [						"newObject"					]				},				"WideCharacterSet" : {					"sourceCode" : [						"add: aCharacter",						"",						"\t| val high low lowmap |",						"\tval := aCharacter asciiValue.",						"\tval < 256 ifTrue: [ self byteArrayMap at: val + 1 put: 1 ].",						"\thigh := val bitShift: -16.",						"\tlow := val bitAnd: 16rFFFF.",						"\tlowmap := map",						"\t\t          at: high",						"\t\t          ifAbsentPut: [ \"create a chunk of 65536=8192*8 bits\" ",						"\t\t          ByteArray new: 8192 ].",						"\tself setBitmap: lowmap at: low.",						"\t^ aCharacter"					],					"body" : [						"| val high low lowmap |",						"val := aCharacter asciiValue.",						"val < 256 ifTrue: [ self byteArrayMap at: val + 1 put: 1 ].",						"high := val bitShift: -16.",						"low := val bitAnd: 16rFFFF.",						"lowmap := map",						"\t          at: high",						"\t          ifAbsentPut: [ \"create a chunk of 65536=8192*8 bits\" ",						"\t          ByteArray new: 8192 ].",						"self setBitmap: lowmap at: low.",						"^ aCharacter"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20072535,					"argumentNames" : [						"aCharacter"					]				},				"CollectionValueHolder" : {					"sourceCode" : [						"add: newObject",						"",						"\t| result |",						"\tresult := value add: newObject.",						"\tself valueAdded: newObject.",						"\t^ result"					],					"body" : [						"| result |",						"result := value add: newObject.",						"self valueAdded: newObject.",						"^ result"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 20003733,					"argumentNames" : [						"newObject"					]				},				"RSCompositeAnimation" : {					"sourceCode" : [						"add: anAnimation",						"",						"\tanimations add: anAnimation"					],					"body" : [						"animations add: anAnimation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 24861783,					"argumentNames" : [						"anAnimation"					]				},				"SpCollectionListModel" : {					"sourceCode" : [						"add: anItem",						"",						"\tcollection := collection copyWith: anItem.",						"",						"\tself refreshList.",						"\tself announcer announce: (ValueChanged newValue: self)"					],					"body" : [						"collection := collection copyWith: anItem.",						"",						"self refreshList.",						"self announcer announce: (ValueChanged newValue: self)"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18421869,					"argumentNames" : [						"anItem"					]				},				"OCLiteralSet" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements.  If equivalent is already present don't add and return equivalent object\"",						"",						"\t| index |",						"\tnewObject ifNil: [ ",						"\t\tself error: 'Sets cannot meaningfully contain nil as an element' ].",						"\tindex := self findElementOrNil: newObject.",						"\t^ (array at: index)",						"\t\t  ifNil: [ ",						"\t\t\t  self atNewIndex: index put: newObject.",						"\t\t\t  newObject ]",						"\t\t  ifNotNil: [ array at: index ]"					],					"body" : [						"| index |",						"newObject ifNil: [ ",						"\tself error: 'Sets cannot meaningfully contain nil as an element' ].",						"index := self findElementOrNil: newObject.",						"^ (array at: index)",						"\t  ifNil: [ ",						"\t\t  self atNewIndex: index put: newObject.",						"\t\t  newObject ]",						"\t  ifNotNil: [ array at: index ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements.  If equivalent is already present don't add and return equivalent object"					],					"hash" : 19333319,					"argumentNames" : [						"newObject"					]				},				"SpPanedLayout" : {					"sourceCode" : [						"add: aPresenterLayoutOrSymbol",						"",						"\t\"Adds `aPresenterLayoutOrSymbol` as one of the elements to put in the paned layout. ",						"\t Te position of the element will be calculated in order of addition (and there cannot ",						"\t be more than two). ",						"\t `aPresenterLayoutOrSymbol` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add.\"",						"",						"\tself",						"\t\tadd: aPresenterLayoutOrSymbol",						"\t\twithConstraints: [ :constraints |  ]",						"\t\tplace: children size + 1"					],					"body" : [						"self",						"\tadd: aPresenterLayoutOrSymbol",						"\twithConstraints: [ :constraints |  ]",						"\tplace: children size + 1"					],					"isTestMethod" : false,					"category" : "api - adding",					"comment" : [						"Adds `aPresenterLayoutOrSymbol` as one of the elements to put in the paned layout. ",						"\t Te position of the element will be calculated in order of addition (and there cannot ",						"\t be more than two). ",						"\t `aPresenterLayoutOrSymbol` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add."					],					"hash" : 18389295,					"argumentNames" : [						"aPresenterLayoutOrSymbol"					]				},				"RSGroup" : {					"sourceCode" : [						"add: shape",						"",						"\tself resetShapeFromModelCache.",						"\t^ super add: shape"					],					"body" : [						"self resetShapeFromModelCache.",						"^ super add: shape"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 24781789,					"argumentNames" : [						"shape"					]				},				"ArrayedCollection" : {					"sourceCode" : [						"add: newObject",						"",						"\tself shouldNotImplement"					],					"body" : [						"self shouldNotImplement"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18689604,					"argumentNames" : [						"newObject"					]				},				"RSCanvas" : {					"sourceCode" : [						"add: aShape",						"",						"\t\"Main method to add a shape to a shape to a canvas\"",						"",						"\tself",						"\t\tassert: aShape notNil",						"\t\tdescription: 'Nil cannot be added to a canvas'.",						"",						"\tself",						"\t\tassert: (aShape class inheritsFrom: RSShape)",						"\t\tdescription: 'A shape must be provided'.",						"\taShape",						"\t\taddedIn: self;",						"\t\trenderOn: self.",						"\t^ aShape"					],					"body" : [						"self",						"\tassert: aShape notNil",						"\tdescription: 'Nil cannot be added to a canvas'.",						"",						"self",						"\tassert: (aShape class inheritsFrom: RSShape)",						"\tdescription: 'A shape must be provided'.",						"aShape",						"\taddedIn: self;",						"\trenderOn: self.",						"^ aShape"					],					"isTestMethod" : false,					"category" : "adding - nodes edges",					"comment" : [						"Main method to add a shape to a shape to a canvas"					],					"hash" : 24781705,					"argumentNames" : [						"aShape"					]				},				"RunArray" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message.\"",						"",						"\t^ self addLast: newObject"					],					"body" : [						"^ self addLast: newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message."					],					"hash" : 19494848,					"argumentNames" : [						"newObject"					]				},				"ExceptionSet" : {					"sourceCode" : [						"add: anException",						"",						"\t\"Add anException to the exceptions that I handle\"",						"",						"\t^ exceptions add: anException"					],					"body" : [						"^ exceptions add: anException"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [						"Add anException to the exceptions that I handle"					],					"hash" : 18788468,					"argumentNames" : [						"anException"					]				},				"WeakFinalizerItem" : {					"sourceCode" : [						"add: newExecutor",						"",						"\texecutor ifNil: [ executor := newExecutor ] ifNotNil: [ ",						"\t\texecutor hasMultipleExecutors",						"\t\t\tifTrue: [ executor add: newExecutor ]",						"\t\t\tifFalse: [ ",						"\t\t\t\texecutor := ObjectFinalizerCollection",						"\t\t\t\t\t            with: executor",						"\t\t\t\t\t            with: newExecutor ] ]"					],					"body" : [						"executor ifNil: [ executor := newExecutor ] ifNotNil: [ ",						"\texecutor hasMultipleExecutors",						"\t\tifTrue: [ executor add: newExecutor ]",						"\t\tifFalse: [ ",						"\t\t\texecutor := ObjectFinalizerCollection",						"\t\t\t\t            with: executor",						"\t\t\t\t            with: newExecutor ] ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19012347,					"argumentNames" : [						"newExecutor"					]				},				"MTSession" : {					"sourceCode" : [						"add: aTracker",						"",						"\t| compiledMethod |",						"\tcompiledMethod := aTracker compiledMethod.",						"",						"\t^ (forbiddenMethods includes: compiledMethod)",						"\t\t  ifTrue: [ Object new ]",						"\t\t  ifFalse: [ ",						"\t\t\t  trackers at: compiledMethod ifAbsentPut: [ ",						"\t\t\t\t  aTracker",						"\t\t\t\t\t  session: self;",						"\t\t\t\t\t  yourself ] ]"					],					"body" : [						"| compiledMethod |",						"compiledMethod := aTracker compiledMethod.",						"",						"^ (forbiddenMethods includes: compiledMethod)",						"\t  ifTrue: [ Object new ]",						"\t  ifFalse: [ ",						"\t\t  trackers at: compiledMethod ifAbsentPut: [ ",						"\t\t\t  aTracker",						"\t\t\t\t  session: self;",						"\t\t\t\t  yourself ] ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20378297,					"argumentNames" : [						"aTracker"					]				},				"MCDefinitionIndex" : {					"sourceCode" : [						"add: aDefinition",						"",						"\t^ definitions at: aDefinition description put: aDefinition"					],					"body" : [						"^ definitions at: aDefinition description put: aDefinition"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18108439,					"argumentNames" : [						"aDefinition"					]				},				"SmallDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself at: anAssociation key put: anAssociation value.",						"\t^ anAssociation"					],					"body" : [						"self at: anAssociation key put: anAssociation value.",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18969079,					"argumentNames" : [						"anAssociation"					]				},				"ProcessList" : {					"sourceCode" : [						"add: aLinkOrObject",						"",						"\t\"Add aLink to the end of the receiver's list. Answer aLink.\"",						"",						"\t^ self addLast: aLinkOrObject"					],					"body" : [						"^ self addLast: aLinkOrObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add aLink to the end of the receiver's list. Answer aLink."					],					"hash" : 18924736,					"argumentNames" : [						"aLinkOrObject"					]				},				"SubscriptionRegistry" : {					"sourceCode" : [						"add: subscription",						"",						"\t^ self protected: [ subscriptions add: subscription ]"					],					"body" : [						"^ self protected: [ subscriptions add: subscription ]"					],					"isTestMethod" : false,					"category" : "add/remove",					"comment" : [ ],					"hash" : 18662351,					"argumentNames" : [						"subscription"					]				},				"WeakSet" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject\"",						"",						"\t| index element |",						"\tindex := self scanFor: newObject.",						"\t((element := array at: index) == flag or: [ element == nil ]) ",						"\t\tifTrue: [ self atNewIndex: index put: newObject asCollectionElement ].",						"\t^ newObject"					],					"body" : [						"| index element |",						"index := self scanFor: newObject.",						"((element := array at: index) == flag or: [ element == nil ]) ifTrue: [ ",						"\tself atNewIndex: index put: newObject asCollectionElement ].",						"^ newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject"					],					"hash" : 19170208,					"argumentNames" : [						"newObject"					]				},				"MetacelloRepositoriesSpec" : {					"sourceCode" : [						"add: aStringOrSpec",						"",						"\taStringOrSpec addToMetacelloRepositories: self"					],					"body" : [						"aStringOrSpec addToMetacelloRepositories: self"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 18157205,					"argumentNames" : [						"aStringOrSpec"					]				},				"STONShortListWriter" : {					"sourceCode" : [						"add: anObject",						"",						"\tfirst",						"\t\tifTrue: [ first := false ]",						"\t\tifFalse: [ writer shortListElementSeparator ].",						"\twriter nextPut: anObject"					],					"body" : [						"first",						"\tifTrue: [ first := false ]",						"\tifFalse: [ writer shortListElementSeparator ].",						"writer nextPut: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18182186,					"argumentNames" : [						"anObject"					]				},				"Collection" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message.\"",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message."					],					"hash" : 18684484,					"argumentNames" : [						"newObject"					]				},				"PluggableMenuSpec" : {					"sourceCode" : [						"add: aString",						"",						"\t^ self add: aString action: nil"					],					"body" : [						"^ self add: aString action: nil"					],					"isTestMethod" : false,					"category" : "construction",					"comment" : [ ],					"hash" : 18271776,					"argumentNames" : [						"aString"					]				},				"CharacterSet" : {					"sourceCode" : [						"add: aCharacter",						"",						"\t\"I automatically become a WideCharacterSet if you add a wide character to myself\"",						"",						"\taCharacter asciiValue >= 256 ifTrue: [ ",						"\t\t| wide |",						"\t\twide := WideCharacterSet new.",						"\t\twide addAll: self.",						"\t\twide add: aCharacter.",						"\t\tself becomeForward: wide.",						"\t\t^ aCharacter ].",						"\tmap at: aCharacter asciiValue + 1 put: 1.",						"\t^ aCharacter"					],					"body" : [						"aCharacter asciiValue >= 256 ifTrue: [ ",						"\t| wide |",						"\twide := WideCharacterSet new.",						"\twide addAll: self.",						"\twide add: aCharacter.",						"\tself becomeForward: wide.",						"\t^ aCharacter ].",						"map at: aCharacter asciiValue + 1 put: 1.",						"^ aCharacter"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"I automatically become a WideCharacterSet if you add a wide character to myself"					],					"hash" : 18983314,					"argumentNames" : [						"aCharacter"					]				},				"ClapValidationReport" : {					"sourceCode" : [						"add: aDiagnostic",						"",						"\taDiagnostic isFailure ifTrue: [ problems add: aDiagnostic ]"					],					"body" : [						"aDiagnostic isFailure ifTrue: [ problems add: aDiagnostic ]"					],					"isTestMethod" : false,					"category" : "controlling",					"comment" : [ ],					"hash" : 18246130,					"argumentNames" : [						"aDiagnostic"					]				},				"ClapParameterized" : {					"sourceCode" : [						"add: aParameter",						"",						"\tparameters",						"\t\tat: aParameter identifier",						"\t\tifPresent: [ :param | ",						"\t\tself signalIdentifierConflictOf: aParameter with: param ]",						"\t\tifAbsentPut: aParameter.",						"\t^ aParameter addTo: self"					],					"body" : [						"parameters",						"\tat: aParameter identifier",						"\tifPresent: [ :param | ",						"\tself signalIdentifierConflictOf: aParameter with: param ]",						"\tifAbsentPut: aParameter.",						"^ aParameter addTo: self"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18242072,					"argumentNames" : [						"aParameter"					]				},				"OrderedDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\t| oldSize |",						"\toldSize := dictionary size.",						"\tdictionary add: anAssociation.",						"\tdictionary size > oldSize ifTrue: [ ",						"\t\torderedKeys size > oldSize ifFalse: [ self growOrderedKeys ].",						"\t\torderedKeys at: oldSize + 1 put: anAssociation key ].",						"\t^ anAssociation"					],					"body" : [						"| oldSize |",						"oldSize := dictionary size.",						"dictionary add: anAssociation.",						"dictionary size > oldSize ifTrue: [ ",						"\torderedKeys size > oldSize ifFalse: [ self growOrderedKeys ].",						"\torderedKeys at: oldSize + 1 put: anAssociation key ].",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19179959,					"argumentNames" : [						"anAssociation"					]				},				"WeakValueDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself at: anAssociation key put: anAssociation value.",						"\t^ anAssociation"					],					"body" : [						"self at: anAssociation key put: anAssociation value.",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19014135,					"argumentNames" : [						"anAssociation"					]				},				"SpMorphicBoxAdapter" : {					"sourceCode" : [						"add: aPresenter",						"",						"\tself add: aPresenter constraints: SpBoxConstraints new"					],					"body" : [						"self add: aPresenter constraints: SpBoxConstraints new"					],					"isTestMethod" : false,					"category" : "factory",					"comment" : [ ],					"hash" : 18798405,					"argumentNames" : [						"aPresenter"					]				},				"RSComposite" : {					"sourceCode" : [						"add: aShape",						"",						"\tself",						"\t\tassert: aShape notNil",						"\t\tdescription: 'Nil cannot be added to a canvas'.",						"\taShape",						"\t\taddedIn: self;",						"\t\trenderOn: self.",						"\t^ aShape"					],					"body" : [						"self",						"\tassert: aShape notNil",						"\tdescription: 'Nil cannot be added to a canvas'.",						"aShape",						"\taddedIn: self;",						"\trenderOn: self.",						"^ aShape"					],					"isTestMethod" : false,					"category" : "adding nodes edges",					"comment" : [ ],					"hash" : 24818141,					"argumentNames" : [						"aShape"					]				},				"LinkedList" : {					"sourceCode" : [						"add: aLinkOrObject",						"",						"\t\"Add aLink to the end of the receiver's list. Answer aLink.\"",						"",						"\t^ self addLast: aLinkOrObject"					],					"body" : [						"^ self addLast: aLinkOrObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add aLink to the end of the receiver's list. Answer aLink."					],					"hash" : 18857920,					"argumentNames" : [						"aLinkOrObject"					]				},				"DACompositeDependency" : {					"sourceCode" : [						"add: aDependency",						"",						"\tdependencies add: aDependency"					],					"body" : [						"dependencies add: aDependency"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 22567755,					"argumentNames" : [						"aDependency"					]				},				"RSQuadTreeF" : {					"sourceCode" : [						"add: aNode",						"",						"\tleaf",						"\t\tifTrue: [ ",						"\t\t\tsoleChild isNil",						"\t\t\t\tifTrue: [ soleChild := aNode ]",						"\t\t\t\tifFalse: [ ",						"\t\t\t\t\t(soleChild position closeTo: aNode position)",						"\t\t\t\t\t\tifTrue: [ self addChild: aNode ]",						"\t\t\t\t\t\tifFalse: [ ",						"\t\t\t\t\t\t\t| firstChild |",						"\t\t\t\t\t\t\tfirstChild := soleChild.",						"\t\t\t\t\t\t\tsoleChild := nil.",						"\t\t\t\t\t\t\tself",						"\t\t\t\t\t\t\t\taddChild: aNode;",						"\t\t\t\t\t\t\t\taddChild: firstChild ] ] ]",						"\t\tifFalse: [ self addChild: aNode ]"					],					"body" : [						"leaf",						"\tifTrue: [ ",						"\t\tsoleChild isNil",						"\t\t\tifTrue: [ soleChild := aNode ]",						"\t\t\tifFalse: [ ",						"\t\t\t\t(soleChild position closeTo: aNode position)",						"\t\t\t\t\tifTrue: [ self addChild: aNode ]",						"\t\t\t\t\tifFalse: [ ",						"\t\t\t\t\t\t| firstChild |",						"\t\t\t\t\t\tfirstChild := soleChild.",						"\t\t\t\t\t\tsoleChild := nil.",						"\t\t\t\t\t\tself",						"\t\t\t\t\t\t\taddChild: aNode;",						"\t\t\t\t\t\t\taddChild: firstChild ] ] ]",						"\tifFalse: [ self addChild: aNode ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 25172099,					"argumentNames" : [						"aNode"					]				},				"SpMillerLayout" : {					"sourceCode" : [						"add: aName",						"",						"\tself add: aName withConstraints: [ :constraints |  ]"					],					"body" : [						"self add: aName withConstraints: [ :constraints |  ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18389939,					"argumentNames" : [						"aName"					]				},				"SDL2TouchStateMachine" : {					"sourceCode" : [						"add: aPoint",						"",						"\tmove add: aPoint"					],					"body" : [						"move add: aPoint"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22805323,					"argumentNames" : [						"aPoint"					]				},				"SpBoxLayout" : {					"sourceCode" : [						"add: aPresenterLayoutOrSymbol",						"",						"\t\"Adds `aPresenterLayoutOrSymbol` to the list of presenters to be arranged in the layout. ",						"\t `aPresenterLayoutOrSymboll` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add.\"",						"",						"\tself",						"\t\tadd: aPresenterLayoutOrSymbol",						"\t\twithConstraints: [ :constraints |  ]"					],					"body" : [						"self",						"\tadd: aPresenterLayoutOrSymbol",						"\twithConstraints: [ :constraints |  ]"					],					"isTestMethod" : false,					"category" : "api - adding",					"comment" : [						"Adds `aPresenterLayoutOrSymbol` to the list of presenters to be arranged in the layout. ",						"\t `aPresenterLayoutOrSymboll` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add."					],					"hash" : 18388403,					"argumentNames" : [						"aPresenterLayoutOrSymbol"					]				},				"MetacelloMemberListSpec" : {					"sourceCode" : [						"add: aSpec",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 19319876,					"argumentNames" : [						"aSpec"					]				},				"KMStorage" : {					"sourceCode" : [						"add: aKeymap",						"",						"\taKeymap hasName",						"\t\tifTrue: [ namedRegistry at: aKeymap name put: aKeymap ]",						"\t\tifFalse: [ anonymousRegistry add: aKeymap ]"					],					"body" : [						"aKeymap hasName",						"\tifTrue: [ namedRegistry at: aKeymap name put: aKeymap ]",						"\tifFalse: [ anonymousRegistry add: aKeymap ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19843084,					"argumentNames" : [						"aKeymap"					]				},				"SpButtonBarPresenter" : {					"sourceCode" : [						"add: aButtonPresenter",						"",						"\t\"Add `aButtonPresenter` to the button list.\"",						"",						"\taButtonPresenter owner: self.",						"\titems add: aButtonPresenter"					],					"body" : [						"aButtonPresenter owner: self.",						"items add: aButtonPresenter"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"Add `aButtonPresenter` to the button list."					],					"hash" : 18459730,					"argumentNames" : [						"aButtonPresenter"					]				},				"SpToolbarPresenter" : {					"sourceCode" : [						"add: aToolbarButtonPresenter",						"",						"\t\"Add a toolbar button to the toolbar.\"",						"",						"\tself addItem: aToolbarButtonPresenter"					],					"body" : [						"self addItem: aToolbarButtonPresenter"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"Add a toolbar button to the toolbar."					],					"hash" : 18468757,					"argumentNames" : [						"aToolbarButtonPresenter"					]				},				"SpStubAbstractAdapter" : {					"sourceCode" : [						"add: aWidget",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 20852620,					"argumentNames" : [						"aWidget"					]				},				"MetacelloPackagesSpec" : {					"sourceCode" : [						"add: aSpec",						"",						"\taSpec addToMetacelloPackages: self"					],					"body" : [						"aSpec addToMetacelloPackages: self"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 19320469,					"argumentNames" : [						"aSpec"					]				},				"Array2D" : {					"sourceCode" : [						"add: newObject",						"",						"\tself shouldNotImplement"					],					"body" : [						"self shouldNotImplement"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18691396,					"argumentNames" : [						"newObject"					]				},				"CoStatisticsHeuristicBuilder" : {					"sourceCode" : [						"add: anHeuristic",						"",						"\tsuper add: (CoStatisticsHeuristicWrapper new",						"\t\t\t statistics: statistics;",						"\t\t\t wrapped: anHeuristic;",						"\t\t\t yourself)"					],					"body" : [						"super add: (CoStatisticsHeuristicWrapper new",						"\t\t statistics: statistics;",						"\t\t wrapped: anHeuristic;",						"\t\t yourself)"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 24317417,					"argumentNames" : [						"anHeuristic"					]				},				"CoHeuristicBuilder" : {					"sourceCode" : [						"add: anHeuristic",						"",						"\theuristics add: anHeuristic"					],					"body" : [						"heuristics add: anHeuristic"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 24315465,					"argumentNames" : [						"anHeuristic"					]				},				"ZnCookieJar" : {					"sourceCode" : [						"add: aCookie",						"",						"\t(self removeIfExpired: aCookie) ifTrue: [ ^ nil ].",						"\tself cookies do: [ :cookie | ",						"\t\tcookie = aCookie ifTrue: [ self cookies remove: cookie ] ].",						"\tself cookies add: aCookie"					],					"body" : [						"(self removeIfExpired: aCookie) ifTrue: [ ^ nil ].",						"self cookies do: [ :cookie | ",						"\tcookie = aCookie ifTrue: [ self cookies remove: cookie ] ].",						"self cookies add: aCookie"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19242238,					"argumentNames" : [						"aCookie"					]				},				"RSTContainer" : {					"sourceCode" : [						"add: aShape",						"",						"\tself",						"\t\tassert: aShape notNil",						"\t\tdescription: 'Nil cannot be added to a canvas'.",						"\taShape",						"\t\taddedIn: self;",						"\t\trenderOn: self.",						"\t^ aShape"					],					"body" : [						"self",						"\tassert: aShape notNil",						"\tdescription: 'Nil cannot be added to a canvas'.",						"aShape",						"\taddedIn: self;",						"\trenderOn: self.",						"^ aShape"					],					"isTestMethod" : false,					"category" : "adding nodes edges",					"comment" : [ ],					"hash" : 24777693,					"argumentNames" : [						"aShape"					]				},				"RelationSet" : {					"sourceCode" : [						"add: anObject",						"",						"\t(self includes: anObject) ifTrue: [ ^ anObject ].",						"",						"\tslot add: anObject to: owner.",						"\t^ set add: anObject"					],					"body" : [						"(self includes: anObject) ifTrue: [ ^ anObject ].",						"",						"slot add: anObject to: owner.",						"^ set add: anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 22051305,					"argumentNames" : [						"anObject"					]				},				"CharacterSetComplement" : {					"sourceCode" : [						"add: aCharacter",						"",						"\t\"a character is present if not absent, so adding a character is removing it from the absent\"",						"",						"\t(absent includes: aCharacter) ifTrue: [ ",						"\t\tbyteArrayMapCache := nil.",						"\t\tabsent remove: aCharacter ].",						"\t^ aCharacter"					],					"body" : [						"(absent includes: aCharacter) ifTrue: [ ",						"\tbyteArrayMapCache := nil.",						"\tabsent remove: aCharacter ].",						"^ aCharacter"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"a character is present if not absent, so adding a character is removing it from the absent"					],					"hash" : 18719588,					"argumentNames" : [						"aCharacter"					]				},				"FLLargeIdentitySet" : {					"sourceCode" : [						"add: anObject",						"",						"\t| hash |",						"\tanObject ifNil: [ ",						"\t\tincludesNil ifFalse: [ ",						"\t\t\tincludesNil := true.",						"\t\t\ttally := tally + 1 ].",						"\t\t^ anObject ].",						"\t(array at: (hash := anObject largeIdentityHash \\\\ 4096 + 1))",						"\t\tifNil: [ ",						"\t\t\tarray at: hash put: (Array with: anObject).",						"\t\t\ttallies at: hash put: 1.",						"\t\t\ttally := tally + 1 ]",						"\t\tifNotNil: [ :list | ",						"\t\t\t(list fuelPointsTo: anObject) ifFalse: [ ",						"\t\t\t\t| newIndex |",						"\t\t\t\ttally := tally + 1.",						"\t\t\t\tlist size < (newIndex := (tallies at: hash) + 1)",						"\t\t\t\t\tifFalse: [ list at: newIndex put: anObject ]",						"\t\t\t\t\tifTrue: [ ",						"\t\t\t\t\t\t| newList |",						"\t\t\t\t\t\tnewList := Array new: list size * 2.",						"\t\t\t\t\t\tnewList",						"\t\t\t\t\t\t\treplaceFrom: 1",						"\t\t\t\t\t\t\tto: list size",						"\t\t\t\t\t\t\twith: list",						"\t\t\t\t\t\t\tstartingAt: 1;",						"\t\t\t\t\t\t\tat: newIndex put: anObject.",						"\t\t\t\t\t\tarray at: hash put: newList ].",						"\t\t\t\ttallies at: hash put: newIndex ] ].",						"\t^ anObject"					],					"body" : [						"| hash |",						"anObject ifNil: [ ",						"\tincludesNil ifFalse: [ ",						"\t\tincludesNil := true.",						"\t\ttally := tally + 1 ].",						"\t^ anObject ].",						"(array at: (hash := anObject largeIdentityHash \\\\ 4096 + 1))",						"\tifNil: [ ",						"\t\tarray at: hash put: (Array with: anObject).",						"\t\ttallies at: hash put: 1.",						"\t\ttally := tally + 1 ]",						"\tifNotNil: [ :list | ",						"\t\t(list fuelPointsTo: anObject) ifFalse: [ ",						"\t\t\t| newIndex |",						"\t\t\ttally := tally + 1.",						"\t\t\tlist size < (newIndex := (tallies at: hash) + 1)",						"\t\t\t\tifFalse: [ list at: newIndex put: anObject ]",						"\t\t\t\tifTrue: [ ",						"\t\t\t\t\t| newList |",						"\t\t\t\t\tnewList := Array new: list size * 2.",						"\t\t\t\t\tnewList",						"\t\t\t\t\t\treplaceFrom: 1",						"\t\t\t\t\t\tto: list size",						"\t\t\t\t\t\twith: list",						"\t\t\t\t\t\tstartingAt: 1;",						"\t\t\t\t\t\tat: newIndex put: anObject.",						"\t\t\t\t\tarray at: hash put: newList ].",						"\t\t\ttallies at: hash put: newIndex ] ].",						"^ anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19638887,					"argumentNames" : [						"anObject"					]				},				"WeakKeyDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself at: anAssociation key put: anAssociation value.",						"\t^ anAssociation"					],					"body" : [						"self at: anAssociation key put: anAssociation value.",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19011575,					"argumentNames" : [						"anAssociation"					]				},				"MetacelloVersionLoadDirective" : {					"sourceCode" : [						"add: aDirective",						"",						"\tself loadDirectives add: aDirective"					],					"body" : [						"self loadDirectives add: aDirective"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 18169640,					"argumentNames" : [						"aDirective"					]				},				"TextEmphasis" : {					"sourceCode" : [						"add: anotherCodeOrEmphasis",						"",						"\t\"add anotherCodeOrEmphasis to me\"",						"",						"\temphasisCode := emphasisCode bitOr: anotherCodeOrEmphasis value"					],					"body" : [						"emphasisCode := emphasisCode bitOr: anotherCodeOrEmphasis value"					],					"isTestMethod" : false,					"category" : "combining",					"comment" : [						"add anotherCodeOrEmphasis to me"					],					"hash" : 19491969,					"argumentNames" : [						"anotherCodeOrEmphasis"					]				},				"SpAbstractAdapter" : {					"sourceCode" : [						"add: aWidget",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 18446148,					"argumentNames" : [						"aWidget"					]				},				"SpValidationReport" : {					"sourceCode" : [						"add: aValidationFailure",						"",						"\terrors add: aValidationFailure"					],					"body" : [						"errors add: aValidationFailure"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20845641,					"argumentNames" : [						"aValidationFailure"					]				},				"ZnMultiValueDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself checkLimitForKey: anAssociation key.",						"\t^ super add: anAssociation"					],					"body" : [						"self checkLimitForKey: anAssociation key.",						"^ super add: anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19142089,					"argumentNames" : [						"anAssociation"					]				},				"SpAbstractMorphicAdapter" : {					"sourceCode" : [						"add: anAdapter",						"",						"\tself widgetDo: [ :w | w spEnsureLayoutAndAddMorph: anAdapter widget ]"					],					"body" : [						"self widgetDo: [ :w | w spEnsureLayoutAndAddMorph: anAdapter widget ]"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 18517156,					"argumentNames" : [						"anAdapter"					]				}			}		},		"do:" : {			"senders" : [				"AIBFS>>#resetValues",				"AIBFS>>#run",				"AIBellmanFord>>#reset",				"AIBellmanFord>>#relaxEdgesToNegativeInfinity",				"AIBellmanFord>>#relaxEdges",				"AIDijkstra>>#reset",				"AIDijkstra>>#run",				"AIGraphAlgorithm>>#addNodesFrom:childrenBlock:",				"AIGraphAlgorithm>>#edgesByPair:",				"AIGraphAlgorithm>>#edges:from:toAll:",				"AIGraphAlgorithm>>#nodes:",				"AIGraphAlgorithm>>#edges:from:to:weight:",				"AIGraphAlgorithm>>#addNodesFromDifferentGraph:",				"AIGraphAlgorithm>>#edges:from:to:",				"AIGraphReducer>>#replaceReferencesToMergedNodes",				"AIGraphReducer>>#replaceReferencesToMergedNode:",				"AIGraphReducer>>#reduceGraph",				"AIGraphReducerTest>>#testNoCycle",				"AIHits>>#initializeNodes",				"AIHits>>#normalizeScores",				"AIHits>>#run",				"AIHitsTest>>#testComplexCycle",				"AIHitsTest>>#testNestedCycle",				"AIHitsTest>>#testCycle",				"AIHitsTest>>#testSimpleW",				"AIHitsTest>>#testComplexWCycle",				"AIHitsTest>>#testSimple",				"AIHitsTest>>#testGraphForHits",				"AIKruskal>>#run",				"AIShortestPathInDAG>>#initializePathWeights",				"AIShortestPathInDAG>>#run",				"AITarjan>>#addNewSccForNode:",				"AITarjan>>#run",				"AITarjan>>#traverse:",				"AITarjanTest>>#testNestedCycle",				"AITarjanTest>>#testComplexCycle2",				"AITarjanTest>>#testNoCycle",				"AITopologicalSorting>>#removeEdgesOf:",				"AIWeightedHitsTest>>#testComplexWeighted",				"AIWeightedHitsTest>>#testComplexWeighted2",				"AIWeightedHitsTest>>#testSimpleW",				"AIWeightedHitsTest>>#testWithoutCyclesComplexWeightedGraph",				"AIWeightedHitsTest>>#testComplexWeighted3",				"AbsolutePath>>#asZnUrl",				"AbstractDelayTicker>>#saveResumptionTimes:",				"AbstractDelayTicker>>#restoreResumptionTimes:",				"AbstractDrTestsPresenter>>#locked:",				"AbstractEnumerationVisitorTest>>#assertEntries:are:",				"AbstractFileReference>>#deleteAllChildren",				"AbstractFileReference>>#childGeneratorBlock:matching:",				"AbstractTonelTest>>#tearDown",				"AbstractTool>>#removeClasses:",				"AbstractTool class>>#undoLastRefactoring",				"AbstractTutorial class>>#contentsOfTutorials",				"AbstractUITestCase>>#runCase",				"AbstractWorldRenderer>>#displayWorldState:ofWorld:",				"AbstractWorldRenderer class>>#logRenderingTimeMeasurements:",				"AlignmentMorph>>#inARow:",				"AlignmentMorph>>#inARightColumn:",				"AlignmentMorph>>#inAColumn:",				"AlignmentMorph class>>#doRebuildMethodDictionary",				"AlignmentMorph class>>#fileOutLocalMethodsInCategory:on:",				"AlignmentMorph class>>#removeFromSystem:",				"AlignmentMorph class>>#traitComposition:",				"AlignmentMorph class>>#recategorizeSelector:from:to:",				"Announcer>>#inspectionSubscriptions",				"AnnouncerTest>>#testAccessingSubscribers",				"Archive>>#addTree:relativeTo:match:",				"ArgumentVariableTest>>#testDeclaringNode",				"Array>>#beReadOnlyLiteral",				"Array>>#recursiveDo:",				"Array>>#settingStoreOn:",				"Array>>#asTestMatrix",				"Array2D>>#do:",				"Array2D>>#atColumn:put:",				"Array2D>>#atRow:put:",				"Array2D class>>#diagonal:",				"Array2DTest>>#testCollectCreatesANewMatrix",				"Array2DTest>>#testAtAllPut",				"ArrayTest>>#testCopyNonEmptyWithout",				"ArrayTest>>#test0FixturePutOneOrMoreElementsTest",				"ArrayTest>>#testKeysAndValuesDo",				"ArrayTest>>#testIntersectionItself",				"ArrayTest>>#testAsByteArray",				"ArrayTest>>#testAtAllIndexesPut",				"ArrayTest>>#testAsCommaStringMore",				"ArrayTest>>#testCopyNonEmptyWith",				"ArrayTest>>#testCopyEmptyWithoutAll",				"ArrayTest>>#testCopyReplaceAllWithManyOccurrence",				"ArrayTest>>#testWithAll",				"ArrayTest>>#testCopyNonEmptyWithoutAll",				"ArrayTest>>#testDo",				"ArrayTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"ArrayTest>>#testAsSetWithEqualsElements",				"ArrayTest>>#testPairsCollect",				"ArrayTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"ArrayTest>>#testCopyNonEmpty",				"ArrayTest>>#testAsIdentitySetWithEqualsElements",				"ArrayTest>>#testAsStringOnDelimiterLastOne",				"ArrayTest>>#testDo2",				"ArrayTest>>#testConcatenation",				"ArrayTest>>#test0SortingArrayedTest",				"ArrayTest>>#testOccurrencesOf",				"ArrayTest>>#testAsSortedCollection",				"ArrayTest>>#test0FixtureTConvertAsSetForMultiplinessTest",				"ArrayTest>>#test0FixtureIncludeTest",				"ArrayTest>>#testSorted",				"ArrayTest>>#testShuffleChangeOrder",				"ArrayTest>>#test0FixtureCopyPartOfSequenceableTest",				"ArrayTest>>#test0FixtureOccurrencesForMultiplinessTest",				"ArrayTest>>#assertSameContents:whenConvertedTo:",				"ArrayTest>>#testSortedUsingBlock",				"ArrayTest>>#testCopyNonEmptyWithoutNotIncluded",				"ArrayTest>>#testAsSortedCollectionWithSortBlock",				"ArrayTest>>#testAsIdentitySetWithIdentityEqualsElements",				"ArrayTest>>#test0CopyTest",				"ArrayTest>>#testAsStringOnDelimiterMore",				"ArrayTest>>#testSort",				"ArrayTest>>#testSortUsingSortBlock",				"ArrayTest>>#testAtAllPut",				"ArrayTest>>#assertNoDuplicates:whenConvertedTo:",				"ArrayTest>>#testDifference",				"ArrayTest>>#testAsStringOnDelimiterOne",				"ArrayTest>>#testShuffled",				"ArrayTest>>#testDifferenceWithSeparateCollection",				"ArrayTest>>#testDifferenceWithNonNullIntersection",				"ArrayedCollection>>#fillFrom:with:",				"ArrayedCollection>>#countingSort:maximum:",				"AthensBalloonEngine>>#strokeBezierShape:width:",				"AthensBalloonEngine>>#fillBezierShape:",				"AthensCairoCanvas class>>#doRebuildMethodDictionary",				"AthensCairoCanvas class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoCanvas class>>#removeFromSystem:",				"AthensCairoCanvas class>>#traitComposition:",				"AthensCairoCanvas class>>#recategorizeSelector:from:to:",				"AthensCairoGradientPaint>>#initializeRadialBetween:extending:and:extending:withColorRamp:",				"AthensCairoGradientPaint>>#populateRamp:",				"AthensCairoMatrix class>>#doRebuildMethodDictionary",				"AthensCairoMatrix class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoMatrix class>>#removeFromSystem:",				"AthensCairoMatrix class>>#traitComposition:",				"AthensCairoMatrix class>>#recategorizeSelector:from:to:",				"AthensCairoMeshGradientPaint>>#populatePatches:",				"AthensCairoPaintMode class>>#doRebuildMethodDictionary",				"AthensCairoPaintMode class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPaintMode class>>#removeFromSystem:",				"AthensCairoPaintMode class>>#traitComposition:",				"AthensCairoPaintMode class>>#recategorizeSelector:from:to:",				"AthensCairoPath class>>#doRebuildMethodDictionary",				"AthensCairoPath class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPath class>>#removeFromSystem:",				"AthensCairoPath class>>#traitComposition:",				"AthensCairoPath class>>#recategorizeSelector:from:to:",				"AthensCairoPathBuilder class>>#doRebuildMethodDictionary",				"AthensCairoPathBuilder class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPathBuilder class>>#removeFromSystem:",				"AthensCairoPathBuilder class>>#traitComposition:",				"AthensCairoPathBuilder class>>#recategorizeSelector:from:to:",				"AthensCairoPatternPaint class>>#doRebuildMethodDictionary",				"AthensCairoPatternPaint class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPatternPaint class>>#removeFromSystem:",				"AthensCairoPatternPaint class>>#traitComposition:",				"AthensCairoPatternPaint class>>#recategorizeSelector:from:to:",				"AthensCairoSolidPaint class>>#doRebuildMethodDictionary",				"AthensCairoSolidPaint class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoSolidPaint class>>#removeFromSystem:",				"AthensCairoSolidPaint class>>#traitComposition:",				"AthensCairoSolidPaint class>>#recategorizeSelector:from:to:",				"AthensCairoStrokePaint class>>#doRebuildMethodDictionary",				"AthensCairoStrokePaint class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoStrokePaint class>>#removeFromSystem:",				"AthensCairoStrokePaint class>>#traitComposition:",				"AthensCairoStrokePaint class>>#recategorizeSelector:from:to:",				"AthensCairoSurface class>>#doRebuildMethodDictionary",				"AthensCairoSurface class>>#removeFromSystem:",				"AthensCairoSurface class>>#traitComposition:",				"AthensCairoSurface class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoSurface class>>#recategorizeSelector:from:to:",				"AthensCairoText class>>#doRebuildMethodDictionary",				"AthensCairoText class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoText class>>#removeFromSystem:",				"AthensCairoText class>>#traitComposition:",				"AthensCairoText class>>#recategorizeSelector:from:to:",				"AthensCairoTransform class>>#doRebuildMethodDictionary",				"AthensCairoTransform class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoTransform class>>#removeFromSystem:",				"AthensCairoTransform class>>#traitComposition:",				"AthensCairoTransform class>>#recategorizeSelector:from:to:",				"AthensCompositePaint>>#athensFillRectangle:on:",				"AthensCompositePaint>>#athensFillPath:on:",				"AthensCompositeStrokePaint>>#athensFillRectangle:on:",				"AthensFontDescription>>#asString",				"AthensLineSegment>>#consumeShapes:current:delta:",				"AthensPathSegment>>#sendCommandsTo:",				"AthensSimpleTreeNode>>#renderOn:",				"AthensSimpleTreeNode>>#layoutWidth",				"AthensSimpleTreeNode>>#layoutHorizontally:",				"AthensTextComposer>>#scan:for:",				"AthensTextLine>>#renderOn:",				"AthensTextRenderer>>#render:lines:on:",				"AthensTextScanner>>#applyAttributes",				"AthensTiger>>#draw",				"AthensTiger>>#readParts",				"AthensTiger class>>#commands",				"AthensTreeDemo>>#layOutGeometry",				"Author class>>#fixStamp:",				"BMPReadWriter class>>#displayAllFrom:",				"BMPReadWriter class>>#readAllFrom:",				"Bag>>#size",				"BagTest>>#testCopyNonEmptyWithout",				"BagTest>>#testIntersectionItself",				"BagTest>>#testAsByteArray",				"BagTest>>#testPrintOnDelimiterLast",				"BagTest>>#testAsCommaStringMore",				"BagTest>>#testAsSortedCollection",				"BagTest>>#testCopyNonEmptyWith",				"BagTest>>#testPrintElementsOn",				"BagTest>>#test0FixtureOccurrencesForMultiplinessTest",				"BagTest>>#testCopyEmptyWithoutAll",				"BagTest>>#testWithAll",				"BagTest>>#testCopyNonEmptyWithoutAll",				"BagTest>>#testCopyNonEmptyWithoutNotIncluded",				"BagTest>>#testPrintOnDelimiter",				"BagTest>>#testAsSortedCollectionWithSortBlock",				"BagTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"BagTest>>#test0CopyTest",				"BagTest>>#testAsSetWithEqualsElements",				"BagTest>>#testAsStringOnDelimiterMore",				"BagTest>>#testPrintOn",				"BagTest>>#assertNoDuplicates:whenConvertedTo:",				"BagTest>>#testAsCommaStringOne",				"BagTest>>#testDifference",				"BagTest>>#testAsStringOnDelimiterOne",				"BagTest>>#testAsStringOnDelimiterLastMore",				"BagTest>>#testConcatenationWithDuplicate",				"BagTest>>#testCopyNonEmpty",				"BagTest>>#test0FixtureOccurrencesTest",				"BagTest>>#testAsIdentitySetWithEqualsElements",				"BagTest>>#testRemoveAllSuchThat",				"BagTest>>#testAsStringOnDelimiterLastOne",				"BagTest>>#testRemoveAllFoundIn",				"BagTest>>#testDifferenceWithSeparateCollection",				"BagTest>>#testDifferenceWithNonNullIntersection",				"BagTest>>#testConcatenation",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"BaselineOfFuelPlatform>>#loadAll",				"BaselineOfIDE>>#registerProject:externalProject:baseline:otherBaselines:",				"BaselineOfMorphic>>#postload:package:",				"BaselineOfMorphic>>#exportBitmapDejaVuSans",				"BaselineOfRoassal3>>#registerPackages:",				"BasicCommandLineHandler>>#list",				"Behavior>>#allInstancesDo:",				"Behavior>>#dependentClasses",				"Behavior>>#allSelectorsAboveUntil:",				"Behavior>>#compileAllFrom:",				"Behavior>>#selectSubclasses:",				"Behavior>>#withAllSubclassesDo:",				"Behavior>>#selectSuperclasses:",				"Behavior>>#asShapeSubclasses",				"Behavior>>#allSubclassesWithLevelDo:startingLevel:",				"BehaviorTest>>#testAllReferencesTo",				"Bitmap>>#readCompressedFrom:",				"Bitmap>>#storeBits:to:on:",				"BlockClosureTest>>#testHasMethodReturn",				"BlockClosureTest>>#testOneArgument",				"BorderedMorph>>#linkSubmorphsToSplitters",				"BorderedMorph>>#addBorderStyleMenuItems:hand:",				"BorderedMorph>>#removePaneSplitters",				"BorderedMorph>>#addPaneSplitters",				"BorderedMorph>>#removeCornerGrips",				"Breakpoint class>>#removeFromMethod:",				"Breakpoint class>>#removeFrom:",				"Breakpoint class>>#removeAll",				"Breakpoint class>>#isInstalledIn:",				"Breakpoint class>>#handleClassRemoved:",				"BreakpointIconStyler>>#iconBlock:",				"ByteArray>>#printHexOn:",				"ByteArray>>#hex",				"BytecodeEncoder class>>#specialSelectors",				"CBCritiquesCache>>#itemRemoved:",				"CBCritiquesCache>>#addFalsePositiveClass:",				"CBCritiquesCache>>#removeFalsePositiveClass:",				"CBCritiquesCache>>#removeRule:",				"CBCritiquesCache>>#initCache",				"CBCritiquesCache>>#logFalsePositiveClassInManifest",				"CBCritiquesCache>>#removeFalsePositiveRule:forPackage:",				"CBCritiquesCache>>#logFalsePositiveRulesInManifest",				"CBCritiquesCache>>#addFalsePositiveRule:forPackage:",				"CBCritiquesRuleGroup>>#do:",				"CBUnifiedDiffJoinSection>>#createHighlightsFrom:to:withCopy:flagRemove:",				"CDAbstractClassDefinitionParser>>#handleSlotsNodesFromArrayNode:",				"CDBehaviorDefinitionNode>>#slots:",				"CDClassDefinitionNode>>#sharedSlots:",				"CDClassDefinitionNode>>#sharedPools:",				"CDFluidClassDefinitionParser>>#visitCascadeNode:",				"CTBinaryTreeAbstractTest class>>#doRebuildMethodDictionary",				"CTBinaryTreeAbstractTest class>>#removeFromSystem:",				"CTBinaryTreeAbstractTest class>>#traitComposition:",				"CTBinaryTreeAbstractTest class>>#fileOutLocalMethodsInCategory:on:",				"CTBinaryTreeAbstractTest class>>#recategorizeSelector:from:to:",				"CTBinomialTree>>#shapes:edges:",				"CTBlockClosureCategory class>>#doRebuildMethodDictionary",				"CTBlockClosureCategory class>>#removeFromSystem:",				"CTBlockClosureCategory class>>#traitComposition:",				"CTBlockClosureCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTBlockClosureCategory class>>#recategorizeSelector:from:to:",				"CTCollapsedSccDfsPainter>>#treeTuples:lineBuilder:",				"CTCollapsedSccDfsPainter>>#dfsWalk:",				"CTCollapsedSccDfsPainter>>#crossTuples:lineBuilder:",				"CTCollectionCategory class>>#doRebuildMethodDictionary",				"CTCollectionCategory class>>#removeFromSystem:",				"CTCollectionCategory class>>#traitComposition:",				"CTCollectionCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTCollectionCategory class>>#recategorizeSelector:from:to:",				"CTDfsPainter>>#layoutTuples:lineBuilder:",				"CTDfsPainter>>#forbiddenShapes:withDfsEdgesDo:",				"CTDifferenceCollectionCategory class>>#doRebuildMethodDictionary",				"CTDifferenceCollectionCategory class>>#removeFromSystem:",				"CTDifferenceCollectionCategory class>>#traitComposition:",				"CTDifferenceCollectionCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTDifferenceCollectionCategory class>>#recategorizeSelector:from:to:",				"CTEitherCategory class>>#doRebuildMethodDictionary",				"CTEitherCategory class>>#removeFromSystem:",				"CTEitherCategory class>>#traitComposition:",				"CTEitherCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTEitherCategory class>>#recategorizeSelector:from:to:",				"CTHeapQTest>>#testUpdate",				"CTHeapQTest>>#testHeapify",				"CTLayeredDfsPainter>>#dfsWalk:",				"CTLinkedStoragePoolArray2D>>#at:at:",				"CTLinkedStoragePoolArray2D class>>#dimensions:terms:",				"CTLinkedStoragePoolPolynomial class>>#termAssociations:",				"CTLinkedStoragePoolPolynomialTest class>>#doRebuildMethodDictionary",				"CTLinkedStoragePoolPolynomialTest class>>#removeFromSystem:",				"CTLinkedStoragePoolPolynomialTest class>>#traitComposition:",				"CTLinkedStoragePoolPolynomialTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinkedStoragePoolPolynomialTest class>>#recategorizeSelector:from:to:",				"CTLinkedStoragePoolTest class>>#doRebuildMethodDictionary",				"CTLinkedStoragePoolTest class>>#removeFromSystem:",				"CTLinkedStoragePoolTest class>>#traitComposition:",				"CTLinkedStoragePoolTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinkedStoragePoolTest class>>#recategorizeSelector:from:to:",				"CTLinksLinkTest class>>#doRebuildMethodDictionary",				"CTLinksLinkTest class>>#removeFromSystem:",				"CTLinksLinkTest class>>#traitComposition:",				"CTLinksLinkTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinksLinkTest class>>#recategorizeSelector:from:to:",				"CTLinksValueLinkTest class>>#doRebuildMethodDictionary",				"CTLinksValueLinkTest class>>#removeFromSystem:",				"CTLinksValueLinkTest class>>#traitComposition:",				"CTLinksValueLinkTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinksValueLinkTest class>>#recategorizeSelector:from:to:",				"CTMaybeCategory class>>#doRebuildMethodDictionary",				"CTMaybeCategory class>>#removeFromSystem:",				"CTMaybeCategory class>>#traitComposition:",				"CTMaybeCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTMaybeCategory class>>#recategorizeSelector:from:to:",				"CTOrderPreservingTree>>#parent:children:",				"CTOrderPreservingTree>>#asArray",				"CTOrderPreservingTree>>#pre:post:withIndex:parent:allChildren:",				"CTOrderPreservingTree>>#leaves",				"CTOrderPreservingTree>>#pre:post:",				"CTOrderPreservingTree>>#associationsDo:",				"CTProbabilityDistributionCategory class>>#doRebuildMethodDictionary",				"CTProbabilityDistributionCategory class>>#removeFromSystem:",				"CTProbabilityDistributionCategory class>>#traitComposition:",				"CTProbabilityDistributionCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTProbabilityDistributionCategory class>>#recategorizeSelector:from:to:",				"CTProductNumberCategory class>>#doRebuildMethodDictionary",				"CTProductNumberCategory class>>#removeFromSystem:",				"CTProductNumberCategory class>>#traitComposition:",				"CTProductNumberCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTProductNumberCategory class>>#recategorizeSelector:from:to:",				"CTSccDfsPainter>>#backTuples:lineBuilder:",				"CTSccDfsPainter>>#layoutOn:edges:",				"CTSccDfsPainter>>#dfsWalk:",				"CTSkipList>>#asShapeList:",				"CTSkipListTest>>#compiledMethods:wrapping:then:",				"CTSkipListTest class>>#doRebuildMethodDictionary",				"CTSkipListTest class>>#removeFromSystem:",				"CTSkipListTest class>>#traitComposition:",				"CTSkipListTest class>>#fileOutLocalMethodsInCategory:on:",				"CTSkipListTest class>>#recategorizeSelector:from:to:",				"CTSlotDescriptorsVisitor>>#visitCompiledCode:",				"CTStateCategory class>>#doRebuildMethodDictionary",				"CTStateCategory class>>#removeFromSystem:",				"CTStateCategory class>>#traitComposition:",				"CTStateCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTStateCategory class>>#recategorizeSelector:from:to:",				"CTSumNumberCategory class>>#doRebuildMethodDictionary",				"CTSumNumberCategory class>>#removeFromSystem:",				"CTSumNumberCategory class>>#traitComposition:",				"CTSumNumberCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTSumNumberCategory class>>#recategorizeSelector:from:to:",				"CTWriterCategory class>>#doRebuildMethodDictionary",				"CTWriterCategory class>>#removeFromSystem:",				"CTWriterCategory class>>#traitComposition:",				"CTWriterCategory class>>#fileOutLocalMethodsInCategory:on:",				"CTWriterCategory class>>#recategorizeSelector:from:to:",				"CairoFontFace class>>#doRebuildMethodDictionary",				"CairoFontFace class>>#fileOutLocalMethodsInCategory:on:",				"CairoFontFace class>>#removeFromSystem:",				"CairoFontFace class>>#traitComposition:",				"CairoFontFace class>>#recategorizeSelector:from:to:",				"CairoFontMetricsProvider class>>#doRebuildMethodDictionary",				"CairoFontMetricsProvider class>>#fileOutLocalMethodsInCategory:on:",				"CairoFontMetricsProvider class>>#removeFromSystem:",				"CairoFontMetricsProvider class>>#traitComposition:",				"CairoFontMetricsProvider class>>#recategorizeSelector:from:to:",				"CairoFontOptions class>>#doRebuildMethodDictionary",				"CairoFontOptions class>>#fileOutLocalMethodsInCategory:on:",				"CairoFontOptions class>>#removeFromSystem:",				"CairoFontOptions class>>#traitComposition:",				"CairoFontOptions class>>#recategorizeSelector:from:to:",				"CairoFreetypeFontRenderer class>>#doRebuildMethodDictionary",				"CairoFreetypeFontRenderer class>>#fileOutLocalMethodsInCategory:on:",				"CairoFreetypeFontRenderer class>>#removeFromSystem:",				"CairoFreetypeFontRenderer class>>#traitComposition:",				"CairoFreetypeFontRenderer class>>#recategorizeSelector:from:to:",				"CairoScaledFont class>>#doRebuildMethodDictionary",				"CairoScaledFont class>>#fileOutLocalMethodsInCategory:on:",				"CairoScaledFont class>>#removeFromSystem:",				"CairoScaledFont class>>#traitComposition:",				"CairoScaledFont class>>#recategorizeSelector:from:to:",				"CalendarMorph>>#mouseDown:",				"CalendarMorph>>#mouseUp:",				"CalendarMorph>>#drawDaysOn:",				"Categorizer>>#classifyAll:under:",				"Categorizer>>#categories:",				"Categorizer>>#changeFromCategorySpecs:",				"Categorizer class>>#sortAllCategories",				"ChangeSet>>#checkForSlips",				"ChangeSet>>#fileOutOn:",				"ChangeSet>>#forgetAllChangesFoundIn:",				"ChangeSet>>#assimilateAllChangesFoundIn:",				"ChangeSet>>#methodsWithoutComments",				"ChangeSet>>#trimHistory",				"ChangeSet>>#methodsWithoutClassifications",				"ChangeSet>>#fileOutPSFor:on:",				"ChangeSet class>>#gatherChangeSets",				"ChangeSet class>>#reorderChangeSets",				"ChangeSet class>>#removeChangeSetsNamedSuchThat:",				"ChangeSet class>>#fileOutChangeSetsNamed:",				"ChangesBrowser>>#updateChanges",				"ChangesBrowser>>#accept",				"CharacterScanner>>#setFont",				"CharacterSet>>#do:",				"CharacterSet>>#byteComplement",				"CharacterSet>>#asString",				"CharacterTest>>#testPrintStringAll",				"CharacterTest>>#testIsSeparator",				"CharacterTest>>#testStoreStringAll",				"CheckboxMorph class>>#doRebuildMethodDictionary",				"CheckboxMorph class>>#fileOutLocalMethodsInCategory:on:",				"CheckboxMorph class>>#removeFromSystem:",				"CheckboxMorph class>>#traitComposition:",				"CheckboxMorph class>>#recategorizeSelector:from:to:",				"ClapCommand>>#parametersDo:",				"ClapCommandLineExamples>>#sayHelloOn:",				"ClapCompositeMatch>>#validateOn:",				"ClapDocumentationFormatter>>#tabularize:",				"ClapParameterized>>#parametersDo:",				"ClapParameterized>>#addAll:",				"ClapPharoVersion>>#showVersionsNamed:",				"ClapValidationReport>>#printOn:",				"ClapValidationReport>>#addAll:",				"Class>>#subclassesDo:",				"Class>>#declareClassVariables:",				"Class>>#addClassVariable:",				"Class>>#classAnnotationsDo:",				"Class>>#sharedPoolsDo:",				"Class>>#fileOutPool:onFileStream:",				"Class>>#applyDeprecation",				"Class>>#addInstVarNamed:",				"Class>>#removeSharedPool:",				"Class>>#asFullRingDefinition",				"Class>>#innerBindingOf:",				"Class>>#asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackageKeys:in:",				"Class>>#addSubclass:",				"Class>>#possibleVariablesFor:continuedFrom:",				"Class>>#dependentClassesWithOccurences",				"Class>>#fileOutSharedPoolsOn:",				"Class>>#anyUserOfClassVarNamed:",				"Class>>#sharing:",				"ClassAPIHelpBuilder>>#buildSubnodesForSubclasses",				"ClassAPIHelpBuilder>>#buildMethodTopicsOn:for:",				"ClassAnnotation class>>#cleanRedefinedGarbage",				"ClassAnnotation class>>#registeredInstancesDo:",				"ClassAnnotationRegistry>>#addAllFromPragmas:",				"ClassChangeRecord>>#assimilateAllChangesIn:",				"ClassDescription>>#fileOutCategory:on:",				"ClassDescription>>#fileOutChangedMessages:on:",				"ClassDescription>>#newInstanceFrom:variable:size:",				"ClassDescription>>#allProtocolsUpTo:",				"ClassDescription>>#copyAll:from:classified:",				"ClassDescription>>#fileOutOn:",				"ClassDescription>>#removeProtocol:",				"ClassDescription>>#classesThatImplementAllOf:",				"ClassDescription>>#classCommentBlank",				"ClassDescription>>#reformatAll",				"ClassDescription>>#fileOutLocalMethodsInCategory:on:",				"ClassDescription>>#copyAllCategoriesFrom:",				"ClassDiffBuilder>>#split:",				"ClassFactoryForTestCase>>#cleanUpChangeSetForClassNames:",				"ClassFactoryForTestCase>>#deleteTraits",				"ClassFactoryForTestCase>>#deleteClasses",				"ClassFactoryWithOrganizationTest>>#testMultipleClassCreation",				"ClassFactoryWithOrganizationTest>>#testSingleClassCreation",				"ClassFactoryWithOrganizationTest>>#testSingleClassFastCreation",				"ClassFactoryWithOrganizationTest>>#testClassCreationInDifferentCategories",				"ClassFactoryWithOrganizationTest>>#testClassFastCreationInDifferentCategories",				"ClassHierarchyPrinter>>#printSubclassesOf:",				"ClassHierarchyTest>>#testSubclassInstVar",				"ClassHierarchyTest class>>#fixSlotScope",				"ClassOrganization>>#classify:under:suppressIfDefault:",				"ClassOrganization>>#renameCategory:toBe:",				"ClassOrganization>>#initializeClass:",				"ClassOrganization>>#copyFrom:",				"ClassOrganization>>#removeEmptyCategories",				"ClassOrganization>>#cleanUpCategoriesForClass:",				"ClassRenameFixTest>>#removeEverythingInSetFromSystem:",				"ClassTest>>#tearDown",				"ClassTest>>#testReferencedClasses",				"ClyAbstractClassScope>>#processDynamicMethodGroups:by:",				"ClyAbstractClassScope>>#instanceVariablesOf:do:",				"ClyAbstractClassScope>>#methodGroupsDo:",				"ClyAbstractClassScope>>#methodGroupProvidersDo:",				"ClyAccrossWindowNavigationState>>#createBrowser",				"ClyActiveBreakpointsQueryTest>>#tearDown",				"ClyAddConditionalBreakpointCommand>>#rewriteASTToSimulateExecutionInADifferentContext:",				"ClyAllBasisCritiqueQuery>>#analyzedObjectsDo:",				"ClyAllMethodGroup>>#importMethod:",				"ClyAsyncBrowserQueryResultAdapter>>#prepareItems:",				"ClyAsyncBrowserQueryResultAdapter>>#findItemsSimilarTo:",				"ClyBothMetaLevelClassScope>>#classesDo:",				"ClyBrowserContext>>#initializeForBrowserStateSnapshot",				"ClyBrowserMorph>>#decorateTool:",				"ClyBrowserMorph>>#navigationContextsDo:",				"ClyBrowserMorph>>#update",				"ClyBrowserMorph>>#windowIsClosing",				"ClyBrowserMorph>>#initializeNavigationPanel",				"ClyBrowserQueryResult>>#itemsWhere:",				"ClyBrowserQueryResult>>#itemsStartingAt:count:",				"ClyBrowserQueryResult>>#findItemsSimilarTo:",				"ClyBrowserToolMorph>>#cleanAfterRemove",				"ClyBrowserToolMorph>>#applyDecorations",				"ClyClassGroup>>#removeWithClasses",				"ClyClassGroup>>#importClasses:",				"ClyClassHierarchyMap>>#build",				"ClyClassHierarchyMap>>#allChildrenOf:depth:do:",				"ClyClassHierarchyMap>>#allChildrenOf:do:",				"ClyClassHierarchyMap>>#rootsDo:",				"ClyClassHierarchyScope>>#classesDo:",				"ClyClassHierarchyScope>>#methodsDo:",				"ClyClassSideScope>>#methodsDo:",				"ClyClassVariable>>#detectDefiningClassFrom:ifAbsent:",				"ClyClassWithTraits class>>#doRebuildMethodDictionary",				"ClyClassWithTraits class>>#fileOutLocalMethodsInCategory:on:",				"ClyClassWithTraits class>>#removeFromSystem:",				"ClyClassWithTraits class>>#traitComposition:",				"ClyClassWithTraits class>>#recategorizeSelector:from:to:",				"ClyCollapsedDataSource>>#globalPositionOf:",				"ClyCollapsedDataSource>>#forceFullUpdate",				"ClyCollapsedDataSource>>#elementAt:",				"ClyCollapsedDataSource>>#close",				"ClyCollapsedDataSource>>#openOn:",				"ClyCollapsedDataSource>>#findDataSourceSameAs:ifNone:",				"ClyCompositeQuery>>#decorateResultMethodEditor:",				"ClyCompositeQuery>>#decorateItemGroup:",				"ClyCompositeQuery>>#fixStateBeforeExecution",				"ClyCompositeQuery>>#printExtraInfoOn:",				"ClyCompositeQuery>>#collectMetadataOf:by:",				"ClyCompositeQuery>>#decorateMethodGroupTableCell:of:",				"ClyCompositeQueryTest>>#testFixingStateBeforeExecutionShouldFixSubqueriesState",				"ClyCompositeScope>>#classesDo:",				"ClyCompositeScope>>#collectAllClasses",				"ClyCompositeScope>>#asRBEnvironment",				"ClyCompositeScope>>#bindTo:",				"ClyCompositeScope>>#packagesDo:",				"ClyCompositeScope>>#printDescriptionOn:",				"ClyCompositeScopeTest>>#testAdoptQuery",				"ClyConvertMethodGroupToTagCommand>>#execute",				"ClyCriticDecorator>>#adoptBrowserToolLayout",				"ClyCriticalTextSegmentMorph>>#addItemToMenu:",				"ClyDataSourceSelection>>#printOn:",				"ClyDataSourceSelection>>#groupItemsByType",				"ClyDataSourceSelection>>#updateIfDirty",				"ClyDataSourceUpdateScheduler>>#runUpdateFor:",				"ClyDefaultSystemEnvironmentPlugin>>#checkPackageHasClassGroups:",				"ClyDesiredSelection>>#checkItemsOfCurrentSelection:",				"ClyExpandedDataSource>>#globalPositionOf:",				"ClyExpandedDataSource>>#elementAt:",				"ClyExtensionLastSortedClassResult>>#fillWith:",				"ClyExtensionLastSortedClassResult>>#buildExtensionItemsFrom:",				"ClyFailedTestMethodsQuery>>#buildResult:",				"ClyFileOutCommand>>#execute",				"ClyFullEnvironmentUpdateStrategy>>#publishCollectedChanges",				"ClyGroupedCritiqueResult>>#fillWith:",				"ClyGroupedExtendingPackagesResult>>#fillWith:",				"ClyGroupedVariablesResult>>#groupVariablesByTypeAndDefinition:",				"ClyGroupedVariablesResult>>#fillWithVariables:type:",				"ClyGroupedVariablesTest>>#assertVars:",				"ClyHierarchicalSystemItemsResult>>#buildItemsPerClassFrom:",				"ClyHierarchicalSystemItemsResult>>#fillWith:",				"ClyHierarchicallySortedClassesResult>>#buildItemFor:from:depth:",				"ClyInheritedMethodGroup>>#decorateTableCell:of:",				"ClyJumpToTestClassCommand class>>#doRebuildMethodDictionary",				"ClyJumpToTestClassCommand class>>#fileOutLocalMethodsInCategory:on:",				"ClyJumpToTestClassCommand class>>#removeFromSystem:",				"ClyJumpToTestClassCommand class>>#traitComposition:",				"ClyJumpToTestClassCommand class>>#recategorizeSelector:from:to:",				"ClyJumpToTestMethodCommand>>#execute",				"ClyLocalClassScope>>#classesDo:",				"ClyLocalClassScope>>#methodsDo:",				"ClyMainItemCellMorph>>#buildWithLabelIndentation",				"ClyMainItemCellMorph>>#buildWithFullIndentation",				"ClyMergedHierarchy>>#buildParentMap:for:",				"ClyMergedHierarchy>>#sortFunction:",				"ClyMetaLinkInstallationPresenter>>#initializePresenter",				"ClyMethodCallCountersQueryTest>>#tearDown",				"ClyMethodCodeEditorToolMorph>>#decorateByCritic:",				"ClyMethodCodeEditorToolMorph>>#applyDecorations",				"ClyMethodEditorToolMorph>>#textChanged:",				"ClyMethodEditorToolMorph>>#tagEditingMethod:",				"ClyMethodGroup>>#convertToMethodTag:",				"ClyMethodGroup>>#importMethods:",				"ClyMethodGroup>>#fileOut",				"ClyMethodGroup>>#removeWithMethods",				"ClyMethodScope>>#methodsDo:",				"ClyMethodWatchQueryTest>>#tearDown",				"ClyMoveMethodGroupToClassCommand>>#execute",				"ClyMoveMethodGroupsToPackageCommand>>#execute",				"ClyMultipleClassRelationScope>>#classesRelatedTo:do:",				"ClyNavigationEnvironment>>#detachFromSystem",				"ClyNavigationEnvironment>>#attachToSystem",				"ClyNavigationEnvironment>>#handleSystemChange:",				"ClyNavigationEnvironment>>#pluginsDo:",				"ClyNavigationEnvironment class>>#reset",				"ClyNavigationEnvironment class>>#installNewPlugin:",				"ClyNoTagClassGroup>>#renameClassTagTo:",				"ClyNoTagClassGroup>>#importClass:",				"ClyNoTagMethodGroup>>#renameMethodTagTo:",				"ClyNotebookManager>>#updateToolsForChangedEnvironment",				"ClyNotebookManager>>#updateTabsWith:",				"ClyNotebookManager>>#restoreSelectedTools:",				"ClyNotebookManager>>#windowIsClosing",				"ClyNotebookMorph>>#themeChanged",				"ClyNotebookPageMorph>>#themeChanged",				"ClyOverriddenMethodTableDecorator class>>#decorateTableCell:withCommands:inContext:",				"ClyPackageExtensionScope>>#packagesDo:",				"ClyPackageExtensionScope>>#methodsDo:",				"ClyPackageRichTextCommentEditorToolMorph class>>#doRebuildMethodDictionary",				"ClyPackageRichTextCommentEditorToolMorph class>>#fileOutLocalMethodsInCategory:on:",				"ClyPackageRichTextCommentEditorToolMorph class>>#removeFromSystem:",				"ClyPackageRichTextCommentEditorToolMorph class>>#traitComposition:",				"ClyPackageRichTextCommentEditorToolMorph class>>#recategorizeSelector:from:to:",				"ClyPackageScope>>#includesClassGroupsAffectedBy:",				"ClyPackageScope>>#classesDo:",				"ClyPackageScope>>#classGroupProvidersDo:",				"ClyPackageScope>>#packagesDo:",				"ClyPackageScope>>#methodsDo:",				"ClyProjectScope>>#classesDo:",				"ClyProjectScope>>#projectsDo:",				"ClyProjectScope>>#packagesDo:",				"ClyQueryBrowserContext>>#selectedPackageItems",				"ClyQueryBrowserContext>>#selectedClassItems",				"ClyQueryResult>>#rawItemsDo:",				"ClyRemoveDebuggingCommand>>#execute",				"ClyRemoveMethodGroupCommand>>#execute",				"ClyRichTextClassCommentEditorToolMorph class>>#doRebuildMethodDictionary",				"ClyRichTextClassCommentEditorToolMorph class>>#fileOutLocalMethodsInCategory:on:",				"ClyRichTextClassCommentEditorToolMorph class>>#removeFromSystem:",				"ClyRichTextClassCommentEditorToolMorph class>>#traitComposition:",				"ClyRichTextClassCommentEditorToolMorph class>>#recategorizeSelector:from:to:",				"ClyRunTestsForPackageOrClassGroupCommand>>#execute",				"ClyRunTestsForPackageOrClassGroupCommand>>#runTestsOf:",				"ClyRunTestsFromClassesCommand>>#execute",				"ClyRunTestsFromMethodsCommand>>#runTestItem:",				"ClyRunTestsFromMethodsCommand>>#execute",				"ClyRunTestsFromMethodsCommand>>#defaultMenuIcon",				"ClyRunTestsFromMethodsCommand>>#targetTestCasesFor:",				"ClyScope>>#printBasisOn:",				"ClySwitchQueryScopeCommand>>#fillContextMenu:using:",				"ClySystemEnvironmentScope>>#classesDo:",				"ClySystemEnvironmentScope>>#processesDo:",				"ClySystemEnvironmentScope>>#packagesDo:",				"ClySystemEnvironmentScope>>#projectsDo:",				"ClySystemEnvironmentScope>>#methodsDo:",				"ClyTabManager>>#updateToolsForChangedEnvironment",				"ClyTabManager>>#updateTabsWith:",				"ClyTabManager>>#restoreSelectedTools:",				"ClyTabManager>>#windowIsClosing",				"ClyTaggedClassGroup>>#renameClassTagTo:",				"ClyTaggedClassGroupProvider>>#classGroupsIn:do:",				"ClyTaggedMethodGroup>>#renameMethodTagTo:",				"ClyTaggedMethodGroupProvider>>#buildGroupsFrom:",				"ClyTestedEnvironmentPluginTest>>#testFindingTestCoveringMethod",				"ClyTextEditorToolMorph>>#findAnyString:in:",				"ClyTraitChild1 classTrait>>#doRebuildMethodDictionary",				"ClyTraitChild1 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild1 classTrait>>#traitComposition:",				"ClyTraitChild1 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitChild2 classTrait>>#doRebuildMethodDictionary",				"ClyTraitChild2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild2 classTrait>>#traitComposition:",				"ClyTraitChild2 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitChild2Child classTrait>>#doRebuildMethodDictionary",				"ClyTraitChild2Child classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild2Child classTrait>>#traitComposition:",				"ClyTraitChild2Child classTrait>>#recategorizeSelector:from:to:",				"ClyTraitChild3 classTrait>>#doRebuildMethodDictionary",				"ClyTraitChild3 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild3 classTrait>>#traitComposition:",				"ClyTraitChild3 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitRoot1 classTrait>>#doRebuildMethodDictionary",				"ClyTraitRoot1 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitRoot1 classTrait>>#traitComposition:",				"ClyTraitRoot1 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitRoot2 classTrait>>#doRebuildMethodDictionary",				"ClyTraitRoot2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitRoot2 classTrait>>#traitComposition:",				"ClyTraitRoot2 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitUserScope class>>#classesRelatedTo:do:",				"ClyTypedScope>>#withExtraBasisObjects:",				"CmCommand class>>#doRebuildMethodDictionary",				"CmCommand class>>#fileOutLocalMethodsInCategory:on:",				"CmCommand class>>#removeFromSystem:",				"CmCommand class>>#traitComposition:",				"CmCommand class>>#recategorizeSelector:from:to:",				"CmCommand class>>#commandClassesFromPragma:",				"CmCommandDecorator class>>#doRebuildMethodDictionary",				"CmCommandDecorator class>>#fileOutLocalMethodsInCategory:on:",				"CmCommandDecorator class>>#removeFromSystem:",				"CmCommandDecorator class>>#traitComposition:",				"CmCommandDecorator class>>#recategorizeSelector:from:to:",				"CmCommandGroup class>>#doRebuildMethodDictionary",				"CmCommandGroup class>>#fileOutLocalMethodsInCategory:on:",				"CmCommandGroup class>>#removeFromSystem:",				"CmCommandGroup class>>#traitComposition:",				"CmCommandGroup class>>#recategorizeSelector:from:to:",				"CmCommandGroupDecorator class>>#doRebuildMethodDictionary",				"CmCommandGroupDecorator class>>#fileOutLocalMethodsInCategory:on:",				"CmCommandGroupDecorator class>>#removeFromSystem:",				"CmCommandGroupDecorator class>>#traitComposition:",				"CmCommandGroupDecorator class>>#recategorizeSelector:from:to:",				"CmTDecorable classTrait>>#doRebuildMethodDictionary",				"CmTDecorable classTrait>>#fileOutLocalMethodsInCategory:on:",				"CmTDecorable classTrait>>#traitComposition:",				"CmTDecorable classTrait>>#recategorizeSelector:from:to:",				"CmTDecorator classTrait>>#doRebuildMethodDictionary",				"CmTDecorator classTrait>>#fileOutLocalMethodsInCategory:on:",				"CmTDecorator classTrait>>#traitComposition:",				"CmTDecorator classTrait>>#recategorizeSelector:from:to:",				"CmTWithBasicNameAndDescription classTrait>>#doRebuildMethodDictionary",				"CmTWithBasicNameAndDescription classTrait>>#fileOutLocalMethodsInCategory:on:",				"CmTWithBasicNameAndDescription classTrait>>#traitComposition:",				"CmTWithBasicNameAndDescription classTrait>>#recategorizeSelector:from:to:",				"CmdCommand>>#executeRefactorings",				"CmdMenu>>#asSpMenuPresenter",				"CmdMenuGroup>>#buildContextSubMenuIn:",				"CmdMenuGroup>>#allItemsWhich:",				"CmdMenuGroup>>#synchronizeContentWith:",				"CmdMenuGroup>>#findGroupLike:ifExists:",				"CmdMenuGroup>>#registerContextMenuItemsWithBuilder:",				"CmdMenuGroup>>#inlineContextMenuItemsInto:",				"CmdMenuGroup>>#addToMenuPresenter:",				"CmdMenuGroup>>#buildBrowserToolbar:",				"CmdShortcutActivation class>>#buildSettingsFor:on:",				"CoBenchmarkPackage>>#methodsDo:",				"CoClassVariableFetcher>>#entriesDo:",				"CoCollectionFetcher>>#entriesDo:",				"CoFetcherSequence>>#reset",				"CoFetcherSequence>>#context:",				"CoFetcherSequence>>#filter:",				"CoFetcherSequence>>#entriesDo:",				"CoInitializeInferencedMessageHeuristic>>#buildFetcherFor:inContext:",				"CoInstanceVariableFetcher>>#entriesDo:",				"CoMethodVariableFetcher>>#methodVariableNamesDo:",				"CoMockClass>>#selectorsDo:",				"CoMockClass>>#selectors:",				"CoMockSystemNavigation>>#allClassNamesStartingWith:do:",				"CoMockSystemNavigation>>#allSelectorsStartingWith:do:",				"CoNarrowHistoryFetcher>>#entriesDo:",				"CoSharedPoolVariableFetcher>>#entriesDo:",				"CoStatistics>>#averageTypedCharacters",				"CoTypeInferencer>>#visitBlockNode:",				"CoTypeInferencer>>#visitCascadeNode:",				"CoTypeInferencer>>#visitMethodNode:",				"CoTypeInferencer>>#inferMethod:",				"CoTypeInferencer>>#inferFrom:typeGetters:",				"CodeImporter>>#evaluate",				"Collection>>#reject:thenDo:",				"Collection>>#mergeIntoMetacelloRepositories:",				"Collection>>#hash",				"Collection>>#asArray",				"Collection>>#addToMetacelloRepositories:",				"Collection>>#removeAllFoundIn:",				"Collection>>#includesSubstringAnywhere:",				"Collection>>#collectAll:",				"Collection>>#allSatisfy:",				"Collection>>#addToMetacelloPackages:",				"Collection>>#removeAll:",				"Collection>>#asKeyCombination",				"Collection>>#withIndexDo:",				"Collection>>#includesAll:",				"Collection>>#doª:",				"Collection>>#addAll:",				"Collection>>#groupedBy:",				"Collection>>#identityIncludes:",				"Collection>>#fillFrom:with:",				"Collection>>#removeAllSuchThat:",				"Collection>>#detect:ifFound:ifNone:",				"Collection>>#select:",				"Collection>>#associationsDo:",				"Collection>>#do:separatedBy:",				"Collection>>#includesAny:",				"Collection>>#do:displayingProgress:every:",				"Collection>>#mergeIntoMetacelloPackages:",				"Collection>>#noneSatisfy:",				"Collection>>#flattenOn:",				"Collection>>#flatCollect:as:",				"Collection>>#removeAll",				"Collection>>#anyOne",				"Collection>>#storeOn:",				"Collection>>#inject:into:",				"Collection>>#do:without:",				"Collection>>#detectMax:",				"Collection>>#collect:thenDo:",				"Collection>>#collect:",				"Collection>>#occurrencesOf:",				"Collection>>#count:",				"Collection>>#select:thenDo:",				"Collection>>#removeFromMetacelloPackages:",				"Collection>>#asByteArray",				"Collection>>#size",				"Collection>>#detectMin:",				"Collection>>#removeFromMetacelloRepositories:",				"Collection>>#anySatisfy:",				"CollectionCombinator>>#combineFromIdx:",				"CollectionRootTest>>#testBasicCollect",				"CollectionRootTest>>#testSize",				"CollectionRootTest>>#testDo2",				"CollectionRootTest>>#testDoSeparatedBy",				"CollectionRootTest>>#testDoWithout",				"CollectionRootTest class>>#doRebuildMethodDictionary",				"CollectionRootTest class>>#fileOutLocalMethodsInCategory:on:",				"CollectionRootTest class>>#removeFromSystem:",				"CollectionRootTest class>>#traitComposition:",				"CollectionRootTest class>>#recategorizeSelector:from:to:",				"Color>>#stonOn:",				"ColorChooserMorph class>>#doRebuildMethodDictionary",				"ColorChooserMorph class>>#fileOutLocalMethodsInCategory:on:",				"ColorChooserMorph class>>#removeFromSystem:",				"ColorChooserMorph class>>#traitComposition:",				"ColorChooserMorph class>>#recategorizeSelector:from:to:",				"ColorForm>>#storeOn:",				"ColorTest>>#testAsHexString",				"CommandLineUIManager>>#quitFrom:withMessage:",				"CompiledCode>>#withAllNestedLiteralsDo:",				"CompiledCode>>#primitiveErrorVariableName",				"CompiledCodeTest>>#testHasSelectorSpecialSelectorIndex",				"CompiledCodeTest>>#method1",				"CompiledMethod>>#postCopy",				"CompiledMethod>>#cachePragmas",				"CompiledMethod class>>#cleanUpSourceInTrailers",				"CompiledMethodTest>>#testCopyWithTrailerBytes",				"CompiledMethodTest>>#testComparison",				"CompiledMethodTest>>#testCopy",				"CompiledMethodTrailer>>#qCompress:",				"CompletionEngine>>#smartNeedExtraRemovePairedIn:for:opposite:at:",				"CompletionEngineTest>>#testSmartCharactersOppositeOf",				"CompletionEngineTest>>#testSmartCharacterPairForIfAbsent",				"CompletionEngineTest>>#testSmartBackspace",				"ComplexTest>>#testArcTanh",				"ComplexTest>>#testCosh2MinusSinh2",				"ComplexTest>>#testArcCos",				"ComplexTest>>#testArcSin",				"ComplexTest>>#testArcTan",				"ComplexTest>>#testArcCosPlusArcSin",				"ComplexTest>>#testArcSinh",				"ComplexTest>>#testCos2PlusSin2",				"ComplexTest>>#testArcCosh",				"ComplexUnit>>#calculateBaseUnits",				"ComposableMorph class>>#doRebuildMethodDictionary",				"ComposableMorph class>>#fileOutLocalMethodsInCategory:on:",				"ComposableMorph class>>#removeFromSystem:",				"ComposableMorph class>>#traitComposition:",				"ComposableMorph class>>#recategorizeSelector:from:to:",				"CompositeAnnotationContext>>#printOn:",				"CompositeBorderStyle>>#frameRectangle:on:",				"CompositeFillStyle>>#fillRectangle:on:",				"CompoundUnit>>#negativeExponentsCount",				"CompoundUnit>>#positiveExponentsCount",				"CompressedBoundaryShape>>#bounds",				"ConfigurationCommandLineHandler>>#printMetacelloProjectDetails:",				"ConfigurationCommandLineHandler>>#printConfigurations:",				"ConfigurationOf class>>#ensureMetacello:",				"ConfigurationOf class>>#unloadMetacello",				"ConfigurationOf class>>#bootstrapMetacelloFrom:",				"ConnectionQueue>>#pruneStaleConnections",				"ConnectionQueue>>#destroy",				"Context>>#debugStack:on:",				"Context>>#longStack",				"Context>>#exceptionsToCaptureWhenStepping",				"Context>>#shortStack",				"Context class>>#allInstancesDo:",				"ContextTest>>#testJump",				"ContinuationTest>>#testBlockTemps",				"ContinuationTest>>#testBlockVars",				"CornerRounder>>#saveBitsUnderCornersOf:on:in:corners:",				"CornerRounder>>#tweakCornersOf:on:in:borderWidth:corners:",				"CornerRounder>>#tweakShadowCornersOf:on:in:borderWidth:corners:",				"CoverageDemo>>#addCards",				"CoverageDemo>>#removeMetalink",				"CoverageDemo>>#updateRubricStyle",				"CoverageDemo>>#installMetalink",				"CursorWithMask class>>#derivedFrom:",				"CustomHelpHelpBuilder>>#createTopicFrom:",				"DADependenciesHTMLPublisher>>#publishWarnings",				"DADependencyChecker>>#shortestPathToPackageIntroducingDependency:startingFrom:",				"DADependencyChecker>>#computeTransitiveDependenciesOf:visitedPackages:",				"DADependencyChecker>>#computeImageDependencies",				"DADependencyTreePresenter>>#actionOnRemovePackage",				"DAMessageSendAnalyzer>>#missingMethodsWithPotentialMatch",				"DAMessageSendAnalyzer>>#missingMethodsWithPotentialMatchAfterManuallyResolvedDependenciesAddition",				"DAMessageSendDependencyNode>>#label",				"DAPackage>>#dependenciesFrom:",				"DAPackageCycle>>#removeOutgoingDependencies:",				"DAPackageCycle>>#removeOutgoingDependencies",				"DAPackageCycle>>#addAllPackages:",				"DAPackageCycleDetector>>#startBfsFrom:For:",				"DAPackageCycleDetector>>#findCycles:",				"DAPackageCycleGenerator>>#buildEdges",				"DAPackageRelationGraph>>#addTraitDependencies:",				"DAPackageRelationGraph>>#usersOf:",				"DAPackageRelationGraph>>#addReferenceDependencies:",				"DAPackageRelationGraph>>#clearAllDependencies",				"DAPackageRelationGraph>>#computeStaticDependencies",				"DAPackageRelationGraph>>#allReferenceDependencies",				"DAPackageRelationGraph>>#predecessors:",				"DAPackageRelationGraph>>#removeOutgoingDependencies:",				"DAPackageRelationGraph>>#allDependentPackagesFromSeenPackages",				"DAPackageRelationGraph>>#combineDependencies:",				"DAPackageRelationGraph>>#findReferencesIn:for:",				"DAPackageRelationGraph>>#package:classesDo:",				"DAPackageRelationGraph>>#addExtensionDependencies:",				"DAPackageRelationGraph>>#initializeWithPackages:",				"DAPackageRelationGraph>>#successors:",				"DAPackageRelationGraph>>#outgoing",				"DAPackageRelationGraph>>#refreshGraph",				"DAPackageRelationGraph>>#addMessageSendDependencies:",				"DAPackageRelationGraph>>#addPackages:",				"DAPackageRelationGraph>>#allExtensionDependencies",				"DAPackageRelationGraphDiff>>#lookUpForRemovedPackages",				"DAPackageRelationGraphDiff>>#lookUpForRemovedDependentPackages:with:from:",				"DAPackageRelationGraphDiff>>#makeDependentPackagesDiff",				"DAPackageRelationGraphDiff>>#lookUpForNewDependentPackages:with:from:",				"DAPackageRelationGraphDiff>>#lookUpForNewPackages",				"DAPackageRelationGraphDiff>>#lookUpForUndeterminatePackages",				"DAPackageRelationGraphDiff>>#lookUpForUndeterminateDependentPackagesFrom:",				"DAPackageRelationGraphGenerator>>#buildEdges",				"DAPackageRelationGraphTest>>#testDependenciesFrom",				"DAPackageRelationGraphTest>>#testPredecessors",				"DAPackageRelationGraphTest>>#testPackages",				"DAPackageRelationGraphTest>>#testRemoveInternalDependencies",				"DAPackageRelationGraphTest>>#testIncludedPackages",				"DAPackageRelationGraphTest>>#testSuccessors",				"DAPackageRelationGraphTest>>#testCombineDependencies",				"DAPackageRelationGraphTest>>#testRemoveOutgoingDependencies",				"DATarjanAlgorithm>>#traverseChildrenOf:",				"DTCommentTestConfiguration>>#asTestSuite",				"DTDefaultPluginPresenter class>>#buildPackageGroupWith:",				"DTTestCoveragePlugin>>#suiteFor:",				"DTTestCoveragePlugin>>#runForConfiguration:",				"DTTestsRunnerPlugin>>#removeTests:from:",				"DTTestsRunnerPlugin>>#joinTestResult:with:",				"DamageRecorder>>#recordInvalidRect:",				"DateAndTimeTest>>#testAsDateAndTime",				"DateTest>>#testNameOfDay",				"DebuggerSettings class>>#debuggerRankSettingsOn:",				"DeepCopier>>#checkDeep",				"DeepCopier>>#fixDependents",				"DeflateStream>>#next:putAll:startingAt:",				"DelayBenchmark>>#bench",				"DelayBenchmark>>#trialConcurrent:priority:maxDuration:fromSeed:",				"DelayBenchmark class>>#runAll",				"DependentsArray>>#first",				"DependentsArray>>#copyWith:",				"DialogWindowMorph>>#newButtonRow",				"DialogWindowMorph>>#acceptTextMorphs",				"Dictionary>>#printElementsOn:",				"Dictionary>>#keysAndValuesRemove:",				"Dictionary>>#removeUnreferencedKeys",				"Dictionary>>#includes:",				"Dictionary>>#includesIdentity:",				"Dictionary>>#associationsDo:",				"DictionaryTest>>#testIntersectionItself",				"DictionaryTest>>#testKeysAndValuesDo",				"DictionaryTest>>#testAsByteArray",				"DictionaryTest>>#testSelect",				"DictionaryTest>>#testAssociationsSelect",				"DictionaryTest>>#testAsCommaStringMore",				"DictionaryTest>>#testCopyNonEmptyWith",				"DictionaryTest>>#testPrintElementsOn",				"DictionaryTest>>#testAssociationsDo",				"DictionaryTest>>#testCopyEmptyWithoutAll",				"DictionaryTest>>#testCopyNonEmptyWithoutAll",				"DictionaryTest>>#testDo",				"DictionaryTest>>#testCollect",				"DictionaryTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"DictionaryTest>>#testKeysDo",				"DictionaryTest>>#testValues",				"DictionaryTest>>#testAsCommaStringOne",				"DictionaryTest>>#testAsStringOnDelimiterLastMore",				"DictionaryTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"DictionaryTest>>#testCopyNonEmpty",				"DictionaryTest>>#testKeys",				"DictionaryTest>>#testAsStringOnDelimiterLastOne",				"DictionaryTest>>#testAssociations",				"DictionaryTest>>#testDictionaryConcatenationWithCommonKeysDifferentValues",				"DictionaryTest>>#testPrintOnDelimiterLast",				"DictionaryTest>>#testValuesDo",				"DictionaryTest>>#testAsSortedCollection",				"DictionaryTest>>#testDictionaryPublicProtocolCompatibility",				"DictionaryTest>>#test0FixtureOccurrencesForMultiplinessTest",				"DictionaryTest>>#testPrintOnDelimiter",				"DictionaryTest>>#testAsSortedCollectionWithSortBlock",				"DictionaryTest>>#test0CopyTest",				"DictionaryTest>>#testAsStringOnDelimiterMore",				"DictionaryTest>>#testPrintOn",				"DictionaryTest>>#assertNoDuplicates:whenConvertedTo:",				"DictionaryTest>>#testDifference",				"DictionaryTest>>#test0FixtureDictionaryIncludesIdentity",				"DictionaryTest>>#testOtherDictionaryEquality",				"DictionaryTest>>#testAsStringOnDelimiterOne",				"DictionaryTest>>#testKeysSortedSafely",				"DictionaryTest>>#testNewFromPairs",				"DictionaryTest>>#test0FixtureOccurrencesTest",				"DictionaryTest>>#testDifferenceWithSeparateCollection",				"DictionaryTest>>#testDifferenceWithNonNullIntersection",				"DiffBuilder>>#applyDiff:origin:dest:",				"DiffJoinMorph>>#drawOnAthensCanvas:",				"DiffJoinMorph>>#updateMappings",				"DiffJoinMorph>>#compositeText",				"DiffJoinMorph>>#drawOn:",				"DiffJoinMorph>>#dstOffset:",				"DiffJoinMorph>>#srcOffset:",				"DiffMapMorph>>#drawOnAthensCanvas:",				"DiffMapMorph>>#drawOn:",				"DiffMorph>>#calculatedJoinMappings",				"DiffVisitor>>#visitPatch:",				"DigitalSignatureAlgorithm class>>#timeDecode:",				"DisabledBreakpointIconStyler>>#iconBlock:",				"DiskFileAttributesTest>>#attributesCollectionDo:",				"DisplayMedium>>#border:margins:rule:fillColor:",				"DisplayScreen>>#flashAll:andWait:",				"DocCommentsReleaseTest class>>#buildSuite",				"DockingBarMorph>>#noteNewOwner:",				"DockingBarMorph>>#moveSelectionRight:event:",				"DoubleLinkedList>>#addAll:",				"DoubleLinkedList>>#stNoneSatisfy:",				"DoubleLinkedList>>#reject:",				"DoubleLinkedList>>#collect:",				"DoubleLinkedList>>#includes:",				"DoubleLinkedList>>#asArray",				"DoubleLinkedList>>#select:",				"DoubleLinkedListTest>>#testDo",				"DoubleLinkedListTest>>#testEmpty",				"DropListMorph class>>#doRebuildMethodDictionary",				"DropListMorph class>>#fileOutLocalMethodsInCategory:on:",				"DropListMorph class>>#removeFromSystem:",				"DropListMorph class>>#traitComposition:",				"DropListMorph class>>#recategorizeSelector:from:to:",				"Duration>>#printHumanReadableOn:",				"DurationTest>>#testReadFromNoException",				"DurationTest>>#testMilliSeconds",				"EDDebuggingAPI class>>#terminateProcesses:",				"EDDebuggingAPITest>>#testTerminateProcesses",				"EDDebuggingAPITest>>#testAllRunningProcesses",				"EDEmergencyDebugger class>>#doRebuildMethodDictionary",				"EDEmergencyDebugger class>>#fileOutLocalMethodsInCategory:on:",				"EDEmergencyDebugger class>>#removeFromSystem:",				"EDEmergencyDebugger class>>#traitComposition:",				"EDEmergencyDebugger class>>#recategorizeSelector:from:to:",				"EFFormatter>>#visitEnglobingErrorNode:",				"EFFormatter>>#formatStatementCommentsFor:",				"EFFormatter>>#formatTemporariesFor:",				"EFFormatter>>#formatMethodCommentFor:",				"EFFormatter>>#formatBlockCommentFor:",				"EFFormatter>>#formatBlockArgumentsFor:",				"EFFormatter>>#resizeStringDependingOnWindowSizeFor:",				"EFFormatter>>#formatPragmasFor:",				"EFFormatter>>#formatCommentsFor:",				"EllipseMorph class>>#doRebuildMethodDictionary",				"EllipseMorph class>>#fileOutLocalMethodsInCategory:on:",				"EllipseMorph class>>#removeFromSystem:",				"EllipseMorph class>>#traitComposition:",				"EllipseMorph class>>#recategorizeSelector:from:to:",				"EmbeddedFreeTypeFontDescription class>>#installAllFontsIn:",				"EmbeddedFreeTypeFontInstaller>>#embedFilesInDirectory:",				"EmbeddedFreeTypeFontInstaller>>#installAllFontsIn:",				"EmbeddedMenuMorph>>#allSiblingItems",				"EmbeddedMenuMorph>>#selectMatch:",				"EmbeddedMenuMorph>>#moveSelectionDown:event:",				"EmbeddedMenuMorph>>#selectPrefix:",				"EmbeddedMenuMorph>>#selectItem:event:",				"EpApplyPreviewer class>>#doRebuildMethodDictionary",				"EpApplyPreviewer class>>#fileOutLocalMethodsInCategory:on:",				"EpApplyPreviewer class>>#removeFromSystem:",				"EpApplyPreviewer class>>#traitComposition:",				"EpApplyPreviewer class>>#recategorizeSelector:from:to:",				"EpApplyVisitor class>>#doRebuildMethodDictionary",				"EpApplyVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpApplyVisitor class>>#removeFromSystem:",				"EpApplyVisitor class>>#traitComposition:",				"EpApplyVisitor class>>#recategorizeSelector:from:to:",				"EpAsEpiceaRingDefinitionTest>>#testPackageIsString",				"EpBrowseVisitor class>>#doRebuildMethodDictionary",				"EpBrowseVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpBrowseVisitor class>>#removeFromSystem:",				"EpBrowseVisitor class>>#traitComposition:",				"EpBrowseVisitor class>>#recategorizeSelector:from:to:",				"EpEntryContentVisitor class>>#doRebuildMethodDictionary",				"EpEntryContentVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpEntryContentVisitor class>>#removeFromSystem:",				"EpEntryContentVisitor class>>#traitComposition:",				"EpEntryContentVisitor class>>#recategorizeSelector:from:to:",				"EpHasImpactVisitor class>>#doRebuildMethodDictionary",				"EpHasImpactVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpHasImpactVisitor class>>#removeFromSystem:",				"EpHasImpactVisitor class>>#traitComposition:",				"EpHasImpactVisitor class>>#recategorizeSelector:from:to:",				"EpInverseVisitor class>>#doRebuildMethodDictionary",				"EpInverseVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpInverseVisitor class>>#removeFromSystem:",				"EpInverseVisitor class>>#traitComposition:",				"EpInverseVisitor class>>#recategorizeSelector:from:to:",				"EpLog>>#cacheEntry:",				"EpLogBrowserOperationFactory>>#revertCodeChangesInPreviewMode",				"EpLogBrowserOperationFactory>>#applyCodeChanges",				"EpLogBrowserPresenter>>#inspectSelection",				"EpLogBrowserPresenter>>#addMenuItemsForSelectedItemsIn:",				"EpLogBrowserPresenter>>#filtersSubMenu",				"EpLogNode>>#populateReferencedNodesWith:",				"EpLostChangesDetectorTest>>#testDetectThreeChanges",				"EpMonitor>>#disable",				"EpMonitor>>#subscribeToJobAnnouncer",				"EpMonitor>>#behaviorRemoved:",				"EpMonitor>>#subscribeToSystemAnnouncer",				"EpOmbuExporter>>#fileOut:",				"EpReferenceFixerVisitor class>>#doRebuildMethodDictionary",				"EpReferenceFixerVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpReferenceFixerVisitor class>>#removeFromSystem:",				"EpReferenceFixerVisitor class>>#traitComposition:",				"EpReferenceFixerVisitor class>>#recategorizeSelector:from:to:",				"EpTCodeChangeVisitor classTrait>>#doRebuildMethodDictionary",				"EpTCodeChangeVisitor classTrait>>#fileOutLocalMethodsInCategory:on:",				"EpTCodeChangeVisitor classTrait>>#traitComposition:",				"EpTCodeChangeVisitor classTrait>>#recategorizeSelector:from:to:",				"EpTEventVisitor classTrait>>#doRebuildMethodDictionary",				"EpTEventVisitor classTrait>>#fileOutLocalMethodsInCategory:on:",				"EpTEventVisitor classTrait>>#traitComposition:",				"EpTEventVisitor classTrait>>#recategorizeSelector:from:to:",				"EpTriggeringIntegrationTest>>#testNoTrigger",				"ErrorNodeStyler>>#visitEnglobingErrorNode:",				"EssentialsObjectTest class>>#doRebuildMethodDictionary",				"EssentialsObjectTest class>>#removeFromSystem:",				"EssentialsObjectTest class>>#traitComposition:",				"EssentialsObjectTest class>>#fileOutLocalMethodsInCategory:on:",				"EssentialsObjectTest class>>#recategorizeSelector:from:to:",				"ExampleBuilderMorph class>>#doRebuildMethodDictionary",				"ExampleBuilderMorph class>>#fileOutLocalMethodsInCategory:on:",				"ExampleBuilderMorph class>>#removeFromSystem:",				"ExampleBuilderMorph class>>#traitComposition:",				"ExampleBuilderMorph class>>#recategorizeSelector:from:to:",				"ExceptionTester>>#runBasicANSISignaledExceptionTests",				"ExceptionTester>>#runBasicTests",				"ExecutionCounter class>>#removeFromMethod:",				"ExecutionCounter class>>#removeAll",				"ExecutionCounter class>>#resetAll",				"ExecutionCounter class>>#handleClassRemoved:",				"ExpanderMorph>>#showMorphs:",				"ExternalBrowserTest>>#tearDown",				"ExternalChangesBrowser>>#fileIn:",				"ExternalDropHandler class>>#lookupExternalDropHandler:",				"ExternalStructure>>#longPrintOn:",				"ExternalStructure class>>#recompileStructures",				"ExternalStructure class>>#compileFields:withAccessors:",				"ExternalType class>>#initializeAtomicTypes",				"ExternalUnion class>>#compileFields:withAccessors:",				"FBDDecompiler>>#initializeStackNumArgs:copied:numTemps:",				"FBDDecompiler>>#decompileThenRecompileClass:",				"FBDOptimizedMessagesRewriter>>#rewriteStatements:in:",				"FBDOptimizedMessagesRewriter>>#analyseSeq:",				"FFICallbackArgumentReader>>#extractArguments",				"FFICalloutAPITest>>#resetFFIMethods",				"FFICalloutMethodBuilder>>#generateFFICallout:spec:ffiLibrary:",				"FFICompilerPlugin class>>#recompileSenders",				"FFIExternalArrayTest>>#testReadArrayOfUntil",				"FFIExternalStructureFieldParser>>#parseFields:structure:",				"FFIExternalStructureFlatLayout>>#countRegisters",				"FFIExternalStructureFlatLayout>>#reduce:inGroupsOfSize:with:",				"FFIFunctionParser>>#parseCastedType",				"FFIFunctionParserTest>>#testParseAnonymousFunctionNoArguments",				"FFIFunctionParserTest>>#testParseFunction",				"FFIFunctionParserTest>>#testParseAnonymousFunction",				"FFIFunctionParserTest>>#testParseFunctionNoArguments",				"FFIFunctionParserTest>>#testParseFunction2",				"FFIFunctionSpec>>#asMethodSelectorAndArguments",				"FFIFunctionSpec>>#resolveUsing:",				"FFILibraryFinder>>#findAnyLibrary:",				"FFILibraryFinder>>#findLibrary:",				"FFIMethodRegistry>>#reset",				"FFIStructure class>>#removeAllMethodsInProtocol:",				"FFIStructure class>>#resetStructureIfNotIn:",				"FFITypesTest>>#testSignedShortAtPutIntegers",				"FFITypesTest>>#testUnsignedLong",				"FFITypesTest>>#testUnsigned1ByteIntegers",				"FFITypesTest>>#testUnsignedByteAtPutIntegers",				"FFITypesTest>>#testUnsignedLongLong",				"FFITypesTest>>#testUnsigned2ByteIntegers",				"FFITypesTest>>#testSigned1ByteIntegers",				"FFITypesTest>>#testUnsigned4ByteIntegers",				"FFITypesTest>>#testSigned2ByteIntegers",				"FFITypesTest>>#testSignedLongLong",				"FFITypesTest>>#testUnsignedShortAtPutIntegers",				"FFITypesTest>>#testSignedLong",				"FFITypesTest>>#testSigned4ByteIntegers",				"FFITypesTest>>#testSignedByteAtPutIntegers",				"FIFOQueueTest>>#testSize",				"FIFOQueueTest>>#testFlush",				"FIFOQueueTest>>#testFlushAllSuchThat",				"FIFOQueueTest>>#runValidationTest",				"FIFOQueueTest>>#testHeavyContention2",				"FIFOQueueTest>>#testSuchThat",				"FIFOQueueTest>>#testHeavyContention",				"FLAbstractCollectionCluster>>#serializeReferencesStepWith:",				"FLAbstractCollectionCluster>>#afterMaterializationStepWith:",				"FLAbstractCollectionCluster>>#materializeReferencesStepWith:",				"FLBasicSerializationTest>>#testFloat",				"FLCompiledCodeCluster>>#serializeReferencesStepWith:",				"FLCompiledCodeCluster>>#materializeReferencesStepWith:",				"FLCompiledMethodCluster>>#prepareObjectsStep",				"FLFuelCommandLineHandler>>#manageFiles",				"FLGlobalClassSerializationTest class>>#doRebuildMethodDictionary",				"FLGlobalClassSerializationTest class>>#fileOutLocalMethodsInCategory:on:",				"FLGlobalClassSerializationTest class>>#removeFromSystem:",				"FLGlobalClassSerializationTest class>>#traitComposition:",				"FLGlobalClassSerializationTest class>>#recategorizeSelector:from:to:",				"FLGlobalTraitSerializationTest class>>#doRebuildMethodDictionary",				"FLGlobalTraitSerializationTest class>>#fileOutLocalMethodsInCategory:on:",				"FLGlobalTraitSerializationTest class>>#removeFromSystem:",				"FLGlobalTraitSerializationTest class>>#traitComposition:",				"FLGlobalTraitSerializationTest class>>#recategorizeSelector:from:to:",				"FLHeader>>#executePostMaterializationActions",				"FLHeader>>#executePreMaterializationActions",				"FLIndexStreamTest>>#testNextIndex",				"FLIteratingCluster>>#serializeInstancesStepWith:",				"FLIteratingCluster>>#registerIndexesOn:",				"FLIteratingCluster>>#addReferencesFrom:to:",				"FLLightGlobalMapper class>>#valuesFor:in:",				"FLMaterialization>>#referencesStep",				"FLMaterialization>>#afterMaterializationStep",				"FLMigration>>#applyTo:",				"FLOptimizedObjectCluster>>#serializeReferencesOf:with:",				"FLOptimizedObjectCluster>>#serializeReferencesStepWith:",				"FLOptimizedObjectCluster>>#materializeReferencesStepWith:",				"FLPlatform class>>#removeModifications",				"FLPlatform class>>#detectPlatform",				"FLPlatform class>>#extensionPragmas",				"FLPlatform class>>#addExtensions",				"FLPointerObjectCluster>>#serializeReferencesStepWith:",				"FLPointerObjectCluster>>#afterMaterializationStepWith:",				"FLPointerObjectCluster>>#materializeReferencesStepWith:",				"FLSerialization>>#referencesStep",				"FLSerialization>>#prepareObjectsStep",				"FLSerialization>>#instancesStep",				"FLSimpleCollectionCluster>>#referencesOf:do:",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#doRebuildMethodDictionary",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#traitComposition:",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#recategorizeSelector:from:to:",				"FLUserGuidesTest>>#tearDown",				"FLVariableObjectCluster>>#serializeReferencesVariablePartOf:with:",				"FLVariablesMapping>>#referencesOf:do:",				"FLVariablesMapping>>#serializeReferencesOf:with:",				"FLVariablesMapping>>#serializeOn:",				"FLVariablesMapping>>#materializeReferencesOf:with:",				"FTBasicItem>>#expandAllTo:",				"FTBasicItem>>#expandAll",				"FTBasicItem>>#collapseAll",				"FTBasicTreeListDataSource>>#expand:",				"FTBasicTreeListDataSource>>#elementAt:",				"FTBasicTreeListItem>>#expandToDepth:",				"FTColumn>>#sortDataSource:",				"FTExampleMethodListGeneratorDataSource>>#initializeClass:",				"FTOutlineDataSource>>#elementAt:",				"FTOutlineDataSource>>#searchText:",				"FTOutlineDataSource>>#numberOfRows",				"FTOutlineDataSource>>#needSeparatorBefore:",				"FTPluggableIconListMorphAdaptor>>#selectionChangedUpdateStatus:",				"FTRootItem>>#expandAll",				"FTRootItem>>#expandAllTo:",				"FTRootItem>>#dataSource:",				"FTRootItem>>#updateData",				"FTRootItem>>#collapseAll",				"FTRootItemsStrategy>>#realSearch",				"FTStaticBasicItem>>#dataSource:",				"FTTableContainerMorph>>#updateExposedRows",				"FTTableContainerMorph>>#calculateColumnWidths",				"FTTableContainerMorph>>#drawRowsOn:",				"FTTableContainerMorph>>#updateHeaderRow",				"FTTableMorphTest class>>#doRebuildMethodDictionary",				"FTTableMorphTest class>>#fileOutLocalMethodsInCategory:on:",				"FTTableMorphTest class>>#removeFromSystem:",				"FTTableMorphTest class>>#traitComposition:",				"FTTableMorphTest class>>#recategorizeSelector:from:to:",				"FTTreeDataSource>>#expandRoots",				"FTTreeItem>>#childAt:",				"FTVisibleItemsStrategy>>#realSearch",				"FileList>>#updateButtonRow",				"FileList>>#defaultContents",				"FileList>>#fileSelectedMenu:",				"FileList>>#morphicViewFolderSelector:",				"FileList>>#addFullPanesTo:from:",				"FileList class>>#addFullPanesTo:from:",				"FileLocator class>>#fromPath:ifNone:",				"FileReferenceTest>>#testChildren",				"FileReferenceTest>>#testChildDirectories",				"FileReferenceTest>>#testAllEntries",				"FileReferenceTest>>#testAllDirectories",				"FileReferenceTest>>#testAllChildren",				"FileReferenceTest>>#testEntries",				"FileReferenceTest>>#testChildFiles",				"FileServices class>>#itemsForDirectory:",				"FileServices class>>#itemsForFile:",				"FileSystemGuide>>#pushAll:",				"FileSystemTest>>#testFileNames",				"FileSystemTest>>#testChildrenAt",				"FileSystemTest>>#testEntriesAt",				"FillBorderStyle>>#frameRectangle:on:",				"FindReplaceService>>#convertedFindString",				"Finder>>#pragmaSearch:",				"Finder>>#constructDictionaryWithMessagesNameSearch:",				"Finder>>#constructSourceDictionary",				"Finder>>#constructDictionaryWithPragmaSearch:",				"Finder>>#constructClassNamesDictionary",				"FinderUI>>#buildRegExChooser",				"FloatArrayTest>>#testCopyNonEmptyWithout",				"FloatArrayTest>>#test0FixturePutOneOrMoreElementsTest",				"FloatArrayTest>>#testIntersectionItself",				"FloatArrayTest>>#testKeysAndValuesDo",				"FloatArrayTest>>#testAtAllIndexesPut",				"FloatArrayTest>>#testAsCommaStringMore",				"FloatArrayTest>>#testCopyNonEmptyWith",				"FloatArrayTest>>#testFloatArrayPluginPrimitiveAtPut",				"FloatArrayTest>>#testCopyEmptyWithoutAll",				"FloatArrayTest>>#testCopyReplaceAllWithManyOccurrence",				"FloatArrayTest>>#testWithAll",				"FloatArrayTest>>#testCopyNonEmptyWithoutAll",				"FloatArrayTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"FloatArrayTest>>#testAsSetWithEqualsElements",				"FloatArrayTest>>#testPairsCollect",				"FloatArrayTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"FloatArrayTest>>#testCopyNonEmpty",				"FloatArrayTest>>#testAsStringOnDelimiterLastOne",				"FloatArrayTest>>#testConcatenation",				"FloatArrayTest>>#test0SortingArrayedTest",				"FloatArrayTest>>#testFloatArrayPluginPrimitiveAt",				"FloatArrayTest>>#testAsSortedCollection",				"FloatArrayTest>>#testSorted",				"FloatArrayTest>>#test0FixtureCopyPartOfSequenceableTest",				"FloatArrayTest>>#testSortedUsingBlock",				"FloatArrayTest>>#testCopyNonEmptyWithoutNotIncluded",				"FloatArrayTest>>#testAsSortedCollectionWithSortBlock",				"FloatArrayTest>>#test0CopyTest",				"FloatArrayTest>>#testAsStringOnDelimiterMore",				"FloatArrayTest>>#testSort",				"FloatArrayTest>>#testSortUsingSortBlock",				"FloatArrayTest>>#testAtAllPut",				"FloatArrayTest>>#assertNoDuplicates:whenConvertedTo:",				"FloatArrayTest>>#testDifference",				"FloatArrayTest>>#testAsStringOnDelimiterOne",				"FloatArrayTest>>#testShuffled",				"FloatArrayTest>>#testDifferenceWithSeparateCollection",				"FloatArrayTest>>#testDifferenceWithNonNullIntersection",				"FloatTest>>#testFractionAsFloat",				"FloatTest>>#test32bitConversion",				"FloatTest>>#testSign",				"FloatTest>>#testNaNCompare",				"FloatTest>>#testCopySignTo",				"Form>>#mapColors:to:",				"Form>>#storeBitsOn:base:",				"Form>>#wipeImage:at:clippingBox:rectForIndex:",				"Form>>#convexShapeFill:",				"Form>>#fadeImageFine:at:",				"Form>>#fadeImageCoarse:at:",				"Form>>#colorReduced",				"Form>>#store15To24HexBitsOn:",				"Form class>>#services",				"FormCanvas>>#showAt:invalidRects:",				"FormCanvas class>>#defaultTranslucentPatterns",				"FormTest>>#testIsAllWhite",				"FreeTypeCache>>#removeAllForFont:",				"FreeTypeCache>>#removeAllForType:",				"FreeTypeCacheTest>>#validateSizes:",				"FreeTypeFont>>#hasDistinctGlyphsForAll:",				"FreeTypeFont>>#hasGlyphsForAll:",				"FreeTypeFontFamily>>#addSimulatedMembers",				"FreeTypeFontFamily>>#addMembersFromFileInfos:",				"FreeTypeFontProvider>>#fileInfosByFamilyAndGroup",				"FreeTypeFontProvider>>#updateFromSystem",				"FreeTypeFontProvider>>#updateFromDirectory:done:",				"FreeTypeFontProvider>>#winFontDirectories",				"FreeTypeFontProvider>>#updateEmbeddedFreeTypeFonts",				"FreeTypeFontProvider>>#updateFileCacheInfo",				"FreeTypeFontProvider>>#buildFamilies",				"FreeTypeFontProvider>>#guessWindowsFontFolderPath",				"FreeTypeNameParser>>#tokenize:",				"FreeTypeNameParser>>#splitBadTokensIn:",				"FreeTypeNameParser>>#initialize",				"FreeTypeSettings>>#hintingSymbol:",				"FuzzyMatcher class>>#allSortedByScoreMatching:in:by:",				"FuzzyMatcherExample>>#match:for:",				"GIFReadWriter>>#writeHeader",				"GIFReadWriterTest>>#animatedColorFrames",				"GIFReadWriterTest>>#testAnimatedColorsOutIn",				"GPoint class>>#doRebuildMethodDictionary",				"GPoint class>>#fileOutLocalMethodsInCategory:on:",				"GPoint class>>#removeFromSystem:",				"GPoint class>>#traitComposition:",				"GPoint class>>#recategorizeSelector:from:to:",				"GPolygon class>>#convexHullOn:",				"GVector class>>#doRebuildMethodDictionary",				"GVector class>>#fileOutLocalMethodsInCategory:on:",				"GVector class>>#removeFromSystem:",				"GVector class>>#traitComposition:",				"GVector class>>#recategorizeSelector:from:to:",				"GlobalIdentifierMerger>>#mergeSameComputer",				"Gofer>>#allResolved",				"GoferCleanup>>#execute",				"GoferCleanup>>#cleanupCategories:",				"GoferCleanup>>#cleanupProtocols:",				"GoferCommit>>#execute",				"GoferCommit>>#execute:",				"GoferFetch>>#initializeOn:",				"GoferLoad>>#addResolved:",				"GoferLoad>>#updateRepositories",				"GoferLoad>>#updateCategories",				"GoferPush>>#initializeOn:",				"GoferRecompile>>#execute:",				"GoferRecompile>>#execute",				"GoferReinitialize>>#execute:",				"GoferReinitialize>>#execute",				"GoferResource>>#setUpMonticelloRepository",				"GoferRevert>>#execute",				"GoferUnload>>#unregisterRepositories:",				"GoferUnload>>#unloadClasses:",				"GoferUnload>>#execute",				"GoferWorking>>#addReference:",				"GoferWorking>>#initializeOn:",				"GradientFillStyle>>#computePixelRampOfSize:",				"GrafPort>>#frameRect:borderWidth:",				"GreatestCommonDivisor>>#asShapeDiophantineEquation",				"GroupWindowMorph class>>#doRebuildMethodDictionary",				"GroupWindowMorph class>>#fileOutLocalMethodsInCategory:on:",				"GroupWindowMorph class>>#removeFromSystem:",				"GroupWindowMorph class>>#traitComposition:",				"GroupWindowMorph class>>#recategorizeSelector:from:to:",				"HDChangeReport>>#initializeOn:",				"HDChangeReport>>#generateOn:",				"HDCoverageReport>>#tearDown",				"HDCoverageReport>>#generatePackage:class:on:",				"HDCoverageReport>>#addTestsIn:to:",				"HDCoverageReport>>#generateDataOn:",				"HDCoverageReport>>#generatePackage:on:",				"HDCoverageReport>>#setUp",				"HDLintReport>>#generateViolations:source:offset:on:",				"HDLintReport>>#generateClass:source:on:",				"HDLintReport>>#generateOn:",				"HDReport class>>#runCategories:",				"HDTestReport>>#tearDown",				"HDTestReport>>#runAll",				"HDTestReport>>#setUp",				"HDTestReport class>>#runClasses:named:",				"HEInstaller>>#installMethods:into:",				"HEInstaller>>#installPackage:",				"HEInstaller>>#doInstallPackage:",				"HaloMorph>>#changed",				"HaloMorph>>#removeAllHandlesBut:",				"HaloMorph class>>#haloSpecFromArray:",				"Halt class>>#resetOnce",				"Halt class>>#resetHaltOnCount",				"HandMorph>>#sendListenEvent:to:",				"HandMorph>>#fullDrawOn:",				"HandMorph>>#updateCacheCanvas:",				"HashAndEqualsTestCase>>#testEquality",				"HashAndEqualsTestCase>>#testHash",				"HashedCollection>>#grow",				"HashedCollection class>>#compactAllInstances",				"HashedCollection class>>#rehashAllInstances",				"HeapTest>>#testCopyNonEmptyWithout",				"HeapTest>>#testIntersectionItself",				"HeapTest>>#testAsByteArray",				"HeapTest>>#test1",				"HeapTest>>#testOccurrencesOf",				"HeapTest>>#testAsSortedCollection",				"HeapTest>>#testCopyNonEmptyWith",				"HeapTest>>#test0FixtureOccurrencesForMultiplinessTest",				"HeapTest>>#testCopyEmptyWithoutAll",				"HeapTest>>#testWithAll",				"HeapTest>>#testCopyNonEmptyWithoutAll",				"HeapTest>>#testCopyNonEmptyWithoutNotIncluded",				"HeapTest>>#testAsSortedCollectionWithSortBlock",				"HeapTest>>#testDo",				"HeapTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"HeapTest>>#testAsIdentitySetWithIdentityEqualsElements",				"HeapTest>>#testAsSetWithEqualsElements",				"HeapTest>>#test0CopyTest",				"HeapTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"HeapTest>>#assertNoDuplicates:whenConvertedTo:",				"HeapTest>>#testDifference",				"HeapTest>>#setUp",				"HeapTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"HeapTest>>#test0FixtureOccurrencesTest",				"HeapTest>>#testAsIdentitySetWithEqualsElements",				"HeapTest>>#testRemoveAllSuchThat",				"HeapTest>>#testRemoveAllFoundIn",				"HeapTest>>#testRemoveAll",				"HeapTest>>#testDifferenceWithSeparateCollection",				"HeapTest>>#testDifferenceWithNonNullIntersection",				"HelpExporter>>#writeAllTopics",				"HelpExporter>>#writeTopic:level:toStream:",				"HelpTopic>>#subtopics:",				"HelpTopic>>#pathToTopicSatisfying:",				"HermesCommandLineHandler>>#processFiles",				"HiBranchMapping>>#buildBranchByLink",				"HiRuler>>#addLinkFrom:to:",				"HiRulerBuilder>>#build",				"HiSimpleRenderer>>#renderLinks:on:",				"HiSimpleRenderer>>#renderNodes:on:",				"HiSimpleRenderer>>#athensPathForDescendingLink:on:",				"HookGenerator>>#postamble",				"HookGenerator>>#entity:node:links:",				"HookGenerator>>#preamble",				"HowToMakeYourOwnTutorialTest>>#testEachSelectorReturnsALesson",				"HowToMakeYourOwnTutorialTest>>#testEachSelectorExists",				"HowToMakeYourOwnTutorialTest class>>#doRebuildMethodDictionary",				"HowToMakeYourOwnTutorialTest class>>#fileOutLocalMethodsInCategory:on:",				"HowToMakeYourOwnTutorialTest class>>#removeFromSystem:",				"HowToMakeYourOwnTutorialTest class>>#traitComposition:",				"HowToMakeYourOwnTutorialTest class>>#recategorizeSelector:from:to:",				"IRBuilder>>#addTemps:",				"IRBytecodeDecompiler>>#popScope",				"IRBytecodeGenerator>>#bytecodes",				"IRBytecodeGenerator>>#addProperties:",				"IRBytecodeGenerator>>#updateLiterals:",				"IRBytecodeGenerator>>#pragmas:",				"IRBytecodeScope>>#temps",				"IRFix>>#visitSequence:",				"IRMethod>>#predecessorsOf:",				"IRMethod>>#allInstructions",				"IRMethod>>#firstInstructionMatching:",				"IRMethod>>#allInstructionsMatching:",				"IRReconstructor>>#fixPushNilsForTemps",				"IRReconstructor>>#remapTemp:toRemote:",				"IRSequence>>#addInstructions:",				"IRSequence>>#absorbJumpToSingleInstr:",				"IRSequence>>#do:",				"IRSequence>>#withNonBodySuccessorsDo:alreadySeen:",				"IRSequence>>#withAllSuccessorsDo:alreadySeen:",				"IRSequence>>#addInstructions:before:",				"IRSequence>>#splitAfter:",				"IRSequence>>#instructionsDo:",				"IRSequence>>#instructionsForDecompiling",				"IRTranslator>>#visitPushFullClosure:",				"IRVisitor>>#visitSequence:",				"IRVisitor>>#visitNodes:",				"ISOLanguageDefinition class>>#initISOCountries",				"ISOLanguageDefinition class>>#iso2LanguageTable",				"IceAbstractCommitWalk>>#uptoBranches:",				"IceAbstractCommitWalk>>#uptoCommits:",				"IceAbstractNode>>#childrenDo:",				"IceCherrypicker>>#addTransitiveDependencies",				"IceCherrypickerDiffPruner>>#applyTo:",				"IceConvertFormatAction>>#removeFiletreeRemnants",				"IceConvertFormatAction>>#migrateSources",				"IceCritiquesVisitor>>#visitExtensionDefinition:",				"IceDefinedDependency>>#addTransitiveDependenciesFrom:to:",				"IceDiff>>#buildForChanges:",				"IceGitHubNewBranchFromIssuePanel>>#sanitizeTitle:",				"IceGitHubRemoveBranchesAction>>#cacheAllBranches",				"IceGitHubRemoveBranchesAction>>#removeBranches:",				"IceGitLocalBranch>>#pushTagsToRemote:gitRemote:progress:",				"IceLibgitFiletreeReader class>>#doRebuildMethodDictionary",				"IceLibgitFiletreeReader class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitFiletreeReader class>>#removeFromSystem:",				"IceLibgitFiletreeReader class>>#traitComposition:",				"IceLibgitFiletreeReader class>>#recategorizeSelector:from:to:",				"IceLibgitFiletreeWriter>>#writeVersion:",				"IceLibgitFiletreeWriter class>>#doRebuildMethodDictionary",				"IceLibgitFiletreeWriter class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitFiletreeWriter class>>#removeFromSystem:",				"IceLibgitFiletreeWriter class>>#traitComposition:",				"IceLibgitFiletreeWriter class>>#recategorizeSelector:from:to:",				"IceLibgitRepository>>#asShapeCommitsGraph",				"IceLibgitTonelReader class>>#doRebuildMethodDictionary",				"IceLibgitTonelReader class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitTonelReader class>>#removeFromSystem:",				"IceLibgitTonelReader class>>#traitComposition:",				"IceLibgitTonelReader class>>#recategorizeSelector:from:to:",				"IceLibgitTonelWriter class>>#doRebuildMethodDictionary",				"IceLibgitTonelWriter class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitTonelWriter class>>#removeFromSystem:",				"IceLibgitTonelWriter class>>#traitComposition:",				"IceLibgitTonelWriter class>>#recategorizeSelector:from:to:",				"IceLog>>#collectCommitsFor:path:",				"IceMCPackageImporter>>#importOn:",				"IceMerge>>#conflictsDo:",				"IceMetadatalessFileTreeWriter>>#writeVersion:",				"IceMetadatalessStCypressWriter>>#writeDefinitions:",				"IceMethodDependency>>#addTransitiveDependenciesFrom:to:",				"IceNode>>#nextNodeSuchThat:ifFound:",				"IceNode>>#do:",				"IceNode>>#nextNodeSuchThat:ifNone:",				"IceNode>>#select:",				"IceNodeQuery>>#ifFound:",				"IcePackageDefinition>>#contents",				"IcePharoPlugin class>>#addProjectNamed:commit:baselines:",				"IcePharoPlugin class>>#commitOfExternalProject:",				"IcePluginManager>>#repositoryWasCreated:",				"IcePluginManager>>#repositoryWillBeCreated:",				"IcePluginManager>>#checkoutBranchPanelsOnModel:",				"IceSystemEventListener class>>#handleVersionLoaded:",				"IceSystemEventListener class>>#handlePackagesChange:",				"IceTipCheckoutBranchDialog>>#createCheckoutBranchTypes",				"IceTipCleanCommandGroupVisitor>>#visitCommandGroup:",				"IceTipCommitBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipCommitModel class>>#doRebuildMethodDictionary",				"IceTipCommitModel class>>#fileOutLocalMethodsInCategory:on:",				"IceTipCommitModel class>>#removeFromSystem:",				"IceTipCommitModel class>>#traitComposition:",				"IceTipCommitModel class>>#recategorizeSelector:from:to:",				"IceTipCredentialsStoreBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceTipCredentialsStoreBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipDiffSelectingPanel>>#refresh",				"IceTipDiffSelectingPanel>>#initialize",				"IceTipEditProjectDialog>>#expandAndSelect:",				"IceTipGitHubPullRequestListBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipHiedraHistoryBrowser>>#refreshHiedraColumn",				"IceTipHiedraHistoryBrowser>>#initializeHiedraColumn",				"IceTipHistoryBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipMergeBranchDialog>>#beSwitchAndMerge",				"IceTipMergeBranchDialog>>#createMergeBranchTypes",				"IceTipMergeBranchDialog>>#model:",				"IceTipMergePatchMorph>>#useAllIncomingVersion",				"IceTipMergePatchMorph>>#markAllAsConflict",				"IceTipMergePatchMorph>>#keepAllCurrentVersion",				"IceTipMergeSelectingPanel>>#refresh",				"IceTipMergeSelectingPanel>>#initialize",				"IceTipMetacelloInstallCommandBuilder>>#addCommandsFor:intoGroup:",				"IceTipRemoteModel>>#delete",				"IceTipRemoteModel>>#fetch",				"IceTipRemoteModel class>>#doRebuildMethodDictionary",				"IceTipRemoteModel class>>#fileOutLocalMethodsInCategory:on:",				"IceTipRemoteModel class>>#removeFromSystem:",				"IceTipRemoteModel class>>#traitComposition:",				"IceTipRemoteModel class>>#recategorizeSelector:from:to:",				"IceTipRepositoriesBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceTipRepositoriesBrowser class>>#githubRemoteCommands:forRootGroup:",				"IceTipRepositoriesBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipRepositoriesBrowser class>>#buildSelectionExtraCommandGroupWith:for:",				"IceTipRepositoriesBrowser class>>#githubCommandsWith:forRootGroup:",				"IceTipRepositoryBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceTipRepositoryBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipRepositoryModel>>#addPackages:",				"IceTipRepositoryModel class>>#doRebuildMethodDictionary",				"IceTipRepositoryModel class>>#fileOutLocalMethodsInCategory:on:",				"IceTipRepositoryModel class>>#removeFromSystem:",				"IceTipRepositoryModel class>>#traitComposition:",				"IceTipRepositoryModel class>>#recategorizeSelector:from:to:",				"IceTipTagModel>>#delete",				"IceTipTreeGroup>>#traversingDo:parents:",				"IceTipTreeGroup>>#children:",				"IceTipVersionHistoryBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipWorkingCopyBrowser>>#iconFor:",				"IceTipWorkingCopyBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceTipWorkingCopyBrowser class>>#metacelloCommandsWith:forRootGroup:",				"IceTipWorkingCopyBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceWorkingCopy>>#markAsCleanPackagesThat:",				"IceWorkingCopy>>#forceCalculateDirtyPackages",				"IceWorkingCopy>>#loadPackagesNamed:fromCommit:",				"IceWorkingCopy>>#unload",				"IceWorkingCopy>>#refreshPackages",				"Iceberg class>>#repositoryForPackage:",				"Iceberg class>>#bootstrapWithCommitId:packageList:",				"Iceberg class>>#update",				"IconStyler>>#visitEnglobingErrorNode:",				"IconStyler>>#styleAst:",				"IconStyler>>#styleText:withAst:",				"IconicListItemMorph>>#enabled:",				"IconicListItemMorph class>>#doRebuildMethodDictionary",				"IconicListItemMorph class>>#fileOutLocalMethodsInCategory:on:",				"IconicListItemMorph class>>#removeFromSystem:",				"IconicListItemMorph class>>#traitComposition:",				"IconicListItemMorph class>>#recategorizeSelector:from:to:",				"IdentifierChooserMorph>>#setColor:",				"IdentifierChooserMorph>>#choiceMenuItems",				"IdentifierChooserMorph>>#selectPreviousItem",				"IdentifierChooserMorph>>#selectNextItem",				"IdentifierChooserMorph>>#switchToOtherColumn:",				"IdentifierChooserMorph>>#newMenuWith:",				"IdentifierChooserMorph>>#processEnter:",				"IdentityBagTest>>#testAsSetWithEqualsElements",				"ImageCleaner>>#cleanUpForProduction",				"ImageCleaner>>#createLiteralTable",				"ImageCleaner>>#removeEmptyPackages",				"ImageCleaner>>#literalsDo:",				"ImageCleaner>>#cleanUpMethods",				"ImageCleaner>>#cleanUpProcesses",				"ImageMorph class>>#doRebuildMethodDictionary",				"ImageMorph class>>#fileOutLocalMethodsInCategory:on:",				"ImageMorph class>>#removeFromSystem:",				"ImageMorph class>>#traitComposition:",				"ImageMorph class>>#recategorizeSelector:from:to:",				"IndentingListItemMorph>>#drawOn:",				"InflateStream>>#huffmanTableFrom:mappedBy:",				"InstVarRefLocatorTest>>#testInstructions",				"InstanceVariableSlot class>>#resetIvarSlots",				"InstructionClientTest>>#testInstructions",				"Integer>>#asStringaz",				"Integer>>#asStringSkew",				"Integer>>#asShapeSkewDots:",				"Integer>>#asStringAZaz",				"IntegerDigitLogicTest>>#testLargeShift",				"IntegerTest>>#testIsPrime2",				"IntegerTest>>#testIsProbablyPrime",				"IntegerTest>>#testHighBitOfMagnitude",				"IntegerTest>>#testExactRaisedTo",				"IntegerTest>>#testBitAt",				"IntegerTest>>#testLowBit",				"IntegerTest>>#testSqrtFloor",				"IntegerTest>>#testExactSqrt",				"IntegerTest>>#testHighBit",				"InterpolatedGradientFillStyle>>#computePixelRampOfSize:",				"IntervalTest>>#testCopyNonEmptyWithout",				"IntervalTest>>#testKeysAndValuesDo",				"IntervalTest>>#testAsByteArray",				"IntervalTest>>#testAsCommaStringMore",				"IntervalTest>>#testCopyNonEmptyWith",				"IntervalTest>>#test0IndexAccessingTest",				"IntervalTest>>#testCopyEmptyWithoutAll",				"IntervalTest>>#testCopyNonEmptyWithoutAll",				"IntervalTest>>#testDo",				"IntervalTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"IntervalTest>>#testInfiniteLoopBug6456",				"IntervalTest>>#testPairsCollect",				"IntervalTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"IntervalTest>>#testCopyNonEmpty",				"IntervalTest>>#testAsStringOnDelimiterLastOne",				"IntervalTest>>#testConcatenation",				"IntervalTest>>#test0SortingArrayedTest",				"IntervalTest>>#testOccurrencesOf",				"IntervalTest>>#testAsSortedCollection",				"IntervalTest>>#testSorted",				"IntervalTest>>#test0FixtureCopyPartOfSequenceableTest",				"IntervalTest>>#testSortedUsingBlock",				"IntervalTest>>#testCopyNonEmptyWithoutNotIncluded",				"IntervalTest>>#testAsSortedCollectionWithSortBlock",				"IntervalTest>>#test0CopyTest",				"IntervalTest>>#testAsStringOnDelimiterMore",				"IntervalTest>>#testUnevenDo",				"IntervalTest>>#assertNoDuplicates:whenConvertedTo:",				"IntervalTest>>#testAsStringOnDelimiterOne",				"IntervalTest>>#test0FixtureOccurrencesTest",				"JPEGHuffmanTable>>#makeDerivedTables",				"JPEGReadWriter>>#idctBlockFloat:component:",				"JPEGReadWriter>>#processRestart",				"JPEGReadWriter>>#initialSOSSetup",				"JobTest>>#tearDown",				"JoinSection>>#createHighlightsFrom:to:",				"KMCategory>>#onMatchWith:notify:andDo:",				"KMComposedModifier>>#symbol",				"KMComposedModifier>>#updateIdentifier",				"KMDispatchChain>>#dispatch:",				"KMDispatchChainTest>>#testPassesOnTheTarget",				"KMDispatchChainTest>>#testTargetDoesNotIterateTheNil",				"KMDispatchChainTest>>#testGlobalIsFirst",				"KMDispatcher>>#dispatch:",				"KMDispatcher>>#removeKeyCombination:",				"KMDispatcher>>#dispatch:inCategories:",				"KMDispatcherTest>>#testNoMultiTrigger",				"KMDispatcherTest>>#testNoStaggeredTrigger",				"KMKeyCombinationChoice>>#combinationsDo:",				"KMKeyCombinationChoice>>#platformCharacter",				"KMKeyCombinationChoice>>#platformModifier",				"KMKeyCombinationSequence>>#platformModifier",				"KMKeymap>>#notifyPartialMatchTo:",				"KMKeymap>>#notifyCompleteMatchTo:buffer:",				"KMKeymapBuilderTest>>#testAttachKeymapAndExecuteExecutes",				"KMKeymapTest>>#testExecute",				"KMNamedCharKeyCombination class>>#newSpecialKeys",				"KMPerInstanceTest>>#testAddMoreThanOneHandler",				"KMPragmaKeymapBuilder>>#collectRegistrations",				"KMPragmaKeymapBuilder>>#interpretRegistration:",				"KMStorage>>#addAll:",				"KMUntypeableSingleKeyCombination class>>#newSpecialKeys",				"KeyboardKey class>>#initializeUnixVirtualKeyTable",				"KeyedTree>>#putFormattedTextOn:level:indentString:",				"KeyedTree>>#allKeys",				"KeyedTree>>#putFormattedTextOn:withDescriptions:level:indentString:",				"KeyedTree>>#atPath:ifAbsent:",				"LGitCommitStore>>#basicEntry:path:nodesDo:",				"LGitExternalObject class>>#doRebuildMethodDictionary",				"LGitExternalObject class>>#fileOutLocalMethodsInCategory:on:",				"LGitExternalObject class>>#removeFromSystem:",				"LGitExternalObject class>>#traitComposition:",				"LGitExternalObject class>>#recategorizeSelector:from:to:",				"LGitExternalStructure class>>#doRebuildMethodDictionary",				"LGitExternalStructure class>>#fileOutLocalMethodsInCategory:on:",				"LGitExternalStructure class>>#removeFromSystem:",				"LGitExternalStructure class>>#traitComposition:",				"LGitExternalStructure class>>#recategorizeSelector:from:to:",				"LGitRevwalk>>#select:thenDo:",				"LIFOQueueTest>>#testHeavyContention",				"LRUCache>>#keysAndValuesDo:",				"LRUCacheTest>>#testRandomAccess",				"LRUCacheTest>>#testFactory",				"LRUCacheTest>>#testPrimeFactors",				"LRUCacheTest>>#test5kClasses",				"LRUCacheTest>>#testFixedAccess",				"LRUCacheTest>>#testFactoryStyle",				"LargeNegativeIntegerTest>>#testReplaceFromToWithStartingAt",				"LargeNegativeIntegerTest>>#testMinimumNegativeIntegerArithmetic",				"LargePositiveIntegerTest>>#assertSqrtCorrectlyRoundedForExponent:",				"LargePositiveIntegerTest>>#testReplaceFromToWithStartingAt",				"LayoutCell>>#do:",				"LayoutCell>>#inject:into:",				"LayoutClassScope>>#hasFields",				"LayoutClassScope>>#slots",				"LayoutClassScope>>#visibleSlots",				"LayoutClassScope>>#ownFieldSize",				"LayoutClassScope>>#allVisibleSlots",				"LayoutClassScope>>#allSlotsDo:",				"LayoutFrame>>#fromArray:",				"LazyMorphListMorph>>#hUnadjustedScrollRange",				"LazyMorphListMorph>>#listChanged",				"LimitedWriteStreamTest>>#testNextPut",				"LimitedWriteStreamTest>>#testWithFromTo",				"LimitedWriteStreamTest>>#testWith",				"Link>>#asArray",				"LinkedList>>#copyWithout:",				"LinkedList>>#collect:thenReject:",				"LinkedList>>#select:thenCollect:",				"LinkedList>>#collect:thenSelect:",				"LinkedList>>#select:thenDo:",				"LinkedList>>#reject:",				"LinkedList>>#size",				"LinkedList>>#removeAllSuchThat:",				"LinkedList>>#reject:thenCollect:",				"LinkedList>>#select:",				"LinkedListTest>>#testCopyNonEmptyWithout",				"LinkedListTest>>#testKeysAndValuesDo",				"LinkedListTest>>#testIntersectionItself",				"LinkedListTest>>#testAsCommaStringMore",				"LinkedListTest>>#testCopyNonEmptyWith",				"LinkedListTest>>#testPrintElementsOn",				"LinkedListTest>>#testCopyEmptyWithoutAll",				"LinkedListTest>>#testCopyNonEmptyWithoutAll",				"LinkedListTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"LinkedListTest>>#testPairsCollect",				"LinkedListTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"LinkedListTest>>#testBasicCollect",				"LinkedListTest>>#testRemoveAllSuchThat",				"LinkedListTest>>#testDo2",				"LinkedListTest>>#testAsStringOnDelimiterLastOne",				"LinkedListTest>>#testRemoveAllFoundIn",				"LinkedListTest>>#test0SortingArrayedTest",				"LinkedListTest>>#testPrintOnDelimiterLast",				"LinkedListTest>>#testOccurrencesOf",				"LinkedListTest>>#testSorted",				"LinkedListTest>>#test0FixtureCopyPartOfSequenceableTest",				"LinkedListTest>>#testSortedUsingBlock",				"LinkedListTest>>#testDoWithout",				"LinkedListTest>>#testCopyNonEmptyWithoutNotIncluded",				"LinkedListTest>>#testPrintOnDelimiter",				"LinkedListTest>>#test0CopyTest",				"LinkedListTest>>#testAsStringOnDelimiterMore",				"LinkedListTest>>#testPrintOn",				"LinkedListTest>>#testSortUsingSortBlock",				"LinkedListTest>>#assertNoDuplicates:whenConvertedTo:",				"LinkedListTest>>#testDifference",				"LinkedListTest>>#testAsStringOnDelimiterOne",				"LinkedListTest>>#testShuffled",				"LinkedListTest>>#test0FixtureOccurrencesTest",				"LinkedListTest>>#testDoSeparatedBy",				"LinkedListTest>>#testDifferenceWithSeparateCollection",				"LinkedListTest>>#testDifferenceWithNonNullIntersection",				"LinkedListTest class>>#doRebuildMethodDictionary",				"LinkedListTest class>>#fileOutLocalMethodsInCategory:on:",				"LinkedListTest class>>#removeFromSystem:",				"LinkedListTest class>>#traitComposition:",				"LinkedListTest class>>#recategorizeSelector:from:to:",				"Locale class>>#initKnownLocales",				"LogicalFont>>#derivativeFont:",				"LogicalFont class>>#shutDown:",				"LogicalFontManager>>#allFamilies",				"LogicalFontManager>>#bestFontFor:whenFindingAlternativeIgnoreAll:",				"LzwGifDecoder>>#handleCode:withPreviousCode:on:",				"MCAncestry>>#breadthFirstAncestorsDo:",				"MCAncestry>>#ancestorsDoWhileTrue:",				"MCAncestry>>#allAncestorsDo:",				"MCAncestryTest>>#versionForName:in:",				"MCCacheRepository>>#versionWithInfo:ifAbsent:",				"MCCacheRepository class>>#defaultDirectory",				"MCClassDefinition>>#ensureRingDefinitionIn:",				"MCClassDefinition>>#hash",				"MCClassDefinitionTest>>#testKindOfSubclass",				"MCCodeTool>>#fileOutMessage",				"MCConfiguration>>#loadVersions:",				"MCConfiguration>>#logUpdate:with:",				"MCConfiguration>>#mergeVersions:",				"MCConfiguration>>#summary",				"MCConfiguration>>#depsSatisfying:versionDo:displayingProgress:",				"MCConfiguration>>#updateFromRepositories",				"MCConfiguration class>>#whatChangedFrom:to:on:",				"MCConfigurationBrowser>>#checkMissing",				"MCConfigurationBrowser>>#add",				"MCConfigurationBrowser>>#checkRepositories",				"MCConfigurationBrowser>>#showChangeLog",				"MCConfigurationBrowser>>#checkRepositoryTemplates",				"MCConfigurationBrowser>>#addDependency",				"MCConfigurationBrowser>>#checkModified",				"MCConfigurationBrowser>>#migrate",				"MCDataStream>>#writeStringOld:",				"MCDataStream>>#nextPutAll:",				"MCDefinition>>#traitCompositionFrom:parent:",				"MCDefinitionIndex>>#addAll:",				"MCDependencySorter>>#addToOrder:",				"MCDependencySorter>>#addAll:",				"MCDependencySorter>>#addRequirements:for:",				"MCDependencySorter>>#addExternalProvisions:",				"MCDependencySorter>>#itemsWithMissingRequirements",				"MCDependencySorter class>>#sortItems:",				"MCDictionaryRepository>>#sortedVersionInfos",				"MCFileBasedRepository>>#versionWithInfo:ifAbsent:",				"MCFileBasedRepository>>#possiblyNewerVersionsOfAnyOf:",				"MCFileBasedRepository>>#notCachedVersionWithInfo:",				"MCFileBasedRepository>>#versionsWithPackageNames",				"MCFileRepositoryInspector>>#refresh",				"MCFileRepositoryInspector>>#packageListUpdate",				"MCFileTreeAbstractReader>>#loadDependencies",				"MCFileTreeAbstractReader>>#addClassAndMethodDefinitionsFromDirectoryEntries:",				"MCFileTreeAbstractStWriter>>#visitOrganizationDefinition:",				"MCFileTreePackageStructureStWriter>>#writePresentInitializers",				"MCFileTreePackageStructureStWriter>>#writeAbsentInitializers",				"MCFileTreeStCypressReader>>#addMethodDefinitionsForClass:methodProperties:in:extensionMethod:",				"MCFileTreeStCypressReader>>#addClassAndMethodDefinitionsFromDirectory:",				"MCFileTreeStCypressWriter>>#writeDefinitions:",				"MCFileTreeStCypressWriter>>#fileNameMapFor:",				"MCFileTreeStCypressWriter>>#writeMethodProperties:",				"MCFileTreeStCypressWriter class>>#initializeSpecials",				"MCFileTreeStSnapshotReader>>#addClassAndMethodDefinitionsFromDirectory:",				"MCFileTreeStSnapshotWriter>>#writeMethodHolderDefinitions:extension:to:do:",				"MCFileTreeStSnapshotWriter>>#writeDefinitions:",				"MCFileTreeVersionInfoWriter>>#writeVersionInfo:",				"MCFileTreeWriter>>#initializePackageFileDirectoryCache",				"MCFrontier>>#remove:",				"MCFrontier>>#removeAll:",				"MCFrontier class>>#frontierOnAll:",				"MCGitHubRepository>>#normalizeTagsData:",				"MCMcdReader>>#loadPatch",				"MCMcdWriter>>#writePatch:",				"MCMcmWriter>>#writeConfiguration:",				"MCMczInstallerTest>>#assertDict:matchesInfo:",				"MCMczReader>>#loadDefinitions",				"MCMczWriter>>#writeVersion:",				"MCMergeBrowser>>#chooseAllUnchosenRemote",				"MCMergeBrowser>>#chooseAllOlderConflicts",				"MCMergeBrowser>>#chooseAllUnchosenLocal",				"MCMergeBrowser>>#chooseAllNewerConflicts",				"MCMergeOrLoadWarning>>#messageText",				"MCMerger>>#applyTo:",				"MCMergingTest>>#testMultiPackageMerge2",				"MCMergingTest>>#assertMerge:with:base:gives:conflicts:",				"MCMergingTest>>#testMultiPackageMerge",				"MCMergingTest>>#testMultiPackageMerge3",				"MCOrganizationDefinition>>#fullDescription",				"MCOrganizationDefinition>>#unload",				"MCOrganizationDefinition>>#basicCommonPrefix",				"MCPackage>>#basicSnapshot",				"MCPackageLoader>>#basicLoadDefinitions",				"MCPackageLoader>>#updatePackage:withSnapshot:",				"MCPackageLoader>>#dependencyWarning",				"MCPackageLoader>>#errorDefinitionWarning",				"MCPackageManager class>>#classRenamed:",				"MCPackageManager class>>#bestMatchingManagerForCategory:do:",				"MCPackageManager class>>#managersForClass:do:",				"MCPackageManager class>>#managersForPackage:do:",				"MCPackageManager class>>#classRemoved:",				"MCPatch>>#applyTo:",				"MCPatch>>#initializeWithBase:target:",				"MCRepositoryGroup>>#repositoriesDo:",				"MCRepositoryGroup class>>#withRepositories:",				"MCSnapshot>>#importInto:asPackageNamed:",				"MCSnapshot>>#initializeWithDefinitions:",				"MCSnapshotBrowser>>#loadProtocolSelection",				"MCSnapshotBrowser>>#loadClassSelection",				"MCSnapshotBrowser>>#loadCategorySelection",				"MCStReader>>#loadDefinitions",				"MCStWriter>>#visitOrganizationDefinition:",				"MCStWriter>>#writeDefinitions:",				"MCSubDirectoryRepository>>#loadAllFileNames",				"MCSubDirectoryRepository>>#findFullNameForWriting:",				"MCThreeWayMerger>>#addBaseSnapshot:",				"MCTool>>#buttonRow:",				"MCTool>>#fillMenu:fromSpecs:",				"MCTool>>#buildWindow",				"MCVersion>>#allDependenciesNotIn:do:ifUnresolved:",				"MCVersion>>#allAvailableDependenciesDo:",				"MCVersionHistoryBrowser>>#getMenu:",				"MCVersionInfo>>#allAncestorsTo:",				"MCVersionInfoWriter>>#writeVersionInfo:",				"MCVersionInspector>>#save",				"MCVersionLoader>>#basicLoadWithNameLike:",				"MCVersionLoader>>#addVersion:",				"MCVersionMerger>>#merge",				"MCVersionMerger>>#mergeWithNameLike:",				"MCVersionMerger>>#addVersions:",				"MCVersionMerger>>#gatherChanges",				"MCVersionSorter>>#addAllVersionInfos:",				"MCVersionSorter>>#addAllAncestorsOf:to:",				"MCVersionSorter>>#processVersionInfo:",				"MCVersionSorter>>#registerStepChildrenOf:seen:",				"MCVersionSorter>>#sortedVersionInfos",				"MCWorkingCopy>>#possiblyNewerVersions",				"MCWorkingCopy>>#merge:",				"MCWorkingCopy>>#loadedVersion",				"MCWorkingCopy>>#merged:",				"MCWorkingCopy>>#requiredPackagesParallelCollect:withMessage:",				"MCWorkingCopyBrowser>>#addRequiredDirtyPackage",				"MCWorkingCopyTest>>#clearPackageCache",				"MIMEHeaderValue class>>#fromMIMEHeader:",				"MOPTestClassA class>>#doRebuildMethodDictionary",				"MOPTestClassA class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassA class>>#removeFromSystem:",				"MOPTestClassA class>>#traitComposition:",				"MOPTestClassA class>>#recategorizeSelector:from:to:",				"MOPTestClassB class>>#doRebuildMethodDictionary",				"MOPTestClassB class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassB class>>#removeFromSystem:",				"MOPTestClassB class>>#traitComposition:",				"MOPTestClassB class>>#recategorizeSelector:from:to:",				"MOPTestClassC class>>#doRebuildMethodDictionary",				"MOPTestClassC class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassC class>>#removeFromSystem:",				"MOPTestClassC class>>#traitComposition:",				"MOPTestClassC class>>#recategorizeSelector:from:to:",				"MOPTestClassD class>>#doRebuildMethodDictionary",				"MOPTestClassD class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassD class>>#removeFromSystem:",				"MOPTestClassD class>>#traitComposition:",				"MOPTestClassD class>>#recategorizeSelector:from:to:",				"MTHandlerTest>>#exampleOpalCompiler",				"MTHandlerTest>>#testCountIfTrueDuringSlowFactorial",				"MTHandlerTest>>#compiledMethods:wrapping:then:",				"MTHandlerTest>>#testAddWithinDoObjectCentric",				"MTHandlerTest>>#testCountIfTrue",				"MTHandlerTest>>#testCountAdd",				"MTHandlerTest>>#testProfileSlowFibonacciMemoing",				"MTHandlerTest>>#testSelfSendBeforeRising",				"MTHandlerTest class>>#doRebuildMethodDictionary",				"MTHandlerTest class>>#removeFromSystem:",				"MTHandlerTest class>>#traitComposition:",				"MTHandlerTest class>>#fileOutLocalMethodsInCategory:on:",				"MTHandlerTest class>>#recategorizeSelector:from:to:",				"MTOverviewSpPresenter>>#initializePresenters",				"MTOverviewSpPresenter>>#initializeWindow:",				"MTSession>>#value:",				"MTSession class>>#compiledMethods:thenSelect:",				"MTTProfilingCopying>>#compiledMethods:wrapping:then:",				"MTTProfilingCopying classTrait>>#doRebuildMethodDictionary",				"MTTProfilingCopying classTrait>>#traitComposition:",				"MTTProfilingCopying classTrait>>#fileOutLocalMethodsInCategory:on:",				"MTTProfilingCopying classTrait>>#recategorizeSelector:from:to:",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#doRebuildMethodDictionary",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#traitComposition:",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#fileOutLocalMethodsInCategory:on:",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#recategorizeSelector:from:to:",				"MTTemperaturePresenter>>#methodTrackersDo:",				"MTTemperaturePresenter>>#toolbarActions",				"MTTemperaturePresenter>>#resortTrackers",				"MTTemperaturePresenter>>#runInstallMethodTemperatureTrackersStCommand:",				"MTTemperaturePresenter>>#xLabels:yLabels:matrix:",				"MTTemperaturePresenter>>#windowIsClosing",				"MTTracker class>>#reset",				"MTVisualizationsTest>>#testInspectProductToPropagating",				"MTVisualizationsTest>>#compiledMethods:wrapping:then:",				"MTVisualizationsTest>>#testSequenceableCollectionMergeSortWithoutCopying",				"MTVisualizationsTest>>#testSequenceableCollectionMergeSortPlugging",				"MTVisualizationsTest class>>#doRebuildMethodDictionary",				"MTVisualizationsTest class>>#removeFromSystem:",				"MTVisualizationsTest class>>#traitComposition:",				"MTVisualizationsTest class>>#fileOutLocalMethodsInCategory:on:",				"MTVisualizationsTest class>>#recategorizeSelector:from:to:",				"MailAddressParser>>#finishAddress",				"MailAddressParser>>#grabBasicAddress",				"MailComposition>>#breakLinesInMessage:",				"MailMessage>>#regenerateText",				"MailMessage>>#bodyTextFormatted",				"MailMessage>>#cleanedHeader",				"MailMessage>>#regenerateBodyFromParts",				"ManyTestResourceTestCase>>#testTearDownOrder",				"MczInstaller>>#install",				"MczInstaller>>#checkDependencies",				"MemoryFileSystemDirectory>>#fileEntriesDo:",				"MemoryStore>>#nodeAt:",				"MemoryStore>>#nodeAt:ifPresent:ifAbsent:",				"MenuItemMorph>>#withAllLeafItemsDo:",				"MenuMorph>>#layoutItems",				"MenuMorph>>#addList:",				"MenuMorph>>#toggleStayUp:",				"MenuMorph>>#setInvokingView:",				"MenuMorph>>#withAllLeafItemsDo:",				"MenuMorph>>#updateItemsWithTarget:orWithHand:",				"MenuMorph>>#moveSelectionDown:event:",				"MenuMorph>>#itemWithWording:",				"MenuRegistration>>#sort:",				"MenuRegistration>>#reset",				"MenuRegistration>>#buildMenuSpec:",				"MenuRegistration>>#collectMisplacedItemsIn:",				"MenuRegistration>>#assignOrderWithBlock:",				"MenuRegistrationExample class>>#pharoItemsOn:",				"MenubarMorph>>#open",				"MergeDiffMorph>>#indicateSrc",				"MergeDiffMorph>>#indicateDst",				"MergeDiffMorph>>#calculatedJoinMappings",				"MessageList>>#buildHierarchyForMessages:",				"MessageTally>>#leavesPrintExactOn:",				"MessageTally>>#treePrintOn:tabs:thisTab:total:totalTime:tallyExact:orThreshold:",				"MessageTally>>#printOn:total:totalTime:tallyExact:",				"MessageTally>>#leavesInto:fromSender:",				"MessageTally>>#rootPrintOn:total:totalTime:threshold:",				"MessageTally>>#printSenderCountsOn:",				"MessageTally>>#tallyPath:by:",				"MessageTally>>#tallyPath:in:by:",				"MessageTally>>#leavesPrintOn:threshold:",				"MetaLink>>#metaObject:",				"MetaLink>>#condition:",				"MetaLink>>#checkForCompatibilityWith:",				"MetaLink>>#uninstall",				"MetaLink>>#invalidate",				"MetaLink class>>#uninstallAll",				"MetaLinkAnonymousClassBuilder>>#compileClassAccessorForAnonymousClass:",				"MetaLinkInstaller>>#reinstallPermaLink:onNode:",				"MetaLinkInstaller>>#uninstallSuperJumpLinks",				"MetaLinkInstaller>>#removePermaLinksNodesReferencesFor:",				"MetaLinkInstaller>>#linkAllFromNode:into:",				"MetaLinkInstaller>>#reinstallPermaLinksForMethod:",				"MetaLinkInstaller>>#propagateLinkRemoval:forNode:",				"MetaLinkInstaller>>#uninstallFromAllAnonymousNodes:",				"MetaLinkInstaller>>#removeAllAnonymousNodesIn:fromAnonSubclassesOf:",				"MetaLinkInstaller>>#removeSuperJumpsFor:",				"MetaLinkInstaller>>#propagateLinkAddition:forNode:",				"MetaLinkInstaller>>#recursiveRemoveMethodNode:fromPermaLinks:",				"MetaLinkInstaller>>#installSuperJumpLinksInMethodNode:",				"MetaLinkRegistry>>#unregisterPermaLinksFor:",				"MetaLinkRegistry>>#removePermalinkSlotOrVarFromClassRegistry:",				"MetacelloAbstractConstructor>>#extractPragmas:for:into:",				"MetacelloAbstractPackageSpec>>#resolveToAllPackagesIn:into:visited:",				"MetacelloAbstractPackageSpec>>#configMethodBodyOn:hasName:cascading:indent:",				"MetacelloAbstractPackageSpec>>#specs:forPackageOrdering:",				"MetacelloAbstractVersionConstructor>>#setFor:do:",				"MetacelloAbstractVersionConstructor>>#setFor:version:",				"MetacelloAlternateResource>>#setUpMonticelloRepository",				"MetacelloAtomicLoadDirective>>#finalizeLoad:",				"MetacelloAtomicLoadDirective>>#directivesDo:",				"MetacelloAtomicLoadDirective>>#prepostLoadsDo:",				"MetacelloAtomicLoadDirective>>#prepostLoadDirectivesDo:",				"MetacelloAtomicLoadDirective>>#loadAtomicLoadDirective:gofer:",				"MetacelloAtomicMonticelloResource>>#setUpMonticelloRepository",				"MetacelloBaselineConstructor>>#calculate:project:",				"MetacelloCommonMCSpecLoader>>#linearLoadPackageSpecs:repositories:",				"MetacelloCommonMCSpecLoader>>#resolvePackageSpecReferences:gofer:",				"MetacelloCommonMCSpecLoader>>#repositoriesFrom:ignoreOverrides:",				"MetacelloCommonMCSpecLoader>>#loadPackageDirectives:gofer:",				"MetacelloCommonMCSpecLoader>>#resolvePackageSpec:gofer:",				"MetacelloCoreVersionQueryTestCase>>#testBaseline10ResolveToLoadableSpecs01",				"MetacelloCoreVersionQueryTestCase>>#testBaseline10Groups",				"MetacelloCoreVersionQueryTestCase>>#testBaseline10Projects",				"MetacelloDictionaryRepositoryTest>>#tearDown",				"MetacelloFetchingMCSpecLoader>>#linearLoadPackageSpec:gofer:",				"MetacelloFetchingMCSpecLoader>>#resolveDependencies:nearest:into:",				"MetacelloGoferCommit>>#execute:",				"MetacelloGroupSpec>>#requiresSpecsForPackageOrdering:",				"MetacelloGroupSpec>>#resolveSpecsForPackageOrdering:",				"MetacelloGroupSpec>>#configMethodCascadeOn:member:last:indent:",				"MetacelloGroupSpec>>#resolveToPackagesIn:andProjects:into:visited:",				"MetacelloIssue108Resource>>#setUpMonticelloRepository",				"MetacelloIssueTestCase>>#tearDown",				"MetacelloLoadData>>#addVersion:versionInfo:resolvedReference:packageSpec:",				"MetacelloLoadingMCSpecLoader>>#goferCommitBranchPackage:using:commitMessage:",				"MetacelloLoadingMCSpecLoader>>#copySpec:from:to:",				"MetacelloLoadingMCSpecLoader>>#resolveSpec:from:",				"MetacelloLoadingMCSpecLoader>>#goferCommitPackageUsing:commitMessage:",				"MetacelloLoadingMCSpecLoader>>#latestPackage:fromRepository:",				"MetacelloMCBaselineOfProjectSpec>>#repositoryBranchName",				"MetacelloMCBaselineOfProjectSpec>>#repositoryVersionString",				"MetacelloMCBaselineProject>>#setBaselineRepositoryDescription:",				"MetacelloMCPartiallyLoadedStatus>>#evaluateStatus:",				"MetacelloMCProject>>#fetchProject:",				"MetacelloMCProject>>#updatePackageRepositoriesFor:",				"MetacelloMCProject>>#updateProject:",				"MetacelloMCProjectSpec>>#allPackagesLoaded:",				"MetacelloMCProjectSpec>>#isPossibleBaseline",				"MetacelloMCProjectSpec>>#isPartiallyLoaded:",				"MetacelloMCProjectSpec>>#loadPackageList",				"MetacelloMCProjectSpec>>#loadedPackageNames:",				"MetacelloMCVersion>>#packageAndProjectNamesToLoad:loader:",				"MetacelloMCVersion>>#allPackagesForSpecs:visited:",				"MetacelloMCVersionSpec>>#isPartiallyCurrentAgainst:",				"MetacelloMCVersionSpec>>#currentlyLoadedExtensionClassesInVersion",				"MetacelloMCVersionSpec>>#configMethodOn:last:indent:",				"MetacelloMCVersionSpec>>#packageSpecsInLoadOrderForMap:",				"MetacelloMCVersionSpec>>#specsNamed:projectDo:packageDo:groupDo:",				"MetacelloMCVersionSpecLoader>>#load",				"MetacelloMCVersionValidator>>#validateProjectLoad",				"MetacelloMCVersionValidator>>#validateVersionTests:",				"MetacelloMemberListSpec>>#mergeSpec:",				"MetacelloMemberListSpec>>#detect:ifNone:",				"MetacelloMemberListSpec>>#collect:",				"MetacelloMemberListSpec>>#specListDo:",				"MetacelloMemberListSpec>>#do:",				"MetacelloMemberListSpec>>#map",				"MetacelloMemberListSpec>>#select:",				"MetacelloMethodSection>>#attributePrintString",				"MetacelloMonticelloResource>>#setUpMonticelloRepository",				"MetacelloPackageSpec>>#currentPackageLoaded:comparing:notLoaded:using:",				"MetacelloPackageSpecResolutionError>>#repositoryString",				"MetacelloPackagesSpec>>#sortPackageSpecs:packageSpec:groupLoops:for:",				"MetacelloPackagesSpec>>#applyIncludesTo:for:firstTime:for:",				"MetacelloPackagesSpec>>#packageSpecsInLoadOrderFor:",				"MetacelloPlatform>>#collection:do:displaying:",				"MetacelloPlatform>>#useStackCacheDuring:defaultDictionary:",				"MetacelloProject>>#printOn:",				"MetacelloProject>>#currentVersionAgainst:",				"MetacelloProjectReferenceSpec>>#resolveToAllPackagesIn:into:visited:",				"MetacelloProjectRegistration>>#printOn:",				"MetacelloProjectRegistration class>>#configurationClasses",				"MetacelloProjectRegistry>>#primeRegistryFromImage:baselineClasses:prioritizeConfiguration:",				"MetacelloProjectSpec>>#configMethodBodyOn:indent:fromShortCut:",				"MetacelloScriptApiExecutor>>#projectSpecsFromRepositoryArg",				"MetacelloScriptApiExecutor>>#executeBlock:do:",				"MetacelloScriptApiExecutor>>#executeString:do:",				"MetacelloScriptApiExecutor>>#executeCollection:do:",				"MetacelloScriptEngine>>#get",				"MetacelloScriptExecutor>>#execute:",				"MetacelloScriptExecutor>>#executeString:do:",				"MetacelloScriptExecutor>>#executeCollection:do:",				"MetacelloScriptExecutor>>#executeBlock:do:",				"MetacelloScriptingStdTstHarnessTestCase>>#tearDown",				"MetacelloScriptingStdTstHarnessTestCase>>#tearDownPackages",				"MetacelloScriptingStdTstHarnessTestCase>>#validateProjects:",				"MetacelloScriptingTestCase>>#setUpRepositoryContents:sourceRepo:targetRepo:",				"MetacelloSemanticVersionNumber>>#do:separatedBy:",				"MetacelloSemanticVersionNumber>>#print:prefix:on:",				"MetacelloSemanticVersionNumber class>>#isSemanticIdentifier:",				"MetacelloSemanticVersionNumber class>>#fromString:forPattern:",				"MetacelloSemanticVersionNumberTestCase>>#testPrinting",				"MetacelloSemanticVersionNumberTestCase>>#testIssue392",				"MetacelloSemanticVersionNumberTestCase>>#testEqualityComparison",				"MetacelloSymbolicVersionMethodSpec>>#methodSource",				"MetacelloTestsGoferUnload>>#execute",				"MetacelloToolBox>>#addSectionsFrom:forBaseline:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox>>#addBaselineOfSection:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#modifySection:sectionIndex:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#modifySymbolicVersionMethodFor:symbolicVersionSpecsDo:",				"MetacelloToolBox>>#addSymbolicSection:version:",				"MetacelloToolBox>>#addSection:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#importFrom:projectAttributes:inactiveAttributes:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox>>#editVersionSpecsForImport:projectAttributes:active:fullVersionSpec:updateProjects:updatePackages:visited:updated:",				"MetacelloToolBox>>#updateVersionMethodForVersion:projectAttributes:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox>>#modifyBaselineOf",				"MetacelloToolBox>>#buildMapFrom:for:",				"MetacelloToolBox class>>#modifyDevelopmentVersionIn:imports:requiredProjects:packages:description:",				"MetacelloToolBox class>>#saveModifiedDevelopmentPackages:for:description:",				"MetacelloToolBox class>>#helpTopicFor:",				"MetacelloToolBoxBaselineConstructor>>#extractMethodSectionsForClass:",				"MetacelloToolBoxBaselineConstructor>>#evaluateBaselineMethodSection:",				"MetacelloToolBoxConstructor>>#methodSection:inEvaluationOrder:do:",				"MetacelloToolBoxConstructor>>#evaluateMethodSection:version:",				"MetacelloToolBoxConstructor>>#extractMethodSectionsFor:",				"MetacelloToolBoxConstructor>>#methodSectionsInEvaluationOrder:do:",				"MetacelloToolBoxConstructor>>#methodSection:do:",				"MetacelloVersionConstructor>>#collectAllVersionsFromVersionImportPragmasInto:using:satisfiedPragmas:",				"MetacelloVersionConstructor>>#collectDefaultSymbolicVersionsFromVersionPragmasFrom:into:using:",				"MetacelloVersionConstructor>>#collectAllSymbolicVersionsFromVersionPragmasInto:using:",				"MetacelloVersionConstructor>>#verifyVersionImportPragmas:definedIn:",				"MetacelloVersionConstructor>>#specResolverBlock",				"MetacelloVersionConstructor>>#symbolicVersionResolverBlock",				"MetacelloVersionConstructor>>#collectAllVersionsFromVersionPragmasInto:using:",				"MetacelloVersionLoadDirective>>#versionsDo:",				"MetacelloVersionLoadDirective>>#directivesDo:",				"MetacelloVersionLoadDirective>>#prepostLoadsDo:",				"MetacelloVersionLoadDirective>>#prepostLoadDirectivesDo:",				"MetacelloVersionLoadDirective>>#versionDirectivesDo:",				"MetacelloVersionLoadDirective>>#loadAtomicLoadDirective:gofer:",				"MetacelloVersionLoadDirective>>#printLoadDirectivesOn:indent:",				"MetacelloVersionLoadDirective>>#packageDirectivesDo:",				"MetacelloVersionLoadDirective>>#versionDirectivesDepthFirstDo:",				"MetacelloVersionLoadDirective>>#loadLinearLoadDirective:gofer:",				"MetacelloVersionLoadDirective>>#packagesDo:",				"MetacelloVersionMethodSpec>>#addMethodSection:versionSpec:",				"MetacelloVersionMethodSpec>>#findMethodSection:sectionIndex:",				"MetacelloVersionMethodSpec>>#methodSelectorAndPragma:imports:versionString:on:",				"MetacelloVersionNumber>>#printOn:",				"MetacelloVersionNumber>>#do:separatedBy:",				"MetacelloVersionNumber>>#collapseZeros",				"MetacelloVersionNumber class>>#fromString:",				"MetacelloVersionSpec>>#configPackagesSpecMethodOn:indent:",				"MetacelloVersionSpec>>#configMethodOn:last:indent:",				"MetacelloVersionSpec>>#packageNamed:forLoad:forMap:ifAbsent:",				"MetacelloVersionSpec>>#resolveToLoadableSpecs:forLoad:map:",				"MetacelloVersionSpec>>#projectDo:packageDo:groupDo:",				"MetacelloVersionValidator>>#validatePragmas",				"MetacelloVersionValidator>>#validateProject:",				"MetacelloVersionValidator>>#extractExcludedValidations",				"Metaclass>>#subclassesDo:",				"Metaclass>>#addInstVarNamed:",				"MetaclassForTraits>>#notifyOfRecategorizedSelector:from:to:",				"MetaclassForTraits>>#rebuildMethodDictionary",				"MethodClassifier>>#classifyAll:",				"MethodClassifier>>#protocolForKnownKeywordSuffixOfSelector:",				"MethodDictionary class>>#compactAllInstances",				"MethodDictionaryTest>>#testValues",				"MethodDictionaryTest>>#testKeysSortedSafely",				"MethodDictionaryTest>>#testKeys",				"MethodDictionaryTest>>#testAssociations",				"MethodDictionaryTest class>>#doRebuildMethodDictionary",				"MethodDictionaryTest class>>#fileOutLocalMethodsInCategory:on:",				"MethodDictionaryTest class>>#removeFromSystem:",				"MethodDictionaryTest class>>#traitComposition:",				"MethodDictionaryTest class>>#recategorizeSelector:from:to:",				"MethodPragmaTest>>#tearDown",				"MethodPragmaTest>>#pragma:selector:times:",				"MicAbstractBlock>>#text",				"MicAbstractMicrodownTextualBuilder>>#nextPutAll:",				"MicAnnotatedBlock>>#text",				"MicArgumentsSplitter>>#setNoNameButArguments:",				"MicCodeBlock>>#text",				"MicElement>>#inlineParse:",				"MicEnvironmentBlock>>#body",				"MicFormatBlock>>#text",				"MicHeaderBlock>>#header",				"MicInlineBlockWithUrl>>#caption",				"MicInlineParser>>#resultProcess",				"MicInlineParser>>#identifyMarkupFor:",				"MicListItemBlock>>#text",				"MicMicrodownTextualBuilder>>#raw:",				"MicMicrodownTextualBuilder>>#figureURL:withCaption:withParameters:",				"MicMicrodownTextualBuilderTest>>#testOrderedList",				"MicMicrodownTextualBuilderTest>>#testUnorderedList",				"MicRichTextCanvas>>#'<<'",				"MicRichTextComposer>>#visitColumns:",				"MicRichTextComposer>>#visitOrderedList:",				"MicRichTextComposer>>#visitUnorderedList:",				"MicSameStartStopMarkupBlock>>#caption",				"MicTextStyler>>#postTextTreatment:",				"MicrodownStyleHelpBuilder>>#build",				"MicrodownVisitor>>#visitAnnotated:",				"MicrodownVisitor>>#visitHeader:",				"MicrodownVisitor>>#visitEnvironment:",				"MicrodownVisitor>>#visitLink:",				"MicrodownVisitor>>#visitFigure:",				"Model>>#veryDeepFixupWith:",				"Model>>#changed:",				"Model>>#changed:with:",				"ModelDependentDialogWindow>>#model:",				"MonticelloBootstrap>>#loadBootstrapPackagesNamed:",				"MonticelloBootstrap>>#loadBootstrapPackages",				"MonticelloBootstrap>>#createWorkingCopies",				"MonticelloBootstrap>>#loadPackagesNamed:",				"Morph>>#deleteDockingBars",				"Morph>>#submorphsDo:",				"Morph>>#addCellLayoutMenuItems:hand:",				"Morph>>#allMorphsDo:",				"Morph>>#addWorldHandlesTo:box:",				"Morph>>#adhereToEdge",				"Morph>>#addMorphInFrontOfLayer:",				"Morph>>#simulateClickWith:position:",				"Morph>>#addMorphInLayer:",				"Morph>>#submorphsBehind:do:",				"Morph>>#removeAllMorphs",				"Morph>>#announceDeleted",				"Morph>>#announceOpened",				"Morph>>#doLayoutIn:",				"Morph>>#allMorphsInto:",				"Morph>>#clipText",				"Morph>>#simulateKeyStrokes:",				"Morph>>#submorphsInFrontOf:do:",				"Morph>>#addTableLayoutMenuItems:hand:",				"Morph>>#privateFullMoveBy:",				"Morph>>#showActions",				"Morph>>#privateAddAllMorphs:atIndex:",				"Morph>>#shiftSubmorphsOtherThan:by:",				"Morph>>#submorphBounds",				"Morph>>#focusChanged",				"Morph>>#boundingBoxOfSubmorphs",				"Morph>>#clearArea",				"Morph>>#balloonHelpTextForHandle:",				"Morph>>#addHandlesTo:box:",				"Morph>>#addToggleItemsToHaloMenu:",				"Morph>>#simulateClickWith:",				"Morph>>#removeAllMorphsIn:",				"Morph class>>#morphsUnknownToTheirOwners",				"MorphExtension>>#veryDeepFixupWith:",				"MorphExtension>>#veryDeepInner:",				"MorphTreeColumn>>#contentWidth",				"MorphTreeListManager>>#noteRemovalOfAll:",				"MorphTreeListManager>>#updateLastClickedMorph",				"MorphTreeListManager>>#emptySelection",				"MorphTreeListManager>>#addAllToSelection:",				"MorphTreeListManager>>#nodeMorphsWithAllNodeItems:",				"MorphTreeListManager>>#mouseMove:on:",				"MorphTreeModel>>#deeplyDetect:",				"MorphTreeMorph>>#updateFromSelection:",				"MorphTreeMorph>>#columnResizersToFront",				"MorphTreeMorph>>#toggleExpandedState:event:",				"MorphTreeMorph>>#columns:",				"MorphTreeMorph>>#expandAllTo:",				"MorphTreeMorph>>#childrenDo:",				"MorphTreeMorph>>#expandRoots",				"MorphTreeMorph>>#expandAllSuchThat:",				"MorphTreeMorph>>#release",				"MorphTreeMorph>>#addSubmorphsFromNodeList:previouslyExpanded:",				"MorphTreeMorph>>#buildTopHeader",				"MorphTreeMorph>>#addMorphsAfter:fromCollection:",				"MorphTreeMorph>>#topHeaderHeight",				"MorphTreeMorph>>#expandAll:except:",				"MorphTreeMorph>>#mouseUp:",				"MorphTreeMorph>>#removeColumnResizers",				"MorphTreeMorph>>#adjustSubmorphPositionsOf:startIdx:startPos:",				"MorphTreeMorph>>#drawOn:",				"MorphTreeMorph>>#updateColumnMorphsWidth",				"MorphTreeMorph>>#expand:to:",				"MorphTreeMorph>>#noteRemovalOfAll:",				"MorphTreeMorph>>#updateColumnResizersHeight",				"MorphTreeMorphTest>>#testUpdatingSelectionsOnUpdate",				"MorphTreeMorphTest>>#testMaintainingSelectionsOnUpdate",				"MorphTreeMorphTest>>#testLeakingSelectionsOnUpdate",				"MorphTreeMorphTest>>#testUpdatingSelectionsOnUpdateWithRemoval",				"MorphTreeNodeModel>>#isPartialMatch",				"MorphTreeNodeMorph>>#buildRowMorph",				"MorphTreeTransformMorph>>#privateAddAllMorphs:atIndex:",				"MorphicEventHandler>>#methodRefList",				"MorphicEventHandler>>#notifyMorphsOfEvent:ofType:from:",				"MorphicUIManager>>#activate",				"MorphicUIManager>>#deactivate",				"MorphicUIManager class>>#doRebuildMethodDictionary",				"MorphicUIManager class>>#fileOutLocalMethodsInCategory:on:",				"MorphicUIManager class>>#removeFromSystem:",				"MorphicUIManager class>>#traitComposition:",				"MorphicUIManager class>>#recategorizeSelector:from:to:",				"MouseOverHandler>>#informMouseLeaveToLeftMorphsUsing:",				"MultistateButtonMorph>>#privateMoveBy:",				"MultistateButtonMorph>>#extent:",				"MultistateButtonMorph>>#fillStyles",				"MutexTest>>#tearDown",				"NECSymbolEntry>>#implementorsDescription:",				"NSOrdinalScale>>#domain:",				"NSScaleTest>>#testAccessorsColors",				"NativeArrayTest>>#testAtAllPutFail",				"NativeArrayTest>>#testAtPutBiggerNumberThrowsException",				"NativeArrayTest>>#testReplaceFromToWithStartingAt",				"NativeArrayTest>>#testAtAllPut",				"NativeArrayTest>>#testAtPutExactSizeNumber",				"NetNameResolver class>>#addressFromIPv6String:",				"NetworkSystemSettings class>>#manageHttpProxyExceptions:",				"NonInteractiveTranscript class>>#shutDown",				"NumberParserTest>>#testFloatPrintString",				"OCASTCheckerTest>>#testSemanticAnalysisOnNonMethodNode",				"OCASTClosureAnalyzer>>#visitBlockNode:",				"OCASTClosureAnalyzer>>#visitMethodNode:",				"OCASTDoubleBlockTranslatorTest>>#testComposedExample:withTemps:withFirstBlock:withSecondBlock:",				"OCASTSemanticAnalyzer>>#visitBlockNode:",				"OCASTSemanticAnalyzer>>#visitInlinedBlockNode:",				"OCASTSemanticAnalyzer>>#visitMethodNode:",				"OCASTSemanticAnalyzer>>#visitSequenceNode:",				"OCASTSingleBlockTranslatorTest>>#testComposedExample:withTemps:withBlock:withArguments:",				"OCASTTranslator>>#visitLargeArrayNode:",				"OCASTTranslator>>#visitMethodNode:",				"OCASTTranslator>>#visitArrayNode:",				"OCASTTranslator>>#emitMessageNode:",				"OCASTTranslator>>#visitInlinedBlockNode:",				"OCASTTranslatorForEffect>>#visitSequenceNode:",				"OCAbstractMethodScope>>#allTemps",				"OCAbstractMethodScope>>#localTemps",				"OCBytecodeDecompilerTest>>#testDecompilerOrderedCollectionDo",				"OCBytecodeDecompilerTest>>#testDecompileBytecodeDecompilerTestClass",				"OCBytecodeDecompilerTest>>#testDecompileBytecodeGeneratorTest",				"OCBytecodeDecompilerTest>>#testDecompileIRBuilderTestClass",				"OCBytecodeToASTCache>>#generateForNode:",				"OCBytecodeToASTCacheTest>>#testCacheInInterval:equalsNode:",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR2",				"OCClosureCompilerTest>>#doTestDebuggerTempAccessWith:with:",				"OCClosureCompilerTest class>>#methodWithVariousTemps",				"OCCompilerTest>>#testReservedNameAsBlockArgumentShadowing",				"OCCompilerTest>>#testReservedNameAsMethodArgumentShadowing",				"OCScannerTest>>#testLiteralSymbols",				"OCSourceCode2BytecodeTest>>#testPrimDoWith",				"OCUndeclaredVariableWarning>>#openMenuIn:",				"OCUndeclaredVariableWarning>>#defineClass:",				"OSEnvironment>>#includes:",				"OSKeySymbols class>>#initialize",				"OSSDL2AthensRenderer>>#updateRectangles:",				"OSSDL2Driver>>#sendEventWithoutWindow:",				"OSSDL2FormRenderer>>#updateAreas:immediate:",				"OSSDLPasteEventFilter>>#changeEventsToIncludeModifier",				"OSSDLPasteEventFilter>>#flushEvents",				"OSTouchFingerTracker>>#totalDistanceTravelled",				"OSTouchGestureDetector>>#centerOfAllFingers",				"OSWindowFormRenderer>>#updateAreas:immediate:",				"OSWindowGestureHandler>>#sendEventToGestures:",				"OSWindowGestureHandler>>#updateGesturesActiveFingers",				"OSWindowJoystickExample>>#simulateBullets:",				"OSWindowJoystickExample>>#drawBullets",				"OSWindowRenderThread>>#performAnimationFrames",				"OSWindowRenderer>>#updateRectangles:",				"Object>>#recursivelySetIsReadOnlyObject:exceptObjectsIn:",				"Object>>#stSpotterProcessorsFor:",				"Object>>#actionsDo:",				"Object>>#changed:",				"Object>>#link:toNodes:",				"Object>>#changed:with:",				"Object class>>#reInitializeDependentsFields",				"ObjectFinalizerCollection>>#finalize",				"ObjectWithPrintingRaisingHaltTest>>#testInspectingObjectWithPrintOnWithHaltOpenInspector",				"ObservablePoint class>>#doRebuildMethodDictionary",				"ObservablePoint class>>#fileOutLocalMethodsInCategory:on:",				"ObservablePoint class>>#removeFromSystem:",				"ObservablePoint class>>#traitComposition:",				"ObservablePoint class>>#recategorizeSelector:from:to:",				"ObservableValueHolder>>#valueChanged:",				"OmFileStore>>#entryBufferDo:",				"OmMemoryStore>>#entriesDo:",				"OmMemoryStore class>>#withAllEntries:",				"OmSessionStore class>>#startUp",				"OpalCompiler>>#callPlugins",				"OpalCompiler class>>#overlayStep1CopyClasses",				"OpalCompiler class>>#overlayStep5UpdateInstances",				"OrderedCollection>>#addAllLast:",				"OrderedCollection class>>#compactAllInstances",				"OrderedCollectionTest>>#testCopyNonEmptyWithout",				"OrderedCollectionTest>>#test0FixturePutOneOrMoreElementsTest",				"OrderedCollectionTest>>#testIntersectionItself",				"OrderedCollectionTest>>#testKeysAndValuesDo",				"OrderedCollectionTest>>#testAsByteArray",				"OrderedCollectionTest>>#testAtAllIndexesPut",				"OrderedCollectionTest>>#testAddAfterIndex",				"OrderedCollectionTest>>#testAsCommaStringMore",				"OrderedCollectionTest>>#testCopyNonEmptyWith",				"OrderedCollectionTest>>#testCopyEmptyWithoutAll",				"OrderedCollectionTest>>#testCopyReplaceAllWithManyOccurrence",				"OrderedCollectionTest>>#testWithAll",				"OrderedCollectionTest>>#testCopyNonEmptyWithoutAll",				"OrderedCollectionTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"OrderedCollectionTest>>#testAsSetWithEqualsElements",				"OrderedCollectionTest>>#testPairsCollect",				"OrderedCollectionTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"OrderedCollectionTest>>#testCopyNonEmpty",				"OrderedCollectionTest>>#testAsIdentitySetWithEqualsElements",				"OrderedCollectionTest>>#testAsStringOnDelimiterLastOne",				"OrderedCollectionTest>>#testRemoveAllFoundIn",				"OrderedCollectionTest>>#testConcatenation",				"OrderedCollectionTest>>#test0SortingArrayedTest",				"OrderedCollectionTest>>#testOccurrencesOf",				"OrderedCollectionTest>>#testAsSortedCollection",				"OrderedCollectionTest>>#test0FixtureTConvertAsSetForMultiplinessTest",				"OrderedCollectionTest>>#testSorted",				"OrderedCollectionTest>>#test0FixtureCopyPartOfSequenceableTest",				"OrderedCollectionTest>>#testSortedUsingBlock",				"OrderedCollectionTest>>#test0FixtureOccurrencesForMultiplinessTest",				"OrderedCollectionTest>>#testCopyNonEmptyWithoutNotIncluded",				"OrderedCollectionTest>>#testAsSortedCollectionWithSortBlock",				"OrderedCollectionTest>>#testAsIdentitySetWithIdentityEqualsElements",				"OrderedCollectionTest>>#test0CopyTest",				"OrderedCollectionTest>>#testAsStringOnDelimiterMore",				"OrderedCollectionTest>>#testSortUsingSortBlock",				"OrderedCollectionTest>>#testAtAllPut",				"OrderedCollectionTest>>#assertNoDuplicates:whenConvertedTo:",				"OrderedCollectionTest>>#testDifference",				"OrderedCollectionTest>>#testAsStringOnDelimiterOne",				"OrderedCollectionTest>>#testShuffled",				"OrderedCollectionTest>>#test0FixtureOccurrencesTest",				"OrderedCollectionTest>>#testDifferenceWithSeparateCollection",				"OrderedCollectionTest>>#testDifferenceWithNonNullIntersection",				"OrderedCollectionTest>>#testAddBeforeIndex",				"OrderedDictionary>>#keysAndValuesRemove:",				"OrderedDictionary>>#removeKeys:",				"OrderedDictionaryTest>>#testKeyAtValueIfAbsent",				"OrderedDictionaryTest>>#testKeyAtIdentityValue",				"OrderedDictionaryTest>>#assertIsDictionary:withUnorderedAssociations:",				"OrderedDictionaryTest>>#testSelect",				"OrderedDictionaryTest>>#testKeyAtIdentityValueIfAbsent",				"OrderedDictionaryTest>>#testAssociationsSelect",				"OrderedDictionaryTest>>#testAssociationAtIfAbsent",				"OrderedDictionaryTest>>#testAddAll",				"OrderedDictionaryTest>>#testKeyAtValue",				"OrderedDictionaryTest>>#testDictionaryPublicProtocolCompatibility",				"OrderedDictionaryTest>>#testDeclareFrom",				"OrderedDictionaryTest>>#testAtIfAbsent",				"OrderedDictionaryTest>>#testIncludes",				"OrderedDictionaryTest>>#testAt",				"OrderedDictionaryTest>>#testIncludesKey",				"OrderedDictionaryTest>>#testKeyForIdentity",				"OrderedDictionaryTest>>#testDo",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsent",				"OrderedDictionaryTest>>#testHash",				"OrderedDictionaryTest>>#testAtIfPresent",				"OrderedDictionaryTest>>#testEqualsOtherOrderedDictionaries",				"OrderedDictionaryTest>>#assertKey:wasRemovedfrom:",				"OrderedDictionaryTest>>#testRemoveKeys",				"OrderedDictionaryTest>>#testIncludesAssociation",				"OrderedDictionaryTest>>#assertIsDictionary:copiedFrom:withOrderedAssociations:",				"OrderedDictionaryTest>>#testNewFromPairs",				"OrderedDictionaryTest>>#testAssociationAt",				"OrderedDictionaryTest>>#testAssociationAtIfPresent",				"OrderedDictionaryTest>>#testRemoveAll",				"OrderedDictionaryTest>>#testIncludesIdentity",				"OupsDebuggerSelectorTest>>#tearDown",				"OupsDebuggerSelectorTest>>#testNextDebugger",				"OupsDebuggerSystem>>#performPreDebugActionsIn:",				"OupsDebuggerSystem class>>#closeAllDebuggers",				"OupsSingleDebuggerSelectorTest>>#tearDown",				"OverflowRowMorph>>#adoptPaneColor:",				"PNGReadWriter>>#writeTRNSChunkOn:",				"PNGReadWriter>>#writePLTEChunkOn:",				"PNGReadWriter>>#understandsImageFormat",				"PNGReadWriter class>>#initialize",				"PNGReadWriterTest>>#decodeColors:depth:",				"PNGReadWriterTest>>#encodeColors:depth:",				"PSMCChangesGrouper>>#group",				"PSMCMergeMorph>>#model:",				"PSMCMergePatchMorph>>#useAllIncomingVersion",				"PSMCMergePatchMorph>>#markAllAsConflict",				"PSMCMergePatchMorph>>#keepAllCurrentVersion",				"PaSuiteTest>>#testMatrix3ExampleHasTheCorrectTests",				"PaSuiteTest>>#testCasesHasTheCorrectTests",				"PaSuiteTest>>#testMatrixExampleHasTheCorrectTests",				"PaSuiteTest>>#testCombinedHasTheCorrectTests",				"PackageAPIHelpBuilder>>#build",				"PackageAPIHelpBuilder class>>#buildPackageTopic:",				"PanelMorph>>#checkSplitters",				"Paragraph>>#buildSelectionBlocksFrom:to:",				"Paragraph>>#adjustRightX",				"Paragraph>>#extraSelectionRects",				"Paragraph>>#moveBy:",				"Paragraph>>#displayExtraSelectionOn:",				"Paragraph>>#displayExtraSelectionOnAthensCanvas:",				"Paragraph>>#adjustLineIndicesBy:",				"Paragraph class>>#refreshAllCompositions",				"ParametrizedTestCase>>#setUp",				"ParametrizedTestCase class>>#buildSuite",				"ParametrizedTestMatrix>>#*",				"PasteUpMorph>>#closeAllUnchangedWindows",				"PasteUpMorph>>#flashRects:color:",				"PasteUpMorph>>#contentsMenu:",				"PasteUpMorph>>#closeAllWindowsDiscardingChanges",				"PasteUpMorph>>#cleanseOtherworldlySteppers",				"PasteUpMorph>>#bringWindowsFullOnscreen",				"PasteUpMorph>>#restoreMainDockingBarDisplay",				"PasteUpMorph>>#addWorldToggleItemsToHaloMenu:",				"PasteUpMorph>>#removeTaskbar",				"PasteUpMorph>>#moveCollapsedWindowsToTaskbar",				"PasteUpMorph>>#findWindow:",				"PasteUpMorph>>#windowsSatisfying:",				"PasteUpMorph>>#initializeDesktopCommandKeySelectors",				"Path>>#stonOn:",				"Path>>#segments",				"Path class>>#canonicalizeElements:",				"Path class>>#withAll:",				"PharoCommonTools>>#cleanUp",				"PharoSyntaxTutorialTest>>#testEachSelectorReturnsALesson",				"PharoSyntaxTutorialTest>>#testEachSelectorExists",				"PharoSyntaxTutorialTest class>>#doRebuildMethodDictionary",				"PharoSyntaxTutorialTest class>>#fileOutLocalMethodsInCategory:on:",				"PharoSyntaxTutorialTest class>>#removeFromSystem:",				"PharoSyntaxTutorialTest class>>#traitComposition:",				"PharoSyntaxTutorialTest class>>#recategorizeSelector:from:to:",				"PharoTutorialHelpTutorialBuilder>>#build",				"PharoTutorialHelpTutorialBuilder>>#buildTutorialTopicFor:",				"PluggableButtonMorph>>#mouseUp:",				"PluggableButtonMorph>>#mouseMove:",				"PluggableDictionaryTest>>#testHashBlock",				"PluggableIconListMorph>>#interactWithSelectedItem",				"PluggableListMorph>>#userString",				"PluggableMenuSpec>>#addList:",				"PluggableMenuSpec>>#asMenuMorphOfKind:",				"PointArray>>#bounds",				"PointArray class>>#doRebuildMethodDictionary",				"PointArray class>>#fileOutLocalMethodsInCategory:on:",				"PointArray class>>#removeFromSystem:",				"PointArray class>>#traitComposition:",				"PointArray class>>#recategorizeSelector:from:to:",				"PointerLayout>>#checkSlotNames",				"PointerLayout>>#host:",				"PolygonMorph>>#containsPoint:",				"PolygonMorph>>#computeArrowFormAt:from:",				"PolygonMorph>>#lineSegmentsDo:",				"PolygonMorph>>#straightLineSegmentsDo:",				"PolygonMorph>>#computeBounds",				"PolygonMorph>>#drawOnFormCanvas:",				"PolygonMorph>>#privateMoveBy:",				"PolygonMorph>>#borderForm",				"PolygonMorph>>#drawArrowOnAthensCanvas:at:from:",				"PolygonMorph>>#removeHandles",				"PolygonMorph>>#asAthensCurvedPathOn:",				"PolygonMorph class>>#doRebuildMethodDictionary",				"PolygonMorph class>>#fileOutLocalMethodsInCategory:on:",				"PolygonMorph class>>#removeFromSystem:",				"PolygonMorph class>>#traitComposition:",				"PolygonMorph class>>#recategorizeSelector:from:to:",				"PopupChoiceDialogWindow>>#filter:",				"PopupChoiceDialogWindow>>#selectLastEnabledItem",				"PopupChoiceDialogWindow>>#processEnter:",				"PopupChoiceDialogWindow>>#selectFirstEnabledItem",				"PopupChoiceOrRequestDialogWindow>>#filter:",				"PositionableStream>>#preservingPositionDo:",				"PragmaCollector>>#reset",				"PragmaCollector>>#classRemovedEventOccurs:",				"PragmaCollector>>#do:",				"PragmaCollector>>#addedEventOccurs:",				"PragmaMenuBuilder>>#interpretRegistration:",				"PragmaMenuBuilder>>#collectRegistrations",				"PragmaMenuBuilder>>#arrangeRegistrations",				"ProcessBrowser class>>#dumpTally:on:",				"ProcessBrowser class>>#nameAndRulesFor:",				"ProcessBrowser class>>#dumpPigStackOn:",				"ProcessList>>#select:thenCollect:",				"ProcessList>>#collect:thenSelect:",				"ProcessList>>#size",				"ProcessList>>#copyWithout:",				"ProcessList>>#removeAllSuchThat:",				"ProcessList>>#select:",				"ProcessMonitorTestService>>#terminateRunningProcesses",				"ProcessorScheduler>>#scanSchedule:startingAt:",				"ProgressBarMorph class>>#doRebuildMethodDictionary",				"ProgressBarMorph class>>#fileOutLocalMethodsInCategory:on:",				"ProgressBarMorph class>>#removeFromSystem:",				"ProgressBarMorph class>>#traitComposition:",				"ProgressBarMorph class>>#recategorizeSelector:from:to:",				"ProperMethodCategorizationTest>>#testNoEmptyProtocols",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedInProtocols:whenSubclassOf:",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedIn:whenSubclassOf:",				"ProperMethodCategorizationTest>>#testNoLeadingOrTrailingSpacesInCategoryNames",				"ProperPackagesTest>>#testProperClassTagCasing",				"ProportionalSplitterMorph>>#hideLeftOrTop",				"ProportionalSplitterMorph>>#showLeftOrTop",				"ProportionalSplitterMorph>>#showRightOrBottom",				"ProportionalSplitterMorph>>#hideRightOrBottom",				"ProportionalSplitterMorph>>#updateFromEvent:",				"Protocol>>#addAllMethodsFrom:",				"ProtocolClient>>#logProgress:",				"ProtocolOrganizer>>#fromSpec:",				"ProtocolOrganizer>>#removeEmptyProtocols",				"ProtocolOrganizer>>#removeMethod:",				"ProtocolOrganizer>>#stringForFileOut",				"ProtocolOrganizer>>#classify:inProtocolNamed:",				"QSystemTally>>#leavesInto:fromSender:",				"QSystemTally>>#leavesPrintOn:tallyExact:orThreshold:time:",				"QSystemTally>>#treePrintOn:tabs:thisTab:total:totalTime:tallyExact:orThreshold:",				"QSystemTally>>#printOn:total:totalTime:tallyExact:",				"QueryAnnotationsFromClassTest>>#testReturnsInstancesFromAllAnnotatingMethods",				"QuoRemComplementary>>#asShapeDots",				"RBAbstractClass>>#subclassesDo:",				"RBAbstractClass>>#firstSuperclassRedefines:",				"RBAbstractClass>>#selectors",				"RBAbstractClass>>#whichSelectorsReferToClassVariable:",				"RBAbstractClass>>#whichSelectorsReferToInstanceVariable:",				"RBAbstractClass>>#whichSelectorsReferToSymbol:",				"RBAbstractClass>>#whichSelectorsReferToClass:",				"RBAbstractClass>>#localSelectors",				"RBAbstractRefactoringTest>>#executeRefactorings:",				"RBAbstractRefactoringTest>>#extractMethodTestData",				"RBAbstractRefactoringTest>>#abstractVariableTestData",				"RBAbstractRefactoringTest class>>#doRebuildMethodDictionary",				"RBAbstractRefactoringTest class>>#fileOutLocalMethodsInCategory:on:",				"RBAbstractRefactoringTest class>>#removeFromSystem:",				"RBAbstractRefactoringTest class>>#traitComposition:",				"RBAbstractRefactoringTest class>>#recategorizeSelector:from:to:",				"RBAbstractVariablesRefactoring>>#abstractClassVariables",				"RBAbstractVariablesRefactoring>>#abstractInstanceVariables",				"RBAbstractVariablesTransformation>>#abstractClassVariables",				"RBAbstractVariablesTransformation>>#abstractInstanceVariables",				"RBAccessorClassRefactoring>>#transform",				"RBAddParameterRefactoring>>#myConditions",				"RBAddParameterRefactoring>>#renameArgumentsIn:",				"RBAddParameterTransformation>>#myConditions",				"RBAddParameterTransformation>>#renameArgumentsIn:",				"RBArrayNode>>#addNodes:",				"RBArrayNode>>#addNodes:before:",				"RBArrayNode>>#statements:",				"RBArrayNode>>#addNodesFirst:",				"RBBasicDummyLintRuleTest class>>#sizeCheck",				"RBBasicDummyLintRuleTest class>>#variableAssignedLiteral",				"RBBasicDummyLintRuleTest class>>#unreferencedVariables",				"RBBasicDummyLintRuleTest class>>#missingSubclassResponsibility",				"RBBasicDummyLintRuleTest class>>#refersToClass",				"RBBasicDummyLintRuleTest class>>#addRemoveDependents",				"RBBasicDummyLintRuleTest class>>#returnsBooleanAndOther",				"RBBasicDummyLintRuleTest class>>#variableReferencedOnce",				"RBBasicDummyLintRuleTest class>>#tempsReadBeforeWritten",				"RBBasicDummyLintRuleTest class>>#subclassResponsibilityNotDefined",				"RBBasicDummyLintRuleTest class>>#onlyReadOrWritten",				"RBBasicDummyLintRuleTest class>>#instVarInSubclasses",				"RBBasicLintRule>>#filteredResult",				"RBBasicLintRuleTestData class>>#subclassResponsibilityNotDefined",				"RBBlockNode>>#equalTo:withMapping:",				"RBBlockNode>>#arguments:",				"RBBlockNode>>#displaySourceCode",				"RBBrowserEnvironment>>#forClasses:",				"RBBrowserEnvironment>>#handleSystemChange:",				"RBBrowserEnvironment>>#selectionParseTreeIntervalFor:",				"RBBrowserEnvironment>>#pluginsDo:",				"RBBrowserEnvironment>>#selectionIntervalFor:",				"RBBrowserEnvironmentTest>>#categoriesFor:",				"RBBrowserEnvironmentWrapper>>#descriptionBasis",				"RBCascadeNode>>#statementComments",				"RBCascadeNode>>#messages:",				"RBCategoryEnvironment>>#defaultLabel",				"RBChangeMethodNameRefactoring>>#renameArgumentsIn:",				"RBChangeMethodNameRefactoring>>#renameImplementors",				"RBChangeMethodNameRefactoring>>#removeRenamedImplementors",				"RBChangeMethodNameTransformation>>#renameArgumentsIn:",				"RBChangeMethodNameTransformation>>#renameImplementors",				"RBChangeMethodNameTransformation>>#convertAllReferencesTo:of:using:",				"RBChangeMethodNameTransformation>>#removeRenamedImplementors",				"RBChildrenToSiblingsRefactoring>>#pullUpClassInstanceVariables",				"RBChildrenToSiblingsRefactoring>>#pullUpInstanceVariables",				"RBChildrenToSiblingsRefactoring>>#pushUpMethodsFrom:",				"RBChildrenToSiblingsRefactoring>>#pullUpPoolVariables",				"RBChildrenToSiblingsRefactoring>>#computeSubclassSupersOf:",				"RBChildrenToSiblingsRefactoring>>#pullUpClassVariables",				"RBClass>>#definitionString",				"RBClassEnvironment>>#classesDo:",				"RBClassEnvironment>>#defaultLabel",				"RBClassEnvironment>>#printOn:",				"RBClassEnvironment>>#classes:",				"RBClassRegexRefactoring>>#copyFrom:to:",				"RBClassUsingSharedPoolForTestData class>>#doRebuildMethodDictionary",				"RBClassUsingSharedPoolForTestData class>>#fileOutLocalMethodsInCategory:on:",				"RBClassUsingSharedPoolForTestData class>>#removeFromSystem:",				"RBClassUsingSharedPoolForTestData class>>#traitComposition:",				"RBClassUsingSharedPoolForTestData class>>#recategorizeSelector:from:to:",				"RBCombinatorVisitor>>#visitSequenceNode:",				"RBCommentNodeVisitor>>#visitNode:",				"RBComposeParametrizedTest>>#shouldFail:",				"RBCompositeLintRule>>#checkPackage:",				"RBCompositeLintRule>>#removeRule:",				"RBCompositeLintRule>>#resetResult",				"RBCompositeLintRule>>#checkClass:",				"RBCompositeLintRule>>#checkMethod:",				"RBCompositeLintRule>>#sort:",				"RBCompositeLintRule class>>#rulesGroupedFor:",				"RBCompositeLintRule class>>#rulesClassifiedFor:",				"RBCompositeLintRuleTestData>>#viewResults",				"RBCompositeLintRuleTestData>>#resetResult",				"RBCompositeLintRuleTestData>>#checkClass:",				"RBCompositeLintRuleTestData>>#checkMethod:",				"RBCompositeTransformation>>#privateTransform",				"RBCondition class>>#accessesClassVariable:in:showIn:",				"RBCondition class>>#methodDefiningTemporary:in:ignore:",				"RBCopyClassRefactoring>>#copyMethodsOf:in:",				"RBCopyClassRefactoring>>#copyVariables",				"RBCopyPackageRefactoring>>#reparent:with:",				"RBCreateCascadeRefactoring>>#findStatementNodes",				"RBDeprecateClassRefactoring>>#convertDeprecatedToSubclass",				"RBDeprecateClassRefactoring>>#removeExtensionMethods",				"RBDeprecateClassRefactoring>>#copyExtensionMethods",				"RBDummy classTrait>>#doRebuildMethodDictionary",				"RBDummy classTrait>>#fileOutLocalMethodsInCategory:on:",				"RBDummy classTrait>>#traitComposition:",				"RBDummy classTrait>>#recategorizeSelector:from:to:",				"RBDummyCompositeLintRuleTest>>#viewResults",				"RBDummyCompositeLintRuleTest>>#resetResult",				"RBDummyCompositeLintRuleTest>>#checkClass:",				"RBDummyCompositeLintRuleTest>>#checkMethod:",				"RBDummyRefactoryTestDataApp>>#sizeCheck",				"RBDummyRefactoryTestDataApp>>#equalNotUsed",				"RBDummyRefactoryTestDataApp>>#collectionProtocol",				"RBDummyRefactoryTestDataApp>>#demoRenameMethod:PermuteArgs:",				"RBDummyRefactoryTestDataApp>>#detectContains",				"RBDummyRefactoryTestDataApp>>#modifiesCollection",				"RBDummyRefactoryTestDataApp>>#stringConcatenation",				"RBDumpVisitor>>#visitMessageNode:",				"RBDumpVisitor>>#visitBlockNode:",				"RBDumpVisitor>>#visitMethodNode:",				"RBDumpVisitor>>#visitArrayNode:",				"RBDumpVisitor>>#visitCascadeNode:",				"RBDumpVisitor>>#visitSequenceNode:",				"RBDumpVisitor>>#visitEnglobingErrorNode:",				"RBDumpVisitor>>#visitPragmaNode:",				"RBDumpVisitorTest>>#testDumpOnSelfClassMethods",				"RBEnglobingErrorNode>>#content:",				"RBEnvironmentVisitor>>#visitClassEnv:",				"RBEnvironmentVisitor>>#visitPackageEnv:",				"RBEnvironmentVisitor>>#visitProtocolEnv:",				"RBExpandReferencedPoolsRefactoring>>#whichPoolDefines:",				"RBExpandReferencedPoolsRefactoring>>#movePoolVariables",				"RBExpandReferencedPoolsTransformation>>#movePoolVariables",				"RBExtractMethodRefactoring>>#nameNewMethod:",				"RBExtractMethodRefactoring>>#renameAllParameters",				"RBExtractMethodRefactoring>>#updateTemporariesInExtractedMethodFor:",				"RBExtractMethodRefactoring>>#checkAssignments:",				"RBExtractMethodRefactoring>>#remainingTemporaries",				"RBExtractMethodTransformation>>#generateNewMethodWith:",				"RBExtractSetUpMethodRefactoring>>#checkAssignments:",				"RBExtractToTemporaryRefactoring>>#insertTemporary",				"RBExtractToTemporaryTransformation>>#insertTemporary",				"RBFindAndReplaceRefactoring>>#transform",				"RBFindAndReplaceRefactoring>>#findOccurrencesIn:",				"RBFormatterTest>>#formatClass:",				"RBFormatterTest>>#testCoreSystem",				"RBGenerateEqualHashRefactoring>>#compileHash",				"RBGenerateEqualHashRefactoring>>#compileEqual",				"RBGeneratePrintStringRefactoring>>#transform",				"RBInlineAllSendersRefactoring>>#inlineSelfSends",				"RBInlineMethodRefactoring>>#renameConflictingTemporaries",				"RBInlineMethodRefactoring>>#checkSuperMessages",				"RBInlineMethodTransformation>>#renameConflictingTemporaries",				"RBInlineMethodTransformation>>#checkSuperMessages",				"RBItemsSelectionPresenter>>#connectPresenters",				"RBLiteralArrayNode>>#contents:",				"RBMatchVisitor>>#visitBlockNode:",				"RBMatchVisitor>>#visitSequenceNode:",				"RBMatchVisitor>>#visitMethodNode:",				"RBMessageNode>>#bestNodeFor:",				"RBMessageNode>>#isInlineCase",				"RBMessageNode>>#isInlineIfNil",				"RBMessageNode>>#arguments:",				"RBMessageNode>>#replaceNode:withNode:",				"RBMethodNode>>#rewriteTempsForContext:",				"RBMethodNode>>#arguments:",				"RBMethodNode>>#pragmas:",				"RBMethodNode>>#metaLinkOptionsFromClassAndMethod",				"RBMethodNodeTest>>#testOffsetIsComment",				"RBMethodNodeTest>>#testMethodClass",				"RBMoveInstVarToClassRefactoring>>#collectSendersOfInstVar",				"RBMoveMethodRefactoring>>#compileNewMethods",				"RBMoveMethodRefactoring>>#checkTemporaryVariableNames",				"RBMoveMethodToClassSideRefactoring>>#removeInstVariableReferences",				"RBMoveMethodToClassSideTransformation>>#removeInstVariableReferences",				"RBMoveMethodTransformation>>#compileNewMethods",				"RBMoveMethodTransformation>>#checkTemporaryVariableNames",				"RBMoveTemporaryVariableDefinitionTransformation>>#checkLocationsIn:",				"RBMoveVariableDefinitionRefactoring>>#transform",				"RBMoveVariableDefinitionRefactoring>>#checkNodes:",				"RBMultiEnvironment>>#asSelectorEnvironment",				"RBNamespace>>#allReferencesTo:inPackages:do:",				"RBNamespace>>#allImplementorsOf:do:",				"RBNamespace>>#removeClassNamed:",				"RBNamespace>>#allReferencesToClass:do:",				"RBNamespace>>#allClassesDo:",				"RBNamespace>>#privateReferencesTo:inPackages:",				"RBNamespace>>#privateReferencesTo:",				"RBNamespace>>#reparentClasses:to:",				"RBNamespace>>#convertClasses:select:using:",				"RBNamespace>>#allClassesInPackages:do:",				"RBNamespace>>#allReferencesTo:do:",				"RBNamespace>>#renameClass:to:around:",				"RBNamespace>>#privateReferencesTo:in:",				"RBNamespace>>#privateRootClasses",				"RBNamespace>>#allReferencesToClass:inPackages:do:",				"RBNamespaceTest>>#testReparentSuperclassChange",				"RBPackageEnvironment>>#classesDo:",				"RBPackageEnvironment>>#printOn:",				"RBPackageEnvironment>>#classesAndSelectorsDo:",				"RBParseTreeRewriter>>#visitCascadeNode:",				"RBParseTreeRewriterTest>>#testRewriteMethods",				"RBParseTreeRewriterTest>>#testRewrites",				"RBParseTreeSearcher>>#performSearches:on:",				"RBParseTreeSearcher>>#addArgumentRules:",				"RBParseTreeSearcher>>#addRules:",				"RBParseTreeSearcher>>#matchesAnyOf:do:",				"RBParseTreeSearcher>>#matchesAnyMethodOf:do:",				"RBParseTreeSearcher>>#lookForMoreMatchesInContext:",				"RBParseTreeSearcher>>#matchesAnyArgumentOf:do:",				"RBParseTreeSearcher>>#addSearches:",				"RBParseTreeSearcher>>#matchesAnyTreeOf:do:",				"RBParseTreeSearcher>>#messages",				"RBParser>>#addCommentsTo:",				"RBParserTest>>#testParsingPragmaRecogniseArguments",				"RBParserTest>>#testParseUnfinishedBlockWithFaultyBody",				"RBParserTest>>#testArrayNodesContainRightAmountOfStatementsAndPeriods",				"RBParserTest>>#testMatchInContext",				"RBParserTest>>#testDelimitationsOfArrayNodesAreBrackets",				"RBParserTest>>#testPragmas",				"RBParserTest>>#testNumberParsing",				"RBParserTest>>#testParsingArrayGivesArrayNode",				"RBParserTest>>#testParseExpressionGivesTheWriteAmountOfStatements",				"RBParserTest>>#testFormatter",				"RBParserTest>>#testMethodPatterns",				"RBParserTest>>#testCopy",				"RBParserTest>>#testPrimitives",				"RBParserTest>>#testIsA",				"RBParserTest>>#testEquivalentExceptRenaming",				"RBParserTest>>#testParsingPragmaRecogniseSelector",				"RBParserTest>>#testParserErrors",				"RBParserTest>>#testInvalidPragmaPosition",				"RBParserTest>>#testStatements",				"RBParserTest>>#testFaultyLiteralRaiseSyntaxError",				"RBParserTest>>#testIdentificationOfPrimitiveMethods",				"RBParserTest>>#testCopyInContext",				"RBParserTest>>#testSymbolLiteral",				"RBParserTest>>#testParseFaultyMethod",				"RBParserTest>>#testBinarySelectors",				"RBParserTest>>#testComparingTrees",				"RBParserTest>>#testParentOfStatementsIsSequenceNode",				"RBParserTest>>#testParseMethodPatternGivesSelector",				"RBParserTest>>#testArray",				"RBParserTest>>#testParserErrorsWithErrorBlock",				"RBParserTest>>#testParsingPragmaRecogniseAndStorePragmas",				"RBParserTest>>#testParents",				"RBParserTest>>#testEqualToWithMapping",				"RBPatternParserTest>>#testParseFaultyPatternBlock",				"RBPragmaEnvironment>>#defaultLabel",				"RBPragmaNode>>#arguments:",				"RBPrettyPrintCodeRefactoring>>#transform",				"RBProgramNode>>#copyList:inContext:",				"RBProgramNode>>#statementComments",				"RBProgramNode>>#nodesDo:",				"RBProgramNode>>#removeDeadCode",				"RBProgramNode>>#copyCommentsFrom:",				"RBProgramNode>>#nodeForOffset:",				"RBProgramNode>>#evaluatedFirst:",				"RBProgramNodeVisitor>>#visitLiteralArrayNode:",				"RBProgramNodeVisitor>>#visitCascadeNode:",				"RBProgramNodeVisitor>>#visitMessageNode:",				"RBProgramNodeVisitor>>#visitTemporaryNodes:",				"RBProgramNodeVisitor>>#visitMethodNode:",				"RBProgramNodeVisitor>>#visitArrayNode:",				"RBProgramNodeVisitor>>#visitArgumentNodes:",				"RBProgramNodeVisitor>>#visitSequenceNode:",				"RBProgramNodeVisitor>>#visitEnglobingErrorNode:",				"RBProgramNodeVisitor>>#visitPragmaNode:",				"RBProtectInstanceVariableRefactoring>>#transform",				"RBProtectInstanceVariableRefactoring>>#getterSetterMethods",				"RBProtocolEnvironment>>#printOn:",				"RBProtocolEnvironment>>#defaultLabel",				"RBProtocolRegexRefactoring>>#transform",				"RBPullUpInstanceVariableRefactoring>>#transform",				"RBPullUpMethodParametrizedTest>>#testPullUpWhenSuperClassDoesNotDirectlyImplement",				"RBPullUpMethodRefactoring>>#checkClassVars",				"RBPullUpMethodRefactoring>>#checkBackReferencesTo:",				"RBPullUpMethodRefactoring>>#copyDownMethod:",				"RBPullUpMethodRefactoring>>#checkSuperclass",				"RBPullUpMethodRefactoring>>#checkInstVars",				"RBPullUpMethodRefactoring>>#pullUpMethods",				"RBPullUpMethodRefactoring>>#removeDuplicatesOf:",				"RBPullUpMethodRefactoring>>#checkSiblingSuperSendsFrom:",				"RBPullUpMethodRefactoring>>#checkSuperSendsFromSiblings",				"RBPullUpMethodRefactoring>>#removeDuplicateMethods",				"RBPullUpMethodRefactoring>>#removePulledUpMethods",				"RBPullUpMethodRefactoring>>#checkClassVarsFor:",				"RBPullUpMethodRefactoring>>#checkSuperSendsFromPushedUpMethods",				"RBPullUpMethodRefactoring>>#copyDownMethods",				"RBPullUpMethodRefactoring>>#checkInstVarsFor:",				"RBPullUpMethodTransformation>>#checkClassVars",				"RBPullUpMethodTransformation>>#checkBackReferencesTo:",				"RBPullUpMethodTransformation>>#checkSuperclass",				"RBPullUpMethodTransformation>>#checkInstVars",				"RBPullUpMethodTransformation>>#checkSiblingSuperSendsFrom:",				"RBPullUpMethodTransformation>>#checkSuperSendsFromSiblings",				"RBPullUpMethodTransformation>>#checkClassVarsFor:",				"RBPullUpMethodTransformation>>#checkSuperSendsFromPushedUpMethods",				"RBPullUpMethodTransformation>>#checkInstVarsFor:",				"RBPushDownClassVariableParametrizedTest>>#testPushDownClassVariable",				"RBPushDownClassVariableRefactoring>>#findDestinationClass",				"RBPushDownInstanceVariableParametrizedTest>>#testPushDownInstanceVariable",				"RBPushDownInstanceVariableRefactoring>>#transform",				"RBPushDownMethodParametrizedTest>>#testPushDownMethod",				"RBPushDownMethodParametrizedTest>>#testPushDownMethodThatReferencesPoolDictionary",				"RBPushDownMethodRefactoring>>#transform",				"RBPushDownMethodRefactoring>>#pushDown:",				"RBReadBeforeWrittenTester>>#visitMessageNode:",				"RBReadBeforeWrittenTester>>#initializeVars:",				"RBReadBeforeWrittenTester>>#processStatementNode:",				"RBReadBeforeWrittenTesterTest>>#testReadBeforeWritten",				"RBRealizeClassRefactoring>>#transform:",				"RBRealizeClassTransformation>>#transform:",				"RBRefactoring>>#poolVariableNamesFor:",				"RBRefactoring>>#convertAllReferencesTo:of:using:",				"RBRefactoring>>#convertClasses:select:using:",				"RBRefactoring>>#copyOptionsFrom:",				"RBRefactoring class>>#doRebuildMethodDictionary",				"RBRefactoring class>>#fileOutLocalMethodsInCategory:on:",				"RBRefactoring class>>#removeFromSystem:",				"RBRefactoring class>>#traitComposition:",				"RBRefactoring class>>#recategorizeSelector:from:to:",				"RBRefactoringChangeTest>>#testAddMetaclassPattern",				"RBRefactoringChangeTest>>#testAddClassPattern",				"RBRefactoringChangeTest>>#testAddTraitPattern",				"RBRefactoringChangeTest>>#testAddClassTraitPattern",				"RBRefactoryDefinitionChange class>>#definition:for:",				"RBRefactoryTestDataApp>>#sizeCheck",				"RBRefactoryTestDataApp>>#equalNotUsed",				"RBRefactoryTestDataApp>>#collectionProtocol",				"RBRefactoryTestDataApp>>#demoRenameMethod:PermuteArgs:",				"RBRefactoryTestDataApp>>#detectContains",				"RBRefactoryTestDataApp>>#modifiesCollection",				"RBRefactoryTestDataApp>>#stringConcatenation",				"RBRefactoryTyper>>#processCollectionMessagesFor:in:",				"RBRefactoryTyper>>#printOn:",				"RBRefactoryTyper>>#processNode:",				"RBRefactoryTyper>>#implementorsOf:in:storeIn:",				"RBRefactoryTyper>>#implementorsOf:",				"RBRefactoryTyper>>#executeSearch:",				"RBRefactoryTyper>>#computeEquivalenceClassesForMethodsAndVars",				"RBRefactoryTyper>>#merge:",				"RBRefactoryTyper>>#refineTypes:with:",				"RBRefactoryTyper>>#computeMessagesSentToVariables",				"RBRemoveAllSendersRefactoring>>#removeSelfSenders",				"RBRemoveClassChange>>#asUndoOperation",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownClassVarsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownInstVarsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#transform",				"RBRemoveClassKeepingSubclassesRefactoring>>#initalizeRefactorings",				"RBRemoveClassKeepingSubclassesRefactoring>>#removeClasses",				"RBRemoveClassRefactoring>>#reparentSubclasses",				"RBRemoveClassRefactoring>>#removeClasses",				"RBRemoveClassVariableRefactoring>>#preconditions",				"RBRemoveHierarchyMethodRefactoring>>#deleteSelectors",				"RBRemoveHierarchyMethodRefactoring>>#deleteSelectorInSubclasses",				"RBRemoveHierarchyMethodTransformation>>#deleteSelectors",				"RBRemoveMessageSendTransformation>>#privateTransform",				"RBRemoveMethodParametrizedTest>>#testRemoveMethod",				"RBRemoveMethodRefactoring>>#checkBrowseAllOccurrences:",				"RBRemoveMethodRefactoring>>#checkSuperMethods",				"RBRemoveMethodRefactoring>>#transform",				"RBRemoveMethodRefactoring>>#checkReferencesToAnyOf:",				"RBRemoveMethodTransformation>>#checkBrowseAllOccurrences:",				"RBRemoveParameterRefactoring>>#computeNewSelector",				"RBRemoveParameterTransformation>>#computeNewSelector",				"RBRemovePragmaTransformation>>#privateTransform",				"RBRemoveReturnStatementTransformation>>#privateTransform",				"RBRenameClassChange>>#textToDisplay",				"RBRenameClassChange>>#oldVersionTextToDisplay",				"RBRenameClassVariableRefactoring>>#renameReferences",				"RBRenameInstanceVariableChange>>#copyOldValuesToNewVariable",				"RBRenameInstanceVariableRefactoring>>#removeOldAccessors",				"RBRenameInstanceVariableRefactoring>>#renameAccessorsReferences",				"RBReplacePreview>>#accept:",				"RBScanner class>>#initializeChars:to:",				"RBSearchTest>>#testAllSearches",				"RBSelectorEnvironment>>#packages",				"RBSelectorEnvironment>>#smallLintCritics",				"RBSelectorEnvironment>>#storeOn:",				"RBSelectorEnvironment>>#classes:metaClasses:",				"RBSelectorEnvironment>>#selectorsForClass:do:",				"RBSelectorEnvironment class>>#onMethods:forClass:in:",				"RBSequenceNode>>#addNodes:",				"RBSequenceNode>>#bestNodeFor:",				"RBSequenceNode>>#replaceNode:withNodes:",				"RBSequenceNode>>#addNodesFirst:",				"RBSequenceNode>>#equalTo:withMapping:",				"RBSequenceNode>>#addNodes:before:",				"RBSequenceNode>>#statements:",				"RBSequenceNode>>#temporaries:",				"RBSimpleFormatter>>#formatTemporariesFor:",				"RBSimpleFormatter>>#formatMethodCommentFor:",				"RBSimpleFormatter>>#formatBlockArgumentsFor:",				"RBSimpleFormatter>>#formatPragmasFor:",				"RBSimpleFormatter>>#formatCommentsFor:",				"RBSimpleFormatter>>#formatStatementCommentsFor:",				"RBSlotInitializationNode>>#selectorString",				"RBSmalllintContext>>#specialSelectors",				"RBSmalllintContext>>#checkLiteral:",				"RBSmalllintContext>>#computeLiteralsForClass:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#doRebuildMethodDictionary",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#fileOutLocalMethodsInCategory:on:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#removeFromSystem:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#traitComposition:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#recategorizeSelector:from:to:",				"RBSmalllintTestObject>>#sizeCheck",				"RBSmalllintTestObject>>#equalNotUsed",				"RBSmalllintTestObject>>#collectionProtocol",				"RBSmalllintTestObject>>#detectContains",				"RBSmalllintTestObject>>#modifiesCollection",				"RBSmalllintTestObject>>#stringConcatenation",				"RBSourceRegexRefactoring>>#transform",				"RBSplitCascadeRefactoring>>#extractReceiver",				"RBSplitClassRefactoring>>#abstractVariableReferences",				"RBSplitClassRefactoring>>#addInstanceVariables",				"RBSplitClassTransformation>>#abstractVariableReferences",				"RBSwapMethodRefactoring>>#checkInstVars",				"RBTRefactoringBuilder classTrait>>#doRebuildMethodDictionary",				"RBTRefactoringBuilder classTrait>>#fileOutLocalMethodsInCategory:on:",				"RBTRefactoringBuilder classTrait>>#traitComposition:",				"RBTRefactoringBuilder classTrait>>#recategorizeSelector:from:to:",				"RBTemporaryToInstanceVariableRefactoring>>#transform",				"RBTemporaryToInstanceVariableRefactoring>>#removeTemporaryOfClass:",				"RBTemporaryToInstanceVariableTransformation>>#privateTransform",				"RBTemporaryToInstanceVariableTransformation>>#removeTemporaryOfClass:",				"RBTransformation>>#poolVariableNamesFor:",				"RBTransformation class>>#doRebuildMethodDictionary",				"RBTransformation class>>#fileOutLocalMethodsInCategory:on:",				"RBTransformation class>>#removeFromSystem:",				"RBTransformation class>>#traitComposition:",				"RBTransformation class>>#recategorizeSelector:from:to:",				"RBTransformationDummyRuleTest class>>#rewrite:methods:name:",				"RBTransformationRule>>#result",				"RBTransformationRuleTestData class>>#rewrite:methods:name:",				"RBTransformationTest>>#abstractVariableTestData",				"RBTransformationsTest>>#testPushDownVariableTransform",				"RBVariableEnvironment>>#instanceVariableSelectorsFor:",				"RBVariableEnvironment>>#flushCachesFor:",				"RBVariableEnvironment>>#environmentForInstanceVariable:in:",				"RBVariableEnvironment>>#storeOn:",				"RBVariableEnvironment>>#environmentForClassVariable:in:",				"RBVariableEnvironment>>#classVariableSelectorsFor:",				"RBVariableEnvironment>>#allClassesDo:",				"RFASTClosureAnalyzer>>#visitNode:",				"RFASTTranslator>>#emitPreamble:",				"RFASTTranslator>>#emitMetaLinkAfterEnsure:",				"RFASTTranslator>>#visitMethodNode:",				"RFASTTranslator>>#visitInlinedBlockNode:",				"RFASTTranslator>>#emitMetaLinkBefore:",				"RFASTTranslator>>#visitArrayNode:",				"RFASTTranslator>>#emitMetaLinkAfterNoEnsure:",				"RFASTTranslator>>#emitMessageNode:",				"RFASTTranslator>>#visitSequenceWithAfter:",				"RFASTTranslatorForEffect>>#visitSequenceNode:",				"RFC2047MimeConverter>>#encodeWord:",				"RFSemanticAnalyzer>>#analyseForLinks:generator:",				"RFSemanticAnalyzer>>#visitMethodNode:",				"RGAbstractContainer>>#elementNamed:",				"RGAbstractContainer>>#elementsDo:",				"RGBehavior>>#pvtTagsDo:",				"RGBehavior>>#subclassesDo:",				"RGBehavior>>#methods",				"RGBehavior>>#methodNamed:",				"RGBehavior>>#cleanLocalMethods",				"RGBehavior>>#name:",				"RGBehavior>>#pvtLocalMethodsDo:",				"RGBehavior>>#unresolveName",				"RGBehavior>>#pvtAddLocalMethod:",				"RGBehavior>>#allSuperclassesDo:",				"RGBehavior>>#pvtTagsForMethodsDo:",				"RGBehaviorTest>>#testBehaviorWithProtocols",				"RGBehaviorTest>>#testBehaviorWithMethodTags",				"RGChunkImporter>>#fileInFrom:",				"RGChunkImporter>>#createBehavior:superclassName:instanceVariableNames:classVariableNames:categoryName:packageName:poolDictionariesNames:layoutClass:layoutDefinition:slotsDefinition:traits:isTrait:hasNilSuperclass:",				"RGClassDefinition>>#addClassVariables:",				"RGClassDefinition>>#addSharedPools:",				"RGClassDescriptionDefinition>>#addInstanceVariables:",				"RGClassDescriptionStrategy>>#instanceVariables:",				"RGClassStrategy>>#pvtSharedPoolsDo:",				"RGClassStrategy>>#copyForBehaviorDefinitionPostCopy",				"RGClassStrategy>>#classVariables:",				"RGClassStrategy>>#pvtClassVariablesDo:",				"RGClassStrategy>>#sharedPools:",				"RGClassTest>>#testBehaviorWithMethods",				"RGClassTest>>#testBehaviorWithProtocols",				"RGClassTest class>>#doRebuildMethodDictionary",				"RGClassTest class>>#fileOutLocalMethodsInCategory:on:",				"RGClassTest class>>#removeFromSystem:",				"RGClassTest class>>#traitComposition:",				"RGClassTest class>>#recategorizeSelector:from:to:",				"RGContainer>>#allTraitsDo:",				"RGContainer>>#traitsDo:",				"RGContainer>>#methodsDo:",				"RGContainer>>#cleanEmptyPackages",				"RGContainer>>#allClassesDo:",				"RGContainer>>#definedClassesDo:",				"RGContainer>>#loadPackagesFromImage",				"RGContainer>>#loadTraitUsers",				"RGContainer>>#classesDo:",				"RGEnvironment>>#createDefaultEnvironment",				"RGEnvironment>>#pvtBehaviorsDo:",				"RGEnvironment>>#removeBehavior:",				"RGEnvironment>>#cleanBehaviors",				"RGEnvironment>>#removeUnusedPackages",				"RGEnvironment>>#pvtGlobalVariablesDo:",				"RGEnvironment>>#writeIntoTonel:",				"RGEnvironment>>#adoptForBrowser",				"RGEnvironment>>#cleanUnusedUnreferencedPackages",				"RGEnvironment>>#writeIntoFileTree:",				"RGEnvironment>>#unifyTrait",				"RGEnvironment>>#addGlobalsNamed:",				"RGEnvironment>>#pvtPackagesDo:",				"RGEnvironment>>#cleanUnusedUnreferencedBehaviors",				"RGEnvironment>>#associationsDo:",				"RGEnvironmentBackendTest>>#testReadOnlyErrors",				"RGEnvironmentBackendTest class>>#doRebuildMethodDictionary",				"RGEnvironmentBackendTest class>>#fileOutLocalMethodsInCategory:on:",				"RGEnvironmentBackendTest class>>#removeFromSystem:",				"RGEnvironmentBackendTest class>>#traitComposition:",				"RGEnvironmentBackendTest class>>#recategorizeSelector:from:to:",				"RGLayoutDefinitionTest>>#testImplicitEnvironment",				"RGLayoutDefinitionTest>>#testNewLayouts",				"RGLayoutDefinitionTest>>#testIsEmptyLayout",				"RGMCClassTest>>#testSpecialClasses",				"RGMCClassTest>>#testNormalKernelClasses",				"RGMetaclassTraitTest>>#testBehaviorWithProtocols",				"RGMetaclassTraitTest>>#testBehaviorWithMethods",				"RGMetaclassTraitTest class>>#doRebuildMethodDictionary",				"RGMetaclassTraitTest class>>#fileOutLocalMethodsInCategory:on:",				"RGMetaclassTraitTest class>>#removeFromSystem:",				"RGMetaclassTraitTest class>>#traitComposition:",				"RGMetaclassTraitTest class>>#recategorizeSelector:from:to:",				"RGMethod>>#pvtTagsDo:",				"RGObjectTest>>#testResolveability",				"RGPackage>>#pvtDefinedBehaviorsDo:",				"RGPackage>>#pvtExtensionMethodsDo:",				"RGPackage>>#pvtTagsForClassesDo:",				"RGPackage>>#importClasses:",				"RGPackageDefinition>>#extendedClasses",				"RGPackageDefinition>>#lookupClassNamed:",				"RGPointerLayout>>#pvtSlotsDo:",				"RGPointerLayout>>#resolveSlot:ifFound:ifNone:",				"RGReadOnlyBackendTest>>#testReadOnlyErrors",				"RGReadOnlyBackendTest class>>#doRebuildMethodDictionary",				"RGReadOnlyBackendTest class>>#fileOutLocalMethodsInCategory:on:",				"RGReadOnlyBackendTest class>>#removeFromSystem:",				"RGReadOnlyBackendTest class>>#traitComposition:",				"RGReadOnlyBackendTest class>>#recategorizeSelector:from:to:",				"RGReadOnlyImageBackend>>#extensionMethodsFor:do:",				"RGReadOnlyImageBackend>>#localMethodsFor:do:",				"RGReadOnlyImageBackend>>#transformationsFor:do:",				"RGReadOnlyImageBackend>>#aliasesFor:do:",				"RGReadOnlyImageBackend>>#slotsFor:do:",				"RGReadOnlyImageBackend>>#tagsForMethod:do:",				"RGReadOnlyImageBackend>>#classVariablesFor:do:",				"RGReadOnlyImageBackend>>#globalVariablesFor:do:",				"RGReadOnlyImageBackend>>#tagsForMethodsFor:do:",				"RGReadOnlyImageBackend>>#exclusionsFor:do:",				"RGReadOnlyImageBackend>>#behaviorsFor:do:",				"RGReadOnlyImageBackend>>#tagsForClass:do:",				"RGReadOnlyImageBackendTest>>#testReadOnlyErrors",				"RGReadOnlyImageBackendTest class>>#doRebuildMethodDictionary",				"RGReadOnlyImageBackendTest class>>#fileOutLocalMethodsInCategory:on:",				"RGReadOnlyImageBackendTest class>>#removeFromSystem:",				"RGReadOnlyImageBackendTest class>>#traitComposition:",				"RGReadOnlyImageBackendTest class>>#recategorizeSelector:from:to:",				"RGTestClass class>>#doRebuildMethodDictionary",				"RGTestClass class>>#fileOutLocalMethodsInCategory:on:",				"RGTestClass class>>#removeFromSystem:",				"RGTestClass class>>#traitComposition:",				"RGTestClass class>>#recategorizeSelector:from:to:",				"RGTestTrait classTrait>>#doRebuildMethodDictionary",				"RGTestTrait classTrait>>#fileOutLocalMethodsInCategory:on:",				"RGTestTrait classTrait>>#traitComposition:",				"RGTestTrait classTrait>>#recategorizeSelector:from:to:",				"RGTraitAlias>>#pvtAliasesDo:",				"RGTraitComposition>>#pvtTransformationsDo:",				"RGTraitCompositionVisitor>>#visitMessageNode:",				"RGTraitDescriptionStrategy>>#name:",				"RGTraitExclusion>>#pvtExclusionsDo:",				"RGTraitTest>>#testBehaviorWithProtocols",				"RGTraitTest>>#testBehaviorWithMethods",				"RGTraitTest class>>#doRebuildMethodDictionary",				"RGTraitTest class>>#fileOutLocalMethodsInCategory:on:",				"RGTraitTest class>>#removeFromSystem:",				"RGTraitTest class>>#traitComposition:",				"RGTraitTest class>>#recategorizeSelector:from:to:",				"RGTraitV2DescriptionStrategy>>#instanceVariables:",				"RGTraitV2Strategy>>#pvtSharedPoolsDo:",				"RGTraitV2Strategy>>#copyForBehaviorDefinitionPostCopy",				"RGTraitV2Strategy>>#classVariables:",				"RGTraitV2Strategy>>#pvtClassVariablesDo:",				"RGTraitV2Strategy>>#sharedPools:",				"RPackage>>#definedClasses",				"RPackage>>#removeClass:",				"RPackage>>#methods",				"RPackage>>#removeClassTagsForClassNamed:",				"RPackage>>#removeClassesMatchingTag:",				"RPackage>>#removeMethods:",				"RPackage>>#renameTo:",				"RPackage>>#importProtocol:forClass:",				"RPackage>>#importClasses:",				"RPackage>>#classNamesAndExtensionSelectorsDo:",				"RPackage>>#renameExtensionsPrefixedWith:to:",				"RPackage>>#fileOut",				"RPackage>>#removeClassDefinitionName:",				"RPackage>>#importPackage:",				"RPackage>>#renameTagsPrefixedWith:to:",				"RPackage>>#removeFromSystem",				"RPackage>>#demoteToTagInPackageNamed:",				"RPackage>>#extensionMethods",				"RPackage>>#basicImportClass:",				"RPackage>>#updateDefinedClassNamed:withNewName:",				"RPackageIncrementalTest>>#tearDown",				"RPackageIncrementalTest>>#testPackageOfClassForClassesNotDefinedInPackageButJustExtendingIt",				"RPackageOrganizer>>#renamePackage:from:to:",				"RPackageOrganizer>>#unregisterPackage:",				"RPackageOrganizer>>#fullyRemoveClassNamed:",				"RPackageOrganizer>>#ensureExistAndRegisterPackageNamed:",				"RPackageOrganizer>>#initializeMethodsFor:",				"RPackageOrganizer>>#registerPackage:",				"RPackageOrganizer>>#systemClassRenamedActionFrom:",				"RPackageOrganizer>>#basicInitializeFromPackagesList:",				"RPackageOrganizer>>#initializeExtensionsFor:protocol:",				"RPackageOrganizer>>#packageNamesDo:",				"RPackageOrganizer>>#systemClassReorganizedActionFrom:",				"RPackageOrganizerTest>>#tearDown",				"RPackageOrganizerTest>>#testRegisteredIsThere",				"RPackageOrganizerTest>>#testTestPackages",				"RPackageOrganizerTest>>#testUnregisterBasedOnNames",				"RPackageOrganizerTest>>#testRegisteredIsIncludedInPackageNames",				"RPackageOrganizerTest>>#testTestPackageNames",				"RPackageReadOnlyCompleteSetupTest>>#testClassNamesAndExtensionSelectorsDo",				"RPackageReadOnlyCompleteSetupTest>>#testClassesAndExtensionMethodsDo",				"RPackageSet>>#unregister",				"RPackageTag>>#promoteAsRPackage",				"RPackageTag>>#renameTo:category:",				"RPackageTag>>#renameTo:",				"RPackageTag>>#asRPackage",				"RPackageTagTest>>#tearDown",				"RPackageTest>>#tearDown",				"RPackageTest>>#testHierarchyRoots",				"RPackageTest>>#testRoots",				"RPackageTestCase>>#runCase",				"RPackageWithDoTest>>#testDo2",				"RPackageWithDoTest>>#testDo",				"RSAbstractAnimation>>#removeInteractionIfPresent:",				"RSAbstractAnimation>>#release",				"RSAbstractAnimation class>>#doRebuildMethodDictionary",				"RSAbstractAnimation class>>#fileOutLocalMethodsInCategory:on:",				"RSAbstractAnimation class>>#removeFromSystem:",				"RSAbstractAnimation class>>#traitComposition:",				"RSAbstractAnimation class>>#recategorizeSelector:from:to:",				"RSAbstractCompactTreeLayout>>#initialize:whoseFatherIs:",				"RSAbstractConnection>>#deleteAllWindows",				"RSAbstractContextInteraction>>#onShape:",				"RSAbstractFlowLayout>>#doExecute:",				"RSAbstractGraphLayout>>#shiftTree:by:",				"RSAbstractGraphLayout>>#validateCycleFor:path:",				"RSAbstractHorizontalTreeLayout>>#rearrangeByLayers:",				"RSAbstractHorizontalTreeLayout>>#layout:atPoint:atLayer:",				"RSAbstractLine>>#markersDo:",				"RSAbstractLineLayout>>#doExecute:",				"RSAbstractMarkerDecoration>>#renderIn:",				"RSAbstractPopupInteraction>>#registerRemoveEventsOn:",				"RSAbstractRegularTreeLayout>>#verticallyReverse:",				"RSAbstractRegularTreeLayout>>#horizontallyReverse:",				"RSAbstractSunburstLayout>>#doExecute:",				"RSAbstractUMLClassRenderer>>#groupFor:",				"RSAbstractVerticalTreeLayout>>#rearrangeByLayers:",				"RSAbstractVerticalTreeLayout>>#translate:by:",				"RSAbstractVerticalTreeLayout>>#layout:atPoint:atLayer:",				"RSAbstractWeightedCircleLayout>>#weightSum:",				"RSAdjacencyMatrixBuilder>>#getAllCycles",				"RSAdjacencyMatrixBuilder>>#renderIn:",				"RSAdjacencyMatrixBuilder>>#getVisitedNodesStartingFrom:",				"RSAdjacencyMatrixBuilder>>#hasCycleStartingFrom:visiting:",				"RSAlgoritmia>>#step",				"RSAlignment>>#alignFromBottomUsing:",				"RSAlignment>>#alignFromCenterUsing:",				"RSAlignment>>#alignFromMiddleUsing:",				"RSAlignment>>#alignFromLeftUsing:",				"RSAlignment>>#alignFromLabelUsing:",				"RSAlignment>>#alignFromRightUsing:",				"RSAlignment>>#alignFromTopUsing:",				"RSAlignmentTest>>#testFromLeftWithFixedShape",				"RSAlpharo>>#setAnimationsIn:",				"RSAlpharo>>#setupLayoutIn:",				"RSAlpharo>>#updateRedLine",				"RSAlpharo>>#removeJar",				"RSAnimationExamples>>#example08ArcTree",				"RSAnimationExamples>>#example13ArcNoise",				"RSAnimationExamples>>#example15SpaceDandy",				"RSAnimationExamples>>#example24RoassalPerlinNoise",				"RSAnimationExamples>>#example25AnimationCircle",				"RSAnimationExamples>>#example07CircleParty",				"RSAnimationExamples>>#example10Arcs",				"RSAnimationExamples>>#example43Waves",				"RSAnimationExamples>>#example09b",				"RSAnimationExamples>>#example41River",				"RSAnimationExamples>>#example05ElasticEllipses",				"RSAnimationExamples>>#example45Beziers",				"RSAnimationExamples>>#example46Lines",				"RSAnimationExamples>>#example28AlteredWorld",				"RSAnimationExamples>>#example21Lines",				"RSAnimationExamples>>#example12Sky",				"RSAnimationExamples>>#example06LinePatterns",				"RSAnimationExamples>>#example17Flor",				"RSAnimationExamples>>#example02BoxesLineCircles",				"RSAnimationExamples>>#example23PerlinNoise",				"RSAnimationExamples>>#example19Stars",				"RSAnimationExamples>>#example39Duna",				"RSAnimationExamples>>#example26Bezier",				"RSAnimationExamples>>#example01BoxWindmill",				"RSAnimationExamples>>#example11C",				"RSAnimationExamples>>#example09PerlinParticles",				"RSAnimationExamples>>#example30Perlin",				"RSAnimationExamples>>#example04Phyco",				"RSAnimationExamples>>#example18Rainbow",				"RSAnimationExamples>>#example38PerlinRose",				"RSAnimationExamples>>#example40Circles",				"RSAnimationExamples>>#example22Lines",				"RSAthensMorph>>#checkSession",				"RSAthensMorph>>#release",				"RSAthensRenderer>>#buildPolygonPath:",				"RSAthensRenderer>>#buildSegmentedBeziersPolylinePath:",				"RSAthensRenderer>>#buildSVGLinePath:",				"RSAthensRenderer>>#buildSVGPath:",				"RSAthensRenderer>>#visitGroup:",				"RSAthensRenderer>>#buildPolylinePath:",				"RSBarChartExample>>#example01TwoBars",				"RSBaselineCalypso>>#resizeNodes:key:",				"RSBaselineCalypso>>#showHideNames:",				"RSBaselineCalypso>>#setLevels:in:level:",				"RSBaselineCalypso>>#applyTheme:",				"RSBaselineCalypso>>#layoutMenu:",				"RSBasicAnimationExamples>>#example03Ramp",				"RSBasicAnimationExamples>>#example06Parallel",				"RSBasicAnimationExamples>>#example01Basic",				"RSBasicAnimationExamples>>#example02Sequential",				"RSBasicShapeExamples>>#example10EllipseMouseMove",				"RSBasicShapeExamples>>#example34PaletteVisualization",				"RSBasicShapeExamples>>#example12BasicLine",				"RSBasicShapeExamples>>#example11ScaleMouseDistance",				"RSBoundingShape>>#removeConnectedEdges",				"RSBoundingShape>>#updateConnectedEdges",				"RSBoundingShape>>#updateConnectedLines",				"RSBoundingShape>>#removeConnectedLines",				"RSBoundingShape>>#allRecursiveConnectedShapesIn:",				"RSCamera class>>#doRebuildMethodDictionary",				"RSCamera class>>#fileOutLocalMethodsInCategory:on:",				"RSCamera class>>#removeFromSystem:",				"RSCamera class>>#traitComposition:",				"RSCamera class>>#recategorizeSelector:from:to:",				"RSCanvas>>#deepNodes",				"RSCanvas>>#deepShapesFromModel:result:",				"RSCanvas>>#addAllShapes:",				"RSCanvas>>#pushBackEdges",				"RSCanvas>>#deepShapesFromModels:result:",				"RSCanvas>>#asShape",				"RSCanvas>>#deepShapeFromModel:result:",				"RSCanvas>>#addAll:",				"RSCanvas>>#playAnimations",				"RSCanvasController>>#onShape:",				"RSCanvasController>>#interactions:",				"RSCanvasController>>#renderLegendOn:",				"RSCanvasController>>#configuration:",				"RSCat>>#newStar",				"RSCat>>#addStars",				"RSCellLayout>>#doExecute:",				"RSChannel>>#doUnmark",				"RSChannel>>#doMark",				"RSChart>>#renderDecorationIn:",				"RSChart>>#xScale:",				"RSChart>>#renderIn:",				"RSChart>>#renderPlotsIn:",				"RSChart>>#yScale:",				"RSChartExample>>#example18Animation",				"RSChartExample>>#example09LinearSqrtSymlog",				"RSChartPopupDecoration>>#updatePopup:event:",				"RSChessBackgroundInteraction>>#onShape:",				"RSCircleLayout>>#doExecute:",				"RSClusterLayout>>#doExecute:",				"RSClusterLayout>>#initializeNode:",				"RSClusterLayout>>#draw:",				"RSClusterLayout>>#computePosition:",				"RSClusteringLayout>>#doExecute:",				"RSClusteringLayout>>#getClusterFor:",				"RSColorPaletteChooser>>#release",				"RSColoredTreePalette>>#shapes:",				"RSColoredTreePalette>>#assignColor",				"RSColoredTreePalette>>#allLeavesAccessibleFrom:in:",				"RSColoredTreePaletteTest>>#testPalettes",				"RSComposite>>#updateConnectedEdges",				"RSComposite>>#sessionChanged",				"RSComposite>>#deepShapesFromModel:result:",				"RSComposite>>#deepShapesFromModels:result:",				"RSComposite>>#addAllShapes:",				"RSComposite>>#addRecursivelyIn:",				"RSComposite>>#deepShapeFromModel:result:",				"RSComposite>>#addAll:",				"RSComposite>>#updateConnectedLines",				"RSComposite>>#padding:",				"RSComposite>>#adjustToChildren",				"RSComposite>>#children:",				"RSComposite>>#pushBackEdges",				"RSDelaunay class>>#supertriangle:",				"RSDelaunayExample>>#step",				"RSEasel>>#release",				"RSElasticBoxInteraction>>#removeInteractionIfPresent:",				"RSElasticBoxInteraction class>>#doRebuildMethodDictionary",				"RSElasticBoxInteraction class>>#fileOutLocalMethodsInCategory:on:",				"RSElasticBoxInteraction class>>#removeFromSystem:",				"RSElasticBoxInteraction class>>#traitComposition:",				"RSElasticBoxInteraction class>>#recategorizeSelector:from:to:",				"RSEquidistantCircleLayout>>#doExecute:",				"RSExpandingBoxes>>#relayout:",				"RSExpandingBoxes>>#scale:at:",				"RSExpandingBoxes>>#saveCurrent:",				"RSExpandingBoxes>>#close:",				"RSExporterTest class>>#testParameters",				"RSExporterUsingEmbedding>>#export:on:",				"RSExporterUsingURL>>#export:on:",				"RSFlameGraph>>#doLayout",				"RSFlameGraph>>#setupHorizontallyOn:",				"RSFlameGraphExamples>>#example02FileSystem",				"RSFlameGraphExamples>>#example01FileSystem",				"RSFlowCanvas>>#clickOnModel:",				"RSFlowCanvas>>#updateBreadcrumbs",				"RSForceBasedLayout>>#calculateAutoRepulse",				"RSForceBasedLayout>>#stepEdgeForces",				"RSForceBasedLayout>>#stepNodeRepulsion",				"RSForceBasedLayout>>#step",				"RSForceBasedLayout>>#doExecute:",				"RSForceBasedLayout>>#stepGravityForce",				"RSForceBasedLayout>>#stepFriction",				"RSForceBuilder>>#reset",				"RSForceBuilder>>#update:",				"RSForceLayoutInSpacesBuilder>>#fill:with:",				"RSForceLayoutInSpacesBuilder>>#renderIn:",				"RSForceLayoutInSpacesBuilder>>#abandonLayout:",				"RSForceLayoutInSpacesBuilder>>#dragEnd:",				"RSForceLayoutInSpacesBuilder>>#addEdgesOf:to:",				"RSForceLayoutSteppingInteraction>>#onShape:",				"RSGridLayout>>#doExecute:",				"RSGroup>>#color:",				"RSGroup>>#when:do:",				"RSGroup>>#pushBack",				"RSGroup>>#translateBy:",				"RSGroup>>#pushFront",				"RSGroup>>#size:",				"RSGroup>>#shapesFromModels:",				"RSGroup>>#when:send:to:",				"RSGroup>>#withBorder",				"RSGroup>>#@",				"RSGroup>>#translucent",				"RSGroup>>#addInteraction:",				"RSHierarchyPackerInteraction>>#fill:with:",				"RSHighlightable>>#unhighlightRecordedShapes:",				"RSHighlightable>>#removeInteractionIfPresent:",				"RSHighlightable>>#doHighlightShapes:",				"RSHighlightable>>#doHighlight:",				"RSHighlightable class>>#doRebuildMethodDictionary",				"RSHighlightable class>>#fileOutLocalMethodsInCategory:on:",				"RSHighlightable class>>#removeFromSystem:",				"RSHighlightable class>>#traitComposition:",				"RSHighlightable class>>#showEdges:using:from:",				"RSHighlightable class>>#withAntAnimation",				"RSHighlightable class>>#recategorizeSelector:from:to:",				"RSHighlightableExamples>>#example02ElementEdges",				"RSHighlightableExamples>>#example06IterateNext",				"RSHighlightableExamples>>#example01Basic",				"RSHighlightableExamples>>#example08DependendMethods",				"RSHighlightableExamples>>#example03Interactive",				"RSHighlightableTest>>#testWithEdges",				"RSHighlightableTest>>#testWithEdges2",				"RSHistogramExample>>#example06Animations",				"RSHorizontalVanDerPloegTreeLayout>>#initialize:associations:ifMultipleRoots:",				"RSHorizontalVanDerPloegTreeLayout>>#secondWalk:depth:breadth:",				"RSHorizontalVanDerPloegTreeLayout class>>#doRebuildMethodDictionary",				"RSHorizontalVanDerPloegTreeLayout class>>#fileOutLocalMethodsInCategory:on:",				"RSHorizontalVanDerPloegTreeLayout class>>#removeFromSystem:",				"RSHorizontalVanDerPloegTreeLayout class>>#traitComposition:",				"RSHorizontalVanDerPloegTreeLayout class>>#recategorizeSelector:from:to:",				"RSInspectableExample>>#example02Inspect",				"RSLabelGenerator>>#searchMin:max:desired:",				"RSLayoutExamples>>#example22ClassHierarchies",				"RSLayoutExamples>>#example06TreeLayout",				"RSLayoutExamples>>#example20FlowLayout",				"RSLayoutExamples>>#example23Roassal3CommitsWithTimeGaps",				"RSLayoutExamples>>#example17ForceBasedLayout",				"RSLayoutExamples>>#example13VisualizeQuatree",				"RSLayoutExamples>>#example21TreeLayoutEllipses",				"RSLayoutExamples>>#example19AutomaticLayoutWhenWindowIsResized",				"RSLayoutExamples>>#example01LayoutBasic",				"RSLegendExamples>>#example12OnPopup",				"RSLegendExamples>>#example09Lines",				"RSLegendExamples>>#example08Polygons",				"RSLineBuilder>>#connectFrom:toAll:",				"RSLineBuilder>>#useElementAssociations:",				"RSLineBuilder>>#connectToAll:",				"RSLineBuilder>>#connectFromAll:to:",				"RSLineBuilder>>#connectFrom:to:",				"RSLineBuilder>>#useAssociations:",				"RSLineBuilder class>>#doRebuildMethodDictionary",				"RSLineBuilder class>>#removeFromSystem:",				"RSLineBuilder class>>#traitComposition:",				"RSLineBuilder class>>#fileOutLocalMethodsInCategory:on:",				"RSLineBuilder class>>#recategorizeSelector:from:to:",				"RSLineDrivenLayout>>#edgesDo:",				"RSLineDrivenLayout>>#executeOnElements:",				"RSLinePlot>>#renderIn:",				"RSLinePlot class>>#doRebuildMethodDictionary",				"RSLinePlot class>>#fileOutLocalMethodsInCategory:on:",				"RSLinePlot class>>#removeFromSystem:",				"RSLinePlot class>>#traitComposition:",				"RSLinePlot class>>#recategorizeSelector:from:to:",				"RSLissajous>>#build",				"RSMondrian>>#nodes:forEach:",				"RSMondrian>>#ordinalColor:",				"RSMondrian>>#translucentShapes",				"RSMonitorEvents>>#onNewEventDo:",				"RSMultiBezierEdgeBuilder>>#commonShapes:with:",				"RSMultilineLabelBuilder>>#compositeLabelFor:",				"RSNiceStepSizeGenerator>>#offsets:q:",				"RSNodeOnTopWhenPositionChanged>>#moveToTop:",				"RSNormalizer>>#normalize:",				"RSNormalizer>>#minAndMaxFor:",				"RSObjectWithProperty>>#removeInteractionIfPresent:",				"RSObjectWithProperty>>#release",				"RSObjectWithProperty class>>#doRebuildMethodDictionary",				"RSObjectWithProperty class>>#fileOutLocalMethodsInCategory:on:",				"RSObjectWithProperty class>>#removeFromSystem:",				"RSObjectWithProperty class>>#traitComposition:",				"RSObjectWithProperty class>>#recategorizeSelector:from:to:",				"RSPAnimationTest class>>#testParameters",				"RSPBoundingTest class>>#testParameters",				"RSPLinesTest class>>#testParameters",				"RSParallelAnimation>>#continue",				"RSParallelAnimation>>#pause",				"RSParallelAnimation>>#start",				"RSParallelAnimation>>#step",				"RSParametricCurveTest class>>#doRebuildMethodDictionary",				"RSParametricCurveTest class>>#removeFromSystem:",				"RSParametricCurveTest class>>#traitComposition:",				"RSParametricCurveTest class>>#fileOutLocalMethodsInCategory:on:",				"RSParametricCurveTest class>>#recategorizeSelector:from:to:",				"RSParametricLineExamples class>>#doRebuildMethodDictionary",				"RSParametricLineExamples class>>#removeFromSystem:",				"RSParametricLineExamples class>>#traitComposition:",				"RSParametricLineExamples class>>#fileOutLocalMethodsInCategory:on:",				"RSParametricLineExamples class>>#recategorizeSelector:from:to:",				"RSParametricLinesTest class>>#doRebuildMethodDictionary",				"RSParametricLinesTest class>>#removeFromSystem:",				"RSParametricLinesTest class>>#traitComposition:",				"RSParametricLinesTest class>>#fileOutLocalMethodsInCategory:on:",				"RSParametricLinesTest class>>#recategorizeSelector:from:to:",				"RSPieChartExample>>#initializePresenters",				"RSPieExamples>>#example20AddingRemoving",				"RSPieExamples>>#esportPrizepool",				"RSPieExamples>>#example12RainbowPie",				"RSPieExamples>>#example23RotatedAnimation",				"RSPieExamples>>#example18ManyPies",				"RSPieExamples>>#example14Pyramid",				"RSPieExamples>>#example11OpenningAnimation",				"RSPieExamples>>#example24ManyPies",				"RSPieExamples>>#example04SegmentSpacingAnimation",				"RSPieExamples>>#example19Buttons",				"RSPieExamples>>#example22RotatedAnimation",				"RSPieExamples>>#example10CornerRadiiAnimation",				"RSPieExamples>>#example07Dendi",				"RSPieExamples>>#example09TickAnimation",				"RSPieExamples>>#example15Clockwise",				"RSPolygon>>#extent:",				"RSPolygon>>#writeSVG2On:",				"RSPolygon class>>#fitPolygonToSquare:",				"RSPolyline>>#writeSVG2On:",				"RSQuadTreeF class>>#withAll:rectangle:",				"RSRadialTreeLayout>>#doExecute:",				"RSRadialTreeLayout>>#toRadialTree:withMod:",				"RSRadialTreeLayout>>#rotateSubtreeFrom:by:",				"RSRadialTreeLayout>>#computePosition:",				"RSRadialTreeLayout>>#radialDraw:",				"RSRadialTreeLayout>>#layoutLayer:radius:from:to:",				"RSRadialTreeLayout>>#moveAllElementsToTopLeft:",				"RSRectangleForceLayout>>#stepRectangleForces",				"RSRectanglePackLayout>>#doExecute:",				"RSResize>>#sameWidth",				"RSResize>>#sameHeight",				"RSResize>>#sameSize",				"RSResizeParentWhenChildMoves>>#onShape:",				"RSRoassal3Test>>#testSubscriberClass",				"RSRoassal3Test>>#testsRsValue",				"RSSVGAnimationExamples>>#example02Miku",				"RSSVGAnimationExamples>>#example05Corona",				"RSSVGAnimationExamples>>#example01SVGIcons",				"RSSVGExporter>>#visitCanvas:",				"RSSVGExporter>>#visitChildrenIfNecessary:",				"RSSVGPath>>#centerSegments",				"RSSVGPath>>#computePolygons",				"RSSVGPath>>#extent:",				"RSSVGShapeExamples>>#example02SpockLizard",				"RSSankey>>#computeBoxesDepths",				"RSSankey>>#relaxRightToLeft:boxes:",				"RSSankey>>#computeBoxesValues",				"RSSankey>>#setupBoxesDepth:",				"RSSankey>>#updateBoxes",				"RSSankey>>#computeBoxesBreadths",				"RSSankey>>#computeLinesDepths",				"RSSankey>>#relaxLeftToRight:boxes:",				"RSSankey>>#resolveCollisions:",				"RSSankeyBox>>#computeLinesDepths",				"RSSankeyExamples>>#example05Animation",				"RSSankeyExamples>>#example06Gradient",				"RSSearchInCanvasInteraction>>#cleanAndResetFixedshapes",				"RSSearchInCanvasInteraction>>#unhighlightShapes:",				"RSSearchInCanvasInteraction>>#doUnhighlightShapes",				"RSSearchInCanvasInteraction>>#doHighlightShapes:",				"RSSegmentsVisitor>>#visitBoundingShape:",				"RSShape>>#addPendingAnimationsIn:",				"RSShapeExamples>>#example38Transformable",				"RSShapeExamples>>#example47CompositeClipChildren",				"RSShapeExamples>>#example45CompositeDragResize",				"RSShapeExamples>>#example05CapStyles",				"RSShapeExamples>>#example12Polygons",				"RSSimpleForceBasedLayout>>#doExecute:",				"RSSpecExamplesTest>>#testRunExamples",				"RSSugiyamaLayout>>#assignLabels:",				"RSSugiyamaLayout>>#cl:u:v:",				"RSSugiyamaLayout>>#layoutAt:",				"RSSunburstBuilder>>#from:nesting:leaves:",				"RSSunburstBuilder>>#from:using:",				"RSSunburstExamples>>#example08SunburstExplorer",				"RSTAnnounceable>>#removeInteractionIfPresent:",				"RSTAnnounceable classTrait>>#doRebuildMethodDictionary",				"RSTAnnounceable classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTAnnounceable classTrait>>#traitComposition:",				"RSTAnnounceable classTrait>>#recategorizeSelector:from:to:",				"RSTContainer>>#deepShapeFromModel:result:",				"RSTContainer>>#addAll:",				"RSTContainer>>#deepShapesFromModel:result:",				"RSTContainer>>#deepShapesFromModels:result:",				"RSTContainer>>#addAllShapes:",				"RSTContainer>>#pushBackEdges",				"RSTContainer classTrait>>#doRebuildMethodDictionary",				"RSTContainer classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTContainer classTrait>>#traitComposition:",				"RSTContainer classTrait>>#recategorizeSelector:from:to:",				"RSTEdge classTrait>>#doRebuildMethodDictionary",				"RSTEdge classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTEdge classTrait>>#traitComposition:",				"RSTEdge classTrait>>#recategorizeSelector:from:to:",				"RSTMarkeable>>#markersDo:",				"RSTMarkeable classTrait>>#doRebuildMethodDictionary",				"RSTMarkeable classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTMarkeable classTrait>>#traitComposition:",				"RSTMarkeable classTrait>>#recategorizeSelector:from:to:",				"RSTParametricXYLines classTrait>>#doRebuildMethodDictionary",				"RSTParametricXYLines classTrait>>#traitComposition:",				"RSTParametricXYLines classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTParametricXYLines classTrait>>#recategorizeSelector:from:to:",				"RSTParametricXYLinesTest classTrait>>#doRebuildMethodDictionary",				"RSTParametricXYLinesTest classTrait>>#traitComposition:",				"RSTParametricXYLinesTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTParametricXYLinesTest classTrait>>#recategorizeSelector:from:to:",				"RSTPositionable classTrait>>#doRebuildMethodDictionary",				"RSTPositionable classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTPositionable classTrait>>#traitComposition:",				"RSTPositionable classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#traitComposition:",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeGapsBlockDepth classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeGapsBlockDepth classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeGapsBlockDepth classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeGapsBlockDepth classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeGapsChildrenSizeDepth classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeGapsChildrenSizeDepth classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeGapsChildrenSizeDepth classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeGapsChildrenSizeDepth classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeGapsPyramidalDepth classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeGapsPyramidalDepth classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeGapsPyramidalDepth classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeGapsPyramidalDepth classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeLayout>>#initialize:associations:ifMultipleRoots:",				"RSTWalkBasedRegularTreeLayout>>#secondWalk:depth:breadth:",				"RSTWalkBasedRegularTreeLayout classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeLayout classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeLayout classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeLayout classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#traitComposition:",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#recategorizeSelector:from:to:",				"RSTransformable>>#removeHandles:",				"RSUMLExamples>>#example04Nolines",				"RSUMLSequenceBuilder>>#lifeLines:",				"RSUMLSequenceDescriptor>>#createCircles",				"RSUMLSequenceDescriptor>>#currentIndentOfLink:",				"RSUMLSequenceDescriptor>>#cumulateWidths",				"RSVanDerPloegTreeLayout>>#initialize:associations:ifMultipleRoots:",				"RSVanDerPloegTreeLayout>>#secondWalk:depth:breadth:",				"RSVanDerPloegTreeLayout class>>#doRebuildMethodDictionary",				"RSVanDerPloegTreeLayout class>>#fileOutLocalMethodsInCategory:on:",				"RSVanDerPloegTreeLayout class>>#removeFromSystem:",				"RSVanDerPloegTreeLayout class>>#traitComposition:",				"RSVanDerPloegTreeLayout class>>#recategorizeSelector:from:to:",				"RSVerticalGridLayout>>#doExecute:",				"RSWeightedCircleLayout>>#doExecute:",				"RSXmasExample>>#myIcon",				"RSXmasExample>>#background",				"RSXmasTree>>#renderIn:",				"RSXmasTree>>#swing",				"RandomTestDistributions class>>#doRebuildMethodDictionary",				"RandomTestDistributions class>>#removeFromSystem:",				"RandomTestDistributions class>>#traitComposition:",				"RandomTestDistributions class>>#fileOutLocalMethodsInCategory:on:",				"RandomTestDistributions class>>#recategorizeSelector:from:to:",				"ReAddRemoveDependentsRule>>#basicCheck:",				"ReAsOrderedCollectionNotNeededRule>>#initialize",				"ReAssertEqualSignIntoAssertEqualsRule class>>#doRebuildMethodDictionary",				"ReAssertEqualSignIntoAssertEqualsRule class>>#fileOutLocalMethodsInCategory:on:",				"ReAssertEqualSignIntoAssertEqualsRule class>>#removeFromSystem:",				"ReAssertEqualSignIntoAssertEqualsRule class>>#traitComposition:",				"ReAssertEqualSignIntoAssertEqualsRule class>>#recategorizeSelector:from:to:",				"ReCodeBasedTestCase>>#tearDown",				"ReCodeCruftLeftInMethodsRule>>#initialize",				"ReCriticEngine>>#nodeCritiquesOf:",				"ReImplementedNotSentRule class>>#allMessages",				"ReMethodSourceContainsLinefeedsRule>>#check:forCritiquesDo:",				"ReMissingSubclassResponsibilityRule>>#check:forCritiquesDo:",				"ReModifiesCollectionRule>>#modifiesCollection:inAnyStatement:",				"ReNoNilAssignationInInitializeRule>>#check:forCritiquesDo:",				"ReNoPrintStringInPrintOnRule>>#check:forCritiquesDo:",				"ReNodeMatchRule>>#matchesAny:",				"ReNodeMatchRule>>#check:forCritiquesDo:",				"ReRefersToClassRule>>#check:forCritiquesDo:",				"ReRuleManager class>>#setDefaultProfile",				"ReRuleManager class>>#newManagerForPackage:",				"ReRuleManager class>>#setBeginnerProfile",				"ReRuleManager class>>#ruleToggleSettingsOn:",				"ReSelfSentNotImplementedRule>>#check:forCritiquesDo:",				"ReSentNotImplementedRule>>#check:forCritiquesDo:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#doRebuildMethodDictionary",				"ReShouldSendSuperSetUpAsFirstMessage class>>#fileOutLocalMethodsInCategory:on:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#removeFromSystem:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#traitComposition:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#recategorizeSelector:from:to:",				"ReShouldSendSuperTearDownAsLastMessage class>>#doRebuildMethodDictionary",				"ReShouldSendSuperTearDownAsLastMessage class>>#fileOutLocalMethodsInCategory:on:",				"ReShouldSendSuperTearDownAsLastMessage class>>#removeFromSystem:",				"ReShouldSendSuperTearDownAsLastMessage class>>#traitComposition:",				"ReShouldSendSuperTearDownAsLastMessage class>>#recategorizeSelector:from:to:",				"ReShouldTransformedIntoAssertRule class>>#doRebuildMethodDictionary",				"ReShouldTransformedIntoAssertRule class>>#fileOutLocalMethodsInCategory:on:",				"ReShouldTransformedIntoAssertRule class>>#removeFromSystem:",				"ReShouldTransformedIntoAssertRule class>>#traitComposition:",				"ReShouldTransformedIntoAssertRule class>>#recategorizeSelector:from:to:",				"ReSizeCheckRule>>#selectors",				"ReSmalllintChecker>>#getCritiquesAbout:by:",				"ReSmalllintChecker>>#checkMethodsForClass:",				"ReSmalllintChecker>>#reParseRule",				"ReSmalllintTest>>#classEnvironmentWithAll:",				"ReSmalllintTest>>#testUniqueIdentifierName",				"ReSmalllintTest>>#classAndMetaClassRuleFor:plusClasses:",				"ReSmalllintTest>>#assertEnvironment:hasAllMethodsOfTheResult:",				"ReSmalllintTest>>#assertEnvironment:hasAllClassesOfTheResult:",				"ReSmalllintTest>>#ruleFor:plusSelectors:",				"ReSubclassResponsibilityNotDefinedRule>>#check:forCritiquesDo:",				"ReTSUnitGroupedRule classTrait>>#doRebuildMethodDictionary",				"ReTSUnitGroupedRule classTrait>>#fileOutLocalMethodsInCategory:on:",				"ReTSUnitGroupedRule classTrait>>#traitComposition:",				"ReTSUnitGroupedRule classTrait>>#recategorizeSelector:from:to:",				"ReTempVarOverridesInstVarRule>>#check:forCritiquesDo:",				"ReTestClassNameShouldEndWithTestRule class>>#doRebuildMethodDictionary",				"ReTestClassNameShouldEndWithTestRule class>>#fileOutLocalMethodsInCategory:on:",				"ReTestClassNameShouldEndWithTestRule class>>#removeFromSystem:",				"ReTestClassNameShouldEndWithTestRule class>>#traitComposition:",				"ReTestClassNameShouldEndWithTestRule class>>#recategorizeSelector:from:to:",				"ReTestClassNameShouldNotEndWithTests class>>#doRebuildMethodDictionary",				"ReTestClassNameShouldNotEndWithTests class>>#fileOutLocalMethodsInCategory:on:",				"ReTestClassNameShouldNotEndWithTests class>>#removeFromSystem:",				"ReTestClassNameShouldNotEndWithTests class>>#traitComposition:",				"ReTestClassNameShouldNotEndWithTests class>>#recategorizeSelector:from:to:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#doRebuildMethodDictionary",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#fileOutLocalMethodsInCategory:on:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#removeFromSystem:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#traitComposition:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#recategorizeSelector:from:to:",				"ReThemeAccessRule>>#check:forCritiquesDo:",				"ReToDoRule>>#sendsAtWith:inAnyOf:",				"ReUncommonMessageSendRule>>#check:forCritiquesDo:",				"ReUsesTrueRule>>#check:forCritiquesDo:",				"ReVariableAssignedLiteralRule>>#check:forCritiquesDo:",				"ReVariableReferencedOnceRule>>#check:forCritiquesDo:",				"RealEstateAgent class>>#standardFor:initialExtent:world:",				"RealEstateAgent class>>#assignCollapsePointFor:",				"RealEstateAgent class>>#strictlyStaggeredInitialFrameFor:initialExtent:world:",				"Rectangle class>>#merging:",				"RectangleTest>>#testAreasOutside1",				"RectangleTest>>#testAreasOutside2",				"ReduceTest>>#testReduceLeft3Arguments",				"ReduceTest>>#testReduceCollection2Arguments",				"ReduceTest>>#testReduceLeft2Arguments",				"ReduceTest>>#testReduceCollection3Arguments",				"ReduceTest>>#testReduceRight2Arguments",				"ReduceTest>>#testReduceRight3Arguments",				"ReferenceFinder>>#backlinkFor:",				"ReferenceFinder>>#searchForObject",				"ReflectivityControlTest>>#testInsteadSendMultipleSites",				"ReflectivityControlTest>>#testFailingDoubleRWInstead",				"ReflectivityDemos>>#demoSelfSendLogging",				"RelationSet>>#do:",				"ReleaseTest>>#testAllClassPoolBindingHaveDefiningClass",				"ReleaseTest>>#testManifestNamesAccordingToPackageNames",				"ReleaseTest>>#testUndeclared",				"ReleaseTest>>#testShouldWorldMorphBeAfterFontClassesInStartupList",				"ReleaseTest>>#testKeyClassesArePresentInStartupList",				"ReleaseTest>>#testAllClassPoolBindingAreClassVariables",				"RewriteRuleChangesBrowser>>#updateChanges",				"RewriteRuleChangesBrowser>>#accept",				"RingChunkImporter>>#fileInFrom:",				"RubAbstractTextArea>>#drawEmbeddedMorphsOn:",				"RubAbstractTextArea>>#resetEmbeddedMorphs",				"RubAbstractTextArea>>#withDecoratorsNamed:",				"RubAbstractTextArea>>#withoutDecoratorsNamed:",				"RubAbstractTextArea>>#drawEmbeddedMorphs",				"RubAnnotationDisplayer class>>#doRebuildMethodDictionary",				"RubAnnotationDisplayer class>>#fileOutLocalMethodsInCategory:on:",				"RubAnnotationDisplayer class>>#removeFromSystem:",				"RubAnnotationDisplayer class>>#traitComposition:",				"RubAnnotationDisplayer class>>#tabWidthMenuOn:",				"RubAnnotationDisplayer class>>#recategorizeSelector:from:to:",				"RubCharacterScanner>>#setFont",				"RubCodeSizeFeedback>>#textSize",				"RubExtraSelectionDecorator>>#drawAllSelectionShapesOnAthensCanvas:",				"RubExtraSelectionDecorator>>#computeFindReplaceShapesFrom:to:",				"RubExtraSelectionDecorator>>#computeSecondarySelectionShapesFrom:to:",				"RubExtraSelectionDecorator>>#drawAllSelectionShapesOn:",				"RubParagraph>>#adjustRightX",				"RubScrolledTextModel class>>#doRebuildMethodDictionary",				"RubScrolledTextModel class>>#fileOutLocalMethodsInCategory:on:",				"RubScrolledTextModel class>>#removeFromSystem:",				"RubScrolledTextModel class>>#traitComposition:",				"RubScrolledTextModel class>>#recategorizeSelector:from:to:",				"RubScrolledTextMorph>>#withRuler:",				"RubScrolledTextMorph>>#selectionChanged",				"RubScrolledTextMorph>>#withRulersNamed:",				"RubScrolledTextMorph>>#scrollerOffsetChanged",				"RubScrolledTextMorph>>#withoutRulersNamed:",				"RubScrolledTextMorph>>#manageLayoutInBounds:",				"RubScrolledTextMorph>>#acceptContents",				"RubScrolledTextMorph>>#textChanged",				"RubScrolledTextMorph>>#drawHighlightsOn:",				"RubSegmentMorph>>#lineSegmentsDo:",				"RubSmalltalkEditor>>#findNextKeywordIn:selection:searchingForward:ifFound:",				"RubTextAreaExamples class>>#nicolaiAttributeFix",				"RubTextComposer>>#addNullLineWithIndex:andRectangle:",				"RubTextComposer>>#moveBy:",				"RubTextComposer>>#completeComposition",				"RubTextEditor>>#saveContentsInFile",				"RubTextEditor>>#defaultCommandKeymapping",				"RubTextEditor>>#changeEmphasis:",				"RubTextSegmentIconDisplayer>>#invokeIconMenuOfSegments:event:",				"RubUnderlinedSegmentMorph>>#drawUnderlineOnAthensCanvas:",				"RubUnderlinedSegmentMorph>>#drawUnderlineOn:",				"RubWorkspaceBarRuler class>>#doRebuildMethodDictionary",				"RubWorkspaceBarRuler class>>#fileOutLocalMethodsInCategory:on:",				"RubWorkspaceBarRuler class>>#removeFromSystem:",				"RubWorkspaceBarRuler class>>#traitComposition:",				"RubWorkspaceBarRuler class>>#recategorizeSelector:from:to:",				"RunArray>>#,",				"RunArray>>#fillFrom:with:",				"RunArray class>>#newFrom:",				"RuntimeTyperTest>>#testPlus",				"RxMatchOptimizer>>#determineTestMethod",				"RxMatcherTest>>#testSubexpressionCount",				"RxMatcherTest>>#testMatchingRangesIn",				"RxsCharSet>>#enumerableSetIgnoringCase:",				"SDL2 class>>#findSDL2",				"SDL2AthensDrawingExample>>#redraw",				"SDL2TouchExample>>#drawMoves",				"SHRBTextStyler>>#visitMethodComments:",				"SHRBTextStyler>>#styleDocComment:",				"SHRBTextStyler>>#visitMethodNode:",				"SHRBTextStyler>>#visitArrayNode:",				"SHRBTextStyler>>#visitNode:",				"SHRBTextStyler>>#visitEnglobingErrorNode:",				"SHRBTextStyler>>#visitPragmaNode:",				"SHRBTextStyler>>#visitBlockNode:",				"SHRBTextStyler>>#styleOpenParenthese:",				"SHRBTextStyler>>#visitLiteralArrayNode:",				"SHRBTextStyler>>#visitCascadeNode:",				"SHRBTextStyler>>#visitMessageNode:",				"SHRBTextStyler>>#visitTemporaryNodes:",				"SHRBTextStyler>>#visitArgumentNodes:",				"SHRBTextStyler>>#visitSequenceNode:",				"SHRBTextStyler class>>#doRebuildMethodDictionary",				"SHRBTextStyler class>>#initialTextAttributesForPixelHeight:",				"SHRBTextStyler class>>#removeFromSystem:",				"SHRBTextStyler class>>#initialTextAttributesForPixelHeight:styleTable:",				"SHRBTextStyler class>>#traitComposition:",				"SHRBTextStyler class>>#fileOutLocalMethodsInCategory:on:",				"SHRBTextStyler class>>#attributeArrayForColor:emphasis:font:",				"SHRBTextStyler class>>#recategorizeSelector:from:to:",				"SMTPClient>>#mailFrom:to:text:",				"STCommandLineHandler>>#installSourceFiles",				"STONReaderTest>>#testSetWithReferenceElements",				"STONReaderTest>>#testSetWithIndirectReferenceElements",				"STONReaderTest>>#testError",				"STONTestMap class>>#classTree:",				"STONTestMap class>>#classTreeExtended:",				"STONWriter>>#writeObject:",				"STONWriter>>#encodeString:",				"SUnitTest>>#testRan",				"ScaledDecimalTest>>#testCoercion",				"ScaledDecimalTest>>#testConvertFromNonDecimalFraction",				"ScaledDecimalTest>>#testScaleExtension",				"ScheduleTest>>#testDateAndTimes",				"ScrollBarMorph class>>#arrowSamples",				"ScrollBarMorph class>>#boxSamples",				"SelectionMorph>>#alignBottomEdges",				"SelectionMorph>>#alignTopEdges",				"SelectionMorph>>#drawOn:",				"SelectionMorph>>#borderColor:",				"SelectionMorph>>#fillStyle:",				"SelectionMorph>>#alignCentersHorizontally",				"SelectionMorph>>#dismissViaHalo",				"SelectionMorph>>#borderWidth:",				"SelectionMorph>>#alignCentersVertically",				"SelectionMorph>>#alignRightEdges",				"SelectionMorph>>#addHandlesTo:box:",				"SelectionMorph>>#alignLeftEdges",				"SelectionMorph>>#distributeHorizontally",				"SelectionMorph>>#doDup:fromHalo:handle:",				"SelectionMorph>>#privateFullMoveBy:",				"SelectionMorph>>#distributeVertically",				"SelfPropagatingLinkDemo>>#installOnAllSendsInMethod:",				"SequenceableCollection>>#kth:ranking:atRandom:",				"SequenceableCollection>>#putOn:",				"SequenceableCollection>>#groupByRuns:",				"SequenceableCollection>>#allPairsDo:",				"SequenceableCollection>>#topologicalSortByAssociations:onCycleDo:",				"SequenceableCollection>>#groupsOf:",				"SequenceableCollection>>#asStringWithCr",				"SequenceableCollection>>#flatCollect:",				"SequenceableCollection>>#scan:init:",				"SequenceableCollection>>#stFasterDifferencePreservingOrder:",				"SequenceableCollection>>#atAll:put:",				"SequenceableCollection>>#asDigitsAt:in:do:",				"SessionCategory>>#renamedClass:from:to:",				"SessionManager>>#unregisterHandler:",				"SessionManager>>#renamedClass:from:to:",				"Set>>#grow",				"Set>>#collect:",				"Set>>#parseOptions:",				"Set>>#=",				"Set>>#difference:",				"Set>>#rehash",				"Set>>#intersection:",				"SetTest>>#testCopyNonEmptyWithout",				"SetTest>>#testIntersectionItself",				"SetTest>>#testAsByteArray",				"SetTest>>#testPrintOnDelimiterLast",				"SetTest>>#testOccurrencesOf",				"SetTest>>#testAsCommaStringMore",				"SetTest>>#testAsSortedCollection",				"SetTest>>#testCopyNonEmptyWith",				"SetTest>>#testPrintElementsOn",				"SetTest>>#testCopyEmptyWithoutAll",				"SetTest>>#testWithAll",				"SetTest>>#testCopyNonEmptyWithoutAll",				"SetTest>>#testCopyNonEmptyWithoutNotIncluded",				"SetTest>>#testPrintOnDelimiter",				"SetTest>>#testCollect",				"SetTest>>#testAsSortedCollectionWithSortBlock",				"SetTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"SetTest>>#test0CopyTest",				"SetTest>>#testAsStringOnDelimiterMore",				"SetTest>>#testPrintOn",				"SetTest>>#assertNoDuplicates:whenConvertedTo:",				"SetTest>>#testAsCommaStringOne",				"SetTest>>#testDifference",				"SetTest>>#testAsStringOnDelimiterOne",				"SetTest>>#testAsStringOnDelimiterLastMore",				"SetTest>>#testConcatenationWithDuplicate",				"SetTest>>#testCopyNonEmpty",				"SetTest>>#test0FixtureOccurrencesTest",				"SetTest>>#testRemoveAllSuchThat",				"SetTest>>#testDo2",				"SetTest>>#testAsStringOnDelimiterLastOne",				"SetTest>>#testRemoveAllFoundIn",				"SetTest>>#testDifferenceWithSeparateCollection",				"SetTest>>#testDifferenceWithNonNullIntersection",				"SetTest>>#testConcatenation",				"SettingBrowser>>#updateAccordingTo:",				"SettingBrowser>>#setViewedPackageNames:",				"SettingBrowser>>#getViewedPackageNames",				"SettingBrowser>>#setAllToDefault",				"SettingBrowser class>>#allSettingsState",				"SettingBrowser class>>#refreshAllSettingBrowsers",				"SettingDeclaration>>#listenersForEvent:",				"SettingDeclaration>>#maxNameWidthForFont:",				"SettingNode>>#updateAccordingTo:",				"SettingNode>>#checkForUnknownTarget",				"SettingNode>>#deeplySelect:in:",				"SettingNode>>#deeplyDetect:",				"SettingTree>>#checkForUnknownTarget",				"SettingTree>>#checkForUnknownParent",				"SettingTree>>#deeplySelect:in:",				"SettingTree>>#nodeList",				"SettingTree>>#pragmasDo:",				"SettingTree>>#deeplyDetect:",				"SettingTree>>#retainedNodesFromList:",				"ShAbstractChangeDetector class>>#compareClass:with:",				"ShAbstractClassBuilderTest>>#doValidateMethods:on:",				"ShAbstractClassBuilderTest>>#validateSharedVariables:",				"ShDefaultBuilderEnhancer>>#propagateChangesToRelatedClasses:installer:",				"ShLayoutDefinition>>#validate",				"SharedPool class>>#localBindingOf:",				"ShiftClassBuilder>>#propagateChangesTo:",				"ShiftClassBuilder>>#installSlotsAndVariables",				"ShiftClassBuilder>>#notifyChanges",				"ShiftClassBuilder>>#compareWithOldClass",				"ShiftClassBuilder>>#compileMethods",				"ShiftClassInstaller>>#migrateClassTo:",				"ShiftClassInstaller>>#copyObject:to:",				"ShiftClassInstaller>>#updateBindings:of:",				"ShortIntegerArray>>#swapBytePairsHacky",				"ShortIntegerArray>>#write:littleEndianOn:",				"SignalLogger>>#nextPutAll:",				"SimpleButtonMorph>>#setArguments",				"SimpleButtonMorph class>>#doRebuildMethodDictionary",				"SimpleButtonMorph class>>#fileOutLocalMethodsInCategory:on:",				"SimpleButtonMorph class>>#removeFromSystem:",				"SimpleButtonMorph class>>#traitComposition:",				"SimpleButtonMorph class>>#recategorizeSelector:from:to:",				"SimpleHierarchicalListMorph>>#collapseAll:",				"SimpleHierarchicalListMorph>>#expand:to:",				"SimpleHierarchicalListMorph>>#addSubmorphsAfter:fromCollection:allowSorting:",				"SimpleHierarchicalListMorph>>#collapseAll",				"SimpleHierarchicalListMorph>>#drawLinesOn:",				"SimpleHierarchicalListMorph>>#expandAll:except:",				"SimpleHierarchicalListMorph>>#selectionOneOf:",				"SimpleHierarchicalListMorph>>#toggleExpandedState:event:",				"SimpleHierarchicalListMorph>>#expandAll",				"SimpleHierarchicalListMorph>>#addMorphsTo:from:allowSorting:withExpandedItems:atLevel:",				"SimpleHierarchicalListMorph>>#expandAll:",				"SimpleHierarchicalListMorph>>#expandRoots",				"SimpleTestResourceTestCase>>#testResourceCollection",				"SindarinDebugger>>#skipMessageNodeWith:",				"SindarinDebugger>>#step",				"SindarinDebugger>>#stepThrough",				"SindarinDebugger class>>#doRebuildMethodDictionary",				"SindarinDebugger class>>#fileOutLocalMethodsInCategory:on:",				"SindarinDebugger class>>#closeAllDebuggers",				"SindarinDebugger class>>#removeFromSystem:",				"SindarinDebugger class>>#traitComposition:",				"SindarinDebugger class>>#recategorizeSelector:from:to:",				"SindarinDebuggerTest>>#tearDown",				"SkewBinaryCanonicalNumber>>#asInteger",				"SlotClassBuilderTest>>#tearDown",				"SlotErrorsTest>>#testClassSlotWithReservedName",				"SlotErrorsTest>>#testSlotWithReservedName",				"SlotLayoutEqualityTest>>#testLayoutNotEquals",				"SlotLayoutEqualityTest>>#testLayoutWithSlotsEquals",				"SlotLayoutEqualityTest>>#testLayoutEquals",				"SlotLayoutEqualityTest>>#testLayoutWithSlotsNotEquals",				"SlotMigrationTest>>#testReshapePointerToByteVariablePropagatesToDeepHierarchy",				"SlotMigrationTest>>#testReshapeByteVariableToPointerPropagatesToDeepHierarchy",				"SmallDictionary>>#keysAndValuesRemove:",				"SmallDictionary>>#isHealthy",				"SmallDictionary>>#includes:",				"SmallDictionary>>#includesIdentity:",				"SmalllintManifestChecker>>#cleanAllManifest",				"SmalltalkImage>>#extractMinusParametersFrom:",				"SmalltalkImage>>#newSpecialObjectsArray",				"SmalltalkImage>>#restartMethods",				"SmalltalkImage>>#reportCPUandRAM",				"SmalltalkImage>>#fixObsoleteBindings",				"Socket class>>#pingPorts:on:timeOutSecs:",				"SocketAddress class>>#fromDottedString:",				"SocketAddressTest>>#testIsPrivateAddress",				"SocketAddressTest>>#testZero",				"SortedCollection>>#addAll:",				"SortedCollection>>#collect:",				"SortedCollection>>#groupedBy:",				"SortedCollectionTest>>#testCopyNonEmptyWithout",				"SortedCollectionTest>>#testKeysAndValuesDo",				"SortedCollectionTest>>#testIntersectionItself",				"SortedCollectionTest>>#testAsByteArray",				"SortedCollectionTest>>#testAsCommaStringMore",				"SortedCollectionTest>>#testCopyReplaceAllWithForSorted",				"SortedCollectionTest>>#testCopyNonEmptyWith",				"SortedCollectionTest>>#testAddAll2",				"SortedCollectionTest>>#testCopyEmptyWithoutAll",				"SortedCollectionTest>>#testWithAll",				"SortedCollectionTest>>#testCopyNonEmptyWithoutAll",				"SortedCollectionTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"SortedCollectionTest>>#testAsSetWithEqualsElements",				"SortedCollectionTest>>#testPairsCollect",				"SortedCollectionTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"SortedCollectionTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"SortedCollectionTest>>#testAsIdentitySetWithEqualsElements",				"SortedCollectionTest>>#testRemoveAllSuchThat",				"SortedCollectionTest>>#testAsStringOnDelimiterLastOne",				"SortedCollectionTest>>#testRemoveAllFoundIn",				"SortedCollectionTest>>#testDo2",				"SortedCollectionTest>>#testCopyFromToWithForSorted",				"SortedCollectionTest>>#testOccurrencesOf",				"SortedCollectionTest>>#testAsSortedCollection",				"SortedCollectionTest>>#test0FixtureTConvertAsSetForMultiplinessTest",				"SortedCollectionTest>>#test0FixtureCopyPartOfSequenceableTest",				"SortedCollectionTest>>#test0FixtureOccurrencesForMultiplinessTest",				"SortedCollectionTest>>#testCopyNonEmptyWithoutNotIncluded",				"SortedCollectionTest>>#testAsSortedCollectionWithSortBlock",				"SortedCollectionTest>>#testAsIdentitySetWithIdentityEqualsElements",				"SortedCollectionTest>>#test0CopyTest",				"SortedCollectionTest>>#testAsStringOnDelimiterMore",				"SortedCollectionTest>>#assertNoDuplicates:whenConvertedTo:",				"SortedCollectionTest>>#testDifference",				"SortedCollectionTest>>#testAsStringOnDelimiterOne",				"SortedCollectionTest>>#test0FixtureOccurrencesTest",				"SortedCollectionTest>>#testDifferenceWithSeparateCollection",				"SortedCollectionTest>>#testDifferenceWithNonNullIntersection",				"SourceCodeFonts class>>#registerFonts:",				"SourceFile>>#tryOpenReadOnly:",				"SourceFileArray>>#reportString",				"SourceFileArrayTest>>#testFileIndexFromSourcePointer",				"SourceFileBufferedReadWriteStream>>#nextPutAll:",				"SourceFileBufferedReadWriteStreamTest>>#testPeek",				"SpAbstractAdapterTest>>#runCase",				"SpAbstractLayoutTest>>#runCase",				"SpAbstractMorphicAdapter>>#addKeyBindingsTo:",				"SpAbstractMorphicAdapter>>#type:",				"SpAbstractPresenter>>#unsubscribe:",				"SpAbstractPresenter class>>#doRebuildMethodDictionary",				"SpAbstractPresenter class>>#fileOutLocalMethodsInCategory:on:",				"SpAbstractPresenter class>>#removeFromSystem:",				"SpAbstractPresenter class>>#traitComposition:",				"SpAbstractPresenter class>>#recategorizeSelector:from:to:",				"SpAbstractSelectionMode class>>#doRebuildMethodDictionary",				"SpAbstractSelectionMode class>>#fileOutLocalMethodsInCategory:on:",				"SpAbstractSelectionMode class>>#removeFromSystem:",				"SpAbstractSelectionMode class>>#traitComposition:",				"SpAbstractSelectionMode class>>#recategorizeSelector:from:to:",				"SpAbstractTextPresenter>>#typeByChar:",				"SpAbstractTreePresenter>>#shownOrderPreservingTree:",				"SpAbstractTreeSelectionMode>>#selectItems:",				"SpAbstractTreeSelectionMode class>>#doRebuildMethodDictionary",				"SpAbstractTreeSelectionMode class>>#fileOutLocalMethodsInCategory:on:",				"SpAbstractTreeSelectionMode class>>#removeFromSystem:",				"SpAbstractTreeSelectionMode class>>#traitComposition:",				"SpAbstractTreeSelectionMode class>>#recategorizeSelector:from:to:",				"SpAbstractWidgetPresenter>>#processDeferredActions",				"SpAbstractWidgetPresenter class>>#addDocumentSection:label:methods:",				"SpAbstractWidgetPresenter class>>#addDocumentSectionTransmissions:",				"SpActionBarPresenter>>#traverseInFocusOrderDo:excluding:",				"SpAdapterBindings>>#initializeBindings",				"SpApplication>>#closeAllWindows",				"SpBoxLayout class>>#doRebuildMethodDictionary",				"SpBoxLayout class>>#fileOutLocalMethodsInCategory:on:",				"SpBoxLayout class>>#removeFromSystem:",				"SpBoxLayout class>>#traitComposition:",				"SpBoxLayout class>>#recategorizeSelector:from:to:",				"SpButtonBarPresenter>>#items:",				"SpClassStyle>>#applyTo:",				"SpCodeAdapterTest>>#styleTableAt:do:",				"SpCodeAdapterTest>>#assertText:atInterval:isStyle:",				"SpCodePresenter>>#buildContextMenuWith:",				"SpCodePresenter>>#buildContextKeyBindingsWith:",				"SpCodePresenter class>>#codeSelectionActionCommandsGroupWith:",				"SpCodePresenter class>>#codeNavigationCommandsGroupWith:",				"SpCollectionListModel class>>#doRebuildMethodDictionary",				"SpCollectionListModel class>>#fileOutLocalMethodsInCategory:on:",				"SpCollectionListModel class>>#removeFromSystem:",				"SpCollectionListModel class>>#traitComposition:",				"SpCollectionListModel class>>#recategorizeSelector:from:to:",				"SpComposablePresenterWithAdditionalSubpresentersTest>>#testOpening",				"SpCompositeIconProvider>>#iconNamed:ifAbsent:",				"SpCompositeOutputPort>>#attachTransmission:",				"SpCompositeTableColumn>>#addAllColumns:",				"SpDemoTest>>#testSmokeTestForDemoPages",				"SpDialogPresenter class>>#addDocumentSection:label:methods:",				"SpDialogWindowPresenter>>#traverseInFocusOrderDo:excluding:",				"SpDocumentHierarchyBuilder>>#fillTreeWithSubclassesOf:",				"SpDocumentHierarchyBuilder>>#addLevel:from:to:",				"SpDocumentHierarchyBuilder>>#fillTreeWithSuperclassesOf:",				"SpDocumentHierarchyBuilder>>#addLevel:from:",				"SpDropListAdapterTest>>#testAddingIconsShowTheIcon",				"SpDropListAdapterTest>>#testRemovingIconsAfterAddingThem",				"SpDynamicSpecExample class>>#doRebuildMethodDictionary",				"SpDynamicSpecExample class>>#fileOutLocalMethodsInCategory:on:",				"SpDynamicSpecExample class>>#removeFromSystem:",				"SpDynamicSpecExample class>>#traitComposition:",				"SpDynamicSpecExample class>>#recategorizeSelector:from:to:",				"SpEventHandler>>#whenMouseUpDo:",				"SpEventHandler>>#whenKeyUpDo:",				"SpEventHandler>>#whenMouseDownDo:",				"SpEventHandler>>#whenMouseEnterDo:",				"SpEventHandler>>#whenMouseLeaveDo:",				"SpEventHandler>>#whenFocusLostDo:",				"SpEventHandler>>#whenDoubleClickDo:",				"SpEventHandler>>#whenFocusReceivedDo:",				"SpEventHandler>>#whenKeyDownDo:",				"SpEventHandler>>#installAllEventsTo:target:",				"SpEventHandler>>#whenMouseMoveDo:",				"SpExecutableLayout>>#unsubscribe",				"SpExecutableLayout>>#removeBySymbol:",				"SpExecutableLayout>>#parentLayoutOf:",				"SpExecutableLayout class>>#addDocumentSection:label:methods:",				"SpFilteringSelectableListPresenter>>#activateAll",				"SpFilteringSelectableListPresenter>>#selectFrom:to:",				"SpGeneratorListModel class>>#example",				"SpGridAxisConstraints class>>#doRebuildMethodDictionary",				"SpGridAxisConstraints class>>#fileOutLocalMethodsInCategory:on:",				"SpGridAxisConstraints class>>#removeFromSystem:",				"SpGridAxisConstraints class>>#traitComposition:",				"SpGridAxisConstraints class>>#recategorizeSelector:from:to:",				"SpGridConstraints class>>#doRebuildMethodDictionary",				"SpGridConstraints class>>#fileOutLocalMethodsInCategory:on:",				"SpGridConstraints class>>#removeFromSystem:",				"SpGridConstraints class>>#traitComposition:",				"SpGridConstraints class>>#recategorizeSelector:from:to:",				"SpLocationIconProvider>>#loadAllIcons",				"SpLocationIconProvider>>#loadIconNamed:",				"SpMenuPresenter>>#fromSpec:",				"SpMenuPresenter class>>#addDocumentExtraSections:",				"SpMillerColumnPresenter>>#traverseInFocusOrderDo:excluding:",				"SpMillerLayout class>>#doRebuildMethodDictionary",				"SpMillerLayout class>>#fileOutLocalMethodsInCategory:on:",				"SpMillerLayout class>>#removeFromSystem:",				"SpMillerLayout class>>#traitComposition:",				"SpMillerLayout class>>#recategorizeSelector:from:to:",				"SpMockMenu class>>#doRebuildMethodDictionary",				"SpMockMenu class>>#fileOutLocalMethodsInCategory:on:",				"SpMockMenu class>>#removeFromSystem:",				"SpMockMenu class>>#traitComposition:",				"SpMockMenu class>>#recategorizeSelector:from:to:",				"SpMorphStyle>>#applyTo:",				"SpMorphStyle class>>#fromStylesheet:baseStyleName:otherStyles:",				"SpMorphicActionBarAdapter>>#addModelTo:",				"SpMorphicBackendForTest class>>#doRebuildMethodDictionary",				"SpMorphicBackendForTest class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicBackendForTest class>>#removeFromSystem:",				"SpMorphicBackendForTest class>>#traitComposition:",				"SpMorphicBackendForTest class>>#recategorizeSelector:from:to:",				"SpMorphicBaseBoxLayout>>#applyVerticalHomogeneousLayout:in:",				"SpMorphicBaseBoxLayout>>#applyHorizontalHomogeneousLayout:in:",				"SpMorphicBaseTextAdapter>>#removeAllTextSegmentDecorations",				"SpMorphicBaseTextAdapter>>#typeByChar:",				"SpMorphicBaseTextAdapter class>>#doRebuildMethodDictionary",				"SpMorphicBaseTextAdapter class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicBaseTextAdapter class>>#removeFromSystem:",				"SpMorphicBaseTextAdapter class>>#traitComposition:",				"SpMorphicBaseTextAdapter class>>#recategorizeSelector:from:to:",				"SpMorphicBoxAdapter>>#layout:",				"SpMorphicBoxAdapter>>#updateSpacing",				"SpMorphicButtonBarAdapter>>#addModelTo:",				"SpMorphicCodeAdapter>>#addKeyBindingsTo:",				"SpMorphicDialogWindowAdapter>>#buildButtonBar",				"SpMorphicGridLayout>>#basicLayout:in:",				"SpMorphicGridLayoutComputation>>#computeCellExtents",				"SpMorphicGridLayoutComputation>>#calculateHomogeneousColumnWidths",				"SpMorphicGridLayoutComputation>>#computeNumberOfRowsAndColumns",				"SpMorphicGridLayoutComputation>>#calculateHomogeneousRowHeights",				"SpMorphicGridLayoutTest>>#setUp",				"SpMorphicMenuAdapter>>#buildWidget",				"SpMorphicMenuBarAdapter>>#adoptMenuGroupModel:first:",				"SpMorphicMenuBarAdapter>>#emptyAccumulator:",				"SpMorphicNotebookAdapter>>#updatePagesWith:",				"SpMorphicNotebookAdapter>>#addModelTo:",				"SpMorphicNotebookAdapter class>>#doRebuildMethodDictionary",				"SpMorphicNotebookAdapter class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicNotebookAdapter class>>#removeFromSystem:",				"SpMorphicNotebookAdapter class>>#traitComposition:",				"SpMorphicNotebookAdapter class>>#recategorizeSelector:from:to:",				"SpMorphicPaginatorAdapter class>>#doRebuildMethodDictionary",				"SpMorphicPaginatorAdapter class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicPaginatorAdapter class>>#removeFromSystem:",				"SpMorphicPaginatorAdapter class>>#traitComposition:",				"SpMorphicPaginatorAdapter class>>#recategorizeSelector:from:to:",				"SpMorphicPatchLineDecorator>>#drawOn:",				"SpMorphicRadioButtonAdapter>>#buildWidget",				"SpMorphicRoassalAdapter>>#release",				"SpMorphicTableAdapter>>#ifSorted:ifNotSorted:",				"SpMorphicTableAdapter>>#addModelTo:",				"SpMorphicTableColumnVisitor>>#visitCompositeColumn:",				"SpMorphicTableDataSource class>>#doRebuildMethodDictionary",				"SpMorphicTableDataSource class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicTableDataSource class>>#removeFromSystem:",				"SpMorphicTableDataSource class>>#traitComposition:",				"SpMorphicTableDataSource class>>#recategorizeSelector:from:to:",				"SpMorphicTextAdapter>>#codePaneMenu:shifted:",				"SpMorphicToggleButtonAdapter>>#buttonChanged",				"SpMorphicToolbarAdapter>>#updateItems:",				"SpMorphicToolbarMenuButtonMorph>>#font:",				"SpMorphicToolbarToggleButtonAdapter>>#buttonChanged",				"SpMorphicTreeTableAdapter>>#suspendSelectionEventsDuring:",				"SpMorphicTreeTableAdapter>>#registerColumnsChangedEventTo:",				"SpMorphicTreeTableDataSource>>#itemAtPath:expanding:",				"SpMorphicTreeTableDataSource class>>#doRebuildMethodDictionary",				"SpMorphicTreeTableDataSource class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicTreeTableDataSource class>>#removeFromSystem:",				"SpMorphicTreeTableDataSource class>>#traitComposition:",				"SpMorphicTreeTableDataSource class>>#recategorizeSelector:from:to:",				"SpMorphicWindowAdapter>>#rebuildWithSpecLayout:",				"SpNotebookMorph>>#suspendAnnouncementsDuring:",				"SpNotebookPage class>>#doRebuildMethodDictionary",				"SpNotebookPage class>>#fileOutLocalMethodsInCategory:on:",				"SpNotebookPage class>>#removeFromSystem:",				"SpNotebookPage class>>#traitComposition:",				"SpNotebookPage class>>#recategorizeSelector:from:to:",				"SpNotebookPresenter>>#pages:",				"SpNotebookPresenter>>#resetAllPageContents",				"SpObservablePoint class>>#doRebuildMethodDictionary",				"SpObservablePoint class>>#fileOutLocalMethodsInCategory:on:",				"SpObservablePoint class>>#removeFromSystem:",				"SpObservablePoint class>>#traitComposition:",				"SpObservablePoint class>>#recategorizeSelector:from:to:",				"SpOptionPresenter>>#validate",				"SpOutputPort>>#transmitDo:transform:",				"SpOutputPort>>#applyTransform:",				"SpOutputPort>>#transmitDo:",				"SpOverlayConstraints class>>#doRebuildMethodDictionary",				"SpOverlayConstraints class>>#fileOutLocalMethodsInCategory:on:",				"SpOverlayConstraints class>>#removeFromSystem:",				"SpOverlayConstraints class>>#traitComposition:",				"SpOverlayConstraints class>>#recategorizeSelector:from:to:",				"SpPaginatorMorph>>#addPages:",				"SpPaginatorMorph class>>#doRebuildMethodDictionary",				"SpPaginatorMorph class>>#fileOutLocalMethodsInCategory:on:",				"SpPaginatorMorph class>>#removeFromSystem:",				"SpPaginatorMorph class>>#traitComposition:",				"SpPaginatorMorph class>>#recategorizeSelector:from:to:",				"SpPaginatorPresenter>>#pages:",				"SpPanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"SpPanelMorphWithSplitters>>#linkSplittersToSplitters",				"SpPanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"SpPresenter>>#traversePresentersDo:excluding:",				"SpPresenter>>#applyKeyBindingsFromMenu:",				"SpPresenter>>#presentersDo:",				"SpPresenter>>#instantiatePresenters:",				"SpPresenter>>#traverseInFocusOrderDo:excluding:",				"SpPresenter class>>#buildExtensionCommandsWith:forRoot:",				"SpPresenterBuilder class>>#doRebuildMethodDictionary",				"SpPresenterBuilder class>>#fileOutLocalMethodsInCategory:on:",				"SpPresenterBuilder class>>#removeFromSystem:",				"SpPresenterBuilder class>>#traitComposition:",				"SpPresenterBuilder class>>#recategorizeSelector:from:to:",				"SpPresenterFocusOrderTest class>>#doRebuildMethodDictionary",				"SpPresenterFocusOrderTest class>>#fileOutLocalMethodsInCategory:on:",				"SpPresenterFocusOrderTest class>>#removeFromSystem:",				"SpPresenterFocusOrderTest class>>#traitComposition:",				"SpPresenterFocusOrderTest class>>#recategorizeSelector:from:to:",				"SpProgressBarState class>>#doRebuildMethodDictionary",				"SpProgressBarState class>>#fileOutLocalMethodsInCategory:on:",				"SpProgressBarState class>>#removeFromSystem:",				"SpProgressBarState class>>#traitComposition:",				"SpProgressBarState class>>#recategorizeSelector:from:to:",				"SpPropertyStyle>>#mergeWith:",				"SpRadioButtonPresenter>>#state:",				"SpRadioButtonPresenter>>#associatedRadioButtons:",				"SpRoassalPresenter>>#release",				"SpRunCommandLineHandler>>#listApplications",				"SpScrollableLayout class>>#doRebuildMethodDictionary",				"SpScrollableLayout class>>#fileOutLocalMethodsInCategory:on:",				"SpScrollableLayout class>>#removeFromSystem:",				"SpScrollableLayout class>>#traitComposition:",				"SpScrollableLayout class>>#recategorizeSelector:from:to:",				"SpStringTableColumn class>>#doRebuildMethodDictionary",				"SpStringTableColumn class>>#fileOutLocalMethodsInCategory:on:",				"SpStringTableColumn class>>#removeFromSystem:",				"SpStringTableColumn class>>#traitComposition:",				"SpStringTableColumn class>>#recategorizeSelector:from:to:",				"SpStyleEnvironmentVariable class>>#addDocumentValidValues:",				"SpTAlignable classTrait>>#doRebuildMethodDictionary",				"SpTAlignable classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTAlignable classTrait>>#traitComposition:",				"SpTAlignable classTrait>>#recategorizeSelector:from:to:",				"SpTBackendUpdating classTrait>>#doRebuildMethodDictionary",				"SpTBackendUpdating classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTBackendUpdating classTrait>>#traitComposition:",				"SpTBackendUpdating classTrait>>#recategorizeSelector:from:to:",				"SpTContextMenu classTrait>>#doRebuildMethodDictionary",				"SpTContextMenu classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTContextMenu classTrait>>#traitComposition:",				"SpTContextMenu classTrait>>#recategorizeSelector:from:to:",				"SpTDecoratedColumn classTrait>>#doRebuildMethodDictionary",				"SpTDecoratedColumn classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTDecoratedColumn classTrait>>#traitComposition:",				"SpTDecoratedColumn classTrait>>#recategorizeSelector:from:to:",				"SpTDynamicPresenter classTrait>>#doRebuildMethodDictionary",				"SpTDynamicPresenter classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTDynamicPresenter classTrait>>#traitComposition:",				"SpTDynamicPresenter classTrait>>#recategorizeSelector:from:to:",				"SpTHaveWrappingScrollBars classTrait>>#doRebuildMethodDictionary",				"SpTHaveWrappingScrollBars classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTHaveWrappingScrollBars classTrait>>#traitComposition:",				"SpTHaveWrappingScrollBars classTrait>>#recategorizeSelector:from:to:",				"SpTModel classTrait>>#doRebuildMethodDictionary",				"SpTModel classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTModel classTrait>>#traitComposition:",				"SpTModel classTrait>>#recategorizeSelector:from:to:",				"SpTMorphicTableDataSourceCommons classTrait>>#doRebuildMethodDictionary",				"SpTMorphicTableDataSourceCommons classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTMorphicTableDataSourceCommons classTrait>>#traitComposition:",				"SpTMorphicTableDataSourceCommons classTrait>>#recategorizeSelector:from:to:",				"SpTMorphicUIRedrawer classTrait>>#doRebuildMethodDictionary",				"SpTMorphicUIRedrawer classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTMorphicUIRedrawer classTrait>>#traitComposition:",				"SpTMorphicUIRedrawer classTrait>>#recategorizeSelector:from:to:",				"SpTObservable classTrait>>#doRebuildMethodDictionary",				"SpTObservable classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTObservable classTrait>>#traitComposition:",				"SpTObservable classTrait>>#recategorizeSelector:from:to:",				"SpTPresenterBuilder classTrait>>#doRebuildMethodDictionary",				"SpTPresenterBuilder classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTPresenterBuilder classTrait>>#traitComposition:",				"SpTPresenterBuilder classTrait>>#recategorizeSelector:from:to:",				"SpTSearchable classTrait>>#doRebuildMethodDictionary",				"SpTSearchable classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTSearchable classTrait>>#traitComposition:",				"SpTSearchable classTrait>>#recategorizeSelector:from:to:",				"SpTablePresenter>>#addColumns:",				"SpTablePresenter class>>#addDocumentExtraSections:",				"SpTestingPresenterWithAdditionalPresenters>>#initializePresenters",				"SpTestingPresenterWithAdditionalPresenters class>>#defaultLayout",				"SpTextInputFieldWithValidationPresenter>>#validate",				"SpTextPresenter class>>#textSearchCommandsGroupWith:",				"SpTextPresenter class>>#textEditionCommandsGroupWith:",				"SpToggleButtonPresenter>>#associatedToggleButtons:",				"SpToolCommand class>>#addDocumentContextRequiredSelectors:",				"SpToolbarPresenter>>#traverseInFocusOrderDo:excluding:",				"SpToolbarToggleButtonMorphTest class>>#doRebuildMethodDictionary",				"SpToolbarToggleButtonMorphTest class>>#fileOutLocalMethodsInCategory:on:",				"SpToolbarToggleButtonMorphTest class>>#removeFromSystem:",				"SpToolbarToggleButtonMorphTest class>>#traitComposition:",				"SpToolbarToggleButtonMorphTest class>>#recategorizeSelector:from:to:",				"SpToolbarToggleButtonPresenter>>#associatedToggleButtons:",				"SpTreeMultipleSelectionMode>>#selectPaths:",				"SpTreeTablePresenter class>>#addDocumentExtraSections:",				"SpValueHolder>>#valueChanged:",				"SpVerticalAlignment class>>#doRebuildMethodDictionary",				"SpVerticalAlignment class>>#fileOutLocalMethodsInCategory:on:",				"SpVerticalAlignment class>>#removeFromSystem:",				"SpVerticalAlignment class>>#traitComposition:",				"SpVerticalAlignment class>>#recategorizeSelector:from:to:",				"SpWindowPresenter>>#openWithLayout:",				"SpWorldPresenter class>>#setUpWorld",				"SpaceTally>>#computeSpaceUsage",				"SpaceTally>>#computeSpaceUsageResultsForClassesInstancesAssociations:",				"SpaceTally>>#printSpaceDifferenceFrom:to:",				"SpaceTally>>#preAllocateResultsFor:",				"SpaceTally>>#spaceForInstancesOf:",				"SpaceTally>>#saveTo:",				"SpaceTally>>#compareTallyIn:to:",				"SpaceTally>>#printSpaceAnalysis:on:",				"SparseLargeTable>>#allDefaultValueSubtableAt:",				"Srfi41ArithSequenceTest>>#testPrimeGaps",				"Srfi41Stream>>#do:",				"Srfi41StreamTest>>#testAt",				"Srfi41StreamTest>>#testConversionToEagerCollection",				"StBaseFilter>>#allItemsDo:",				"StCollectionIterator>>#elementsDo:",				"StCritiqueBrowserPresenter>>#reapplyThisRule",				"StCritiqueBrowserPresenter>>#methodAdded:",				"StCritiqueBrowserPresenter>>#classAdded:",				"StCritiqueBrowserPresenter>>#reapplyRule:",				"StCritiqueBrowserPresenter>>#applyRules",				"StCritiqueRuleSelectorPresenter>>#removeAll",				"StCritiqueRuleSelectorPresenter>>#addAll",				"StDebugger>>#updateExtensionsFrom:",				"StDebugger>>#clear",				"StDebugger>>#findFirstRelevantStackIndexIn:",				"StDebugger>>#updateToolbar",				"StDebugger class>>#buildSindarinExtentionCommandsGroupWith:forRoot:",				"StDebuggerCodeCommandTreeBuilder>>#codeDebugCommands",				"StDebuggerExtensionSettings class>>#debuggerExtensionSettingsOn:",				"StDebuggerStackCommandTreeBuilder>>#stackContextMenuActionsCommands",				"StDebuggerStackCommandTreeBuilder>>#stackReceiverClassNavigationCommands",				"StDebuggerStackCommandTreeBuilder>>#stackContextMenuStackEditionsCommands",				"StDebuggerStackCommandTreeBuilder>>#stackMethodSelectorNavigationCommands",				"StDebuggerStackCommandTreeBuilder>>#stackContextMenuExplorationCommands",				"StDebuggerStackCommandTreeBuilder>>#stackMethodNavigationCommands",				"StDebuggerTest>>#testToolbarInDNUContext",				"StDebuggerToolCommandTreeBuilderTest>>#assertCommands:haveContext:",				"StDebuggerToolbarCommandTreeBuilder>>#buildCommandGroupFrom:named:description:",				"StDebuggerToolbarCommandTreeBuilderTest>>#testExecutionControlShortcuts",				"StFilterAlike>>#applyFilterWithQuery",				"StHaltAndBreakpointControlTest>>#removeMethodsWithHalts",				"StHaltAndBreakpointControlTest>>#compileMethodsWithHalts",				"StHaltAndBreakpointController>>#removeSkipLinksFor:",				"StHaltCache>>#buildCache",				"StHaltCache class>>#doRebuildMethodDictionary",				"StHaltCache class>>#fileOutLocalMethodsInCategory:on:",				"StHaltCache class>>#removeFromSystem:",				"StHaltCache class>>#traitComposition:",				"StHaltCache class>>#recategorizeSelector:from:to:",				"StHaltCacheTest>>#testInitialCacheBuild",				"StHaltCacheTest>>#testAddingHaltToMethod",				"StInspectionCollector>>#uniquePragmas:",				"StInspector>>#step",				"StInspectorCommand class>>#addDocumentContextRequiredSelectors:",				"StInspectorRefreshService>>#stepService",				"StObjectInspectorPresenter>>#step",				"StObjectInspectorPresenter>>#trySelectAnyPageWithName:",				"StObjectInspectorPresenter class>>#buildCommandsGroupWith:forRoot:",				"StPlaygroundInteractionModel>>#bindings",				"StPlaygroundInteractionModel>>#addBindings:",				"StPlaygroundPagePresenter>>#addToolbarCommandsTo:",				"StPlaygroundPagePresenter>>#addMenuCommandsTo:",				"StQuery>>#updateFromContext:",				"StQuery>>#textInSearchBar",				"StRawInspection class>>#objectCentricBreakpointCommandsWith:forRootGroup:",				"StReporter>>#createTextForReport:",				"StSelector>>#spotterUsersFor:",				"StSendersIterator>>#elementsDo:",				"StSequenceIterator>>#doReset",				"StSequenceIterator>>#next",				"StSindarinDebuggerPresenter>>#buildToolbar",				"StSingleCritiqueResultListPresenter>>#removeCritiqueToFalsePositive",				"StSingleCritiqueResultListPresenter>>#addCritiqueToFalsePositive",				"StSingleCritiqueResultListPresenter>>#removeCritiqueToDo",				"StSingleCritiqueResultListPresenter>>#addCritiqueToDo",				"StSizeReporter>>#topicSpec",				"StSizeReporter>>#fillTopics",				"StSpotter>>#initializeWindow:",				"StSpotterCandidatesList>>#getCandidateLink:in:",				"StSpotterContext>>#continueFilter",				"StSpotterIterator>>#reject:as:",				"StSpotterIterator>>#select:thenDo:",				"StSpotterIterator>>#reject:thenDo:",				"StSpotterIterator>>#withIndexDo:",				"StSpotterIterator>>#allSatisfy:",				"StSpotterIterator>>#collect:as:",				"StSpotterIterator>>#do:",				"StSpotterIterator>>#anySatisfy:",				"StSpotterIterator>>#select:as:",				"StSpotterIterator>>#detect:ifFound:ifNone:",				"StSpotterModel>>#stSpotterProcessorsFor:",				"StSpotterModel>>#announceAllCandidatesAdded:",				"StSpotterProcessor>>#configureFilter",				"StSpotterQuery>>#terminate",				"StSpotterQuery>>#process",				"StSpotterStep>>#previousProcessorFrom:",				"StSystemReporter>>#reportOSEnvironment:",				"StSystemReporter>>#reportLinuxOSDetails:",				"StSystemReporter>>#fillTopics",				"StSystemReporter>>#reportModules:",				"StUnifiedDiffChangesMorph>>#calculatedJoinMappings",				"StWindowsProcessorTest>>#tearDown",				"StackTest class>>#doRebuildMethodDictionary",				"StackTest class>>#fileOutLocalMethodsInCategory:on:",				"StackTest class>>#removeFromSystem:",				"StackTest class>>#traitComposition:",				"StackTest class>>#recategorizeSelector:from:to:",				"StandardFonts class>>#printStandardSystemFonts",				"StandardFonts class>>#setFontsFromSpec:",				"StandardFonts class>>#setDefaultFonts:",				"StandardFonts class>>#setAllStandardFontsTo:",				"StandardFonts class>>#fixSmallDejaVuPunctuationMarks",				"StandardWindow>>#postOpenInWorld:",				"StandardWindow>>#openedFullscreen",				"StandardWindow class>>#doRebuildMethodDictionary",				"StandardWindow class>>#fileOutLocalMethodsInCategory:on:",				"StandardWindow class>>#removeFromSystem:",				"StandardWindow class>>#traitComposition:",				"StandardWindow class>>#recategorizeSelector:from:to:",				"StartupPreferencesHandler>>#perform",				"StartupPreferencesHandler>>#lookInFolder:forFilesMatching:",				"StartupPreferencesHandler>>#lookInFolder:",				"StartupPreferencesLoader>>#buildStreamFor:",				"StartupPreferencesLoader>>#load:",				"StoredSettingsMerger>>#addStoredSettings:",				"Stream>>#nextMatchAll:",				"Stream>>#nextPutAll:",				"StrikeFont>>#makeControlCharsVisible",				"StrikeFont>>#newFromStrike:",				"StrikeFont>>#characters:in:displayAt:clippedBy:rule:fillColor:kernDelta:on:",				"StrikeFont>>#readFromStrike2Stream:",				"StrikeFont class>>#readStrikeFont2Family:fromDirectory:",				"StrikeFont class>>#saveSpace",				"StrikeFont class>>#makeControlCharsVisible",				"StrikeFont class>>#makeLfVisible",				"StrikeFont class>>#useUnderscoreIfOver1bpp",				"StrikeFont class>>#makeTabVisible",				"StrikeFont class>>#makeLfInvisible",				"StrikeFont class>>#limitTo16Bits",				"StrikeFont class>>#fromUser:allowKeyboard:",				"StrikeFont class>>#setupDefaultFallbackFont",				"StrikeFont class>>#makeTabInvisible",				"StrikeFontSet class>>#familyName:size:",				"StrikeFontSet class>>#removeFontsForEncoding:encodingName:",				"StrikeFontSet class>>#installNewFontAtIndex:fromOld:",				"String>>#asCamelCase",				"String>>#findDelimiters:startingAt:",				"String>>#withBlanksCondensed",				"String>>#isAllSeparators",				"String>>#withSeparatorsCompacted",				"String>>#isAllDigits",				"String>>#asHex",				"String>>#asUncommentedCode",				"String>>#asComment",				"String>>#asShapeMultilineLabel:",				"String>>#skipAnySubstring:startingAt:",				"String>>#asHTMLString",				"String>>#findSelector",				"String>>#isAllAlphaNumerics",				"String class>>#newCaseSensitiveOrder",				"String class>>#newCaseInsensitiveOrder",				"StringMorph>>#privateSetContents:",				"StringMorph class>>#doRebuildMethodDictionary",				"StringMorph class>>#exampleManyStringMorphs",				"StringMorph class>>#fileOutLocalMethodsInCategory:on:",				"StringMorph class>>#removeFromSystem:",				"StringMorph class>>#traitComposition:",				"StringMorph class>>#recategorizeSelector:from:to:",				"StringTest>>#testWriteStreamConvertsToWideString",				"StringTest>>#test0FixturePutOneOrMoreElementsTest",				"StringTest>>#testWithInternetLineEndings",				"StringTest>>#testIntersectionItself",				"StringTest>>#testKeysAndValuesDo",				"StringTest>>#testAtAllIndexesPut",				"StringTest>>#testAsCommaStringMore",				"StringTest>>#testAsSmalltalkComment",				"StringTest>>#testWithAll",				"StringTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"StringTest>>#testAsIdentitySetWithEqualsElements",				"StringTest>>#testAsStringOnDelimiterLastOne",				"StringTest>>#test0SortingArrayedTest",				"StringTest>>#testWithInternalLineEndings",				"StringTest>>#testAsSortedCollection",				"StringTest>>#testSorted",				"StringTest>>#testMatch",				"StringTest>>#testFormatExtended",				"StringTest>>#testAsSortedCollectionWithSortBlock",				"StringTest>>#test0CopyTest",				"StringTest>>#testSortUsingSortBlock",				"StringTest>>#testAtAllPut",				"StringTest>>#assertNoDuplicates:whenConvertedTo:",				"StringTest>>#testShuffled",				"StringTest>>#testDifferenceWithNonNullIntersection",				"StringTest>>#testCopyNonEmptyWithout",				"StringTest>>#testCopyNonEmptyWith",				"StringTest>>#testWthNoLineLongerThan",				"StringTest>>#testCopyEmptyWithoutAll",				"StringTest>>#testCopyReplaceAllWithManyOccurrence",				"StringTest>>#testCopyNonEmptyWithoutAll",				"StringTest>>#testAsSetWithEqualsElements",				"StringTest>>#testPairsCollect",				"StringTest>>#testCopyNonEmpty",				"StringTest>>#testConcatenation",				"StringTest>>#testOccurrencesOf",				"StringTest>>#testWithUnixLineEndings",				"StringTest>>#testFormat",				"StringTest>>#test0FixtureCopyPartOfSequenceableTest",				"StringTest>>#test0FixtureOccurrencesForMultiplinessTest",				"StringTest>>#testSortedUsingBlock",				"StringTest>>#testSubstrings",				"StringTest>>#testCopyNonEmptyWithoutNotIncluded",				"StringTest>>#testAsStringOnDelimiterMore",				"StringTest>>#testSort",				"StringTest>>#testDifference",				"StringTest>>#testAsStringOnDelimiterOne",				"StringTest>>#test0FixtureOccurrencesTest",				"StringTest>>#testDifferenceWithSeparateCollection",				"SubscriptionRegistry>>#subscriptionsForClass:",				"SubscriptionRegistry>>#subscriptionsOf:do:",				"SubscriptionRegistry>>#subscriptionsHandling:",				"SubscriptionRegistry>>#getInteractionsForClass:",				"SycCategorizeAllUnclassifiedMethodsCommand>>#execute",				"SycChangeMessageSignatureCommand>>#computeInvalidArgNamesForSelector:",				"SycChangeMessageSignatureCommand class>>#doRebuildMethodDictionary",				"SycChangeMessageSignatureCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycChangeMessageSignatureCommand class>>#removeFromSystem:",				"SycChangeMessageSignatureCommand class>>#traitComposition:",				"SycChangeMessageSignatureCommand class>>#recategorizeSelector:from:to:",				"SycClassCommand>>#computeInvalidArgNamesForSelector:",				"SycClassCommand class>>#doRebuildMethodDictionary",				"SycClassCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycClassCommand class>>#removeFromSystem:",				"SycClassCommand class>>#traitComposition:",				"SycClassCommand class>>#recategorizeSelector:from:to:",				"SycCmCommand>>#computeInvalidArgNamesForSelector:",				"SycCmCommand class>>#addItemsToSubmenu:forContext:",				"SycCmCommand class>>#addMenuItemsTo:onContext:",				"SycDeprecateClassCommand>>#execute",				"SycExtractMethodCommand>>#computeInvalidArgNamesForSelector:",				"SycGenerateAllInstVarAccessorsCommand>>#asRefactorings",				"SycMethodCommand>>#computeInvalidArgNamesForSelector:",				"SycMethodCommand class>>#doRebuildMethodDictionary",				"SycMethodCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycMethodCommand class>>#removeFromSystem:",				"SycMethodCommand class>>#traitComposition:",				"SycMethodCommand class>>#recategorizeSelector:from:to:",				"SycMethodNameEditorPresenter>>#canRenameArgs:",				"SycMethodNameEditorPresenter>>#canRemoveArgs:",				"SycMethodNameEditorTest>>#testAddArgument",				"SycMethodNameEditorTest>>#testRenameArgument",				"SycMethodNameEditorTest>>#testRemoveArguments",				"SycMigrateReferencesOfClassCommand>>#execute",				"SycMoveMethodsToClassCommand>>#execute",				"SycMoveMethodsToPackageCommand>>#execute",				"SycMoveMethodsToPackageDefiningClassCommand>>#execute",				"SycRecompilePackageCommand>>#execute",				"SycRefactoringPreviewPresenter>>#selectectAllCheckBox",				"SycRefactoringPreviewPresenter>>#updateTablePresenter",				"SycRefactoringPreviewPresenter>>#accept",				"SycRefactoringPreviewPresenter>>#generateChanges",				"SycRefactoringPreviewPresenter>>#connectPresenters",				"SycRemoveClassCommand>>#executeRefactoringsAs:",				"SycRemoveEmptyMethodTagsCommand>>#execute",				"SycRemovePackageCommand>>#execute",				"SycSilentlyRemoveMethodStrategy>>#collectMethodTagsFrom:",				"SycSilentlyRemoveMethodStrategy>>#removeMethods:",				"SycSourceCodeCommand>>#computeInvalidArgNamesForSelector:",				"SycSourceCodeCommand class>>#doRebuildMethodDictionary",				"SycSourceCodeCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycSourceCodeCommand class>>#removeFromSystem:",				"SycSourceCodeCommand class>>#traitComposition:",				"SycSourceCodeCommand class>>#recategorizeSelector:from:to:",				"SycTagMethodCommand>>#execute",				"Symbol class>>#allSymbolTablesDo:",				"SymbolTest>>#testCopyNonEmptyWithout",				"SymbolTest>>#testIntersectionItself",				"SymbolTest>>#testKeysAndValuesDo",				"SymbolTest>>#testAsCommaStringMore",				"SymbolTest>>#testCopyNonEmptyWith",				"SymbolTest>>#testCopyEmptyWithoutAll",				"SymbolTest>>#testCopyReplaceAllWithManyOccurrence",				"SymbolTest>>#testCopyNonEmptyWithoutAll",				"SymbolTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"SymbolTest>>#testAsSetWithEqualsElements",				"SymbolTest>>#testPairsCollect",				"SymbolTest>>#testCopyNonEmpty",				"SymbolTest>>#testAsIdentitySetWithEqualsElements",				"SymbolTest>>#testAsStringOnDelimiterLastOne",				"SymbolTest>>#testConcatenation",				"SymbolTest>>#test0SortingArrayedTest",				"SymbolTest>>#testOccurrencesOf",				"SymbolTest>>#testAsSortedCollection",				"SymbolTest>>#testSorted",				"SymbolTest>>#test0FixtureCopyPartOfSequenceableTest",				"SymbolTest>>#testSortedUsingBlock",				"SymbolTest>>#test0FixtureOccurrencesForMultiplinessTest",				"SymbolTest>>#testCopyNonEmptyWithoutNotIncluded",				"SymbolTest>>#testAsSortedCollectionWithSortBlock",				"SymbolTest>>#test0CopyTest",				"SymbolTest>>#testAsStringOnDelimiterMore",				"SymbolTest>>#assertNoDuplicates:whenConvertedTo:",				"SymbolTest>>#testDifference",				"SymbolTest>>#testAsStringOnDelimiterOne",				"SymbolTest>>#test0FixtureOccurrencesTest",				"SymbolTest>>#testReadFrom",				"SymbolTest>>#testDifferenceWithSeparateCollection",				"SymbolicIntegerTest class>>#doRebuildMethodDictionary",				"SymbolicIntegerTest class>>#removeFromSystem:",				"SymbolicIntegerTest class>>#traitComposition:",				"SymbolicIntegerTest class>>#fileOutLocalMethodsInCategory:on:",				"SymbolicIntegerTest class>>#recategorizeSelector:from:to:",				"SystemAnnouncer class>>#restoreAllNotifications",				"SystemDependenciesTest>>#testExternalIDEDependencies",				"SystemDictionary>>#allTraitsDo:",				"SystemDictionary>>#allBehaviorsDo:",				"SystemDictionary>>#allClassesDo:",				"SystemDictionary>>#allClassesAndTraitsDo:",				"SystemHelp class>>#asHelpTopic",				"SystemHelp2 class>>#asHelpTopic",				"SystemNavigation>>#allObjectsDo:",				"SystemNavigation>>#allSentMessages",				"SystemNavigation>>#chooseInstVarFrom:thenDo:",				"SystemNavigation>>#browseClassVarRefs:",				"SystemNavigation>>#allSelectorsStartingWith:do:",				"SystemNavigation>>#allSentMessagesInClass:do:",				"SystemNavigation>>#methodsReferencingObsoleteClasses",				"SystemNavigation>>#browseUndeclaredReferences",				"SystemNavigationTest>>#testIsMessageSentInSystemWithClassesActuallySendngTheMessage",				"SystemNavigationTest>>#testIsMessageSentInSystemWithTheSelectorInsideAnArray",				"SystemOrganizer>>#fileOutCategory:on:initializing:",				"SystemOrganizer>>#removeCategoriesMatching:",				"SystemOrganizerTest>>#testThatExistingPackagenamesDoesNotContainIllegalCharacters",				"SystemProgressMorph>>#show:from:to:during:",				"SystemProgressMorph class>>#doRebuildMethodDictionary",				"SystemProgressMorph class>>#removeFromSystem:",				"SystemProgressMorph class>>#traitComposition:",				"SystemProgressMorph class>>#exampleLabelOnly",				"SystemProgressMorph class>>#fileOutLocalMethodsInCategory:on:",				"SystemProgressMorph class>>#recategorizeSelector:from:to:",				"SystemSettingsPersistence>>#updateSettingNodes:",				"SystemSettingsPersistenceTest>>#testAccessibleRealValues",				"SystemSettingsPersistenceTest>>#testAccessRealValues",				"SystemSettingsPersistenceTest>>#testStoreAndLoadAllSystemSettings",				"SystemVersionTest>>#testParsingFromVersionString",				"SystemWindow>>#collapseOrExpand",				"SystemWindow>>#taskbarCloseAllToRight",				"SystemWindow>>#setUpdatablePanesFrom:",				"SystemWindow>>#reframePanesAdjoining:along:to:",				"SystemWindow>>#putLabelItemsInLabelArea",				"SystemWindow>>#paneWithLongestSide:near:",				"SystemWindow>>#minimizeAfterGeneratingThumbnail",				"SystemWindow>>#linkSplittersToSplitters",				"SystemWindow>>#mouseUp:",				"SystemWindow>>#taskbarCloseAllLikeThis",				"SystemWindow>>#addPaneHSplitterBetween:and:",				"SystemWindow>>#addPaneVSplitterBetween:and:",				"SystemWindow>>#minimizeOrRestore",				"SystemWindow>>#removeEdgeGrips",				"SystemWindow>>#taskbarCloseAllToLeft",				"SystemWindow>>#setPaneRectsFromBounds",				"SystemWindow class>>#windowsIn:satisfying:",				"T2TraitTest>>#testRemovingTraitsUpdatesCategories",				"TAbleToRotate classTrait>>#doRebuildMethodDictionary",				"TAbleToRotate classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAbleToRotate classTrait>>#traitComposition:",				"TAbleToRotate classTrait>>#recategorizeSelector:from:to:",				"TAddForIdentityCollectionsTest>>#test0FixtureAddForIdentityCollectionsTest",				"TAddForIdentityCollectionsTest classTrait>>#doRebuildMethodDictionary",				"TAddForIdentityCollectionsTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAddForIdentityCollectionsTest classTrait>>#traitComposition:",				"TAddForIdentityCollectionsTest classTrait>>#recategorizeSelector:from:to:",				"TAddForUniquenessTest classTrait>>#doRebuildMethodDictionary",				"TAddForUniquenessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAddForUniquenessTest classTrait>>#traitComposition:",				"TAddForUniquenessTest classTrait>>#recategorizeSelector:from:to:",				"TAddTest classTrait>>#doRebuildMethodDictionary",				"TAddTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAddTest classTrait>>#traitComposition:",				"TAddTest classTrait>>#recategorizeSelector:from:to:",				"TApplyingOnClassSide classTrait>>#doRebuildMethodDictionary",				"TApplyingOnClassSide classTrait>>#fileOutLocalMethodsInCategory:on:",				"TApplyingOnClassSide classTrait>>#traitComposition:",				"TApplyingOnClassSide classTrait>>#recategorizeSelector:from:to:",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterLastOne",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsCommaStringMore",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterMore",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterOne",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#doRebuildMethodDictionary",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#traitComposition:",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#recategorizeSelector:from:to:",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterLastMore",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterLastOne",				"TAsStringCommaAndDelimiterTest>>#testAsCommaStringOne",				"TAsStringCommaAndDelimiterTest>>#testAsCommaStringMore",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterMore",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterOne",				"TAsStringCommaAndDelimiterTest classTrait>>#doRebuildMethodDictionary",				"TAsStringCommaAndDelimiterTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAsStringCommaAndDelimiterTest classTrait>>#traitComposition:",				"TAsStringCommaAndDelimiterTest classTrait>>#recategorizeSelector:from:to:",				"TAssertable classTrait>>#doRebuildMethodDictionary",				"TAssertable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAssertable classTrait>>#traitComposition:",				"TAssertable classTrait>>#recategorizeSelector:from:to:",				"TBeginsEndsWith classTrait>>#doRebuildMethodDictionary",				"TBeginsEndsWith classTrait>>#fileOutLocalMethodsInCategory:on:",				"TBeginsEndsWith classTrait>>#traitComposition:",				"TBeginsEndsWith classTrait>>#recategorizeSelector:from:to:",				"TBehavior classTrait>>#doRebuildMethodDictionary",				"TBehavior classTrait>>#fileOutLocalMethodsInCategory:on:",				"TBehavior classTrait>>#traitComposition:",				"TBehavior classTrait>>#recategorizeSelector:from:to:",				"TBehaviorCategorization classTrait>>#doRebuildMethodDictionary",				"TBehaviorCategorization classTrait>>#fileOutLocalMethodsInCategory:on:",				"TBehaviorCategorization classTrait>>#traitComposition:",				"TBehaviorCategorization classTrait>>#recategorizeSelector:from:to:",				"TCTApplicativeCategory classTrait>>#doRebuildMethodDictionary",				"TCTApplicativeCategory classTrait>>#traitComposition:",				"TCTApplicativeCategory classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCTApplicativeCategory classTrait>>#recategorizeSelector:from:to:",				"TCTFunctorCategory classTrait>>#doRebuildMethodDictionary",				"TCTFunctorCategory classTrait>>#traitComposition:",				"TCTFunctorCategory classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCTFunctorCategory classTrait>>#recategorizeSelector:from:to:",				"TCTMonadCategory classTrait>>#doRebuildMethodDictionary",				"TCTMonadCategory classTrait>>#traitComposition:",				"TCTMonadCategory classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCTMonadCategory classTrait>>#recategorizeSelector:from:to:",				"TCTMonadStateCategory classTrait>>#doRebuildMethodDictionary",				"TCTMonadStateCategory classTrait>>#traitComposition:",				"TCTMonadStateCategory classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCTMonadStateCategory classTrait>>#recategorizeSelector:from:to:",				"TCTMonadWriterCategory classTrait>>#doRebuildMethodDictionary",				"TCTMonadWriterCategory classTrait>>#traitComposition:",				"TCTMonadWriterCategory classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCTMonadWriterCategory classTrait>>#recategorizeSelector:from:to:",				"TCTMonoidCategory classTrait>>#doRebuildMethodDictionary",				"TCTMonoidCategory classTrait>>#traitComposition:",				"TCTMonoidCategory classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCTMonoidCategory classTrait>>#recategorizeSelector:from:to:",				"TCairoLibrary classTrait>>#doRebuildMethodDictionary",				"TCairoLibrary classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCairoLibrary classTrait>>#traitComposition:",				"TCairoLibrary classTrait>>#recategorizeSelector:from:to:",				"TChunkVisitor classTrait>>#doRebuildMethodDictionary",				"TChunkVisitor classTrait>>#traitComposition:",				"TChunkVisitor classTrait>>#recategorizeSelector:from:to:",				"TClass classTrait>>#doRebuildMethodDictionary",				"TClass classTrait>>#fileOutLocalMethodsInCategory:on:",				"TClass classTrait>>#traitComposition:",				"TClass classTrait>>#recategorizeSelector:from:to:",				"TClassDescription classTrait>>#doRebuildMethodDictionary",				"TClassDescription classTrait>>#fileOutLocalMethodsInCategory:on:",				"TClassDescription classTrait>>#traitComposition:",				"TClassDescription classTrait>>#recategorizeSelector:from:to:",				"TCloneTest>>#testCopyNonEmpty",				"TCloneTest classTrait>>#doRebuildMethodDictionary",				"TCloneTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCloneTest classTrait>>#traitComposition:",				"TCloneTest classTrait>>#recategorizeSelector:from:to:",				"TClyGenerateTestClass classTrait>>#doRebuildMethodDictionary",				"TClyGenerateTestClass classTrait>>#fileOutLocalMethodsInCategory:on:",				"TClyGenerateTestClass classTrait>>#traitComposition:",				"TClyGenerateTestClass classTrait>>#recategorizeSelector:from:to:",				"TClyRichTextCommentEditorPaneMorph classTrait>>#doRebuildMethodDictionary",				"TClyRichTextCommentEditorPaneMorph classTrait>>#fileOutLocalMethodsInCategory:on:",				"TClyRichTextCommentEditorPaneMorph classTrait>>#traitComposition:",				"TClyRichTextCommentEditorPaneMorph classTrait>>#recategorizeSelector:from:to:",				"TComparable classTrait>>#doRebuildMethodDictionary",				"TComparable classTrait>>#traitComposition:",				"TComparable classTrait>>#recategorizeSelector:from:to:",				"TComposingDescription classTrait>>#doRebuildMethodDictionary",				"TComposingDescription classTrait>>#fileOutLocalMethodsInCategory:on:",				"TComposingDescription classTrait>>#traitComposition:",				"TComposingDescription classTrait>>#recategorizeSelector:from:to:",				"TConcatenationEqualElementsRemovedTest>>#testConcatenationWithDuplicate",				"TConcatenationEqualElementsRemovedTest>>#testConcatenation",				"TConcatenationEqualElementsRemovedTest classTrait>>#doRebuildMethodDictionary",				"TConcatenationEqualElementsRemovedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConcatenationEqualElementsRemovedTest classTrait>>#traitComposition:",				"TConcatenationEqualElementsRemovedTest classTrait>>#recategorizeSelector:from:to:",				"TConcatenationTest>>#testConcatenationWithDuplicate",				"TConcatenationTest>>#testConcatenation",				"TConcatenationTest classTrait>>#doRebuildMethodDictionary",				"TConcatenationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConcatenationTest classTrait>>#traitComposition:",				"TConcatenationTest classTrait>>#recategorizeSelector:from:to:",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsIdentitySetWithIdentityEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsSetWithEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsIdentitySetWithEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#doRebuildMethodDictionary",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#traitComposition:",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#recategorizeSelector:from:to:",				"TConvertAsSetForMultiplinessTest>>#testAsSetWithEqualsElements",				"TConvertAsSetForMultiplinessTest>>#testAsIdentitySetWithEqualsElements",				"TConvertAsSetForMultiplinessTest classTrait>>#doRebuildMethodDictionary",				"TConvertAsSetForMultiplinessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertAsSetForMultiplinessTest classTrait>>#traitComposition:",				"TConvertAsSetForMultiplinessTest classTrait>>#recategorizeSelector:from:to:",				"TConvertAsSortedTest>>#testAsSortedCollectionWithSortBlock",				"TConvertAsSortedTest>>#testAsSortedCollection",				"TConvertAsSortedTest classTrait>>#doRebuildMethodDictionary",				"TConvertAsSortedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertAsSortedTest classTrait>>#traitComposition:",				"TConvertAsSortedTest classTrait>>#recategorizeSelector:from:to:",				"TConvertTest>>#assertNoDuplicates:whenConvertedTo:",				"TConvertTest>>#testAsByteArray",				"TConvertTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"TConvertTest classTrait>>#doRebuildMethodDictionary",				"TConvertTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertTest classTrait>>#traitComposition:",				"TConvertTest classTrait>>#recategorizeSelector:from:to:",				"TCopyPartOfSequenceable>>#test0FixtureCopyPartOfSequenceableTest",				"TCopyPartOfSequenceable classTrait>>#doRebuildMethodDictionary",				"TCopyPartOfSequenceable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyPartOfSequenceable classTrait>>#traitComposition:",				"TCopyPartOfSequenceable classTrait>>#recategorizeSelector:from:to:",				"TCopyPartOfSequenceableForMultipliness classTrait>>#doRebuildMethodDictionary",				"TCopyPartOfSequenceableForMultipliness classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyPartOfSequenceableForMultipliness classTrait>>#traitComposition:",				"TCopyPartOfSequenceableForMultipliness classTrait>>#recategorizeSelector:from:to:",				"TCopyPreservingIdentityTest classTrait>>#doRebuildMethodDictionary",				"TCopyPreservingIdentityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyPreservingIdentityTest classTrait>>#traitComposition:",				"TCopyPreservingIdentityTest classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableSameContents>>#testShuffled",				"TCopySequenceableSameContents classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableSameContents classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableSameContents classTrait>>#traitComposition:",				"TCopySequenceableSameContents classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#traitComposition:",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableWithReplacement>>#testCopyReplaceAllWithManyOccurrence",				"TCopySequenceableWithReplacement classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableWithReplacement classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableWithReplacement classTrait>>#traitComposition:",				"TCopySequenceableWithReplacement classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableWithReplacementForSorted>>#testCopyReplaceAllWithForSorted",				"TCopySequenceableWithReplacementForSorted>>#testCopyFromToWithForSorted",				"TCopySequenceableWithReplacementForSorted classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableWithReplacementForSorted classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableWithReplacementForSorted classTrait>>#traitComposition:",				"TCopySequenceableWithReplacementForSorted classTrait>>#recategorizeSelector:from:to:",				"TCopyTest>>#testCopyNonEmptyWithout",				"TCopyTest>>#testCopyEmptyWithoutAll",				"TCopyTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"TCopyTest>>#testCopyNonEmptyWithoutAll",				"TCopyTest>>#test0CopyTest",				"TCopyTest>>#testCopyNonEmptyWithoutNotIncluded",				"TCopyTest>>#testCopyNonEmptyWith",				"TCopyTest classTrait>>#doRebuildMethodDictionary",				"TCopyTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyTest classTrait>>#traitComposition:",				"TCopyTest classTrait>>#recategorizeSelector:from:to:",				"TCreationWithTest>>#testWithAll",				"TCreationWithTest classTrait>>#doRebuildMethodDictionary",				"TCreationWithTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCreationWithTest classTrait>>#traitComposition:",				"TCreationWithTest classTrait>>#recategorizeSelector:from:to:",				"TDebugger classTrait>>#doRebuildMethodDictionary",				"TDebugger classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDebugger classTrait>>#traitComposition:",				"TDebugger classTrait>>#recategorizeSelector:from:to:",				"TDebuggerTest class>>#doRebuildMethodDictionary",				"TDebuggerTest class>>#fileOutLocalMethodsInCategory:on:",				"TDebuggerTest class>>#removeFromSystem:",				"TDebuggerTest class>>#traitComposition:",				"TDebuggerTest class>>#recategorizeSelector:from:to:",				"TDictionaryAddingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryAddingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryAddingTest classTrait>>#traitComposition:",				"TDictionaryAddingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryAssociationAccessTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryAssociationAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryAssociationAccessTest classTrait>>#traitComposition:",				"TDictionaryAssociationAccessTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryComparingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryComparingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryComparingTest classTrait>>#traitComposition:",				"TDictionaryComparingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryCopyingTest>>#testDictionaryConcatenationWithCommonKeysDifferentValues",				"TDictionaryCopyingTest>>#testCopyNonEmpty",				"TDictionaryCopyingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryCopyingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryCopyingTest classTrait>>#traitComposition:",				"TDictionaryCopyingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryEnumeratingTest>>#testSelect",				"TDictionaryEnumeratingTest>>#testAssociationsDo",				"TDictionaryEnumeratingTest>>#testAssociationsSelect",				"TDictionaryEnumeratingTest>>#testKeysAndValuesDo",				"TDictionaryEnumeratingTest>>#testValuesDo",				"TDictionaryEnumeratingTest>>#testDo",				"TDictionaryEnumeratingTest>>#testCollect",				"TDictionaryEnumeratingTest>>#testKeysDo",				"TDictionaryEnumeratingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryEnumeratingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryEnumeratingTest classTrait>>#traitComposition:",				"TDictionaryEnumeratingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryImplementationTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryImplementationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryImplementationTest classTrait>>#traitComposition:",				"TDictionaryImplementationTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryIncludesTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryIncludesTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryIncludesTest classTrait>>#traitComposition:",				"TDictionaryIncludesTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryIncludesWithIdentityCheckTest>>#test0FixtureDictionaryIncludesIdentity",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#traitComposition:",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryKeyAccessTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryKeyAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryKeyAccessTest classTrait>>#traitComposition:",				"TDictionaryKeyAccessTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryKeysValuesAssociationsAccess>>#testKeys",				"TDictionaryKeysValuesAssociationsAccess>>#testValues",				"TDictionaryKeysValuesAssociationsAccess>>#testKeysSortedSafely",				"TDictionaryKeysValuesAssociationsAccess>>#testAssociations",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#doRebuildMethodDictionary",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#traitComposition:",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#recategorizeSelector:from:to:",				"TDictionaryPrintingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryPrintingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryPrintingTest classTrait>>#traitComposition:",				"TDictionaryPrintingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryRemovingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryRemovingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryRemovingTest classTrait>>#traitComposition:",				"TDictionaryRemovingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryValueAccessTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryValueAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryValueAccessTest classTrait>>#traitComposition:",				"TDictionaryValueAccessTest classTrait>>#recategorizeSelector:from:to:",				"TEasilyThemed classTrait>>#doRebuildMethodDictionary",				"TEasilyThemed classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEasilyThemed classTrait>>#traitComposition:",				"TEasilyThemed classTrait>>#recategorizeSelector:from:to:",				"TEmpty classTrait>>#doRebuildMethodDictionary",				"TEmpty classTrait>>#traitComposition:",				"TEmpty classTrait>>#recategorizeSelector:from:to:",				"TEmptySequenceableTest classTrait>>#doRebuildMethodDictionary",				"TEmptySequenceableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEmptySequenceableTest classTrait>>#traitComposition:",				"TEmptySequenceableTest classTrait>>#recategorizeSelector:from:to:",				"TEmptyTest classTrait>>#doRebuildMethodDictionary",				"TEmptyTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEmptyTest classTrait>>#traitComposition:",				"TEmptyTest classTrait>>#recategorizeSelector:from:to:",				"TEnableOnHaloMenu classTrait>>#doRebuildMethodDictionary",				"TEnableOnHaloMenu classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEnableOnHaloMenu classTrait>>#traitComposition:",				"TEnableOnHaloMenu classTrait>>#recategorizeSelector:from:to:",				"TEnumeratingTest classTrait>>#doRebuildMethodDictionary",				"TEnumeratingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEnumeratingTest classTrait>>#traitComposition:",				"TEnumeratingTest classTrait>>#recategorizeSelector:from:to:",				"TFBasicTypeTest>>#testBasicTypesAreValid",				"TFCallback>>#validateTypes",				"TFCalloutMethodBuilder>>#generateFFICallout:spec:ffiLibrary:",				"TFFunctionDefinition>>#validate",				"TFPool>>#release",				"TFStructType>>#validate",				"TFinalizable classTrait>>#doRebuildMethodDictionary",				"TFinalizable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TFinalizable classTrait>>#traitComposition:",				"TFinalizable classTrait>>#recategorizeSelector:from:to:",				"TGWithCoordinates classTrait>>#doRebuildMethodDictionary",				"TGWithCoordinates classTrait>>#fileOutLocalMethodsInCategory:on:",				"TGWithCoordinates classTrait>>#traitComposition:",				"TGWithCoordinates classTrait>>#recategorizeSelector:from:to:",				"TGrowableTest classTrait>>#doRebuildMethodDictionary",				"TGrowableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TGrowableTest classTrait>>#traitComposition:",				"TGrowableTest classTrait>>#recategorizeSelector:from:to:",				"TIceCopyCommitId classTrait>>#doRebuildMethodDictionary",				"TIceCopyCommitId classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceCopyCommitId classTrait>>#traitComposition:",				"TIceCopyCommitId classTrait>>#recategorizeSelector:from:to:",				"TIceImagesExporting classTrait>>#doRebuildMethodDictionary",				"TIceImagesExporting classTrait>>#traitComposition:",				"TIceImagesExporting classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceImagesExporting classTrait>>#recategorizeSelector:from:to:",				"TIceRepositoryReader classTrait>>#doRebuildMethodDictionary",				"TIceRepositoryReader classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceRepositoryReader classTrait>>#traitComposition:",				"TIceRepositoryReader classTrait>>#recategorizeSelector:from:to:",				"TIceRepositoryWriter classTrait>>#doRebuildMethodDictionary",				"TIceRepositoryWriter classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceRepositoryWriter classTrait>>#traitComposition:",				"TIceRepositoryWriter classTrait>>#recategorizeSelector:from:to:",				"TIdentityAddTest classTrait>>#doRebuildMethodDictionary",				"TIdentityAddTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIdentityAddTest classTrait>>#traitComposition:",				"TIdentityAddTest classTrait>>#recategorizeSelector:from:to:",				"TIncludesForIdentityCollectionsTest>>#testIncludesAllOfForIdentityCollections",				"TIncludesForIdentityCollectionsTest>>#test0FixtureInludesForIdentityCollectionsTest",				"TIncludesForIdentityCollectionsTest>>#testIncludesAnyOfForIdentityCollections",				"TIncludesForIdentityCollectionsTest classTrait>>#doRebuildMethodDictionary",				"TIncludesForIdentityCollectionsTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIncludesForIdentityCollectionsTest classTrait>>#traitComposition:",				"TIncludesForIdentityCollectionsTest classTrait>>#recategorizeSelector:from:to:",				"TIncludesTest classTrait>>#doRebuildMethodDictionary",				"TIncludesTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIncludesTest classTrait>>#traitComposition:",				"TIncludesTest classTrait>>#recategorizeSelector:from:to:",				"TIncludesWithIdentityCheckTest classTrait>>#doRebuildMethodDictionary",				"TIncludesWithIdentityCheckTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIncludesWithIdentityCheckTest classTrait>>#traitComposition:",				"TIncludesWithIdentityCheckTest classTrait>>#recategorizeSelector:from:to:",				"TIndexAccess classTrait>>#doRebuildMethodDictionary",				"TIndexAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIndexAccess classTrait>>#traitComposition:",				"TIndexAccess classTrait>>#recategorizeSelector:from:to:",				"TIndexAccessForMultipliness classTrait>>#doRebuildMethodDictionary",				"TIndexAccessForMultipliness classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIndexAccessForMultipliness classTrait>>#traitComposition:",				"TIndexAccessForMultipliness classTrait>>#recategorizeSelector:from:to:",				"TIterateSequencedReadableTest>>#testKeysAndValuesDo",				"TIterateSequencedReadableTest>>#testPairsCollect",				"TIterateSequencedReadableTest classTrait>>#doRebuildMethodDictionary",				"TIterateSequencedReadableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIterateSequencedReadableTest classTrait>>#traitComposition:",				"TIterateSequencedReadableTest classTrait>>#recategorizeSelector:from:to:",				"TIterateTest>>#testBasicCollect",				"TIterateTest>>#testDo2",				"TIterateTest>>#testDoSeparatedBy",				"TIterateTest>>#testDoWithout",				"TIterateTest classTrait>>#doRebuildMethodDictionary",				"TIterateTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIterateTest classTrait>>#traitComposition:",				"TIterateTest classTrait>>#recategorizeSelector:from:to:",				"TKTAbstractExecutor class>>#doRebuildMethodDictionary",				"TKTAbstractExecutor class>>#fileOutLocalMethodsInCategory:on:",				"TKTAbstractExecutor class>>#removeFromSystem:",				"TKTAbstractExecutor class>>#traitComposition:",				"TKTAbstractExecutor class>>#recategorizeSelector:from:to:",				"TKTCommonQueueWorkerPool>>#reset",				"TKTCommonQueueWorkerPool>>#stop",				"TKTCommonQueueWorkerPool>>#privateManageWorkersAfter",				"TKTCommonQueueWorkerPool>>#ensureIsWorking",				"TKTCommonQueueWorkerPool class>>#doRebuildMethodDictionary",				"TKTCommonQueueWorkerPool class>>#fileOutLocalMethodsInCategory:on:",				"TKTCommonQueueWorkerPool class>>#removeFromSystem:",				"TKTCommonQueueWorkerPool class>>#traitComposition:",				"TKTCommonQueueWorkerPool class>>#recategorizeSelector:from:to:",				"TKTCommonQueueWorkerPoolTest>>#testWorkerPoolStopStopsWorkers",				"TKTCommonQueueWorkerPoolTest>>#testWorkerPoolDoesNotExceedPoolSize",				"TKTFuture>>#deploySuccess:",				"TKTFuture>>#deployFailure:",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsInNewProcessEveryTime",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsNeverInLocalProcess",				"TKTProfile>>#activateProfile",				"TKTProfile>>#finalizeProfile",				"TKTQueueTaskScheduler class>>#doRebuildMethodDictionary",				"TKTQueueTaskScheduler class>>#fileOutLocalMethodsInCategory:on:",				"TKTQueueTaskScheduler class>>#removeFromSystem:",				"TKTQueueTaskScheduler class>>#traitComposition:",				"TKTQueueTaskScheduler class>>#recategorizeSelector:from:to:",				"TKTService>>#doStop",				"TKTWatchDog>>#stepService",				"TKTWorkerPool>>#stop",				"TKTWorkerPool>>#priority:",				"TKTWorkerPool class>>#doRebuildMethodDictionary",				"TKTWorkerPool class>>#fileOutLocalMethodsInCategory:on:",				"TKTWorkerPool class>>#removeFromSystem:",				"TKTWorkerPool class>>#traitComposition:",				"TKTWorkerPool class>>#recategorizeSelector:from:to:",				"TKTWorkerPoolTest>>#testWorkerPoolStopStopsWorkers",				"TKTWorkerPoolTest>>#testPriorityAfterStart",				"TKTWorkerPoolTest>>#testPrioritySetBeforeStart",				"TKTWorkerPoolTest>>#testWorkerPoolDoesNotExceedPoolSize",				"TLGitCalloutTrait classTrait>>#doRebuildMethodDictionary",				"TLGitCalloutTrait classTrait>>#fileOutLocalMethodsInCategory:on:",				"TLGitCalloutTrait classTrait>>#traitComposition:",				"TLGitCalloutTrait classTrait>>#recategorizeSelector:from:to:",				"TLGitPrintingTrait classTrait>>#doRebuildMethodDictionary",				"TLGitPrintingTrait classTrait>>#fileOutLocalMethodsInCategory:on:",				"TLGitPrintingTrait classTrait>>#traitComposition:",				"TLGitPrintingTrait classTrait>>#recategorizeSelector:from:to:",				"TMockWithComplexSlot classTrait>>#doRebuildMethodDictionary",				"TMockWithComplexSlot classTrait>>#fileOutLocalMethodsInCategory:on:",				"TMockWithComplexSlot classTrait>>#traitComposition:",				"TMockWithComplexSlot classTrait>>#recategorizeSelector:from:to:",				"TMockWithUseAndSlot classTrait>>#doRebuildMethodDictionary",				"TMockWithUseAndSlot classTrait>>#fileOutLocalMethodsInCategory:on:",				"TMockWithUseAndSlot classTrait>>#traitComposition:",				"TMockWithUseAndSlot classTrait>>#recategorizeSelector:from:to:",				"TModelBuilder>>#extractMethodTestData",				"TModelBuilder>>#abstractVariableTestData",				"TModelBuilder classTrait>>#doRebuildMethodDictionary",				"TModelBuilder classTrait>>#fileOutLocalMethodsInCategory:on:",				"TModelBuilder classTrait>>#traitComposition:",				"TModelBuilder classTrait>>#recategorizeSelector:from:to:",				"TObservable classTrait>>#doRebuildMethodDictionary",				"TObservable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TObservable classTrait>>#traitComposition:",				"TObservable classTrait>>#recategorizeSelector:from:to:",				"TOccurrencesForIdentityCollectionsTest>>#test0FixtureOccurrencesForIdentityCollectionsTest",				"TOccurrencesForIdentityCollectionsTest classTrait>>#doRebuildMethodDictionary",				"TOccurrencesForIdentityCollectionsTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOccurrencesForIdentityCollectionsTest classTrait>>#traitComposition:",				"TOccurrencesForIdentityCollectionsTest classTrait>>#recategorizeSelector:from:to:",				"TOccurrencesForMultiplinessTest>>#testOccurrencesOf",				"TOccurrencesForMultiplinessTest>>#test0FixtureOccurrencesTest",				"TOccurrencesForMultiplinessTest>>#test0FixtureOccurrencesForMultiplinessTest",				"TOccurrencesForMultiplinessTest classTrait>>#doRebuildMethodDictionary",				"TOccurrencesForMultiplinessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOccurrencesForMultiplinessTest classTrait>>#traitComposition:",				"TOccurrencesForMultiplinessTest classTrait>>#recategorizeSelector:from:to:",				"TOccurrencesTest>>#testOccurrencesOf",				"TOccurrencesTest>>#test0FixtureOccurrencesTest",				"TOccurrencesTest classTrait>>#doRebuildMethodDictionary",				"TOccurrencesTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOccurrencesTest classTrait>>#traitComposition:",				"TOccurrencesTest classTrait>>#recategorizeSelector:from:to:",				"TOne classTrait>>#doRebuildMethodDictionary",				"TOne classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOne classTrait>>#traitComposition:",				"TOne classTrait>>#recategorizeSelector:from:to:",				"TPointAccess>>#bounds",				"TPointAccess classTrait>>#doRebuildMethodDictionary",				"TPointAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPointAccess classTrait>>#traitComposition:",				"TPointAccess classTrait>>#recategorizeSelector:from:to:",				"TPrintOnSequencedTest classTrait>>#doRebuildMethodDictionary",				"TPrintOnSequencedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPrintOnSequencedTest classTrait>>#traitComposition:",				"TPrintOnSequencedTest classTrait>>#recategorizeSelector:from:to:",				"TPrintTest>>#testPrintOnDelimiter",				"TPrintTest>>#testPrintOnDelimiterLast",				"TPrintTest>>#testPrintElementsOn",				"TPrintTest>>#testPrintOn",				"TPrintTest classTrait>>#doRebuildMethodDictionary",				"TPrintTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPrintTest classTrait>>#traitComposition:",				"TPrintTest classTrait>>#recategorizeSelector:from:to:",				"TPutBasicTest classTrait>>#doRebuildMethodDictionary",				"TPutBasicTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPutBasicTest classTrait>>#traitComposition:",				"TPutBasicTest classTrait>>#recategorizeSelector:from:to:",				"TPutTest>>#testAtAllIndexesPut",				"TPutTest>>#test0FixturePutOneOrMoreElementsTest",				"TPutTest>>#testAtAllPut",				"TPutTest classTrait>>#doRebuildMethodDictionary",				"TPutTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPutTest classTrait>>#traitComposition:",				"TPutTest classTrait>>#recategorizeSelector:from:to:",				"TRBProgramNodeVisitor>>#visitLiteralArrayNode:",				"TRBProgramNodeVisitor>>#visitCascadeNode:",				"TRBProgramNodeVisitor>>#visitMessageNode:",				"TRBProgramNodeVisitor>>#visitTemporaryNodes:",				"TRBProgramNodeVisitor>>#visitMethodNode:",				"TRBProgramNodeVisitor>>#visitArrayNode:",				"TRBProgramNodeVisitor>>#visitArgumentNodes:",				"TRBProgramNodeVisitor>>#visitSequenceNode:",				"TRBProgramNodeVisitor>>#visitEnglobingErrorNode:",				"TRBProgramNodeVisitor>>#visitPragmaNode:",				"TRBProgramNodeVisitor classTrait>>#doRebuildMethodDictionary",				"TRBProgramNodeVisitor classTrait>>#traitComposition:",				"TRBProgramNodeVisitor classTrait>>#recategorizeSelector:from:to:",				"TRGBehaviorTest>>#testBehaviorWithProtocols",				"TRGBehaviorTest>>#testBehaviorWithMethods",				"TRGBehaviorTest classTrait>>#doRebuildMethodDictionary",				"TRGBehaviorTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRGBehaviorTest classTrait>>#traitComposition:",				"TRGBehaviorTest classTrait>>#recategorizeSelector:from:to:",				"TRGClassDescriptionTest classTrait>>#doRebuildMethodDictionary",				"TRGClassDescriptionTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRGClassDescriptionTest classTrait>>#traitComposition:",				"TRGClassDescriptionTest classTrait>>#recategorizeSelector:from:to:",				"TRGReadOnlyTest>>#testReadOnlyErrors",				"TRGReadOnlyTest classTrait>>#doRebuildMethodDictionary",				"TRGReadOnlyTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRGReadOnlyTest classTrait>>#traitComposition:",				"TRGReadOnlyTest classTrait>>#recategorizeSelector:from:to:",				"TRefactoringCommandSupport>>#computeInvalidArgNamesForSelector:",				"TRefactoringCommandSupport classTrait>>#doRebuildMethodDictionary",				"TRefactoringCommandSupport classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRefactoringCommandSupport classTrait>>#traitComposition:",				"TRefactoringCommandSupport classTrait>>#recategorizeSelector:from:to:",				"TRemoveByIndexTest classTrait>>#doRebuildMethodDictionary",				"TRemoveByIndexTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRemoveByIndexTest classTrait>>#traitComposition:",				"TRemoveByIndexTest classTrait>>#recategorizeSelector:from:to:",				"TRemoveForMultiplenessTest>>#testRemoveAllSuchThat",				"TRemoveForMultiplenessTest>>#testRemoveAllFoundIn",				"TRemoveForMultiplenessTest>>#testRemoveAll",				"TRemoveForMultiplenessTest classTrait>>#doRebuildMethodDictionary",				"TRemoveForMultiplenessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRemoveForMultiplenessTest classTrait>>#traitComposition:",				"TRemoveForMultiplenessTest classTrait>>#recategorizeSelector:from:to:",				"TRemoveTest>>#testRemoveAllSuchThat",				"TRemoveTest>>#testRemoveAllFoundIn",				"TRemoveTest>>#testRemoveAll",				"TRemoveTest classTrait>>#doRebuildMethodDictionary",				"TRemoveTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRemoveTest classTrait>>#traitComposition:",				"TRemoveTest classTrait>>#recategorizeSelector:from:to:",				"TReplacementSequencedTest classTrait>>#doRebuildMethodDictionary",				"TReplacementSequencedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TReplacementSequencedTest classTrait>>#traitComposition:",				"TReplacementSequencedTest classTrait>>#recategorizeSelector:from:to:",				"TRubWithLineNumber classTrait>>#doRebuildMethodDictionary",				"TRubWithLineNumber classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRubWithLineNumber classTrait>>#traitComposition:",				"TRubWithLineNumber classTrait>>#recategorizeSelector:from:to:",				"TRubWithWrapPolicy classTrait>>#doRebuildMethodDictionary",				"TRubWithWrapPolicy classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRubWithWrapPolicy classTrait>>#traitComposition:",				"TRubWithWrapPolicy classTrait>>#recategorizeSelector:from:to:",				"TSequencedConcatenationTest>>#testConcatenation",				"TSequencedConcatenationTest classTrait>>#doRebuildMethodDictionary",				"TSequencedConcatenationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSequencedConcatenationTest classTrait>>#traitComposition:",				"TSequencedConcatenationTest classTrait>>#recategorizeSelector:from:to:",				"TSequencedElementAccessTest classTrait>>#doRebuildMethodDictionary",				"TSequencedElementAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSequencedElementAccessTest classTrait>>#traitComposition:",				"TSequencedElementAccessTest classTrait>>#recategorizeSelector:from:to:",				"TSequencedStructuralEqualityTest classTrait>>#doRebuildMethodDictionary",				"TSequencedStructuralEqualityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSequencedStructuralEqualityTest classTrait>>#traitComposition:",				"TSequencedStructuralEqualityTest classTrait>>#recategorizeSelector:from:to:",				"TSetArithmetic>>#testDifferenceWithSeparateCollection",				"TSetArithmetic>>#testIntersectionItself",				"TSetArithmetic>>#testDifference",				"TSetArithmetic>>#testDifferenceWithNonNullIntersection",				"TSetArithmetic classTrait>>#doRebuildMethodDictionary",				"TSetArithmetic classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSetArithmetic classTrait>>#traitComposition:",				"TSetArithmetic classTrait>>#recategorizeSelector:from:to:",				"TSetUpRefactorings classTrait>>#doRebuildMethodDictionary",				"TSetUpRefactorings classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSetUpRefactorings classTrait>>#traitComposition:",				"TSetUpRefactorings classTrait>>#recategorizeSelector:from:to:",				"TShowInTaskbar classTrait>>#doRebuildMethodDictionary",				"TShowInTaskbar classTrait>>#fileOutLocalMethodsInCategory:on:",				"TShowInTaskbar classTrait>>#traitComposition:",				"TShowInTaskbar classTrait>>#recategorizeSelector:from:to:",				"TSizeTest>>#testSize",				"TSizeTest classTrait>>#doRebuildMethodDictionary",				"TSizeTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSizeTest classTrait>>#traitComposition:",				"TSizeTest classTrait>>#recategorizeSelector:from:to:",				"TSortTest>>#testSorted",				"TSortTest>>#testSortedUsingBlock",				"TSortTest>>#testSort",				"TSortTest>>#testSortUsingSortBlock",				"TSortTest>>#test0SortingArrayedTest",				"TSortTest classTrait>>#doRebuildMethodDictionary",				"TSortTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSortTest classTrait>>#traitComposition:",				"TSortTest classTrait>>#recategorizeSelector:from:to:",				"TSortable classTrait>>#doRebuildMethodDictionary",				"TSortable classTrait>>#traitComposition:",				"TSortable classTrait>>#recategorizeSelector:from:to:",				"TStDebuggerExtension classTrait>>#doRebuildMethodDictionary",				"TStDebuggerExtension classTrait>>#fileOutLocalMethodsInCategory:on:",				"TStDebuggerExtension classTrait>>#traitComposition:",				"TStDebuggerExtension classTrait>>#recategorizeSelector:from:to:",				"TStructuralEqualityTest classTrait>>#doRebuildMethodDictionary",				"TStructuralEqualityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TStructuralEqualityTest classTrait>>#traitComposition:",				"TStructuralEqualityTest classTrait>>#recategorizeSelector:from:to:",				"TSubCollectionAccess classTrait>>#doRebuildMethodDictionary",				"TSubCollectionAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSubCollectionAccess classTrait>>#traitComposition:",				"TSubCollectionAccess classTrait>>#recategorizeSelector:from:to:",				"TTLCache>>#removeStaleValues",				"TTaskExecutor classTrait>>#doRebuildMethodDictionary",				"TTaskExecutor classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTaskExecutor classTrait>>#traitComposition:",				"TTaskExecutor classTrait>>#recategorizeSelector:from:to:",				"TTaskScheduler classTrait>>#doRebuildMethodDictionary",				"TTaskScheduler classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTaskScheduler classTrait>>#traitComposition:",				"TTaskScheduler classTrait>>#recategorizeSelector:from:to:",				"TTranscript classTrait>>#doRebuildMethodDictionary",				"TTranscript classTrait>>#traitComposition:",				"TTranscript classTrait>>#recategorizeSelector:from:to:",				"TTutorialTest>>#testEachSelectorReturnsALesson",				"TTutorialTest>>#testEachSelectorExists",				"TTutorialTest classTrait>>#doRebuildMethodDictionary",				"TTutorialTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTutorialTest classTrait>>#traitComposition:",				"TTutorialTest classTrait>>#recategorizeSelector:from:to:",				"TTwo classTrait>>#doRebuildMethodDictionary",				"TTwo classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTwo classTrait>>#traitComposition:",				"TTwo classTrait>>#recategorizeSelector:from:to:",				"TViewModel classTrait>>#doRebuildMethodDictionary",				"TViewModel classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModel classTrait>>#traitComposition:",				"TViewModel classTrait>>#recategorizeSelector:from:to:",				"TViewModelMock classTrait>>#doRebuildMethodDictionary",				"TViewModelMock classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModelMock classTrait>>#traitComposition:",				"TViewModelMock classTrait>>#recategorizeSelector:from:to:",				"TViewModelMock2 classTrait>>#doRebuildMethodDictionary",				"TViewModelMock2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModelMock2 classTrait>>#traitComposition:",				"TViewModelMock2 classTrait>>#recategorizeSelector:from:to:",				"TViewModelMock3 classTrait>>#doRebuildMethodDictionary",				"TViewModelMock3 classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModelMock3 classTrait>>#traitComposition:",				"TViewModelMock3 classTrait>>#recategorizeSelector:from:to:",				"TWithBranchModel classTrait>>#doRebuildMethodDictionary",				"TWithBranchModel classTrait>>#fileOutLocalMethodsInCategory:on:",				"TWithBranchModel classTrait>>#traitComposition:",				"TWithBranchModel classTrait>>#recategorizeSelector:from:to:",				"TaRenameSlot>>#sourceCodeAt:",				"TaSequence>>#addAll:",				"TaSequence>>#addToSequence:",				"TaSequence>>#validateSlots:",				"TaSequence>>#addUser:",				"TaSequence>>#removeUser:",				"TaSequence>>#initializeObject:",				"TabBarMorph>>#deleteSelectedTabs",				"TabBarMorph>>#tabResetSelection:",				"TabBarMorph>>#tabEmptyContents:",				"TabBarMorph>>#themeChanged",				"TabBarMorph>>#adjustLayout",				"TabBarMorph>>#closeAllTabs",				"TabBarMorph>>#tabs:",				"TabExample>>#addTabs",				"TabGroupMorph>>#themeChanged",				"TabGroupMorph>>#labelsAndPages:",				"TabLabelItemMorph>>#drawSubmorphsOn:",				"TabManagerMorph>>#cleanProcesses",				"TabMorph>>#extraSpaceForActions",				"TabSelectorMorph>>#activate",				"TabSelectorMorph>>#cornerStyle:",				"TabSelectorMorph>>#updateTabs",				"TabSelectorMorph>>#updateFont",				"TabSelectorMorph>>#passivate",				"TabSelectorMorph>>#basicMinExtent",				"TableLayout>>#minExtentOf:in:",				"TableLayout>>#computeCellArrangement:in:horizontal:target:",				"TableLayout>>#computeExtraSpacing:in:horizontal:target:",				"TaskListMorph>>#postOpenInWorld:",				"TaskListMorph>>#updateTaskButtons",				"TaskListMorph>>#selectTask:",				"TaskbarMorph>>#updateTasks",				"TaskbarMorph>>#updateTaskButtons",				"TaskbarMorph>>#removeFromWorld",				"TaskbarMorph>>#updateOrderedTasksFrom:",				"TaskbarMorph class>>#reset",				"TaskbarMorphTest>>#updateOrderedTasksFrom:",				"TemporaryVariableTest>>#testTemporaryVariablesMethod",				"TemporaryVariableTest>>#testDeclaringNode",				"TemporaryVariableTest>>#testReadNodes",				"TestCase>>#cleanUpInstanceVariables",				"TestCase>>#runCaseAsFailure:",				"TestCase>>#runCase",				"TestCase class>>#buildMicroDownUsing:withComment:",				"TestCase class>>#buildSuite",				"TestCase class>>#addTestsFor:toSuite:",				"TestCase class>>#addToSuite:fromMethods:",				"TestCommandLineHandler>>#addPackagesMatchingRegex:to:",				"TestCommandLineHandler>>#addPackagesMatchingGlob:to:",				"TestExecutionEnvironment>>#cleanUpAfterTest",				"TestExecutionEnvironment>>#registerDefaultServices",				"TestExecutionEnvironment class>>#settingsOn:",				"TestExecutionEnvironmentTestCase>>#tearDown",				"TestFailedByForkedProcess>>#recordResultOf:inHDTestReport:",				"TestResource class>>#makeAvailable",				"TestResource class>>#resetResources:",				"TestResource class>>#resetOrAddResourcesTo:",				"TestResult>>#dispatchResultsIntoHistory",				"TestResult>>#fileOutOn:",				"TestResult>>#updateResultsInHistory",				"TestResult class>>#removeFromTestHistory:in:",				"TestRunner>>#showDiffWith:",				"TestRunner>>#suiteForAllSelected",				"TestRunner>>#findPackages",				"TestRunner>>#addDeclaredPackagesUnderTestTo:",				"TestRunner>>#browseClass",				"TestRunner>>#excludeClassesNotUnderTestFrom:",				"TestRunner>>#showProgress",				"TestRunner>>#collectCoverageFor:",				"TestRunner>>#hasProgress",				"TestRunner>>#storeResultIntoTestCases",				"TestSuite>>#debug",				"TestSuite>>#defaultResources",				"TestSuite>>#addTests:",				"TestSuite>>#addDependentToHierachy:",				"TestSuite>>#runUnmanaged:",				"TestSuite>>#removeDependentFromHierachy:",				"TestSuite>>#setUp",				"Text>>#treeRenderOn:bounds:color:font:from:",				"Text>>#unembellished",				"Text>>#fontNumberAt:",				"Text>>#fontAt:withStyle:",				"Text>>#listRenderOn:atRow:bounds:color:backgroundColor:from:",				"Text>>#removeAttributesThat:replaceAttributesThat:by:",				"Text>>#embeddedMorphs",				"Text>>#alignmentAt:ifAbsent:",				"Text>>#embeddedMorphsFrom:to:",				"Text>>#attributesAt:do:",				"Text class>>#addAttribute:toArray:",				"TextDiffBuilder>>#patchSequenceDoIfMatch:ifInsert:ifRemove:",				"TextDiffBuilderTest>>#testIfSequence6",				"TextDiffBuilderTest>>#testIfSequence1",				"TextDiffBuilderTest>>#testIfSequence5",				"TextDiffBuilderTest>>#testIfPatchIsMinimal",				"TextDiffBuilderTest>>#testIfSequence3",				"TextDiffBuilderTest>>#convertToString:",				"TextDiffBuilderTest>>#testIfSequence2",				"TextDiffBuilderTest>>#testEmptyLcs3",				"TextDiffBuilderTest>>#testIfSequence4",				"TextEditor>>#saveContentsInFile",				"TextEditor>>#changeEmphasis:",				"TextEditor class>>#initializeCmdKeyShortcuts",				"TextEmphasisTest>>#testSet",				"TextEmphasisTest>>#testDominates",				"TextMorph>>#selectionChanged",				"TextMorph>>#debugDrawLineRectsOn:",				"TextMorph>>#newContents:",				"TextMorph class>>#doRebuildMethodDictionary",				"TextMorph class>>#fileOutLocalMethodsInCategory:on:",				"TextMorph class>>#removeFromSystem:",				"TextMorph class>>#traitComposition:",				"TextMorph class>>#recategorizeSelector:from:to:",				"TextStream>>#withAttributes:do:",				"TextStyle>>#addNewFontSize:",				"TextStyle class>>#emphasisMenuForFont:target:selector:highlight:",				"TextStyle class>>#actualTextStyles",				"TheManifestBuilder>>#addAllFalsePositive:of:version:",				"TheManifestBuilder>>#buildArrayString:",				"TheManifestBuilder>>#unwrap:",				"ThemeIcons class>>#uiFetchPacks",				"ThumbnailMorph class>>#doRebuildMethodDictionary",				"ThumbnailMorph class>>#fileOutLocalMethodsInCategory:on:",				"ThumbnailMorph class>>#removeFromSystem:",				"ThumbnailMorph class>>#traitComposition:",				"ThumbnailMorph class>>#recategorizeSelector:from:to:",				"TimeMeasuringTest>>#debug",				"TimeProfiler>>#rootTallyItems",				"TimeTest>>#testReadFromWithError",				"TimeTest>>#testReadFromWithNanos",				"TimespanTest>>#testSubclassArithmetic",				"ToggleMenuItemShortcut class>>#normalize:",				"TonelRepository>>#goferVersionFrom:",				"TonelWriter>>#writeExtensionMethods:className:",				"TonelWriter>>#writeInstanceSideMethodDefinitions:on:",				"TonelWriter>>#writeSnapshot:",				"TonelWriter>>#writeClassSideMethodDefinitions:on:",				"TonelWriterTest>>#testWriteSnapshotWithoutOrganization",				"TopologicalSortAlgorithm>>#initializeValueLinksTable:",				"TopologicalSortAlgorithm>>#sortOn:sinksValueLink:valueLinksTable:",				"TopologicalSortAlgorithm>>#handleCycleInValueLinksTable:do:",				"Trait>>#notifyOfRecategorizedSelector:from:to:",				"Trait>>#removeFromSystem:",				"Trait>>#rebuildMethodDictionary",				"Trait1 classTrait>>#doRebuildMethodDictionary",				"Trait1 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait1 classTrait>>#traitComposition:",				"Trait1 classTrait>>#recategorizeSelector:from:to:",				"Trait2 classTrait>>#doRebuildMethodDictionary",				"Trait2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait2 classTrait>>#traitComposition:",				"Trait2 classTrait>>#recategorizeSelector:from:to:",				"Trait3 classTrait>>#doRebuildMethodDictionary",				"Trait3 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait3 classTrait>>#traitComposition:",				"Trait3 classTrait>>#recategorizeSelector:from:to:",				"Trait4 classTrait>>#doRebuildMethodDictionary",				"Trait4 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait4 classTrait>>#traitComposition:",				"Trait4 classTrait>>#recategorizeSelector:from:to:",				"TraitBuilderEnhancer>>#eliminateDuplicates:withSuperclassSlots:",				"TraitBuilderEnhancer>>#propagateChangesToRelatedClasses:installer:",				"TraitBuilderEnhancer>>#afterMigratingClass:installer:",				"TraitChange>>#applyOn:",				"TraitChange>>#remove:into:changes:",				"TraitChange>>#update:into:changes:",				"TraitFileOutTest>>#tearDown",				"TraitMethodDescription>>#effectiveMethodCategoryCurrent:new:",				"TraitMethodDescription>>#providedLocatedMethod",				"TraitMethodDescription>>#methodsDo:",				"TraitTest>>#testErrorClassCreation",				"TraitTest>>#testTraitsMethodClassSanity",				"TraitTest>>#testTraitsUsersSanity",				"TraitedClass>>#doRebuildMethodDictionary",				"TraitedClass>>#fileOutLocalMethodsInCategory:on:",				"TraitedClass>>#removeFromSystem:",				"TraitedClass>>#traitComposition:",				"TraitedClass>>#recategorizeSelector:from:to:",				"TraitedClass class>>#propagateChangeOf:",				"TraitedMetaclass>>#fileOutLocalMethodsInCategory:on:",				"TraitedMetaclass>>#traitComposition:",				"TraitedMetaclass>>#rebuildMethodDictionary",				"TraitedMetaclass>>#recategorizeSelector:from:to:",				"TraitedMetaclass>>#initializeBasicMethods",				"TraitsResource>>#tearDown",				"TraitsTestCase>>#tearDown",				"TransformMorph>>#fullBounds",				"TransformMorph>>#drawSubmorphsOnAthensCanvas:",				"TransformWithLayoutMorph>>#doLayoutIn:",				"TransformationMorph>>#removeFlexShell",				"TransformationMorph class>>#doRebuildMethodDictionary",				"TransformationMorph class>>#fileOutLocalMethodsInCategory:on:",				"TransformationMorph class>>#removeFromSystem:",				"TransformationMorph class>>#traitComposition:",				"TransformationMorph class>>#recategorizeSelector:from:to:",				"TreeListMorph>>#insertNewMorphs:",				"TreeNavigationBarMorph>>#asDisabledForm:",				"TreeNavigationBarMorph class>>#createIconMethods",				"UIManager>>#showWaitCursorWhile:",				"UITheme>>#newColumnIn:for:",				"UITheme>>#newToolbarIn:for:",				"UITheme>>#whiteTreeExpandedForm",				"UITheme>>#updateWorldDockingBars",				"UITheme>>#newRowIn:for:",				"UITheme>>#newExpanderIn:label:forAll:",				"UITheme>>#newLabelGroupIn:for:font:labelColor:",				"UITheme>>#whiteTreeUnexpandedForm",				"UITheme>>#newStackIn:for:",				"UITheme>>#newLabelGroupIn:for:",				"UITheme>>#updateScrollBarButtonsAspect:color:",				"UITheme class>>#current:",				"UndefinedSlot>>#checkClassRebuild",				"UndoRedoGroup>>#redo",				"UnicodeTest>>#testNonCharacterPositive",				"Unit>>#multipliedBy:",				"VTermOutputStyle>>#setInDriver:",				"ValueLink>>#asLinkedList",				"ValueLink>>#do:",				"Variable>>#link:",				"Variable>>#removeLink:",				"Variable>>#invalidate",				"VariableBreakpoint>>#setAsNodeProperty",				"VariableBreakpoint>>#removeFromNodeProperty",				"VariableBreakpoint>>#printTargetForBreakpointInspection",				"VariableBreakpoint>>#removeFromMethod:",				"VariableBreakpoint>>#removeFromClass:",				"VariableBreakpoint>>#printContentsForBreakpointInspection",				"VariableBreakpoint>>#install",				"VariableBreakpointTest>>#testSetAsBreakpointProperty",				"VirtualBreakpoint>>#hitTest:",				"VirtualMachine>>#command",				"VirtualMachine>>#options",				"WaitfreeQueueTest>>#testNextOrNilSuchThat",				"WarpBlt class>>#rotate:degrees:center:scaleBy:smoothing:",				"Watch class>>#removeAll",				"WeakActionSequence>>#valueWithArguments:",				"WeakActionSequence>>#value",				"WeakArray class>>#doOldFinalization",				"WeakKeyDictionary>>#finalizeValues:",				"WeakKeyDictionaryTest>>#setUp",				"WeakKeyDictionaryTest class>>#timingLarge",				"WeakKeyDictionaryTest class>>#timingMany",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionSomeGarbageCollected",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionAllGarbageCollected",				"WeakRegistry>>#finalizeValues",				"WeakSet>>#asArray",				"WeakSet>>#printElementsOn:",				"WeakSetTest>>#testCollisions",				"WeakSetTest>>#testDontGrowWhenUnecessary",				"WeakSetTest>>#testIncludes",				"WeakSetTest>>#testDoDontIterateOnReclaimedObjects",				"WeakValueDictionary>>#rehash",				"WeakValueDictionary>>#associationsDo:",				"WeekTest>>#selectorsToBeIgnored",				"WideCharacterSet>>#hasWideCharacters",				"WidgetExample class>>#closeExampleDialogs",				"WikiStyleHelpBuilder>>#build",				"Win32WideStringTest>>#testCharactersAreEncodedInUnicode16Bits",				"WindowsStoreTest>>#testAbsolutePath",				"WindowsStoreTest>>#testRelativePath",				"WindowsStoreTest>>#testAbsoluteFullName",				"WindowsStoreTest>>#testNetworkPathIsAbsolute",				"WindowsStoreTest>>#testNetworkPathFullName",				"WorkingSession>>#runList:do:",				"WorldMorph>>#contentsMenu:",				"WorldMorph>>#install",				"WorldMorph>>#addAllMorphs:",				"WorldMorph class>>#doOneCycle",				"WorldState>>#handsDo:",				"WorldState>>#adjustWakeupTimes:",				"WorldState>>#adjustAlarmTimes:",				"WorldState>>#isStepping:selector:",				"WorldState>>#drawWorld:submorphs:invalidAreasOn:",				"WorldState>>#cleanseStepListForWorld:",				"WorldState>>#isStepping:",				"WorldState>>#checkIfUpdateNeeded",				"WriteBarrierTest>>#testBasicProxyReadOnly",				"WriteBarrierTest>>#testSetIsReadOnlyImmediate",				"WriteBarrierTest>>#testSetIsReadOnlySuccess",				"WriteBarrierTest>>#testMutateVariableObject",				"WriteBarrierTest>>#testSetIsReadOnlyFailure",				"WriteBarrierTest>>#testSetIsReadOnlyImmediateProxy",				"WriteBarrierTest>>#testObject:initialState:tuples:setReadOnlyBlock:",				"WriteBarrierTest>>#testBasicReadOnly",				"WriteBarrierTest>>#testSetIsReadOnlySuccessProxy",				"WriteBarrierTest>>#testSetIsReadOnlyFailureProxy",				"WriteBarrierTest>>#testBasicProxyWritable",				"WriteBarrierTest>>#testBasicWritable",				"ZdcIOBufferTest>>#testString",				"ZipArchive>>#writeCentralDirectoryTo:",				"ZipArchive>>#writeTo:",				"ZipArchive>>#extractAllTo:overwrite:",				"ZipArchive>>#close",				"ZipArchiveTest>>#testArchiveWithThousandFilesShouldWork",				"ZipEncoderTree>>#buildTree:maxDepth:",				"ZipStore>>#close",				"ZipStore>>#open",				"ZnBufferedReadStreamTest>>#testPeek",				"ZnBufferedReadWriteStreamTest>>#testPeek",				"ZnBufferedStreamByteTest>>#testNextIntegerOfSizeSignedBigEndian",				"ZnBufferedStreamByteTest>>#testNextIntegerOfSizeSignedBigEndianPut",				"ZnCharacterEncoder>>#encodeCodePoints:",				"ZnCharacterEncoder class>>#detectEncoding:",				"ZnCharacterEncoderTest>>#testNextPutAllStartingAtToStream",				"ZnCharacterEncoderTest>>#testUTF32EncoderWide",				"ZnCharacterEncoderTest>>#testReadIntoStartingAtCountFromStream",				"ZnCharacterEncoderTest>>#testUTF8EncoderWide",				"ZnCharacterEncoderTest>>#testCodePointStreams",				"ZnCharacterEncoderTest>>#testKnownEncodingIdentifiers",				"ZnCharacterEncoderTest>>#testCodePointEncodingDecoding",				"ZnCharacterEncoderTest>>#testUTF8EncoderIncomplete",				"ZnCharacterEncoderTest>>#testAllByteEncoderDomains",				"ZnCharacterEncoderTest>>#testReadIntoStartingAtCountFromStreamWide",				"ZnCharacterEncoderTest>>#encodeString:with:",				"ZnCharacterEncoderTest>>#testConvencienceMethods",				"ZnCharacterEncoderTest>>#testUTF8EncoderRandom",				"ZnCharacterEncoderTest>>#testUTF8Boundaries",				"ZnCharacterStreamTest>>#testUpToAll",				"ZnChunkedStreamTest>>#testWriting",				"ZnChunkedStreamTest>>#testGzipWriteRead",				"ZnClient>>#addPath:",				"ZnClient>>#receiveCookies",				"ZnClientTest>>#testSpecialPosts",				"ZnCookieJar>>#add:",				"ZnCookieJar>>#cookieAt:forUrl:",				"ZnCredential class>>#findRealmFor:",				"ZnDefaultServerDelegate>>#generateStatus",				"ZnDefaultServerDelegate>>#generateHelp",				"ZnDigestAuthenticator class>>#parseAuthRequest:",				"ZnEntityWriterTest>>#testGzippedAndChunked",				"ZnEntityWriterTest>>#testChunkedOnly",				"ZnHTTPSTest>>#testTransfersSingleClient",				"ZnHTTPSTest>>#testTransfers",				"ZnHTTPSTest class>>#generateTestFiles",				"ZnHeaders>>#headersDo:",				"ZnHtmlOutputStream>>#escape:",				"ZnHtmlOutputStream>>#escapeAttributeValue:",				"ZnHtmlOutputStreamTest>>#testNesting",				"ZnKeyValueStoreClient>>#contents",				"ZnManagingMultiThreadedServer>>#closeConnections",				"ZnMessageBenchmarkTest>>#testRequests",				"ZnMessageBenchmarkTest>>#testResponses",				"ZnMimePart>>#detectContentDispositionValue:",				"ZnMimeType class>>#initializeExtensionsMap",				"ZnMimeType class>>#patchExtensionsMap",				"ZnMimeType class>>#fromString:",				"ZnMimeTypeTest>>#testMatches",				"ZnMimeTypeTest>>#testIsBinary",				"ZnMonticelloServerDelegate>>#repositoryListing",				"ZnMultiPartFormDataEntity>>#partsDo:",				"ZnMultiPartFormDataEntity>>#writeRepresentationOn:",				"ZnMultiValueDictionary>>#keysAndValuesDo:",				"ZnMultiValueDictionaryTest>>#testOrder",				"ZnNewLineWriterStreamTest>>#testNextPut",				"ZnOptions class>>#onClass:",				"ZnRequestTest>>#testCookiesWriting",				"ZnServer class>>#startUp:",				"ZnServer class>>#shutDown:",				"ZnServerTest>>#testFormTest1",				"ZnServerTest>>#testFormTest2",				"ZnServerTest>>#testTooManyConcurrentConnections",				"ZnServerTest>>#testFormTest3",				"ZnServerTest>>#testFormTest3Unspecified",				"ZnSimplifiedByteEncoder class>>#initializeByteTextConverters",				"ZnStaticFileServerDelegate>>#indexFileIn:",				"ZnUrl>>#printPathOn:",				"ZnUrl>>#addPathSegments:",				"ZnUrlTest>>#testQueryRemoveAll",				"ZnUrlTest>>#testNoScheme",				"ZnUtils class>>#capitalizeString:",				"ZnUtils class>>#isCapitalizedString:"			],			"implementors" : {				"MetacelloSemanticVersionNumber" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Refer to the comment in Collection|do:.\"",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Refer to the comment in Collection|do:."					],					"hash" : 19875162,					"argumentNames" : [						"aBlock"					]				},				"Array2D" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Pass elements to aBlock one at a time in row-major order.\"",						"",						"\tcontents do: aBlock"					],					"body" : [						"contents do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Pass elements to aBlock one at a time in row-major order."					],					"hash" : 18691363,					"argumentNames" : [						"aBlock"					]				},				"AthensTextDisplayCommand" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| nn |",						"\tnn := self.",						"",						"\t[ nn isNil ] whileFalse: [ ",						"\t\taBlock value: nn.",						"\t\tnn := nn next ]"					],					"body" : [						"| nn |",						"nn := self.",						"",						"[ nn isNil ] whileFalse: [ ",						"\taBlock value: nn.",						"\tnn := nn next ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18998700,					"argumentNames" : [						"aBlock"					]				},				"IceEmptyNode" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Do nothing\"",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Do nothing"					],					"hash" : 25397900,					"argumentNames" : [						"aBlock"					]				},				"Dictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"An alias for valuesDo:. Evaluate aBlock for each of my values.\"",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"An alias for valuesDo:. Evaluate aBlock for each of my values."					],					"hash" : 18635712,					"argumentNames" : [						"aBlock"					]				},				"LGitRevwalk" : {					"sourceCode" : [						"do: aBlock",						"",						"\t[ self hasNext ] whileTrue: [ aBlock value: self next ]"					],					"body" : [						"[ self hasNext ] whileTrue: [ aBlock value: self next ]"					],					"isTestMethod" : false,					"category" : "walking",					"comment" : [ ],					"hash" : 25189776,					"argumentNames" : [						"aBlock"					]				},				"SpBaseEventDefinition class" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self new action: aBlock"					],					"body" : [						"^ self new action: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18414653,					"argumentNames" : [						"aBlock"					]				},				"RBProgramNode" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Hacked to fit collection protocols\"",						"",						"\taBlock value: self"					],					"body" : [						"aBlock value: self"					],					"isTestMethod" : false,					"category" : "enumeration",					"comment" : [						"Hacked to fit collection protocols"					],					"hash" : 18985326,					"argumentNames" : [						"aBlock"					]				},				"DoubleLinkedList" : {					"sourceCode" : [						"do: block",						"",						"\t\"Execute block for each of my elements.\"",						"",						"\tself linksDo: [ :each | block value: each value ]"					],					"body" : [						"self linksDo: [ :each | block value: each value ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Execute block for each of my elements."					],					"hash" : 19461796,					"argumentNames" : [						"block"					]				},				"Set" : {					"sourceCode" : [						"do: aBlock",						"",						"\ttally = 0 ifTrue: [ ^ self ].",						"\t1 to: array size do: [ :index | ",						"\t\t| each |",						"\t\t(each := array at: index) ifNotNil: [ ",						"\t\t\taBlock value: each enclosedElement ] ]"					],					"body" : [						"tally = 0 ifTrue: [ ^ self ].",						"1 to: array size do: [ :index | ",						"\t| each |",						"\t(each := array at: index) ifNotNil: [ ",						"\t\taBlock value: each enclosedElement ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19444019,					"argumentNames" : [						"aBlock"					]				},				"StSpotterIterator" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\" the iterator must keep an internal collection of items being iterated. This guarantees that the iteration is not done multiple times in case somebody sends multiple subsequent messages like #size, #items or #first:. This will slightly decrease performance while iterating \"",						"",						"\titems ifNotNil: [ items do: aBlock ] ifNil: [ ",						"\t\titems := self defaultItems.",						"\t\tself itemDo: [ :each | ",						"\t\t\titems add: each.",						"\t\t\taBlock value: each ] ]"					],					"body" : [						"items ifNotNil: [ items do: aBlock ] ifNil: [ ",						"\titems := self defaultItems.",						"\tself itemDo: [ :each | ",						"\t\titems add: each.",						"\t\taBlock value: each ] ]"					],					"isTestMethod" : false,					"category" : "mimic enumerating",					"comment" : [						" the iterator must keep an internal collection of items being iterated. This guarantees that the iteration is not done multiple times in case somebody sends multiple subsequent messages like #size, #items or #first:. This will slightly decrease performance while iterating "					],					"hash" : 19547768,					"argumentNames" : [						"aBlock"					]				},				"Bag" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.",						"\t",						"\tThis will enumerate all of the occurrences of the object. Use doWithOccurrences: ",						"\tto gets pairs of objects and their count.",						"\t\"",						"",						"\tcontents associationsDo: [ :assoc | ",						"\t\tassoc value timesRepeat: [ aBlock value: assoc key ] ]"					],					"body" : [						"contents associationsDo: [ :assoc | ",						"\tassoc value timesRepeat: [ aBlock value: assoc key ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument.",						"\t",						"\tThis will enumerate all of the occurrences of the object. Use doWithOccurrences: ",						"\tto gets pairs of objects and their count.",						"\t"					],					"hash" : 18698328,					"argumentNames" : [						"aBlock"					]				},				"RelationSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.\"",						"",						"\tset do: aBlock"					],					"body" : [						"set do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument."					],					"hash" : 22050341,					"argumentNames" : [						"aBlock"					]				},				"PragmaMenuAndShortcutRegistration" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\tself currentItem action: aBlockClosure"					],					"body" : [						"self currentItem action: aBlockClosure"					],					"isTestMethod" : false,					"category" : "keymapping protocol",					"comment" : [ ],					"hash" : 18272552,					"argumentNames" : [						"aBlockClosure"					]				},				"OSEnvironment" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumeration",					"comment" : [ ],					"hash" : 19457216,					"argumentNames" : [						"aBlock"					]				},				"WideCharacterSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\tmap keysAndValuesDo: [ :index :lowmap | ",						"\t\t| high16Bits |",						"\t\thigh16Bits := index bitShift: 16.",						"\t\tself bitmap: lowmap do: [ :low16Bits | ",						"\t\t\taBlock value: (Character value: high16Bits + low16Bits) ] ]"					],					"body" : [						"map keysAndValuesDo: [ :index :lowmap | ",						"\t| high16Bits |",						"\thigh16Bits := index bitShift: 16.",						"\tself bitmap: lowmap do: [ :low16Bits | ",						"\t\taBlock value: (Character value: high16Bits + low16Bits) ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19020632,					"argumentNames" : [						"aBlock"					]				},				"ProcessList" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| aLink |",						"\taLink := firstLink.",						"\t[ aLink == nil ] whileFalse: [ ",						"\t\taBlock value: aLink value.",						"\t\taLink := aLink nextLink ]"					],					"body" : [						"| aLink |",						"aLink := firstLink.",						"[ aLink == nil ] whileFalse: [ ",						"\taBlock value: aLink value.",						"\taLink := aLink nextLink ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19189292,					"argumentNames" : [						"aBlock"					]				},				"Stream" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock for each of the objects accessible by receiver.\"",						"",						"\t[ self atEnd ] whileFalse: [ aBlock value: self next ]"					],					"body" : [						"[ self atEnd ] whileFalse: [ aBlock value: self next ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock for each of the objects accessible by receiver."					],					"hash" : 18670707,					"argumentNames" : [						"aBlock"					]				},				"CharacterSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"evaluate aBlock with each character in the set\"",						"",						"\tCharacter allByteCharacters do: [ :c | ",						"\t\t(self includes: c) ifTrue: [ aBlock value: c ] ]"					],					"body" : [						"Character allByteCharacters do: [ :c | ",						"\t(self includes: c) ifTrue: [ aBlock value: c ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"evaluate aBlock with each character in the set"					],					"hash" : 18718439,					"argumentNames" : [						"aBlock"					]				},				"OrderedDictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself valuesDo: aBlock"					],					"body" : [						"self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18915221,					"argumentNames" : [						"aBlock"					]				},				"FLLargeIdentitySet" : {					"sourceCode" : [						"do: aBlock",						"",						"\ttally = 0 ifTrue: [ ^ self ].",						"\tincludesNil ifTrue: [ aBlock value: nil ].",						"\t1 to: 4096 do: [ :arrayIndex | ",						"\t\t| subArray |",						"\t\tsubArray := array at: arrayIndex.",						"\t\t1 to: (tallies at: arrayIndex) do: [ :index | ",						"\t\taBlock value: (subArray at: index) ] ]"					],					"body" : [						"tally = 0 ifTrue: [ ^ self ].",						"includesNil ifTrue: [ aBlock value: nil ].",						"1 to: 4096 do: [ :arrayIndex | ",						"\t| subArray |",						"\tsubArray := array at: arrayIndex.",						"\t1 to: (tallies at: arrayIndex) do: [ :index | ",						"\taBlock value: (subArray at: index) ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19640306,					"argumentNames" : [						"aBlock"					]				},				"CharacterSetComplement" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"evaluate aBlock with each character in the set\"",						"",						"\t0 to: self size - 1 do: [ :codePoint | ",						"\t\t| ch |",						"\t\tch := Character value: codePoint.",						"\t\t(self includes: ch) ifTrue: [ aBlock value: ch ] ]"					],					"body" : [						"0 to: self size - 1 do: [ :codePoint | ",						"\t| ch |",						"\tch := Character value: codePoint.",						"\t(self includes: ch) ifTrue: [ aBlock value: ch ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"evaluate aBlock with each character in the set"					],					"hash" : 19509298,					"argumentNames" : [						"aBlock"					]				},				"WeakSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\ttally = 0 ifTrue: [ ^ self ].",						"\t1 to: array size do: [ :index | ",						"\t\t(array at: index) ifNotNil: [ :object | ",						"\t\t\tobject == flag ifFalse: [ aBlock value: object enclosedElement ] ] ]"					],					"body" : [						"tally = 0 ifTrue: [ ^ self ].",						"1 to: array size do: [ :index | ",						"\t(array at: index) ifNotNil: [ :object | ",						"\t\tobject == flag ifFalse: [ aBlock value: object enclosedElement ] ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19432123,					"argumentNames" : [						"aBlock"					]				},				"DependentsArray" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate a Block on non nil elements of the receiver\"",						"",						"\t| dep |",						"\t1 to: self basicSize do: [ :i | ",						"\t(dep := self basicAt: i) ifNotNil: [ aBlock value: dep ] ]"					],					"body" : [						"| dep |",						"1 to: self basicSize do: [ :i | ",						"(dep := self basicAt: i) ifNotNil: [ aBlock value: dep ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate a Block on non nil elements of the receiver"					],					"hash" : 19558784,					"argumentNames" : [						"aBlock"					]				},				"IRSequence" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ sequence do: aBlock"					],					"body" : [						"^ sequence do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19067726,					"argumentNames" : [						"aBlock"					]				},				"IceAbstractNode" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\t\"Evaluate aBlockClosure on my value and the values of my children.\"",						"",						"\t^ self subclassResponsibility"					],					"body" : [						"^ self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Evaluate aBlockClosure on my value and the values of my children."					],					"hash" : 25397615,					"argumentNames" : [						"aBlockClosure"					]				},				"OrderedCollection" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Override the superclass for performance reasons.\"",						"",						"\tfirstIndex to: lastIndex do: [ :index | ",						"\taBlock value: (array at: index) ]"					],					"body" : [						"firstIndex to: lastIndex do: [ :index | ",						"aBlock value: (array at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Override the superclass for performance reasons."					],					"hash" : 19170817,					"argumentNames" : [						"aBlock"					]				},				"Interval" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock for each value of the interval.",						"\tImplementation note: instead of repeatedly incrementing the value",						"\t\taValue := aValue + step.",						"\tuntil stop is reached,",						"\tWe prefer to recompute value from start",						"\t\taValue := start + (index * step).",						"\tThis is better for floating points accuracy, while not degrading Integer and Fraction speed too much.",						"\tMoreover, this is consistent with methods #at: and #size\"",						"",						"\t| aValue index size |",						"\tindex := 0.",						"\tsize := self size.",						"\t[ index < size ] whileTrue: [ ",						"\t\taValue := start + (index * step).",						"\t\tindex := index + 1.",						"\t\taBlock value: aValue ]"					],					"body" : [						"| aValue index size |",						"index := 0.",						"size := self size.",						"[ index < size ] whileTrue: [ ",						"\taValue := start + (index * step).",						"\tindex := index + 1.",						"\taBlock value: aValue ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock for each value of the interval.",						"\tImplementation note: instead of repeatedly incrementing the value",						"\t\taValue := aValue + step.",						"\tuntil stop is reached,",						"\tWe prefer to recompute value from start",						"\t\taValue := start + (index * step).",						"\tThis is better for floating points accuracy, while not degrading Integer and Fraction speed too much.",						"\tMoreover, this is consistent with methods #at: and #size"					],					"hash" : 19427967,					"argumentNames" : [						"aBlock"					]				},				"MetacelloLoadData" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself dataMap valuesDo: [ :ar | ",						"\t\taBlock value: (ar at: 1) value: (ar at: 2) value: (ar at: 3) ]"					],					"body" : [						"self dataMap valuesDo: [ :ar | ",						"\taBlock value: (ar at: 1) value: (ar at: 2) value: (ar at: 3) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18171960,					"argumentNames" : [						"aBlock"					]				},				"LayoutCell" : {					"sourceCode" : [						"do: aBlock",						"",						"\taBlock value: self.",						"\tnextCell ifNotNil: [ nextCell do: aBlock ]"					],					"body" : [						"aBlock value: self.",						"nextCell ifNotNil: [ nextCell do: aBlock ]"					],					"isTestMethod" : false,					"category" : "collection",					"comment" : [ ],					"hash" : 19843746,					"argumentNames" : [						"aBlock"					]				},				"IceTipStandardAction" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself action: aBlock.",						"\tself execute"					],					"body" : [						"self action: aBlock.",						"self execute"					],					"isTestMethod" : false,					"category" : "executing",					"comment" : [ ],					"hash" : 25496142,					"argumentNames" : [						"aBlock"					]				},				"PragmaCollector" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself collected do: aBlock"					],					"body" : [						"self collected do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19286273,					"argumentNames" : [						"aBlock"					]				},				"CTOrderPreservingTree" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself pre: aBlock post: [ :anObj |  ]"					],					"body" : [						"self pre: aBlock post: [ :anObj |  ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20104371,					"argumentNames" : [						"aBlock"					]				},				"LayoutClassScope" : {					"sourceCode" : [						"do: aBlock",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19175258,					"argumentNames" : [						"aBlock"					]				},				"Srfi41Stream" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\tself ifEmpty: #yourself ifNotEmpty: [ ",						"\t\taBlockClosure value: self car.",						"\t\tself cdr do: aBlockClosure ]"					],					"body" : [						"self ifEmpty: #yourself ifNotEmpty: [ ",						"\taBlockClosure value: self car.",						"\tself cdr do: aBlockClosure ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 25966568,					"argumentNames" : [						"aBlockClosure"					]				},				"Path" : {					"sourceCode" : [						"do: aBlock",						"",						"\t1 to: self size do: [ :index | ",						"\t\t| segment |",						"\t\tsegment := self at: index.",						"\t\tsegment isEmpty ifFalse: [ aBlock value: segment ] ]"					],					"body" : [						"1 to: self size do: [ :index | ",						"\t| segment |",						"\tsegment := self at: index.",						"\tsegment isEmpty ifFalse: [ aBlock value: segment ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19457338,					"argumentNames" : [						"aBlock"					]				},				"IRRemoteArray" : {					"sourceCode" : [						"do: aBlock",						"",						"\t1 to: size do: [ :idx | aBlock value: idx - 1 ]"					],					"body" : [						"1 to: size do: [ :idx | aBlock value: idx - 1 ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19592849,					"argumentNames" : [						"aBlock"					]				},				"LinkedList" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| aLink |",						"\taLink := firstLink.",						"\t[ aLink == nil ] whileFalse: [ ",						"\t\taBlock value: aLink value.",						"\t\taLink := aLink nextLink ]"					],					"body" : [						"| aLink |",						"aLink := firstLink.",						"[ aLink == nil ] whileFalse: [ ",						"\taBlock value: aLink value.",						"\taLink := aLink nextLink ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19122476,					"argumentNames" : [						"aBlock"					]				},				"ValueLink" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ super do: [ :each | aBlock value: each value ]"					],					"body" : [						"^ super do: [ :each | aBlock value: each value ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 19005491,					"argumentNames" : [						"aBlock"					]				},				"KMDispatchChain" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| currentTarget |",						"\tcurrentTarget := initialTarget.",						"\t[ currentTarget isNil ] whileFalse: [ ",						"\t\taBlock value: currentTarget.",						"\t\tcurrentTarget := currentTarget nextForKmChain: self ]"					],					"body" : [						"| currentTarget |",						"currentTarget := initialTarget.",						"[ currentTarget isNil ] whileFalse: [ ",						"\taBlock value: currentTarget.",						"\tcurrentTarget := currentTarget nextForKmChain: self ]"					],					"isTestMethod" : false,					"category" : "iterating",					"comment" : [ ],					"hash" : 20092894,					"argumentNames" : [						"aBlock"					]				},				"RunArray" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"This is refined for speed\"",						"",						"\t1 to: runs size do: [ :i | ",						"\t\t| r v |",						"\t\tv := values at: i.",						"\t\tr := runs at: i.",						"\t\t[ (r := r - 1) >= 0 ] whileTrue: [ aBlock value: v ] ]"					],					"body" : [						"1 to: runs size do: [ :i | ",						"\t| r v |",						"\tv := values at: i.",						"\tr := runs at: i.",						"\t[ (r := r - 1) >= 0 ] whileTrue: [ aBlock value: v ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"This is refined for speed"					],					"hash" : 20545844,					"argumentNames" : [						"aBlock"					]				},				"IceNode" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\taBlockClosure value: self value.",						"\tself childrenDo: [ :node | node do: aBlockClosure ]"					],					"body" : [						"aBlockClosure value: self value.",						"self childrenDo: [ :node | node do: aBlockClosure ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 25399808,					"argumentNames" : [						"aBlockClosure"					]				},				"RPackageWithDoTest" : {					"sourceCode" : [						"do: aBlock",						"",						"\tx := 5.",						"\t[ aBlock value ] ensure: [ x := 3 ]"					],					"body" : [						"x := 5.",						"[ aBlock value ] ensure: [ x := 3 ]"					],					"isTestMethod" : false,					"category" : "tests - simple ensuring",					"comment" : [ ],					"hash" : 21622118,					"argumentNames" : [						"aBlock"					]				},				"SmallDictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18968512,					"argumentNames" : [						"aBlock"					]				},				"SystemProgressItemMorph" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"\t^ [ aBlock value: self ] ensure: [ self close ]"					],					"body" : [						"self changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"^ [ aBlock value: self ] ensure: [ self close ]"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [ ],					"hash" : 18618956,					"argumentNames" : [						"aBlock"					]				},				"JobProgressMorph" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"\t^ [ aBlock value: self ] ensure: [ self close ]"					],					"body" : [						"self changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"^ [ aBlock value: self ] ensure: [ self close ]"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [ ],					"hash" : 18591820,					"argumentNames" : [						"aBlock"					]				},				"MTSession" : {					"sourceCode" : [						"do: aBlock",						"",						"\ttrackers valuesDo: aBlock"					],					"body" : [						"trackers valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20114762,					"argumentNames" : [						"aBlock"					]				},				"SequenceableCollection" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Refer to the comment in Collection|do:.\"",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Refer to the comment in Collection|do:."					],					"hash" : 19217242,					"argumentNames" : [						"aBlock"					]				},				"FLLargeIdentityDictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18587840,					"argumentNames" : [						"aBlock"					]				},				"Link" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| link |",						"\tlink := self.",						"\t[ link ] whileNotNil: [ ",						"\t\taBlock value: link.",						"\t\tlink := link nextLink.",						"\t\tlink == self ifTrue: [ link := nil ] ]"					],					"body" : [						"| link |",						"link := self.",						"[ link ] whileNotNil: [ ",						"\taBlock value: link.",						"\tlink := link nextLink.",						"\tlink == self ifTrue: [ link := nil ] ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 19120886,					"argumentNames" : [						"aBlock"					]				},				"UndefinedObject" : {					"sourceCode" : [						"do: aFullBlockClosure",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18620556,					"argumentNames" : [						"aFullBlockClosure"					]				},				"MetacelloVersionNumber" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Refer to the comment in Collection|do:.\"",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Refer to the comment in Collection|do:."					],					"hash" : 19876698,					"argumentNames" : [						"aBlock"					]				},				"CBCritiquesRuleGroup" : {					"sourceCode" : [						"do: aBlock",						"",						"\trules do: aBlock"					],					"body" : [						"rules do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20453412,					"argumentNames" : [						"aBlock"					]				},				"Heap" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.\"",						"",						"\t1 to: tally do: [ :i | aBlock value: (array at: i) ]"					],					"body" : [						"1 to: tally do: [ :i | aBlock value: (array at: i) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument."					],					"hash" : 19362640,					"argumentNames" : [						"aBlock"					]				},				"SpTransmission" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Will create a generic action block to handle transmission\"",						"",						"\tself toPort: (SpActionPort newAction: aBlock)"					],					"body" : [						"self toPort: (SpActionPort newAction: aBlock)"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [						"Will create a generic action block to handle transmission"					],					"hash" : 20834652,					"argumentNames" : [						"aBlock"					]				},				"WeakRegistry" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self protected: [ valueDictionary keysDo: aBlock ]"					],					"body" : [						"^ self protected: [ valueDictionary keysDo: aBlock ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19018191,					"argumentNames" : [						"aBlock"					]				},				"CTLinkedStoragePoolCircular" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| p |",						"\tp := head nextLink.",						"\t[ p == head ] whileFalse: [ ",						"\t\taBlock value: p value.",						"\t\tp := p nextLink ]"					],					"body" : [						"| p |",						"p := head nextLink.",						"[ p == head ] whileFalse: [ ",						"\taBlock value: p value.",						"\tp := p nextLink ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20384352,					"argumentNames" : [						"aBlock"					]				},				"SettingNodeBuilder" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\tnode item action: aBlockClosure"					],					"body" : [						"node item action: aBlockClosure"					],					"isTestMethod" : false,					"category" : "*Keymapping-Settings",					"comment" : [ ],					"hash" : 19882972,					"argumentNames" : [						"aBlockClosure"					]				},				"AthensPathSegment" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| segment |",						"\tsegment := self.",						"",						"\t[ ",						"\taBlock value: segment.",						"\tsegment := segment next.",						"\tsegment notNil ] whileTrue"					],					"body" : [						"| segment |",						"segment := self.",						"",						"[ ",						"aBlock value: segment.",						"segment := segment next.",						"segment notNil ] whileTrue"					],					"isTestMethod" : false,					"category" : "iterating",					"comment" : [ ],					"hash" : 21709942,					"argumentNames" : [						"aBlock"					]				},				"Collection" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.\"",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument."					],					"hash" : 18684484,					"argumentNames" : [						"aBlock"					]				},				"MetacelloMemberListSpec" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself map values do: aBlock"					],					"body" : [						"self map values do: aBlock"					],					"isTestMethod" : false,					"category" : "enumeration",					"comment" : [ ],					"hash" : 19320212,					"argumentNames" : [						"aBlock"					]				}			}		},		"nextFromLink:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"Link>>#next:"			],			"implementors" : {				"Link" : {					"sourceCode" : [						"nextFromLink: aLink",						"",						"\t^ aLink nextLink: self"					],					"body" : [						"^ aLink nextLink: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18857152,					"argumentNames" : [						"aLink"					]				},				"Integer" : {					"sourceCode" : [						"nextFromLink: aLink",						"",						"\t^ aLink nextInteger: self"					],					"body" : [						"^ aLink nextInteger: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18845632,					"argumentNames" : [						"aLink"					]				}			}		},		"includes:equalityBlock:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipListTest>>#testProfileInclusion"			],			"implementors" : {				"CTSkipList" : {					"sourceCode" : [						"includes: aKey equalityBlock: eqBlock",						"",						"\t| link |",						"\tlink := (self predecessors: aKey) value.",						"\t^ eqBlock value: link nextLink value value: aKey"					],					"body" : [						"| link |",						"link := (self predecessors: aKey) value.",						"^ eqBlock value: link nextLink value value: aKey"					],					"isTestMethod" : false,					"category" : "testing",					"comment" : [ ],					"hash" : 37447828,					"argumentNames" : [						"aKey",						"eqBlock"					]				}			}		},		"predecessors:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList>>#includes:equalityBlock:",				"CTSkipList>>#add:atHeight:",				"CTSkipListTest>>#testProfileInclusion",				"DAPackageCycleDetector>>#parentsFrom:For:",				"DAPackageRelationGraphTest>>#testPredecessors"			],			"implementors" : {				"DAPackageRelationGraph" : {					"sourceCode" : [						"predecessors: aPackage",						"",						"\t\"returns a Collection with the predecessors of the package\"",						"",						"\t| aCollection |",						"\taCollection := OrderedCollection new.",						"\tself packages do: [ :package | ",						"\t\tpackage dependencies do: [ :dependency | ",						"\t\t\tdependency target = aPackage ifTrue: [ aCollection add: package ] ] ].",						"\t^ aCollection"					],					"body" : [						"| aCollection |",						"aCollection := OrderedCollection new.",						"self packages do: [ :package | ",						"\tpackage dependencies do: [ :dependency | ",						"\t\tdependency target = aPackage ifTrue: [ aCollection add: package ] ] ].",						"^ aCollection"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"returns a Collection with the predecessors of the package"					],					"hash" : 22835468,					"argumentNames" : [						"aPackage"					]				},				"CTSkipList" : {					"sourceCode" : [						"predecessors: key",						"",						"\t| link predecessors |",						"\tpredecessors := nil.",						"\tlink := lists value.",						"",						"\t[ link ] whileNotNil: [ ",						"\t\t[ sortBlock value: link nextLink value value: key ] whileTrue: [ ",						"\t\t\tlink := link nextLink ].",						"",						"\t\tpredecessors := link ~~> predecessors.",						"",						"\t\tlink := link previousLink ].",						"",						"\t^ predecessors"					],					"body" : [						"| link predecessors |",						"predecessors := nil.",						"link := lists value.",						"",						"[ link ] whileNotNil: [ ",						"\t[ sortBlock value: link nextLink value value: key ] whileTrue: [ ",						"\t\tlink := link nextLink ].",						"",						"\tpredecessors := link ~~> predecessors.",						"",						"\tlink := link previousLink ].",						"",						"^ predecessors"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20409723,					"argumentNames" : [						"key"					]				}			}		},		"add:atHeight:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList>>#add:",				"CTSkipListTest>>#testProfileAddingFromScratch",				"CTSkipListTest>>#testProfileAdditionOf35"			],			"implementors" : {				"CTSkipList" : {					"sourceCode" : [						"add: key atHeight: r",						"",						"\t| predecessors height newLink |",						"\tpredecessors := self predecessors: key.",						"",						"\theight := self height.",						"",						"\tnewLink := self",						"\t\t           add: key",						"\t\t           atHeight: (r min: height)",						"\t\t           predecessors: predecessors.",						"",						"\tr > height ifTrue: [ ",						"\t\t| newList list |",						"\t\tlist := lists value.",						"",						"\t\tnewList := CTDoubleValueLink new",						"\t\t\t           value: lowerBound;",						"\t\t\t           previousLink: list;",						"\t\t\t           nextLink: (CTDoubleValueLink new",						"\t\t\t\t\t            value: key;",						"\t\t\t\t\t            previousLink: newLink;",						"\t\t\t\t\t            nextLink: (CTDoubleValueLink new",						"\t\t\t\t\t\t\t             value: upperBound;",						"\t\t\t\t\t\t\t             previousLink: (list ifNotNil: [ list last ]);",						"\t\t\t\t\t\t\t             nextLink: nil;",						"\t\t\t\t\t\t\t             yourself);",						"\t\t\t\t\t            yourself);",						"\t\t\t           yourself.",						"",						"\t\tlists := newList ~~> lists ].",						"",						"\t^ key"					],					"body" : [						"| predecessors height newLink |",						"predecessors := self predecessors: key.",						"",						"height := self height.",						"",						"newLink := self",						"\t           add: key",						"\t           atHeight: (r min: height)",						"\t           predecessors: predecessors.",						"",						"r > height ifTrue: [ ",						"\t| newList list |",						"\tlist := lists value.",						"",						"\tnewList := CTDoubleValueLink new",						"\t\t           value: lowerBound;",						"\t\t           previousLink: list;",						"\t\t           nextLink: (CTDoubleValueLink new",						"\t\t\t\t            value: key;",						"\t\t\t\t            previousLink: newLink;",						"\t\t\t\t            nextLink: (CTDoubleValueLink new",						"\t\t\t\t\t\t             value: upperBound;",						"\t\t\t\t\t\t             previousLink: (list ifNotNil: [ list last ]);",						"\t\t\t\t\t\t             nextLink: nil;",						"\t\t\t\t\t\t             yourself);",						"\t\t\t\t            yourself);",						"\t\t           yourself.",						"",						"\tlists := newList ~~> lists ].",						"",						"^ key"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 38497520,					"argumentNames" : [						"key",						"r"					]				}			}		},		"testEmptyLink" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testEmptyLink",						"",						"\t| l |",						"\tl := Link new.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := Link new.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3301937,					"argumentNames" : [ ]				}			}		},		"nextInteger:" : {			"senders" : [				"Bag>>#atRandom:",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTHeapQTest>>#testUpdate",				"Collection>>#atRandom:",				"CollectionTest>>#randomRelationOfSize:max:",				"DelayBenchmark>>#generateDelayProcesses:priority:maxDuration:fromSeed:",				"EssentialsObjectTest>>#testInspectProbabilisticMedianRatioWithSorting",				"EssentialsObjectTest>>#testInspectSet",				"FloatTest>>#testFractionAsFloat",				"HiExampleCommit class>>#randomlyGenerated",				"Integer>>#atRandom:",				"Integer>>#nextFromLink:",				"LargePositiveIntegerTest>>#testReciprocalModulo",				"Link>>#nextInteger:",				"MTVisualizationsTest>>#testInspectProbabilisticMedian",				"NumberParserTest>>#testFloatPrintString",				"OrderedDictionary>>#atRandom:",				"Random>>#nextIntegerBetween:and:",				"RandomTest>>#testNextInteger",				"SequenceableCollection>>#atRandom:",				"SequenceableCollection>>#shuffleBy:",				"Set>>#atRandom:",				"SharedRandom>>#nextInteger:",				"SpRGBSlidersPresenterTest>>#testColor",				"Stdio class>>#createStdioFileFor:",				"UUIDGenerator>>#nextRandom16",				"ValueLink>>#nextInteger:"			],			"implementors" : {				"SharedRandom" : {					"sourceCode" : [						"nextInteger: anInteger",						"",						"\t^ mutex critical: [ super nextInteger: anInteger ]"					],					"body" : [						"^ mutex critical: [ super nextInteger: anInteger ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18962824,					"argumentNames" : [						"anInteger"					]				},				"UndefinedObject" : {					"sourceCode" : [						"nextInteger: n",						"",						"\t^ self"					],					"body" : [						"^ self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18620556,					"argumentNames" : [						"n"					]				},				"Link" : {					"sourceCode" : [						"nextInteger: n",						"",						"\t^ n = 0",						"\t\t  ifTrue: [ nil ]",						"\t\t  ifFalse: [ self class nextLink: (nextLink nextInteger: n - 1) ]"					],					"body" : [						"^ n = 0",						"\t  ifTrue: [ nil ]",						"\t  ifFalse: [ self class nextLink: (nextLink nextInteger: n - 1) ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18858368,					"argumentNames" : [						"n"					]				},				"Random" : {					"sourceCode" : [						"nextInteger: anInteger",						"",						"\t\"Answer a random integer in the interval [1, anInteger].",						"\tHandle large numbers too (for cryptography).\"",						"",						"\tanInteger strictlyPositive ifFalse: [ ",						"\t\tself error: 'Range must be positive' ].",						"\tanInteger asFloat isInfinite ifTrue: [ ",						"\t\t^ (self privateNextValue asFraction * anInteger) truncated + 1 ]. \"are we outside the range of float? - use fraction\"",						"\t^ (self privateNextValue * anInteger) truncated + 1"					],					"body" : [						"anInteger strictlyPositive ifFalse: [ ",						"\tself error: 'Range must be positive' ].",						"anInteger asFloat isInfinite ifTrue: [ ",						"\t^ (self privateNextValue asFraction * anInteger) truncated + 1 ]. \"are we outside the range of float? - use fraction\"",						"^ (self privateNextValue * anInteger) truncated + 1"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer a random integer in the interval [1, anInteger].",						"\tHandle large numbers too (for cryptography)."					],					"hash" : 18940971,					"argumentNames" : [						"anInteger"					]				},				"ValueLink" : {					"sourceCode" : [						"nextInteger: n",						"",						"\t^ (super nextInteger: n) ifNotNil: [ :aValueLink | ",						"\t\t  aValueLink",						"\t\t\t  value: value;",						"\t\t\t  yourself ]"					],					"body" : [						"^ (super nextInteger: n) ifNotNil: [ :aValueLink | ",						"\t  aValueLink",						"\t\t  value: value;",						"\t\t  yourself ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 19268952,					"argumentNames" : [						"n"					]				}			}		},		"sutCrescenzi" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipListTest>>#testProfileInclusion",				"CTSkipListTest>>#testProfileAdditionOf35",				"CTSkipListTest>>#testCrescenzi"			],			"implementors" : {				"CTSkipListTest" : {					"sourceCode" : [						"sutCrescenzi",						"",						"\t| collection |",						"\tcollection := #( 5 10 16 18 30 41 80 ) asSortedCollection: #<.",						"",						"\t^ CTSkipList",						"\t\t  onSortedCollection: collection",						"\t\t  lowerBound: Float negativeInfinity",						"\t\t  upperBound: Float infinity"					],					"body" : [						"| collection |",						"collection := #( 5 10 16 18 30 41 80 ) asSortedCollection: #<.",						"",						"^ CTSkipList",						"\t  onSortedCollection: collection",						"\t  lowerBound: Float negativeInfinity",						"\t  upperBound: Float infinity"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 3369586,					"argumentNames" : [ ]				}			}		},		"testLinkNext3" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testLinkNext3",						"",						"\t| l1 l2 l3 l |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"\tl3 := Link new.",						"",						"\tl1 next: l2.",						"\tl2 next: l3.",						"\tl3 next: l1.",						"",						"\tl := l1 next: 3.",						"",						"\tself assert: l nextLink nextLink nextLink equals: nil.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l1 l2 l3 l |",						"l1 := Link new.",						"l2 := Link new.",						"l3 := Link new.",						"",						"l1 next: l2.",						"l2 next: l3.",						"l3 next: l1.",						"",						"l := l1 next: 3.",						"",						"self assert: l nextLink nextLink nextLink equals: nil.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4092095,					"argumentNames" : [ ]				}			}		},		"asLinkedList" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"CTBinomialHeap>>#asShapeForest",				"CTBinomialTree>>#nodes",				"CTBinomialTree>>#edges:",				"CTCategoryTest>>#testMonadStateMoreStackStuff",				"CTCategoryTest>>#testMonadStateStackyStack",				"CTCategoryTest>>#testMonadStateStackStuff",				"CTCategoryTest>>#stackyStack:",				"CTCategoryTest>>#testMonadLiftMState",				"CTCategoryTest>>#testMonadState",				"CTCategoryTest>>#testApplicativeSequenceLists",				"CTCategoryTest>>#testMonadJoinState",				"CTLinksValueLinkTest>>#testNilAsLinkedList",				"CTLinksValueLinkTest>>#testAsLinkedList4321",				"CTLinksValueLinkTest>>#testAsLinkedList",				"CTOrderPreservingTreeTest>>#testCycle",				"CTSBRAL>>#asShapeForest",				"SequenceableCollection>>#asLinkedList"			],			"implementors" : {				"ValueLink" : {					"sourceCode" : [						"asLinkedList",						"",						"\t| list |",						"\tlist := LinkedList empty.",						"\tself do: [ :each | list addLast: each ].",						"\t^ list"					],					"body" : [						"| list |",						"list := LinkedList empty.",						"self do: [ :each | list addLast: each ].",						"^ list"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 2228810,					"argumentNames" : [ ]				},				"UndefinedObject" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ LinkedList empty"					],					"body" : [						"^ LinkedList empty"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1581381,					"argumentNames" : [ ]				},				"SequenceableCollection" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ self asValueLink asLinkedList"					],					"body" : [						"^ self asValueLink asLinkedList"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1650690,					"argumentNames" : [ ]				}			}		},		"onSortedCollection:lowerBound:upperBound:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipListTest>>#testProfileAddingFromScratch",				"CTSkipListTest>>#testInspectBigList",				"CTSkipListTest>>#sutCrescenzi"			],			"implementors" : {				"CTSkipList class" : {					"sourceCode" : [						"onSortedCollection: aCollection lowerBound: lower upperBound: upper",						"",						"\t^ self",						"\t\t  onSortedCollection: aCollection",						"\t\t  lowerBound: lower",						"\t\t  upperBound: upper",						"\t\t  atRandom: ((RandomGeometric seed: 541)",						"\t\t\t\t   p: 0.5;",						"\t\t\t\t   yourself)"					],					"body" : [						"^ self",						"\t  onSortedCollection: aCollection",						"\t  lowerBound: lower",						"\t  upperBound: upper",						"\t  atRandom: ((RandomGeometric seed: 541)",						"\t\t\t   p: 0.5;",						"\t\t\t   yourself)"					],					"isTestMethod" : false,					"category" : "creation",					"comment" : [ ],					"hash" : 54225004,					"argumentNames" : [						"aCollection",						"lower",						"upper"					]				}			}		},		"testLinkReferencingAnotherLink" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testLinkReferencingAnotherLink",						"",						"\t| l1 l2 |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"",						"\tl1 next: l2.",						"",						"\t^ self exportSlotsGraphOf: l1"					],					"body" : [						"| l1 l2 |",						"l1 := Link new.",						"l2 := Link new.",						"",						"l1 next: l2.",						"",						"^ self exportSlotsGraphOf: l1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3564945,					"argumentNames" : [ ]				}			}		},		"nextLink:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTBinaryTreeAbstract>>#leftBinaryTreeElement:value:rightBinaryTreeElement:",				"CTBinaryTreeNodeBalancedRed>>#asBlackNode",				"CTBinaryTreeNodeUnbalanced>>#push:witness:continuation:inSet:",				"CTDfsSCCsWalker>>#push:",				"CTLinkedStoragePool>>#releaseLink:",				"CTLinkedStoragePoolCircular>>#push:",				"CTLinkedStoragePoolCircular>>#initialize",				"CTLinkedStoragePoolCircular>>#pop",				"CTLinkedStoragePoolCircularDoubly>>#pop",				"CTLinkedStoragePoolPolynomial>>#addPolynomial:headLink:",				"CTLinkedStoragePoolQueue>>#push:",				"CTLinkedStoragePoolQueue>>#removeAll",				"CTLinkedStoragePoolStack>>#push:",				"CTLinkedStoragePoolStack>>#removeAll",				"CTLinksValueLinkTest>>#test43214ValueLinks",				"CTLinksValueLinkTest>>#test11ValueLinksLoop",				"CTSkipList>>#add:atHeight:predecessors:",				"CTSkipList>>#add:atHeight:",				"CTSkipList class>>#onSortedCollection:lowerBound:upperBound:atRandom:",				"DoubleLinkedList>>#removeLink:",				"DoubleLinkedList>>#addFirst:",				"DoubleLinkedList>>#add:afterLink:",				"DoubleLinkedList>>#stRemoveCycledLink:",				"DoubleLinkedList>>#removeLast",				"DoubleLinkedList>>#add:beforeLink:",				"DoubleLinkedList>>#addLast:",				"FLBasicSerializationTest>>#testCyclicLinks",				"FLBasicSerializationTest>>#testCyclicLink",				"FLBasicSerializationTest>>#testCyclicLinksInArray",				"FreeTypeCacheLinkedList>>#addFirst:",				"FreeTypeCacheLinkedList>>#add:after:",				"FreeTypeCacheLinkedList>>#removeLast",				"FreeTypeCacheLinkedList>>#moveDown:",				"FreeTypeCacheLinkedList>>#remove:ifAbsent:",				"FreeTypeCacheLinkedList>>#addLast:",				"FreeTypeCacheLinkedList>>#removeFirst",				"FreeTypeCacheLinkedList>>#add:before:",				"FreeTypeCacheTest>>#testFreeTypeCacheEntry",				"Link>>#moveToFront:ifNone:",				"Link>>#reversed:",				"Link>>#nextInteger:",				"Link>>#asLinkPrepend:",				"Link>>#nextFromLink:",				"Link>>#withValueLink:collect:onSizeMismatchDo:",				"Link class>>#nextLink:",				"LinkedList>>#addFirst:",				"LinkedList>>#swap:with:",				"LinkedList>>#removeLast",				"LinkedList>>#add:beforeLink:",				"LinkedList>>#removeFirst",				"LinkedList>>#postCopy",				"LinkedList>>#add:afterLink:",				"LinkedList>>#removeLink:ifAbsent:",				"LinkedList>>#addLast:",				"LinkedList>>#at:putLink:",				"MTVisualizationsTest>>#testMoveToFrontIfNone",				"ProcessList>>#removeFirst",				"ProcessList>>#addFirst:",				"ProcessList>>#postCopy",				"ProcessList>>#add:afterLink:",				"ProcessList>>#removeLink:ifAbsent:",				"ProcessList>>#swap:with:",				"ProcessList>>#add:beforeLink:",				"ProcessList>>#addLast:",				"ProcessList>>#at:putLink:",				"ProcessList>>#removeLast",				"QSystemTally>>#tallyPath:by:",				"QSystemTally>>#tallyMethod:by:",				"RSHorizontalVanDerPloegTreeLayout>>#updateIYL:at:rest:",				"RSTWalkBasedRegularTreeLayout>>#updateIYL:at:rest:",				"RSVanDerPloegTreeLayout>>#updateIYL:at:rest:",				"ValueLink class>>#carBlock:cdrStream:",				"ValueLinkTest>>#testPushingOnValueLinks"			],			"implementors" : {				"LinkedListTest" : {					"sourceCode" : [						"nextLink: aLink",						"",						"\tnextLink := aLink"					],					"body" : [						"nextLink := aLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22194584,					"argumentNames" : [						"aLink"					]				},				"Link" : {					"sourceCode" : [						"nextLink: aLink",						"",						"\t\"Store the argument, aLink, as the link to which the receiver refers. ",						"\tAnswer aLink.\"",						"",						"\t^ nextLink := aLink"					],					"body" : [						"^ nextLink := aLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Store the argument, aLink, as the link to which the receiver refers. ",						"\tAnswer aLink."					],					"hash" : 18857158,					"argumentNames" : [						"aLink"					]				},				"Link class" : {					"sourceCode" : [						"nextLink: aLink",						"",						"\t\"Answer an instance of me referring to the argument, aLink.\"",						"",						"\t^ self new",						"\t\t  nextLink: aLink;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  nextLink: aLink;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"Answer an instance of me referring to the argument, aLink."					],					"hash" : 18857469,					"argumentNames" : [						"aLink"					]				},				"DoubleLink" : {					"sourceCode" : [						"nextLink: anObject",						"",						"\tnextLink := anObject"					],					"body" : [						"nextLink := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19460759,					"argumentNames" : [						"anObject"					]				}			}		},		"yourself:" : {			"senders" : [				"Array2D>>#asShapeMod2",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"ByteArray>>#asShapeBitsDump:",				"CTBinaryTreeAbstract>>#pop",				"CTBinaryTreeAbstract class>>#withArrayedCollection:",				"CTBinaryTreeAbstract class>>#empty",				"CTBinomialHeap>>#asShapeForest",				"CTBinomialHeap class>>#withArrayedCollection:",				"CTCollapsedSccDfsPainter>>#dfsWalk:",				"CTDfsShapeBuilder>>#labelForClass:",				"CTEssentialsOneToManyValueLinksSlotDescriptorsVisitor>>#visitValueLink:",				"CTLinkedStoragePool>>#allocateOrReuseLink",				"CTLinkedStoragePoolCircular>>#pop",				"CTLinkedStoragePoolCircularDoubly>>#pop",				"CTLinkedStoragePoolPolynomial class>>#termAssociations:",				"CTLinkedStoragePoolQueue>>#pop",				"CTLinkedStoragePoolStack>>#pop",				"CTSBRAL>>#asShapeForest",				"CTSccDfsPainter>>#dfsWalk:",				"CTSlotDescriptorsVisitorClassHierarchy>>#visitClass:",				"EssentialsObjectTest>>#testInspectSkewBinaryCanonicalSparse",				"Fraction>>#asShapeFordCircles",				"MTTemperaturePresenter>>#xLabels:yLabels:matrix:",				"ObjectTest>>#testYourselfBlock",				"Point>>#asShapeWrtOrigin",				"PointArray>>#asShapeDots",				"RBProgramNode>>#inspectorRoassalTree",				"TopologicalSortAlgorithm>>#sortOn:sinksValueLink:valueLinksTable:",				"TopologicalSortAlgorithm>>#handleCycleInValueLinksTable:do:"			],			"implementors" : {				"Object" : {					"sourceCode" : [						"yourself: aBlock",						"",						"\t\"I invoke the given block giving myself as argument if it needs to consume me.",						"\t Then I return my self discarding the value returned by the given block.\"",						"",						"\taBlock cull: self"					],					"body" : [						"aBlock cull: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"I invoke the given block giving myself as argument if it needs to consume me.",						"\t Then I return my self discarding the value returned by the given block."					],					"hash" : 18639509,					"argumentNames" : [						"aBlock"					]				}			}		}	}}
{	"classes" : {		"KMKeyCombinationSequence" : {			"hash" : 573184,			"definition" : "KMKeyCombination subclass: #KMKeyCombinationSequence\r\tinstanceVariableNames: 'shortcuts'\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-KeyCombinations'",			"comment" : [				"I represent a sequence of key combinations.",				"",				"In order to have a match between me and a user's key presses, all user events must match all of my inner shortcuts in the same exact order.",				"",				"To create a sequence of key combinations use the #, message. Like for example:",				"",				"$a command , $b shift"			],			"category" : "Keymapping-KeyCombinations"		},		"CoASTNodeFetcherHeuristic" : {			"hash" : 5462528,			"definition" : "Object subclass: #CoASTNodeFetcherHeuristic\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Heuristics'",			"comment" : [				"I implement a fetcher heuristic for an AST node.",				"My responsibility is to build a fetcher for a given node in a given context.",				"I am implemented as a chain of responsibility: I treat the build request if possible, otherwise I forward the request to the next heuristic.",				"",				"My main method #fetcherFor:inContext: is a template method.",				"My subclasses should redefine:",				" - #appliesForNode:inContext: returning a boolean if the heuristic applies for context/node",				" - #buildFetcherFor:inContext: returning the effective heuristic built"			],			"category" : "HeuristicCompletion-Model-Heuristics"		},		"SpBoxLayout" : {			"hash" : 2423808,			"definition" : "SpDirectionableLayout subclass: #SpBoxLayout\r\tuses: SpTAlignable\r\tinstanceVariableNames: 'spacing borderWidth homogeneous'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Layout-Box'",			"comment" : [				"I'm a layout that will arrange presenters in a box, vertically (top to bottom) or horizontally (left to right).",				"Elements can be added at the begining or at the end of the box (see `SpBoxLayout>>#add:` and `SpBoxLayout>>#addLast:` method families).",				"",				"## Discussion",				"",				"The box layout is the main layout in Spec, because its versatility and ease to use. While one may think its functionality is limited, the fact that it can be composed with other types of layouts or other instances of itself (other boxes), will let users do almost everything they need.",				"The basic usage is, however, very simple: ",				"",				"```Smalltalk",				"SpBoxLayout newTopToBottom",				"\tadd: aPresenter;",				"\tadd: otherPresenter;",				"\tyourself.",				"```",				"",				"This will arrange `aPresenter` and `otherPresenter` vertically, assigning to each presenter as much `height` as they can receive (usually 50% of the box).  ",				"Of course, being able to do _just that_ would be very limiting, but then is where layout properties start to be important.",				"",				"### The expand property (`SpBoxLayout>>#add:expand:`)",				"",				"With the previous example, let's define a some real presenters: ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: presenter newTextInput;",				"\tadd: presenter newText;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"What's happened when we opened it? Well, the box layout was filled with an input text and a text area, but the height assigned to the first presenter is not what we would have expected, since even if text input is smaller, area height assigned is still half.",				"The property expand fixes this problem, by telling the layout not to assign more height than what is explicitly needed by the contained presenter: ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: presenter newTextInput expand: false;",				"\tadd: presenter newText;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"Now the presenter will behave as one would expect (This code is in `SpBoxLayout class>>#exampleExpand`).",				"",				"### Adding presenters **last**.",				"",				"Now, consider this problem: You want to add something *at the end* of your presenter (for example, you want to add a button, making a dialog): ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: 'Enter text' expand: false;",				"\tadd: presenter newTextInput expand: false;",				"\tadd: (presenter newButton label: 'Ok') expand: false;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"But you want that button to be shown at the end. This is why we use the `addLast:` method, who will instruct the layout to add this presenter at the end.",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: 'Enter text' expand: false;",				"\tadd: presenter newTextInput expand: false;",				"\taddLast: (presenter newButton label: 'Ok') expand: false;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"That makes the presenter work as expected  (This code is in SpBoxLayout class>>#exampleAddLast).",				"",				"### Composing layouts",				"",				"The real power of a layout comes when you understand they can be composed (with other instances of themselves or any other kind, children of `SpExecutableLayout`).",				"For example, taking the previous example, let's say you want to add two buttons (Ok, Cancel), aligned horizontaly. To accomplish that, you add a new layout with the buttons: ",				"",				"```Smalltalk",				"| presenter |",				"",				"presenter := SpPresenter new.",				"presenter layout: (SpBoxLayout newTopToBottom",				"\tadd: 'Enter text' expand: false;",				"\tadd: presenter newTextInput expand: false;",				"\taddLast: (SpBoxLayout newLeftToRight",				"\t\t\taddLast: (presenter newButton label: 'Ok') expand: false;",				"\t\t\taddLast: (presenter newButton label: 'Cancel') expand: false;",				"\t\t\tyourself)",				"\t\texpand: false;",				"\tyourself).",				"\t\t",				"presenter openWithSpec",				"```",				"",				"Now, the presenter will show buttons at bottom-right corner (This code is in `SpBoxLayout class>>#exampleComposite`)."			],			"category" : "Spec2-Layout-Box"		},		"RubShoutStylerDecorator" : {			"hash" : 4017664,			"definition" : "RubParagraphDecorator subclass: #RubShoutStylerDecorator\r\tinstanceVariableNames: 'styler text replaceStart replaceStop'\r\tclassVariableNames: 'MinTextSizeForStylingInBackground'\r\tpackage: 'Rubric-Styling'",			"comment" : [				"I am the shout styler decorator for a text area, I highlight the text "			],			"category" : "Rubric-Styling"		},		"Collection" : {			"hash" : 850688,			"definition" : "Object subclass: #Collection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am the abstract superclass of all classes that represent a group of elements.",				"",				"To get more information you read the explanation on Pharo by Example book in the next link: [Pharo by Example - Collections](https://github.com/SquareBracketAssociates/UpdatedPharoByExample/blob/pharo5/Collections/Collections.pillar).",				"",				"Or if you want to read in PDF format, download it from [Pharo by Example](https://github.com/SquareBracketAssociates/PharoByExample80/releases/tag/continuous) and look for Chapter 13: Collections. "			],			"category" : "Collections-Abstract-Base"		},		"CTLinkedStoragePoolCircular" : {			"hash" : 2649344,			"definition" : "CTLinkedStoragePool subclass: #CTLinkedStoragePoolCircular\r\tinstanceVariableNames: 'head'\r\tclassVariableNames: ''\r\tpackage: 'Containers-LinkedStoragePool'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\thead:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-LinkedStoragePool"		},		"MCDataStream" : {			"hash" : 1355264,			"definition" : "Stream subclass: #MCDataStream\r\tinstanceVariableNames: 'byteStream topCall basePos'\r\tclassVariableNames: 'ReadSelectors TypeMap WriteSelectors'\r\tpackage: 'Monticello-Storing'",			"comment" : [				"This is the save-to-disk facility. A DataStream can store one or more objects in a persistent form.",				"",				"To handle objects with sharing and cycles, you must use a",				"ReferenceStream instead of a DataStream.  (Or SmartRefStream.)  ReferenceStream is typically",				"faster and produces smaller files because it doesn't repeatedly write the same Symbols.",				"",				"Here is the way to use DataStream and ReferenceStream:",				"\trr := ReferenceStream fileNamed: 'test.obj'.",				"\trr nextPut: <your object>.",				"\trr close.",				"",				"To get it back:",				"\trr := ReferenceStream fileNamed: 'test.obj'.",				"\t<your object> := rr next.",				"\trr close.",				"",				"Each object to be stored has two opportunities to control what gets stored.  On the high level, objectToStoreOnDataStream allows you to substitute another object on the way out.  The low level hook is storeDataOn:. The read-in counterparts to these messages are comeFullyUpOnReload and (class) readDataFrom:size:. See these methods for more information about externalizing and internalizing.",				"",				"NOTE: A DataStream should be treated as a write-stream for writing.  It is a read-stream for reading.  It is not a ReadWriteStream."			],			"category" : "Monticello-Storing"		},		"MCDependencySorter" : {			"hash" : 271616,			"definition" : "Object subclass: #MCDependencySorter\r\tinstanceVariableNames: 'required provided orderedItems'\r\tclassVariableNames: ''\r\tpackage: 'Monticello-Loading'",			"comment" : [				"A MCDependencySorter computes the dependencies to a set of entities."			],			"category" : "Monticello-Loading"		},		"MetacelloPackagesSpec" : {			"hash" : 1488128,			"definition" : "MetacelloMemberListSpec subclass: #MetacelloPackagesSpec\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Specs'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-Core-Specs"		},		"ValueLink" : {			"hash" : 1172224,			"definition" : "Link subclass: #ValueLink\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"A ValueLink is a Link containing a Value.",				"Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.",				"",				"",				"value - The object this link points to."			],			"category" : "Collections-Support-Links"		},		"WeakFinalizerItem" : {			"hash" : 1177344,			"definition" : "Object weakSubclass: #WeakFinalizerItem\r\tinstanceVariableNames: 'list next executor'\r\tclassVariableNames: ''\r\tpackage: 'System-Finalization-Base'",			"comment" : [				"My instances is used by weak registry to hold a single weak reference",				"and executor(s).",				"",				"Once object, referenced weakly by my instance become garbage, a weak registry triggers its execution",				"by sending #finalizeValues to my instance.",				"",				"Note, that a new VM finalization scheme does not implies to use this particular class",				"in order to implement finalization scheme. VM refers only to WeakFinalizationList class. ",				"",				"In this way, my class and its implementation can serve as an example for implementing various finalization actions, which may differ from this one, provided by default for use by weak registry.",				"",				"Once initialized, my instance should:",				" - point to particular list (an instance of WeakFinalizationList),",				" - next should be nil",				" - executor or multiple executors initialized",				" - weak reference slot should point to some object of interest",				"",				"At the moment, when object, referenced weakly, become garbage, VM checks if its fist instance variable is an instance of WeakFinalizationList.",				"If it so, then it adds a given object to this list, and also links the tail of list through 'next' instance variable. ",				"",				"So, as a result of garbage collection, a list will contain all objects, which had weak references to garbage collected objects. ",				"It is a responsibility of application to manage the instances of WeakFinalizationList's , as well as clear this list before the next garbage collection.",				"As a consequence of that you can:",				" - use multiple different lists and manage them differently in order to react differently when some objects became garbage",				" - you are not obliged to handle/clear the list(s) immediately after GC. You can clean up them periodically.",				" - you can implement own kind of weak referencing object(s), which could use same finalization, provided by newer VMs.",				"",				"VM requires only that an object with weak reference having at least two instance variables,",				"and its first instance variable points to instance of WeakFinalizationList. Everything else is optional."			],			"category" : "System-Finalization-Base"		},		"LinkedListTest" : {			"hash" : 3814656,			"definition" : "TestCase subclass: #LinkedListTest\r\tuses: TAddTest - {#testTAddWithOccurrences. #testTAddTwice. #testTWriteTwice} + TEmptyTest + TIterateTest + TIterateSequencedReadableTest + TPrintTest + TAsStringCommaAndDelimiterSequenceableTest + TIndexAccess + TSequencedElementAccessTest + TSubCollectionAccess + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + (TCopyPartOfSequenceable - {#testCopyEmptyMethod}) + (TCopySequenceableSameContents - {#testSortBy. #integerCollection}) + TCopySequenceableWithOrWithoutSpecificElements + TCopyTest + (TCopySequenceableWithReplacement - {#testCopyReplaceAllWithManyOccurrence. #collectionWith2TimeSubcollection}) + TBeginsEndsWith + TRemoveTest + TSetArithmetic + TIncludesWithIdentityCheckTest + TStructuralEqualityTest + TOccurrencesTest + TSortTest\r\tinstanceVariableNames: 'nextLink n list link1 link2 link3 link4 nonEmpty otherList link collectionWithoutNil nonEmpty1Element collectionWithoutEqualElements elementNotIn elementIn collection5Elements collectResult unsortedCollection sortedCollection'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Tests-Base'",			"comment" : [				"A set of test cases which thoroughly test functionality of the LinkedList class."			],			"category" : "Collections-Sequenceable-Tests-Base"		},		"Path" : {			"hash" : 833280,			"definition" : "Object variableSubclass: #Path\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'FileSystem-Path-Base'",			"comment" : [				"I'm a private and abstract filesystem path, independent of the string representation used to describe paths on a specific filesystem. I provide methods for navigating the filesystem hierarchy and working with absolute and relative paths. I only refer to a concrete file or directory with regard to a specific filesystem. Normally users should not use me directly. ",				"",				"API instance creation:",				"",				"- #from: parses the supplied string using the default delimeter",				"- #from:delimiter: parses the supplied string using the supplied delimiter.",				"- #/ creates an absolute path from the supplied string",				"- #* creates a relative path from the supplied string",				"",				"API path manipulation:",				"",				"- #/ adds the supplied string to the receiver"			],			"category" : "FileSystem-Path-Base"		},		"StIterator" : {			"hash" : 5639680,			"definition" : "Object subclass: #StIterator\r\tinstanceVariableNames: 'onReset'\r\tclassVariableNames: ''\r\tpackage: 'NewTools-Spotter-Processors-Iterators'",			"comment" : [				"I represent an abstract Iterator.",				"My subclasses should implement #next, #doReset, and #atEnd.",				"",				"I implement some construction messages to ease the construction of chains of iterators.",				"",				"#, allows to create sequence of iterators, the results are from the first one, then from the second one and so on. ",				"",				"#asBeginsWithFilter",				"Creates an iterator that allows to filter by a string, comparing with beginsWith:, with an starting filter of ''.",				"#beginsWithFilter: aString",				"Create an iterator that allows to filter by a string, comparing with beginsWith:, with an starting filter of aString.",				"",				"#asSubStringFilter",				"Creates an iterator that allows to filter by a string, comparing with substring:, with an starting filter of ''.",				"",				"#substringFilter: aString",				"Create an iterator that allows to filter by a string, comparing with substring:, with an starting filter of aString.",				"",				"#asWithoutDuplicates ",				"Creates an itearator that returns no duplicates."			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"CoStatisticsHeuristicBuilder" : {			"hash" : 5484544,			"definition" : "CoHeuristicBuilder subclass: #CoStatisticsHeuristicBuilder\r\tinstanceVariableNames: 'statistics'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Statistics'",			"comment" : [				"I am an heuristic builder that builds statistic-enabled fetchers.",				"I wrap each of my heuristics with a CoStatisticsHeuristicWrapper, and then compose these wrappers into a chain of responsibility.",				"For example, given a list of heuristics:",				"",				"CoHeuristicBuilder new",				"\tadd: CoSelfMessageHeuristic new;",				"\tadd: CoSuperMessageHeuristic new;",				"\tyourself.",				"",				"I create the following chain:",				"",				"CoStatisticsHeuristicWrapper -next-> CoStatisticsHeuristicWrapper",				"           |                                     |",				"        decoree                               decoree",				"           |                                     |",				"           v                                     v",				"   CoSelfMessageHeuristic             CoSuperMessageHeuristic",				"\t",				"I am used also as a hook, that can be redefined in subclasses and build heuristics differently."			],			"category" : "HeuristicCompletion-Model-Statistics"		},		"IceAbstractNode" : {			"hash" : 2272512,			"definition" : "Object subclass: #IceAbstractNode\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Changes'",			"comment" : [				"My subclasses implement a tree used for diffing and merging."			],			"category" : "Iceberg-Changes"		},		"AbstractAdapter" : {			"hash" : 876032,			"definition" : "Model subclass: #AbstractAdapter\r\tinstanceVariableNames: 'model widget selector'\r\tclassVariableNames: ''\r\tpackage: 'Spec-Core-Base'",			"comment" : [				"I am an abstract class.",				"",				"I'm the superclass of all the adapters used to link a Spec widget presenter to a framework specific widget (by example ButtonPresenter <-> PluggableButtonMorph).",				"",				"The current implementation installs my instances as dependent of the presenter and my changed: method propagates updates to the widget I create (via my buildWidget method). This implementation is not optimal. ",				"",				"In the future my instances should just be responsible to create a widget and install all the communication between the presenter and the widget. I should not be a middle man. "			],			"category" : "Spec-Core-Base"		},		"RPackageWithDoTest" : {			"hash" : 3334144,			"definition" : "TestCase subclass: #RPackageWithDoTest\r\tinstanceVariableNames: 'x'\r\tclassVariableNames: ''\r\tpackage: 'RPackage-Tests'",			"comment" : [				"SUnit tests for RPackage"			],			"category" : "RPackage-Tests"		},		"MetacelloSemanticVersionNumber" : {			"hash" : 1515776,			"definition" : "Magnitude subclass: #MetacelloSemanticVersionNumber\r\tinstanceVariableNames: 'normalVersion preReleaseVersion buildVersion'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Model'",			"comment" : [				"MetacelloSemanticVersionNumber conforms to version 2.0.0-rc.1 of  [Semantic Versioning 2.0.0-rc.1](http://semver.org/)",				"",				"The most important thing that you need to know is that: ",				"**A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers.**",				"",				"**Semantic Versioning Specification** extracted from [Semantic versioning 2.0.0-rc.1](https://github.com/mojombo/semver/blob/3c7f2e8df747ea0ca15208fdfc90e3275240184f/semver.md):",				"",				"Semantic Versioning Specification (SemVer)",				"------------------------------------------",				"",				"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",",				"\"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be",				"interpreted as described in RFC 2119.",				"",				"1. Software using Semantic Versioning MUST declare a public API. This API",				"could be declared in the code itself or exist strictly in documentation.",				"However it is done, it should be precise and comprehensive.",				"",				"1. A normal version number MUST take the form X.Y.Z where X, Y, and Z are",				"non-negative integers. X is the major version, Y is the minor version, and Z",				"is the patch version. Each element MUST increase numerically by increments of",				"one. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.",				"",				"1. Once a versioned package has been released, the contents of that version",				"MUST NOT be modified. Any modifications must be released as a new version.",				"",				"1. Major version zero (0.y.z) is for initial development. Anything may change",				"at any time. The public API should not be considered stable.",				"",				"1. Version 1.0.0 defines the public API. The way in which the version number",				"is incremented after this release is dependent on this public API and how it",				"changes.",				"",				"1. Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards",				"compatible bug fixes are introduced. A bug fix is defined as an internal",				"change that fixes incorrect behavior.",				"",				"1. Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards",				"compatible functionality is introduced to the public API. It MUST be",				"incremented if any public API functionality is marked as deprecated. It MAY be",				"incremented if substantial new functionality or improvements are introduced",				"within the private code. It MAY include patch level changes. Patch version",				"MUST be reset to 0 when minor version is incremented.",				"",				"1. Major version X (X.y.z | X > 0) MUST be incremented if any backwards",				"incompatible changes are introduced to the public API. It MAY include minor",				"and patch level changes. Patch and minor version MUST be reset to 0 when major",				"version is incremented.",				"",				"1. A pre-release version MAY be denoted by appending a hyphen and a series of",				"dot separated identifiers immediately following the patch version. Identifiers",				"MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-].",				"Pre-release versions satisfy but have a lower precedence than the associated",				"normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7,",				"1.0.0-x.7.z.92.",				"",				"1. A build version MAY be denoted by appending a plus sign and a series of dot",				"separated identifiers immediately following the patch version or pre-release",				"version. Identifiers MUST be comprised of only ASCII alphanumerics and dash",				"[0-9A-Za-z-]. Build versions satisfy and have a higher precedence than the",				"associated normal version. Examples: 1.0.0+build.1, 1.3.7+build.11.e0f985a.",				"",				"1. Precedence MUST be calculated by separating the version into major, minor,",				"patch, pre-release, and build identifiers in that order. Major, minor, and",				"patch versions are always compared numerically. Pre-release and build version",				"precedence MUST be determined by comparing each dot separated identifier as",				"follows: identifiers consisting of only digits are compared numerically and",				"identifiers with letters or dashes are compared lexically in ASCII sort order.",				"Numeric identifiers always have lower precedence than non-numeric identifiers.",				"Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-beta.2 < 1.0.0-beta.11 <",				"1.0.0-rc.1 < 1.0.0-rc.1+build.1 < 1.0.0 < 1.0.0+0.3.7 < 1.3.7+build <",				"1.3.7+build.2.b8f12d7 < 1.3.7+build.11.e0f985a.",				"",				"About",				"-----",				"",				"The Semantic Versioning specification is authored by [Tom",				"Preston-Werner](http://tom.preston-werner.com), inventor of Gravatars and",				"cofounder of GitHub.",				"",				"If you'd like to leave feedback, please [open an issue on",				"GitHub](https://github.com/mojombo/semver/issues).",				"",				"",				"License",				"-------",				"",				"Creative Commons - CC BY 3.0",				"http://creativecommons.org/licenses/by/3.0/"			],			"category" : "Metacello-Core-Model"		},		"ZnCookieJar" : {			"hash" : 1408768,			"definition" : "Object subclass: #ZnCookieJar\r\tinstanceVariableNames: 'cookies'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Support'",			"comment" : [				"I represent a container for storing HTTP Cookies for a client session.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Support"		},		"AthensPathSegment" : {			"hash" : 3168256,			"definition" : "Object subclass: #AthensPathSegment\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Athens-Core-Paths'",			"comment" : [				"The path segment is path building block.",				"Path is formed from list of connected path segments. At building stage, there is no container nor separately defined \"path\" object, just a linked list of segments.",				"Later the segments are accumulated in backend-specific path object, and the way how it is organized may vary.",				"",				"My (sub)instances usually are not created directly by user, but instead by instance",				"of AthensPathBuilder.",				"Therefore, all my subclasses are considered private and implementation detail."			],			"category" : "Athens-Core-Paths"		},		"SpMorphicBoxAdapter" : {			"hash" : 2884096,			"definition" : "SpMorphicLayoutAdapter subclass: #SpMorphicBoxAdapter\r\tinstanceVariableNames: 'startPanel endPanel'\r\tclassVariableNames: 'Experimental'\r\tpackage: 'Spec2-Adapters-Morphic-Layout'",			"comment" : [				"I'm an adapter for Box Layouts.",				"A paned layout will split (horizontally or vertically) panels (in fixed yet proportional spaces)."			],			"category" : "Spec2-Adapters-Morphic-Layout"		},		"RSGroup" : {			"hash" : 5808640,			"definition" : "OrderedCollection subclass: #RSGroup\r\tinstanceVariableNames: 'shapeFromModelCache'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Core'",			"comment" : [				"<keyClass>",				"A `RSGroup` represents a collection of Roassal shapes. As soon as one assume a collection contains graphical elements, then it is convenient to be able to perform some operations (e.g., getting the encompassing rectangle of the elements, transforming a collection into a composite shape). `RSGroup` is a subclass of `OrderedCollection`. A `RSGroup` is not designed to contain other things than Roassal shapes. ",				"",				"*Responsibility*: handle a collection of graphical shapes in an intuitive and efficient way. A group is also responsible to retrieve shapes from a given model object.",				"",				"*Collaborators*: `RSGroup` is a central class in Roassal. Shapes are held in instance of `RSGroup`.",				"",				"*Variables*:",				"- `shapeFromModelCache`: a group of shapes must remember the model to speed up the retreival of shapes from a given object model.",				"",				"",				"*Example*:",				"```Smalltalk",				"shapes := (1 to: 20) collect: [ :value | ",				"\t| g |",				"\tg := RSGroup new.",				"\tg add: (RSEllipse new size: 30 atRandom).",				"\tg add: (RSLabel new text: value).",				"\tg asShape ].",				"",				"c := RSCanvas new.",				"c addAll: shapes.",				"RSFlowLayout on: shapes.",				"c @ RSCanvasController.",				"```",				"",				"Layout may be applied on a group",				"```Smalltalk",				"shapes := (1 to: 20) collect: [ :value | ",				"\t| g |",				"\tg := RSGroup new.",				"\tg add: (RSLabel new text: value).",				"\tg add: (RSEllipse new size: 30 atRandom).",				"\tRSVerticalLineLayout new center; gapSize: 0; on: g.",				"\tg asShape ].",				"",				"c := RSCanvas new.",				"c addAll: shapes.",				"RSFlowLayout on: shapes.",				"c @ RSCanvasController.",				"```",				"",				"```Smalltalk",				"g := RSGroup new.",				"g add: (RSBox new model: 'hello').",				"g add: (RSEllipse new model: 'world').",				"g shapeFromModel: 'hello' \"=> a RSBox(hello))\"",				"```"			],			"category" : "Roassal3-Core"		},		"OCLiteralSet" : {			"hash" : 1243648,			"definition" : "Set subclass: #OCLiteralSet\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-Extras'",			"comment" : [				"Holds a unique set of literals.  Literal objects are equal if they are #= plus they are the same class.  This set uses this rule for finding elements.",				"",				"Example:",				"\tSet new add: 'anthony'; add: #anthony; size  \"= 1\"",				"\tLiteralSet new add: 'anthony'; add: #anthony; size  \"= 2\""			],			"category" : "OpalCompiler-Core-Extras"		},		"SpButtonBarPresenter" : {			"hash" : 2497536,			"definition" : "SpAbstractWidgetPresenter subclass: #SpButtonBarPresenter\r\tinstanceVariableNames: 'items placeAtStart'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Widgets'",			"comment" : [				"A full width bar for arranging buttons.",				"A button bar can be used to provide a consistent layout of buttons throughout your application. "			],			"category" : "Spec2-Core-Widgets"		},		"PositionableStream" : {			"hash" : 1022208,			"definition" : "Stream subclass: #PositionableStream\r\tinstanceVariableNames: 'collection position readLimit'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I represent an accessor for a sequence of objects (a collection) that are externally named by indices so that the point of access can be repositioned. I am abstract in that I do not implement the messages next and nextPut: which are inherited from my superclass Stream."			],			"category" : "Collections-Streams-Base"		},		"OrderedDictionary" : {			"hash" : 1081344,			"definition" : "Collection subclass: #OrderedDictionary\r\tinstanceVariableNames: 'dictionary orderedKeys'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I am a collection that act as a Dictionary except that I use key insertion order when enumerating, printing, or returing collections of keys/values/associations, but not when testing for equality (but it does not matters in this case).",				"I will assume that you know the Dictionary class in this comment.",				"",				"I work mainly as a Dictionary except that I also store the keys in an Array that keeps the order of elements. ",				"I should be used ONLY if you need to keep the keys ordered. Else you should use a Dictionary that is faster and keep less values into memory. (I duplicate the keys).",				"Insertion, update, and inclusion testing have O(1) complexity while removing has O(n) worst-case.",				"",				"### Public API and Key Messages",				"",				"- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue / #at: aKey ifPresent: aBlock ifAbsent: aBlock\t\tallow to add an element.  ",				"- #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock \t\tallow to access my values.",				"- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: \t\tallow to iterate on me effectively.",				"- #keyAtIndex: anIndex / KeyAtIndex: anIndex ifAbsent: aBlock \t\tallow to acess my keys from an index.",				"",				"### Examples",				"\t\"For basic examples see Dictionary comment.\"",				"```\t",				"\tordDic := (Dictionary with: 1 -> $a with: 2 -> $b) asOrderedDictionary.",				"\tordDic.   \t\t\"returns:  an OrderedDictionary(1->$a 2->$b)\"",				"\tordDic keyAtIndex: 2.\t\t\"returns:  2\"",				"```",				"\t",				"### Internal Representation and Key Implementation Points.",				"Instance Variables",				"-\tdictionary:\t\t\t<Dictionary>\t\tA dictionary where I store my keys and values.",				"-\torderedKeys:\t\t<Array>\t\t\tAn ordered collection where I store my keys to maintain the order.",				"",				"I base my implementation on a Dictionary and when I need to execute an action where the order of the values is important I use the keys in my ordered collection."			],			"category" : "Collections-Sequenceable-Ordered"		},		"SDL_PixelFormat" : {			"hash" : 4323072,			"definition" : "SDL2Structure subclass: #SDL_PixelFormat\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'OFFSET_ALOSS OFFSET_AMASK OFFSET_ASHIFT OFFSET_BITSPERPIXEL OFFSET_BLOSS OFFSET_BMASK OFFSET_BSHIFT OFFSET_BYTESPERPIXEL OFFSET_FORMAT OFFSET_GLOSS OFFSET_GMASK OFFSET_GSHIFT OFFSET_NEXT OFFSET_PAD1 OFFSET_PAD2 OFFSET_PALETTE OFFSET_REFCOUNT OFFSET_RLOSS OFFSET_RMASK OFFSET_RSHIFT'\r\tpackage: 'OSWindow-SDL2-Bindings'",			"comment" : [				"SDL2 library structure"			],			"category" : "OSWindow-SDL2-Bindings"		},		"SpecWrapperTableLayout" : {			"hash" : 1563392,			"definition" : "SpecTableLayout subclass: #SpecWrapperTableLayout\r\tinstanceVariableNames: 'elementAdded'\r\tclassVariableNames: ''\r\tpackage: 'Spec-Layout-Layouts'",			"comment" : [				"A SpecWrapperTableLayout is a variant of SpecTableLayout that is a  wrapper around a single element.",				"It is used to set hResizing, vResizing, and/or some other properties affecting layout."			],			"category" : "Spec-Layout-Layouts"		},		"SystemProgressItemMorph" : {			"hash" : 1837824,			"definition" : "Morph subclass: #SystemProgressItemMorph\r\tinstanceVariableNames: 'bar labelMorph lock result hasResult startValue endValue lastRefresh'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-ProgressBar'",			"comment" : [				"A SystemProgressItemMorph is 'bar' in a SystemProgressMorph. "			],			"category" : "Morphic-Base-ProgressBar"		},		"Bag" : {			"hash" : 864256,			"definition" : "Collection subclass: #Bag\r\tinstanceVariableNames: 'contents'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Bags'",			"comment" : [				"I represent an unordered collection of possibly duplicate elements.",				"\t",				"I store these elements in a dictionary, tallying up occurrences of equal objects. Because I store an occurrence only once, my clients should beware that objects they store will not necessarily be retrieved such that == is true. If the client cares, a subclass of me should be created."			],			"category" : "Collections-Unordered-Bags"		},		"SettingNodeBuilder" : {			"hash" : 625408,			"definition" : "Object subclass: #SettingNodeBuilder\r\tinstanceVariableNames: 'node builder'\r\tclassVariableNames: ''\r\tpackage: 'System-Settings-Browser'",			"comment" : [				"Used to build nodes from the settings framework"			],			"category" : "System-Settings-Browser"		},		"ClapValidationReport" : {			"hash" : 406272,			"definition" : "Object subclass: #ClapValidationReport\r\tinstanceVariableNames: 'problems'\r\tclassVariableNames: ''\r\tpackage: 'Clap-Core-Validation'",			"comment" : [				"I aggregate multiple validation diagnostics together."			],			"category" : "Clap-Core-Validation"		},		"SubscriptionRegistry" : {			"hash" : 828416,			"definition" : "Object subclass: #SubscriptionRegistry\r\tinstanceVariableNames: 'subscriptions monitor'\r\tclassVariableNames: ''\r\tpackage: 'Announcements-Core-Subscription'",			"comment" : [				"The subscription registry is a threadsafe storage for the subscriptions to an Announcer.",				"",				"In Pharo, subscriptionsFor: protocol is not implemented.",				"This is because Announcer does not provide public access to its registery for encapsulation reasons.",				"(We do not want access to the announcer from action blocks to break encapsulation to other subscribers)"			],			"category" : "Announcements-Core-Subscription"		},		"Dictionary" : {			"hash" : 802048,			"definition" : "HashedCollection subclass: #Dictionary\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Dictionaries'",			"comment" : [				"I am a collection of elements that associate a key object with a value object.",				"",				"## Description",				"",				"",				"I  can be viewed from one of two perspectives: a set of associations, or a container of values that are externally named where the name can be any object that responds to #=. The external name is referred to as the key.  I inherit many operations from Set.",				"I use the #= method to locate a key. If you want a collection that use the #== method (same pointers) you can use an IdentityDictionary.",				"",				"I'm used when we need a collection of objects which I can access with a key. For example if you associate some words with a definition, the word will be the key and the definition will be the value. Both of them can be any kind of objects.",				"",				"Internally I use Associations. The Association class can help to use me. (See examples lower)",				"",				"## Public API and Key Messages",				"",				"### Initializing and Adding",				"",				"A `Dictionary` can be created with values using the `Collection class>>#withAll:` class selector which will add the ",				"values of a collection as the values of the `Dictionary` using numeric keys.",				"",				"```",				"d := Dictionary withAll: #(1 2 3 4 5)  \"a Dictionary(1->1, 2->2, 3->3, 4->4, 5->5)\"",				"```",				"",				"Alternatively, both the keys and values can be supplied using the `Dictionary class>>#newFromKeys:andValues:` selector,",				"which requires two collections of the same length, or the `Dictionary class>>#newFromPairs:` selector, which ",				"uses every odd numbered index as a key and even numbered index as a value for the dictionary.",				"",				"Once a `Dictionary` has been created, the basic method for adding new keys is the `Dictionary>>#at:put:` selector.",				"",				"```",				"d at: 99 put: 89  \"a Dictionary(1->1, 2->2, 3->3, 4->4, 5->5, 99->89)\"",				"```",				"",				"### Accessing ",				"",				"Get the value of a key using the `Dictionary>>#at:` selector.",				"",				"```",				"d := Dictionary withAll: #(5 4 3 2 1)  \"a Dictionary(1->5, 2->4, 3->3, 4->2, 5->1)\"",				"d at: 1  \"5\"",				"```",				"However accessing a key that does not exist will result in an error. In which case use",				"the selectors `Dictionary>>#at:ifAbsent:`",				"",				"```",				"d at: 100 ifAbsent: [ \"execute code in the block if the key is not found\" ]",				"```",				"",				"A common operation is to add in a value for a key if it is absent using the `Dictionary>>#at:ifAbsentPut:` selector. Note that unlike the regular `Dictionary>>#at:put:` selector, this message uses the value of a block. ",				"",				"```",				"d at: 100 ifAbsentPut: [ 100 ]",				"```",				"",				"Alternatively, if you want to change the value of a key use `Dictionary>>#at:update:` selector,",				"which uses the value of a block.",				"",				"```",				"d at: 5 update: [ 12 ]",				"\"a Dictionary(1->5,2->4,3->3,4->2,5->12,100->100)\"",				"```",				"",				"### Iterating / Enumerating",				"",				"It's possible to iterate over all of the values, keys, and associations of a `Dictionary` using ",				"the `Dictionary>>#valuesDo:`, `Dictionary>>#keysDo:`, and `Dictionary>>#associationsDo:` selectors. These selectors evaluate a block for",				"each of the items",				"",				"```",				"\"do: is an alias for valuesDo:\"",				"d valuesDo: [ :eachValue | \"do something with the value\" ].",				"d keysDo: [ :eachKey | \"do something with the key\" ].",				"d associationsDo: [ :eachAssociation | \"do something with a key-value pair\" ]",				"```",				"",				"The `Dictionary>>#select:` selector is also implemented to return a subset of the `Dictionary` where the",				"block evaluates to true using the value.",				"",				"```",				"d select: [:each | each > 5]  \"a Dictionary(5->12,100->100)\"",				"``` ",				"\t\t",				"### Removing",				"",				"Use the `Dictionary>>#removeKey:` selector to remove the association from the `Dictionary`, which will cause",				"an error if the key is not found. Use the `Dictionary>>#removeKey:ifAbsent:` selector to control this behavior.",				"",				"```",				"d removeKey: 5.",				"d removeKey: 1200.  \"Error\"",				"d removeKey: 1200 ifAbsent: [ \"do something\" ].",				"```",				"",				"### Testing",				"",				"Check if a value or key is present in a `Dictionary` using the `Dictionary>>#includes:` or `Dictionary>>#includesKey:` selectors.",				"",				"```",				"\"Look if 12 is the value of any key in the Dictionary\"",				"d includes: 12.",				"",				"\"Look if 100 is a key in the Dictionary\"",				"d includesKey: 100.",				"```",				"## Examples ",				"",				"",				"To create a dictionary with indexes as key: ",				"",				"```",				"\tDictionary withAll: #(7 3 1 3)   \t\t\"returns:  a Dictionary(1->7 2->3 3->1 4->3 \"",				"```",				"",				"To use Objects as key (here symbols): ",				"",				"```",				"\tcolors := Dictionary new ",				"\t\t\t\tat: #yellow put: Color yellow; ",				"\t\t\t\tat: #blue put: Color blue;",				"\t\t\t\tat: #red put: Color red;",				"\t\t\t\tyourself.",				"\t\t\t\t",				"\tcolors at: #yellow. \t\"returns:  Color yellow\"",				"\tcolors keys          \"returns: a Set(#blue #yellow #red)\"",				"\tcolors values       \"returns:  {Color blue. Color yellow. Color red}\" ",				"```",				"",				"You can also directly use Associations: ",				"",				"```",				"\tcolors := Dictionary with: #yellow -> Color yellow with: #blue -> Color blue.",				"\tcolors add: #red -> Color red.",				"\t",				"\tcolors associations  \t\"returns: {#yellow->Color yellow. #red->Color red. #blue->Color blue}\"",				"```",				"\t",				"Here some more examples: ",				"",				"```",				"\tcolors := Dictionary newFrom: { #blue->Color blue . #red->Color red . #yellow->Color yellow }. ",				"\tcolors removeKey: #blue. ",				"\tcolors at: #red ifPresent: [ :color |  color darker] ifAbsent: [ Error signal: 'The red color should be here.' ] .\t\t\"return: (Color r: 0.92 g: 0.0 b: 0.0 alpha: 1.0)\"",				"\tcolors associations \t\t \"{#yellow->Color yellow. #red->Color red}\"",				"```",				"",				"## Internal Representation and Key Implementation Points.",				"",				"I am just a collection of associations. If I need my keys I will just return the keys of my associations. Idem for my values.",				"I use the #= method in order to manipulate my keys. I cannot have two associations that are equals with the #= method."			],			"category" : "Collections-Unordered-Dictionaries"		},		"CollectionValueHolder" : {			"hash" : 1912576,			"definition" : "NewValueHolder subclass: #CollectionValueHolder\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'NewValueHolder-Core-Base'",			"comment" : [				"I am designed specifically for collections."			],			"category" : "NewValueHolder-Core-Base"		},		"SpAbstractAdapter" : {			"hash" : 2484736,			"definition" : "Model subclass: #SpAbstractAdapter\r\tinstanceVariableNames: 'model widget selector owner unsubscribed'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Base'",			"comment" : [				"I am an abstract class.",				"",				"I'm the superclass of all the adapters used to link a Spec widget presenter to a framework specific widget (by example ButtonPresenter <-> PluggableButtonMorph).",				"",				"The current implementation installs my instances as dependent of the presenter and my `changed:` method propagates updates to the widget I create (via my `buildWidget` method). This implementation is not optimal. ",				"",				"In the future my instances should just be responsible to create a widget and install all the communication between the presenter and the widget. I should not be a middle man. ",				"",				"I'm only interesting for back-ends developers. As a developer, using Spec to define application, you should not care and have to deal with me. "			],			"category" : "Spec2-Core-Base"		},		"SpecTableLayout" : {			"hash" : 1562880,			"definition" : "Object subclass: #SpecTableLayout\r\tinstanceVariableNames: 'commands selector layoutProperties'\r\tclassVariableNames: ''\r\tpackage: 'Spec-Layout-Layouts'",			"comment" : [				"A SpecTableLayout is a variant of spec layout that uses TableLayout layout policy."			],			"category" : "Spec-Layout-Layouts"		},		"FTGlyphSlotRec" : {			"hash" : 1035264,			"definition" : "FFIExternalStructure subclass: #FTGlyphSlotRec\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'OFFSET_ADVANCE OFFSET_BITMAP OFFSET_BITMAP_LEFT OFFSET_BITMAP_TOP OFFSET_CONTROL_DATA OFFSET_CONTROL_LEN OFFSET_FACE OFFSET_FORMAT OFFSET_GENERIC OFFSET_INTERNAL OFFSET_LIBRARY OFFSET_LINEARHORIADVANCE OFFSET_LINEARVERTADVANCE OFFSET_LSB_DELTA OFFSET_METRICS OFFSET_NEXT OFFSET_NUM_SUBGLYPHS OFFSET_OTHER OFFSET_OUTLINE OFFSET_RESERVED OFFSET_RSB_DELTA OFFSET_SUBGLYPHS'\r\tpoolDictionaries: 'FT2Types'\r\tpackage: 'FreeType-Bindings'",			"comment" : [				"I Implement the `FT_GlyphSlot_Rec`, I am the structure where the glyphs are stored when reading from a font."			],			"category" : "FreeType-Bindings"		},		"NullStream" : {			"hash" : 1075712,			"definition" : "Stream subclass: #NullStream\r\tinstanceVariableNames: 'binary position lastElement'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I am a stream that does nothing i.e. generates and consumes an infinite number of elements (NullObject pattern). I can be used as an equivalent of /dev/null (for example ",				"a logging in off mode) or for performance benchmarks."			],			"category" : "Collections-Streams-Base"		},		"ClapParameterized" : {			"hash" : 401664,			"definition" : "ClapParameter subclass: #ClapParameterized\r\tinstanceVariableNames: 'parameters positionals aliases'\r\tclassVariableNames: ''\r\tpackage: 'Clap-Core-Specification'",			"comment" : [				"I am an abstract class specifying a parameter with nested positional parameters."			],			"category" : "Clap-Core-Specification"		},		"ZnLimitedReadStream" : {			"hash" : 1404160,			"definition" : "Stream subclass: #ZnLimitedReadStream\r\tinstanceVariableNames: 'stream position limit binary'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Streaming'",			"comment" : [				"I am ZnLimitedReadStream, wrapping another read stream delegating to it ",				"but limiting reading to a fixed number of elements.",				"",				"I can be atEnd while my wrapped stream is not.",				"",				"My contentSpecies can be forced to be ByteArray (binary) or ByteString (ascii).",				"",				"I do byte/char conversions on the fly (support bivalent access).",				"",				"This implementation is really a kludge.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Streaming"		},		"SequenceableCollection" : {			"hash" : 856320,			"definition" : "Collection subclass: #SequenceableCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		},		"SortedCollection" : {			"hash" : 1138688,			"definition" : "OrderedCollection subclass: #SortedCollection\r\tinstanceVariableNames: 'sortBlock'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a Block.",				"Like my superclass, I am a collection that can grow in size but I keep my elements sorted.",				"Because of that you cannot add elements at a fix index (with #at:put: or #insert:before: methods for example).",				"",				"The sort block I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.",				"",				"I should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).",				"",				"### Public API and Key Messages",				"",				"- class method: #sortUsing:  aBlockOrSortFunction is a contructor. \t\t",				"- #sort: aBlock is a function to change the way I am sorted. I will also update the index of my elements with the new block.",				"",				"### Example",				"",				"```",				"\tsortColl := SortedCollection sortUsing: [ :elem1 :elem2 | elem1 < elem2 ].",				"\tsortColl",				"\t\tadd: 4;",				"\t\tadd: 2;",				"\t\tadd: 1;",				"\t\tadd: 2.",				"\tsortColl. \t\t\"result: a SortedCollection(1 2 2 4)\"",				"\t",				"\t\"But you can also add a collection.\"",				"\t",				"\tsortColl addAll: #(3 5 0 6).",				"\tsortColl. \t\t\"result: a SortedCollection(0 1 2 2 3 4 5 6)\"",				"\t\t\t",				"\t\"You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.\"",				"\t",				"\tsortColl ",				"\t\tsort:",				"\t\t\t[ :int1 :int2 | ",				"\t\t\t\t((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])",				"\t\t\t\t\tifTrue: [ int1 < int2 ]",				"\t\t\t\t\tifFalse: [ int1 odd ] ",				"\t\t\t].",				"\tsortColl \t\t\"result: a SortedCollection(1 3 5 0 2 2 4 6)\"",				"```",				" ",				"### Internal Representation and Key Implementation Points.",				"Instance Variables",				"-\tsortBlock:\t\t<Block> \t\tThis is  a sort block used to keep me sorted. I can take 2 parameters that are two values and I return true if the first parameter should be before the second.",				"",				"I refuse the methods that add elements at a fix index.",				"",				"When the user is adding an element, I use some methods like #reSort or #indexForInserting: to add an element at the right position.",				"",				"### Discussion",				"",				"- (1) sort: and sortBlock: can be used to set an order to my elements but uses different implementation of the sort algorithm... See  https://pharo.fogbugz.com/f/cases/17925/Why-SortedCollection-sort-and-sortBlock-do-not-uses-the-same-method-to-sort.",				"- (2) DO NOT USE ADDLAST:!!!! ",				"https://pharo.fogbugz.com/f/cases/14812/addLast-should-not-work-in-SortedCollection",				"",				"```",				"x := SortedCollection with: 4 with: 3 with: 2 with: 1 with: 7.",				"y:=x addLast: 6; yourself.",				"y isSorted ",				">>> false",				"```"			],			"category" : "Collections-Sequenceable-Ordered"		},		"SpecStubAbstractAdapter" : {			"hash" : 2386944,			"definition" : "AbstractAdapter subclass: #SpecStubAbstractAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec-StubAdapter-Adapters'",			"comment" : [				"I am an abstract class providing all the properties shared amongst all the stub adapters. They do not produce real views, only stub objects."			],			"category" : "Spec-StubAdapter-Adapters"		},		"JobProgressMorph" : {			"hash" : 762624,			"definition" : "Morph subclass: #JobProgressMorph\r\tinstanceVariableNames: 'bar endValue hasResult job labelMorph lastRefresh lock result startValue'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-ProgressBar'",			"comment" : [				"I combine a progress title and a JobPorgressBarMorph to a visual representation of a Job.",				"",				"Usually I am contained in the global instance of the SystemProgressMorph"			],			"category" : "Morphic-Base-ProgressBar"		},		"StdioStream" : {			"hash" : 1147136,			"definition" : "AbstractBinaryFileStream subclass: #StdioStream\r\tinstanceVariableNames: 'peekBuffer'\r\tclassVariableNames: ''\r\tpackage: 'Files-Streams'",			"comment" : [				"I am a concrete subclass of AbstractBinaryFileStream for stdio streams.",				"",				"StdioStreams map to one of three types of underlying file: ",				"",				"- Terminal input/output.",				"- Piped input/output and named pipes (FIFO files) such as created with the shell pipe character \"|\".",				"- A file mounted on the file system.",				"  This includes all the files that can be opened with a FileReference, including sysfs files such as /proc/cpuinfo and character devices such as /dev/urandom.",				"",				"The operations that can be performed on these vary, e.g. it is possible to position the stream for a regular file, but not for piped input.  Currently it is up to the user of StdioStream to know which type of input they are dealing with.",				"",				"As pipes can't be positioned and FilePlugin doesn't provide a peek primitive, simulate #peek by reading the next character and holding on to it until it is consumed.",				"",				"Despite providing both input and output methods, StdioStreams are either read-only or write-only.  Currently it is up to the user to know which type of stream they are dealing with.",				"",				"Normally instances of StdioStream are not created directly but via Stdio, e.g: ",				"",				"Stdio stdin.",				"Stdio stdout.",				"Stdio stderr.",				"",				"",				"Instance Variables:",				"",				"- peekBuffer     <SmallInteger or nil> The next character to be read from the stream or nil."			],			"category" : "Files-Streams"		},		"SpPanedLayout" : {			"hash" : 2424320,			"definition" : "SpDirectionableLayout subclass: #SpPanedLayout\r\tinstanceVariableNames: 'childrenByPosition positionOfSlider'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Layout-Paned'",			"comment" : [				"I'm a Paned Layout as if you would not how to read my name. I manage two and only two children, a first and a second one.",				"",				"From that perspective, a paned layout is like a `SpBoxLayout`: it places childen in vertical or horizontal fashion, but it will add a splitter in between, that user can drag to resize the panel.",				"",				"Nice methods to consider are:",				"- `SpPanedLayout>>#addFirst:` and `SpPanedLayout>>#addFirst:` to add my two children.",				"- `SpPanedLayout>>#positionOfSlider:`. It controls the position of the slider. ",				"-- `aNumber` can be a fixed number indicating the exact position where the slider will be placed in the pane.",				"-- `aFloat or percent` can also be a fraction or a percentage, indicating the percentage position ",				"\t of the slider. e.g. `30 percent` or (0.3) indicates the slider will be place at 1/3 of the ",				"\t panel.\""			],			"category" : "Spec2-Layout-Paned"		},		"PragmaMenuAndShortcutRegistration" : {			"hash" : 705792,			"definition" : "Object subclass: #PragmaMenuAndShortcutRegistration\r\tinstanceVariableNames: 'items currentRoot platform model'\r\tclassVariableNames: ''\r\tpackage: 'MenuRegistration-Core'",			"comment" : [				"A PragmaMenuAndShortcutRegistration is the list items holder"			],			"category" : "MenuRegistration-Core"		},		"DAPackage" : {			"hash" : 2000896,			"definition" : "Object subclass: #DAPackage\r\tinstanceVariableNames: 'dependencies included inStack tarjanIndex tarjanLowLink bfsParent seen rPackageSet'\r\tclassVariableNames: ''\r\tpackage: 'Tool-DependencyAnalyser-Core'",			"comment" : [				"I am a PDPackage and i represent a package (RPackageSet) and all his dependencies (PDPackageDependency).",				"",				"Instance variables :",				"",				"\t- dependencies : a collection of PDPackageDependency (actually the nodes of a graph dependency, from a source PDPackage to a target PDPackage)",				"\t- included : says if the PDPackage is included or not in the set of packages at the beginning.",				"\t- rpackage : the instance of asRPackageSet \t",				"\t- inStack : useful for tarjan algorithm and cycle algorithm. It avoid stack access",				"\t- tarjanIndex and tarjanLowLink : integer for the tarjan algorithm.",				"\t- bfsParent : see cycle algorithm",				"\t- seen : says if all dependencies have been added to the Package"			],			"category" : "Tool-DependencyAnalyser-Core"		},		"Random" : {			"hash" : 1105152,			"definition" : "Object subclass: #Random\r\tinstanceVariableNames: 'seed a m q r'\r\tclassVariableNames: ''\r\tpackage: 'Random-Core-Base'",			"comment" : [				"This Random Number Generator graciously contributed by David N. Smith.  It is an adaptation of the Park-Miller RNG [1] which uses Floats to avoid the need for LargeInteger arithmetic.",				"",				"If you just want a quick random integer, use:",				"\t\t10 atRandom",				"Every integer interval can give a random number:",				"\t\t(6 to: 12) atRandom",				"SequenceableCollections can give randomly selected elements:",				"\t\t'pick one of these letters randomly' atRandom",				"SequenceableCollections also respond to shuffled, as in:",				"\t\t($A to: $Z) shuffled",				"",				"The correct way to use class Random is to store one in an instance or class variable:",				"\t\tmyGenerator := Random new.",				"Then use it every time you need another number between 0.0 and 1.0 (excluding)",				"\t\tmyGenerator next",				"You can also generate a positive integer",				"\t\tmyGenerator nextInt: 10",				"\t\t",				"[1] 'Random Number Generators:  Good Ones Are Hard to Find' ",				"by Stephen K. Park and Keith W. Miller ",				"(Comm. Asso. Comp. Mach., 31(10):1192--1201, 1988). http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf"			],			"category" : "Random-Core-Base"		},		"ExceptionSet" : {			"hash" : 954880,			"definition" : "Object subclass: #ExceptionSet\r\tinstanceVariableNames: 'exceptions'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Exceptions'",			"comment" : [				"An ExceptionSet is a grouping of exception handlers which acts as a single handler.  Within the group, the most recently added handler will be the last handler found during a handler search (in the case where more than one handler in the group is capable of handling a given exception). "			],			"category" : "Kernel-Exceptions"		},		"ZnChunkedReadStream" : {			"hash" : 1403648,			"definition" : "Stream subclass: #ZnChunkedReadStream\r\tinstanceVariableNames: 'stream chunk position limit atEnd totalSize chunkCount extraHeaders'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Streaming'",			"comment" : [				"I am ZnChunkedReadStream, implementing HTTP 1.1 chunked transfer encoding on a wrapped streams.",				"",				"Clients should read me until I am atEnd.",				"",				"After I am completely read, I can tell you my totalSize and optional extraHeaders.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Streaming"		},		"LayoutClassScope" : {			"hash" : 814336,			"definition" : "AbstractLayoutScope variableSubclass: #LayoutClassScope\r\tinstanceVariableNames: 'parentScope'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Layout'",			"comment" : [				"I am layout scope for classes."			],			"category" : "Kernel-Layout"		},		"RubParagraphDecorator class" : {			"hash" : 613888,			"definition" : "RubParagraphDecorator class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a decorator for the paragraph of a text area. I can be used to draw something on the paragraph "			],			"category" : "Rubric-Editing-Core"		},		"CoFetcherSequence" : {			"hash" : 5479424,			"definition" : "CoFetcher subclass: #CoFetcherSequence\r\tinstanceVariableNames: 'subcompletions'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Core'",			"comment" : [				"I'm a fetcher composed of a sequence of subfetchers. ",				"When executed, I execute my subfetchers one by one.",				"",				"Sequences are created by sending the message #, between two fetchers."			],			"category" : "HeuristicCompletion-Model-Core"		},		"ZnPositionableReadStream" : {			"hash" : 1216000,			"definition" : "Object subclass: #ZnPositionableReadStream\r\tinstanceVariableNames: 'stream buffer count index delta'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnPositionableReadStream.",				"I am polymorphic with (the most used/important methods of) ReadStream and PositionableStream.",				"",				"I wrap another read stream and store the elements that I read in a sliding circular buffer so that I am able to go back to any position inside that buffer. ",				"",				"Essentially, I implement #position and #position: to be used to back out of reading ahead.",				"",				"Note that the size of my buffer limits how far I can go backwards. A SubscriptOutOfBounds exception will be signalled when an attempt is made to go too far backwards.",				"",				"The index returned by #position should be considered abstract, without concrete meaning, but it is currently implemented as the count of elements read by #next on the wrapped stream. On a simple stream over an in memory collection, that will be equivalent to an integer index into that collection. But on network streams or streams that were already further along, this will no longer be the case.",				"",				"The most elementary example of my capabilities can be seen in my implementation of #peek. See also the unit tests #testPlainExcursion and #testSearch",				"",				"Of course, backing out of an excursion is only possible within the window of the buffer size.",				"",				"Implementation",				"",				"- stream <ReadStream> the read stream that I wrap and add positioning to",				"- buffer <String|ByteArray> sliding, circular buffer",				"- index <PositiveInteger> zero based index into buffer, where next will be stored",				"- count <PositiveInteger> number of next operations done on wrapped stream",				"- delta <PositiveInteger> number of positions that I was moved backwards",				"",				"The real core methods are #next, #atEnd, #position and #position: and are used to implement the rest.",				"",				"Part of Zinc HTTP Components"			],			"category" : "Zinc-Character-Encoding-Core"		},		"FLMapper" : {			"hash" : 735488,			"definition" : "Object subclass: #FLMapper\r\tinstanceVariableNames: 'next analysis'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Mappers'",			"comment" : [				"The purpose of my hierarchy is to map objects with clusters."			],			"category" : "Fuel-Core-Mappers"		},		"STONCStyleCommentsSkipStream" : {			"hash" : 340736,			"definition" : "Object subclass: #STONCStyleCommentsSkipStream\r\tinstanceVariableNames: 'stream peekedCharacter delimiter escape'\r\tclassVariableNames: ''\r\tpackage: 'STON-Core-Reader'",			"comment" : [				"I am STONCStyleCommentsSkipStream, a character ReadStream wrapping another character ReadStream. I skip C style comments, much like a classic C preprocessor.",				"",				"C, C++, Java, JavaScript style comments are either the multiline",				"",				"\t/* a comment */",				"\t",				"or the single line, up to end of line",				"",				"\t// a comment ",				"\t",				"I deal with any end of line convention. Multiline comments cannot be nested. ",				"",				"You create me #on: another character ReadStream. ",				"",				"Here is an example:",				"",				"\t(STONCStyleCommentsSkipStream on: 'abc/*comment*/def' readStream) upToEnd.",				"\t",				"Comments inside single and double quote delimited strings are ignored. Backslash escapes for single and double quotes inside strings are honored."			],			"category" : "STON-Core-Reader"		},		"SpMorphicMillerAdapter" : {			"hash" : 2885120,			"definition" : "SpMorphicLayoutAdapter subclass: #SpMorphicMillerAdapter\r\tinstanceVariableNames: 'innerWidget lastExtent lastPageSize needRecalculatePages'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Morphic-Layout'",			"comment" : [				"I'm an adapter for Miller Layouts.",				"A paned layout will split (horizontally or vertically) panels (in fixed yet proportional spaces), ",				"and it will scroll the panels that exceed SpMillerLayout>>#visiblePages property.  "			],			"category" : "Spec2-Adapters-Morphic-Layout"		},		"AthensTextDisplayCommand" : {			"hash" : 1668608,			"definition" : "Object subclass: #AthensTextDisplayCommand\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Athens-Text'",			"comment" : [				"An abstract base class for all text rendering commands.",				"",				"A text rendered takes a stream (or list) of my (sub)instances and in that way it renders the text"			],			"category" : "Athens-Text"		},		"SpMillerLayout" : {			"hash" : 2425344,			"definition" : "SpExecutableLayout << #SpMillerLayout\r\ttraits: {TObservable};\r\tslots: {\r\t\t\t #direction .\r\t\t\t #spacing .\r\t\t\t #borderWidth .\r\t\t\t #visiblePages => ObservableSlot };\r\ttag: 'Miller';\r\tpackage: 'Spec2-Layout'",			"comment" : [				"I'm a layout to implement miller lists. ",				"Since I am intended to be used dynamically (adding/removing components on demand), I implement just `add:` and `remove:` related methods.",				"You can also control borderWith and spacing between elements."			],			"category" : "Spec2-Layout-Miller"		},		"MetacelloMemberListSpec" : {			"hash" : 1487616,			"definition" : "MetacelloSpec subclass: #MetacelloMemberListSpec\r\tinstanceVariableNames: 'list memberMap'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Members'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tlist:\t\t<Object>",				"\tmemberMap:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-Core-Members"		},		"CoHeuristicBuilder" : {			"hash" : 5484032,			"definition" : "Object subclass: #CoHeuristicBuilder\r\tinstanceVariableNames: 'heuristics'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-SystemIntegration'",			"comment" : [				"I am an heuristic builder.",				"I am composed with several small heuristics and generate a chain of responsibility from them in the right order.",				"",				"For example, given a list of heuristics:",				"",				"CoHeuristicBuilder new",				"\tadd: CoSelfMessageHeuristic new;",				"\tadd: CoSuperMessageHeuristic new;",				"\tadd: CoInitializeInferencedMessageHeuristic new;",				"\tyourself.",				"",				"I create the following chain:",				"",				"CoSelfMessageHeuristic -next-> CoSuperMessageHeuristic -next-> CoInitializeInferencedMessageHeuristic",				"\t",				"I am used also as a hook, that can be redefined in subclasses and build heuristics differently."			],			"category" : "HeuristicCompletion-Model-SystemIntegration"		},		"ZnEncodedReadStream" : {			"hash" : 1202688,			"definition" : "ZnEncodedStream subclass: #ZnEncodedReadStream\r\tinstanceVariableNames: 'peeked'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnEncodedReadStream, an abstract support class for read streams on a binary encoded wrapped stream.",				"",				"Part of Zinc HTTP Components"			],			"category" : "Zinc-Character-Encoding-Core"		},		"CriticBrowserRulesGroup" : {			"hash" : 4037120,			"definition" : "Object subclass: #CriticBrowserRulesGroup\r\tinstanceVariableNames: 'name rules'\r\tclassVariableNames: ''\r\tpackage: 'Tool-CriticBrowser-Utilities'",			"comment" : [				"I represent a group of rules in CriticBrowser tree view"			],			"category" : "Tool-CriticBrowser-Utilities"		},		"InflateStream" : {			"hash" : 1337856,			"definition" : "ReadStream subclass: #InflateStream\r\tinstanceVariableNames: 'state bitBuf bitPos source sourcePos sourceLimit litTable distTable sourceStream crc'\r\tclassVariableNames: 'BlockProceedBit BlockTypes FixedDistCodes FixedLitCodes MaxBits StateNewBlock StateNoMoreData'\r\tpackage: 'Compression-Streams'",			"comment" : [				"This class implements the Inflate decompression algorithm as defined by RFC1951 and used in PKZip, GZip and ZLib (and many, many more). It is a variant of the LZ77 compression algorithm described in",				"",				"[LZ77] Ziv J., Lempel A., \"A Universal Algorithm for Sequential Data Compression\", IEEE Transactions on Information Theory\", Vol. 23, No. 3, pp. 337-343.",				"",				"[RFC1951] Deutsch. P, \"DEFLATE Compressed Data Format Specification version 1.3\"",				"",				"For more information see the above mentioned RFC 1951 which can for instance be found at",				"",				"\thttp://www.leo.org/pub/comp/doc/standards/rfc/index.html",				"",				"Huffman Tree Implementation Notes:",				"===========================================",				"The huffman tree used for decoding literal, distance and length codes in the inflate algorithm has been encoded in a single Array. The tree is made up of subsequent tables storing all entries at the current bit depth. Each entry in the table (e.g., a 32bit Integer value) is either a leaf or a non-leaf node. Leaf nodes store the immediate value in its low 16 bits whereas non-leaf nodes store the offset of the subtable in its low 16bits. The high 8 bits of non-leaf nodes contain the number of additional bits needed for the sub table (the high 8 bits of leaf-nodes are always zero). The first entry in each table is always a non-leaf node indicating how many bits we need to fetch initially. We can thus travel down the tree as follows (written in sort-of-pseudocode the actual implementation can be seen in InflateStream>>decodeValueFrom:):",				"",				"\ttable := initialTable.",				"\tbitsNeeded := high 8 bits of (table at: 1).\t\t\"Determine initial bits\"",				"\ttable := initialTable + (low 16 bits of (table at: 1)). \"Determine start of first real table\"",				"\t[bits := fetch next bitsNeeded bits.\t\t\t\"Grab the bits\"",				"\tvalue := table at: bits.\t\t\t\t\t\t\"Lookup the value\"",				"\tvalue has high 8 bit set] whileTrue:[\t\t\"Check if it's leaf\"",				"\t\ttable := initialTable + (low 16 bits of value).\t\"No - compute new sub table start\"",				"\t\tbitsNeeded := high 8 bit of value].\t\t\"Compute additional number of bits needed\"",				"\t^value"			],			"category" : "Compression-Streams"		},		"LGitRevwalk" : {			"hash" : 2166016,			"definition" : "LGitRepositoryObject subclass: #LGitRevwalk\r\tinstanceVariableNames: 'currentCommit hasNext sorting'\r\tclassVariableNames: ''\r\tpackage: 'LibGit-Core-HelperObjects'",			"comment" : [				"See [https://libgit2.org/libgit2/#HEAD/group/revwalk](https://libgit2.org/libgit2/#HEAD/group/revwalk)"			],			"category" : "LibGit-Core-HelperObjects"		},		"PluggableMenuSpec" : {			"hash" : 705280,			"definition" : "Object subclass: #PluggableMenuSpec\r\tinstanceVariableNames: 'label model items parentMenu'\r\tclassVariableNames: ''\r\tpackage: 'MenuRegistration-Core'",			"comment" : [				"I'm a spec for a menu. The World menu pragma based registration uses it for now. I'm moved in this package so that later we can decide what to do with it. ",				"We could probably avoid MenuSpec and just use MenuMorph instead. "			],			"category" : "MenuRegistration-Core"		},		"IRRemoteArray" : {			"hash" : 1244160,			"definition" : "Object subclass: #IRRemoteArray\r\tinstanceVariableNames: 'size index'\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-Bytecode'",			"comment" : [				"I model the TempVector for the decompiler"			],			"category" : "OpalCompiler-Core-Bytecode"		},		"SharedRandom" : {			"hash" : 1129728,			"definition" : "Random subclass: #SharedRandom\r\tinstanceVariableNames: 'mutex'\r\tclassVariableNames: ''\r\tpackage: 'Random-Core-Base'",			"comment" : [				"I represent a Random number generator that can be shaded between different code.",				"",				"I wrap the access to my parent's functionality (#next, #nextInt: and #next:into:)  through a mutex making me safe for multi threaded use.",				"",				"To access the default shared random number generator, do:",				"",				"\tSharedRandom globalGenerator.",				"\t",				"In principle it is better to use a shared generator since multiple users will create a more random pattern."			],			"category" : "Random-Core-Base"		},		"WeakSet" : {			"hash" : 809728,			"definition" : "Set subclass: #WeakSet\r\tinstanceVariableNames: 'flag'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Weak-Base'",			"comment" : [				"I'm a Set with weak elements. ",				"",				"Implementation.",				"",				"\tflag is a special object that indicates that at a given slot the set has a free entry."			],			"category" : "Collections-Weak-Base"		},		"OSSDLPasteEventFilter" : {			"hash" : 4301568,			"definition" : "Object subclass: #OSSDLPasteEventFilter\r\tinstanceVariableNames: 'next lastEvents currentState'\r\tclassVariableNames: ''\r\tpoolDictionaries: 'SDL2Constants'\r\tpackage: 'OSWindow-SDL2-Base'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcurrentState:\t\t<Object>",				"\tlastEvents:\t\t<Object>",				"\tnext:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "OSWindow-SDL2-Base"		},		"MTSession" : {			"hash" : 2526720,			"definition" : "Object subclass: #MTSession\r\tinstanceVariableNames: 'stackCounter decorators home'\r\tclassVariableNames: 'forbiddenMethods'\r\tpackage: 'MethodTracker'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tdecorators:\t\t<Object>",				"\thome:\t\t<Object>",				"\tstackCounter:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MethodTracker"		},		"SpBaseEventDefinition class" : {			"hash" : 2450176,			"definition" : "SpBaseEventDefinition class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a base of event definitions for `SpEventHandler.` ",				"My children will define (and install in an adaptor/widget) a specific kind of low-level event."			],			"category" : "Spec2-Core-Base-Event"		},		"WeakKeyDictionary" : {			"hash" : 1178112,			"definition" : "Dictionary subclass: #WeakKeyDictionary\r\tinstanceVariableNames: 'expired finalizer'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Weak-Dictionaries'",			"comment" : [				"I am a dictionary holding only weakly on my keys. This is a bit dangerous since at any time my keys can go away. Clients are responsible to register my instances by WeakArray such that the appropriate actions can be taken upon loss of any keys. As key may disappear at any time, my reported size may be greater than the number of keys encountered in iterations.",				"",				"See WeakRegistry for an example of use.",				"",				"Implementation notes:",				"",				"I am a set of WeakAssociations. Each WeakAssociation can be in one of three states: a key is present, or the key has been garbage-collected, or the association is expired (meaning that the value has also been released). During finalization, associations with no key expire, but I still keep them to avoid rehashing the entire set. When adding a new entry, the new entry can either go into a slot that is nil, or one that has an expired association. I keep a count of expired associations and rehash when there are too many (currently, if they account for more than 25% of the space)."			],			"category" : "Collections-Weak-Dictionaries"		},		"WeakValueDictionary" : {			"hash" : 1180672,			"definition" : "Dictionary subclass: #WeakValueDictionary\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Weak-Dictionaries'",			"comment" : [				"I am a dictionary holding only weakly on my values. This mean that as long as my values are referenced (via a strong reference) by other objects, they will stay but in case no object is referencing them during a garbage collection, then my value will vanish and I will return nil instead.",				"Clients may expect to get a nil value for any object they request since they can be garbaged collected.",				"",				"Implementation details:",				"",				"To store keys and values I am using a WeakValueAssociation. This association has a key and a value.",				"The key is the key the user is giving me, but if the user gives me a nil as value, I wrap it into a CollectionElement. This is explained because I need to do a distinction between nil values given by the user and nil values created by the garbage collection.",				"When the value of a WeakValueAssociation is a collection element wrapper on nil, then it means the user directly gave us a nil. In case the value of the WeakValueAssociation is nil, it means that we originally had a value that was garbaged collected."			],			"category" : "Collections-Weak-Dictionaries"		},		"MCDefinitionIndex" : {			"hash" : 271104,			"definition" : "Object subclass: #MCDefinitionIndex\r\tinstanceVariableNames: 'definitions'\r\tclassVariableNames: ''\r\tpackage: 'Monticello-Patching'",			"comment" : [				"I'm a simple container of MCDefinitions which can be added or removed."			],			"category" : "Monticello-Patching"		},		"AtomicQueueItem" : {			"hash" : 1092352,			"definition" : "Object subclass: #AtomicQueueItem\r\tinstanceVariableNames: 'next object'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Atomic-Elements'",			"comment" : [				"I am a queue item, used by atomic queues.",				"All my new instances are circular i.e. next = self"			],			"category" : "Collections-Atomic-Elements"		},		"RunArray" : {			"hash" : 1644800,			"definition" : "SequenceableCollection subclass: #RunArray\r\tinstanceVariableNames: 'runs values lastIndex lastRun lastOffset'\r\tclassVariableNames: ''\r\tpackage: 'Text-Core-Utilities'",			"comment" : [				"My instances provide space-efficient storage of data which tends to be constant over long runs of the possible indices. Essentially repeated values are stored singly and then associated with a \"run\" length that denotes the number of consecutive occurrences of the value.",				"",				"My two important variables are",				"\truns\tAn array of how many elements are in each run",				"\tvalues\tAn array of what the value is over those elements",				"",				"The variables lastIndex, lastRun and lastOffset cache the last access",				"so that streaming through RunArrays is not an N-squared process.",				"",				"Many complexities of access can be bypassed by using the method",				"\tRunArray withStartStopAndValueDo:"			],			"category" : "Text-Core-Utilities"		},		"CharacterSet" : {			"hash" : 884224,			"definition" : "Collection subclass: #CharacterSet\r\tinstanceVariableNames: 'map'\r\tclassVariableNames: 'CrLf'\r\tpackage: 'Collections-Support-CharacterSets'",			"comment" : [				"A set of characters: ",				"",				"- Lookups for inclusion are very fast.",				"- CharacterSet will automatically convert itself to a WideCharacterSet if a character with value > 255 is added.",				"- Tests for inclusion can be done on any Character value (up to Character maxVal).",				"",				"See the package comments for a description of how each of the classes in Collections-Support-CharacterSets is used."			],			"category" : "Collections-Support-CharacterSets"		},		"IceEmptyNode" : {			"hash" : 2273024,			"definition" : "IceAbstractNode subclass: #IceEmptyNode\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Changes'",			"comment" : [				"I am a null object representing an empty node of a tree. I'm used together with IceNode."			],			"category" : "Iceberg-Changes"		},		"SourceFileCharacterReadWriteStream" : {			"hash" : 1142528,			"definition" : "Object subclass: #SourceFileCharacterReadWriteStream\r\tinstanceVariableNames: 'readStream writeStream'\r\tclassVariableNames: ''\r\tpackage: 'System-Sources-Streams'",			"comment" : [				"I am a read-write character stream. I am mainly used to open the Pharo source and changes files."			],			"category" : "System-Sources-Streams"		},		"Link" : {			"hash" : 1023488,			"definition" : "Object subclass: #Link\r\tinstanceVariableNames: 'nextLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."			],			"category" : "Collections-Support-Links"		},		"WeakRegistry" : {			"hash" : 1185024,			"definition" : "Collection subclass: #WeakRegistry\r\tinstanceVariableNames: 'list valueDictionary sema'\r\tclassVariableNames: 'Default'\r\tpackage: 'Collections-Weak-Registration'",			"comment" : [				"This kind of WeakRegistry using a new VM feature,",				"which allows a more robust finalization support.",				"",				"In contrast to old implementation, it doesn't spending linear time , checking what elements became garbage."			],			"category" : "Collections-Weak-Registration"		},		"CTOrderPreservingTree" : {			"hash" : 3067392,			"definition" : "Object subclass: #CTOrderPreservingTree\r\tinstanceVariableNames: 'parent'\r\tclassVariableNames: ''\r\tpackage: 'Containers-OrderPreservingTree'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tparent:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-OrderPreservingTree"		},		"MetacelloLoadData" : {			"hash" : 334080,			"definition" : "Object subclass: #MetacelloLoadData\r\tinstanceVariableNames: 'dataMap versionInfoMap packageNameMap'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-MC-Loaders'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tdataMap:\t\t<Object>",				"\tpackageNameMap:\t\t<Object>",				"\tversionInfoMap:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-MC-Loaders"		},		"DependentsArray" : {			"hash" : 934912,			"definition" : "Collection weakSubclass: #DependentsArray\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Models'",			"comment" : [				"Act as an array of (weak) dependents of some object.",				"",				"When dependents are reclaimed, they are replaced by an UndefinedObject in the DependentsArray.",				"This is why instances of this class will take care to iterate only on non nil elements.",				"These nil also cause loops written as (1 to: self size do: [:i | (self at: i) doSomething]) to be inefficient.",				"This is because #size and #at: both require scanning for nils.",				"For this reason, DependentsArray though sequenceable, is not a subclass of SequenceableCollection."			],			"category" : "Kernel-Models"		},		"TextEmphasis" : {			"hash" : 1641728,			"definition" : "TextAttribute subclass: #TextEmphasis\r\tinstanceVariableNames: 'emphasisCode setMode'\r\tclassVariableNames: ''\r\tpackage: 'Text-Core-Attributes'",			"comment" : [				"A TextEmphasis, encodes a characteristic applicable to all fonts.  The encoding is as follows:",				"\t1\tbold",				"\t2\titallic",				"\t4\tunderlined",				"\t8\tnarrow",				"\t16\tstruck out"			],			"category" : "Text-Core-Attributes"		},		"AbstractBinaryFileStream" : {			"hash" : 834816,			"definition" : "Stream subclass: #AbstractBinaryFileStream\r\tinstanceVariableNames: 'file handle forWrite semaphore semaphoreIndex'\r\tclassVariableNames: ''\r\tpackage: 'Files-Streams'",			"comment" : [				"Provides a simple, platform-independent, file stream. I am ",				"- binary",				"- not buffered",				"- provide no encoding/conversions",				"",				"### Examples of usage",				"```",				"\"Creating a file\"",				"stream := (File named: 'asd.txt' asFileReference fullName) readStream.",				"",				"\"Accessing the stream properties\"",				"stream position.",				"stream atEnd.",				"",				"\"Writing\"",				"stream nextPut: 17.",				"stream nextPutAll: 'sdd'.",				"",				"\"Reading\"",				"stream next.",				"stream next: 2.",				"",				"\"Skipping\"",				"stream skip: 2. ",				"",				"\"reading up to something\"",				"stream upTo: 23.",				"stream upToAnyOf: #[ 13 30 ].",				"",				"\"peeking\"",				"stream peek.",				"```"			],			"category" : "Files-Streams"		},		"SpCollectionListModel" : {			"hash" : 2456064,			"definition" : "Object << #SpCollectionListModel\r\ttraits: {TObservable};\r\tslots: {\r\t\t\t #announcer .\r\t\t\t #collection .\r\t\t\t #sorting => ObservableSlot };\r\ttag: 'Widgets-Table';\r\tpackage: 'Spec2-Core'",			"comment" : [				"A collection model to be used with list presenters (`SpAbstractListPresenter` and children).",				"",				"This model receives a `collection` of elements to be served to the list."			],			"category" : "Spec2-Core-Widgets-Table"		},		"SourceFileBufferedReadWriteStream" : {			"hash" : 1141760,			"definition" : "Object subclass: #SourceFileBufferedReadWriteStream\r\tinstanceVariableNames: 'innerStream buffer bufferLength streamSize bufferOffset nextPosition isDirty'\r\tclassVariableNames: ''\r\tpackage: 'System-Sources-Streams'",			"comment" : [				"I am Buffered Read Write Stream.",				"I should only be used in the SourceFile implementation"			],			"category" : "System-Sources-Streams"		},		"MetacelloRepositoriesSpec" : {			"hash" : 319744,			"definition" : "MetacelloMemberListSpec subclass: #MetacelloRepositoriesSpec\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Metacello-MC-Specs'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-MC-Specs"		},		"ZdcAbstractSocketStream" : {			"hash" : 306944,			"definition" : "Object subclass: #ZdcAbstractSocketStream\r\tinstanceVariableNames: 'socket readBuffer writeBuffer timeout debug'\r\tclassVariableNames: ''\r\tpackage: 'Zodiac-Core'",			"comment" : [				"I am ZdcAbstractSocketStream, a binary read/write stream for socket communication.",				"",				"Interally, IO is done through a read and a write ZdcIOBuffer.",				"",				"I am abstract, my subclasses should implement actual IO through a delegate."			],			"category" : "Zodiac-Core"		},		"DoubleLink" : {			"hash" : 1610752,			"definition" : "Object subclass: #DoubleLink\r\tinstanceVariableNames: 'value nextLink previousLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-DoubleLinkedList-Base'",			"comment" : [				"I am DoubleLink, the elementary part of a DoubleLinkedList.",				"",				"I hold a value, as well as a link to my successor (nextLink) and to my predecessor (previousLink) - both can be nil."			],			"category" : "Collections-DoubleLinkedList-Base"		},		"LinkedList" : {			"hash" : 1024256,			"definition" : "SequenceableCollection subclass: #LinkedList\r\tinstanceVariableNames: 'firstLink lastLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"I am a sequential collection where adjecent objects are linked.",				"I can store any kind of objects that I will wrap into a Link (See implementation points).",				"I act pretty much as an OrderedCollection, but my access times differs: the method #atIndex: is depending of the number of elements so is not constant. In the worse case, the whole list must be crossed.",				"Using the message #addFirst: / #removeLast causes the receiver to behave as a stack; using #addLast: / #removeFirst causes the receiver to behave as a queue.",				"",				"I use the Link class (or his subclasses) in my implementation. ",				"",				"### Public API and Key Messages",				"",				"- #new / #withAll: aCollection / #with: anObject \tare common constructors",				"- #add: anObject / #at: anIndex put: anObject \tallow to add new elements to myself.",				"- #remove: anObject \tallow to remove an element.",				"- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock \tare common iterators.",				"",				"### Example ",				"",				" \t\"There is many ways to create a LinkedList, here are some:\"",				"```",				"\tlinkedList := LinkedList new.",				"\tlinkedList",				"\t\tadd: 'one';",				"\t\tadd: 'two';",				"\t\taddFirst: 'zero';",				"\t\taddLast: 'three'.",				"\tlinkedList.\t\t\"returns: a LinkedList('zero' 'one' 'two' 'three')\"",				"",				"\t\"or\"",				"\tlinkedList := LinkedList with: 'one' with: 'two' with: 'three'.",				"\tlinkedList.\t\t\"returns: a LinkedList('one' 'two' 'three')\"",				"",				"\t\"or from an other collection (here an Array)\"",				"\tlinkedList := LinkedList withAll: #('one' 'two' 'three').",				"\tlinkedList.\t\t\"returns: a LinkedList('one' 'two' 'three')\"",				"",				"\t\"Some manipulations\"",				"\tlinkedList := LinkedList new.",				"\tlinkedList",				"\t\tadd: 1;",				"\t\tadd: 2.",				"\tlinkedList.\t\t\"returns: a LinkedList(1 2)\"",				"\tlinkedList remove: 1.",				"\tlinkedList.\t\t\"returns: a LinkedList(2)\"",				"",				"\t\"A last one\"",				"\tlinkedList := LinkedList with: $b with: $c with: $a.",				"\tlinkedList sort: [ :first :second | first < second ].\t\t\t\"returns: a LinkedList($a $b $c)\"",				"\tlinkedList collect: [ :element | element asUppercase ].\t\"returns:  a LinkedList($A $B $C)\"",				"\tlinkedList select: [ :element | element >= $b ].\t\t\t\"returns:  a LinkedList($b $c)\"",				"\tlinkedList do: [ :element | element inspect ].",				"\tlinkedList asArray\t\t\t\t\t\t\t\t\t\"returns: #($a $b $c)\"",				"```",				"\t\t\t",				"### Internal Representation and Key Implementation Points.",				"",				"Instance Variables",				"- firstLink:\t\t <Link> \tA link that contains the first value of the LinkedList.",				"- lastLink:\t\t <Link> \tA link that contains the last value of the LinkedList.",				"",				"If you attempt to add any object into a LinkedList that is not a Link, it will automatically be wrapped by a ValueLink."			],			"category" : "Collections-Sequenceable-Base"		},		"STONShortListWriter" : {			"hash" : 343808,			"definition" : "STONListWriter subclass: #STONShortListWriter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'STON-Core-Writer'",			"comment" : [				"STONShortArrayWriter helps in writing short array based STON representations."			],			"category" : "STON-Core-Writer"		},		"PragmaCollector" : {			"hash" : 1453824,			"definition" : "Model subclass: #PragmaCollector\r\tinstanceVariableNames: 'collected filter announcing selectors'\r\tclassVariableNames: ''\r\tpackage: 'PragmaCollector-Base'",			"comment" : [				"Note: In most cases it is better to use the class side methods of Pragma instead.",				"",				"PragmaCollector is useful if a client needs to be notified if pragmas are added or removed.",				"If you do not store the PragmaCollector instance, you most likely can just use the API of Pragma directly.",				"",				"A PragmaCollector is used in order to collect some Pragma instances. A PragmaCollector makes use of SystemChangeNotifier event notifications in order to maintain its contents up-to-date according to its filter: when a method is added, removed or updated, if the method is defined with a pragma which is acceptable according to its filter, then the collector contents is updated. A PragmaCollector makes use of an announcer in order to notify all registered listeners when a pragma is added, removed or updated. A PragmaAnnouncement is announced when a Pragma is added, removed or updated. Corresponding announcement classes are, respectiveley, PragmaAdded, PragmaRemoved and PragmaUpdated. ",				"",				"The filter is applied to all Pragmas or (faster) pragmas with the selectors defined by #selectors:.",				"",				"Explore the result of the expression below. In the collected instance variable should be stored all pragmas of the system:",				"---------------------------",				"(PragmaCollector filter: [:pragma | true]) reset",				"---------------------------",				"",				"In the following example, collected pragma are thoses with the 'primitive:' selector (<primitive:>)",				"---------------------------",				"(PragmaCollector filter: [:prg | prg selector = 'primitive:']) reset.",				"---------------------------",				"",				"In this case it is faster to specify selectors via #selector, as this avoids to iterate over all Pragmas of the system:",				"",				"---------------------------",				"(PragmaCollector selectors: #(primitive:)) reset",				"---------------------------",				"",				"We can specify both the selectors and an additional filter, e.g. filter for all Pragmas named primitive: in methods that have one Argument:",				" ",				"---------------------------",				"(PragmaCollector ",				"\tselectors: #(primitive:) ",				"\tfilter: [:prg | prg methodSelector numArgs = 1] ) reset",				"---------------------------",				"",				"Instance Variables\t",				"\tannouncer:\t\t<Announcer>\t",				"\tcollected:\t\t<Collection>",				"\tfilter:\t\t\t<Block or MessageSend>",				"\tselector:      <Array of symbols>",				"\t\t\t\t",				"announcer",				"\tthe announcer which is used to announce the adding, the removing or the updating of a method with an acceptable pragma declaration",				"",				"collected\t\t",				"\tthe current collection of Pragma",				"\t",				"filter",				"\ta block or a message send which is used in order to filter the pragma. This is a one argument valuable. When evaluated, the candidate pragam is passed as argument and the result must be a boolean. ",				"\t"			],			"category" : "PragmaCollector-Base"		},		"ReadWriteStream" : {			"hash" : 1107456,			"definition" : "WriteStream subclass: #ReadWriteStream\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I represent an accessor for a sequence of objects. My instances can both read and store objects."			],			"category" : "Collections-Streams-Base"		},		"RSCompositeAnimation" : {			"hash" : 5870080,			"definition" : "RSAbstractAnimation subclass: #RSCompositeAnimation\r\tinstanceVariableNames: 'animations'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Animation-Core'",			"comment" : [				"Super class of composite animations"			],			"category" : "Roassal3-Animation-Core"		},		"SpecFocusOrder" : {			"hash" : 945152,			"definition" : "Object subclass: #SpecFocusOrder\r\tinstanceVariableNames: 'presenters'\r\tclassVariableNames: ''\r\tpackage: 'Spec-Core-Support'",			"comment" : [				"A SpecFocusOrder manage the path of focus between widgets.",				"",				"I use a collection (presenters) to keep widgets I managed. When I reach the end of the collection, I try to give the focus at the parent in the hierarchy, if it is nil I loop.",				"",				"I provide the following methods",				"- add: and addLast: to add a widget in my collection",				"- giveFocusToNextFrom:for: and giveFocusToPreviousFrom:for: to make me change the focus, the first argument is presenter who leave the focus and the second is the current model in the hierarchy.",				"- ifEmpty:ifNotEmpty: and ifNotEmpty: are send in my collection.",				"- presenters is the getter of my collection.",				"- removeAll to remove all my widgets.",				"",				"My super class is not OrderedCollection because it could be a problem for the devellopement of another behaviour."			],			"category" : "Spec-Core-Support"		},		"CTLinksLinkTest" : {			"hash" : 2647296,			"definition" : "TestCase subclass: #CTLinksLinkTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-Links-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "Containers-Links-Tests"		},		"SpToolbarPresenter" : {			"hash" : 2507264,			"definition" : "SpAbstractWidgetPresenter << #SpToolbarPresenter\r\tslots: {\r\t\t\t #displayMode => ObservableSlot .\r\t\t\t #leftItems => ObservableSlot .\r\t\t\t #rightItems => ObservableSlot };\r\ttag: 'Widgets-Toolbar';\r\tpackage: 'Spec2-Core'",			"comment" : [				"A presenter to display a toolbar."			],			"category" : "Spec2-Core-Widgets-Toolbar"		},		"SpStubAbstractAdapter" : {			"hash" : 2684160,			"definition" : "SpAbstractAdapter subclass: #SpStubAbstractAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Stub-Adapters'",			"comment" : [				"I am an abstract class providing all the properties shared amongs all the stub adapters. They do not produce real views, only stub objects."			],			"category" : "Spec2-Adapters-Stub-Adapters"		},		"CoFetcher" : {			"hash" : 5472768,			"definition" : "Object subclass: #CoFetcher\r\tinstanceVariableNames: 'generator filter'\r\tclassVariableNames: ''\r\tpackage: 'HeuristicCompletion-Model-Core'",			"comment" : [				"I'm a kind of iterator (in the sense of GoF) that goes one by one over \"a stream\" of entities that can be consumed by the completion engine within a completion context.",				"",				"I provide access to the elements I return one by one (using the next message) in a controlled manner. ",				"At the root, I define the architecture to yield one entry at a time. ",				"The next method invokes the hook method #entriesDo: with a generator yielding capability.",				"This way any use of #next will be done step by step. ",				"",				"My subclasses implement the following method entriesDo: aBlock which defines the semantics of element fetching",				"Here is a simple example where a generic fetcher is used on a collection, and wrapped by a fetcher that avoids returning duplicate elements.",				"",				"[[[",				"fetcher := AvoidRepeatedComplishonFetcher new",				"\tcomplishonFetcher: (GenericComplishonFetcher onCollection: #( a b b a c )).",				"]]]",				"\t",				"Here are two examples of definition",				"",				"[[[",				"AvoidRepeatedComplishonFecther >> entriesDo: aBlock",				"\tdecoree",				"\t\tentriesDo: [ :elem | ",				"\t\t\t(self hasAlreadyReturned: elem)",				"\t\t\t\tifFalse: [ elements add: elem.",				"\t\t\t\t\taBlock value: elem ] ]",				"]]]",				"",				"[[[",				"GenericComplishonFetcher >> entriesDo: aBlock",				"",				"\tcollection do: aBlock",				"]]]",				"",				"",				"",				"\t"			],			"category" : "HeuristicCompletion-Model-Core"		},		"CharacterSetComplement" : {			"hash" : 884992,			"definition" : "Collection subclass: #CharacterSetComplement\r\tinstanceVariableNames: 'absent byteArrayMapCache'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-CharacterSets'",			"comment" : [				"CharacterSetComplement is a space efficient implementation of (CharacterSet complement) taking care of WideCharacter (code > 255)",				"",				"However, it will maintain a byteArrayMap for character <= 255 in a cache for performance",				"",				"instance variables:",				"\tabsent <CharacterSet> contains character that are not in the set (i.e. my complement)",				"\tbyteArrayMapCache <ByteArray | nil> cache this information because it has to be used in tight loops where efficiency matters"			],			"category" : "Collections-Support-CharacterSets"		},		"DAPackageRelationGraph" : {			"hash" : 2007552,			"definition" : "Object subclass: #DAPackageRelationGraph\r\tinstanceVariableNames: 'packages classToPackage'\r\tclassVariableNames: ''\r\tpackage: 'Tool-DependencyAnalyser-Core'",			"comment" : [				"I'm a package dependency graph. ",				"To build the dependency graph among packages, you have just to give a set of PDPackage on entry. Then :",				"",				"\t- use the message computeStaticDependencies messages to retrieve all the dependency among the packages.",				"\t- use the message removeInternalDependencies if you want to remove all the internal dependency.",				"\t- finally use combineDependencies to combine each dependency which have the same source and the target into \tcomposite dependency.",				"\t\t"			],			"category" : "Tool-DependencyAnalyser-Core"		},		"SpCompositeOutputPort" : {			"hash" : 2669824,			"definition" : "SpOutputPort subclass: #SpCompositeOutputPort\r\tinstanceVariableNames: 'ports'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Transmission-Base'",			"comment" : [				"A composited output port that allow presenters to trigger output transmissions to several subpresenters (or itself)"			],			"category" : "Spec2-Transmission-Base"		},		"RSQuadTreeF" : {			"hash" : 5907968,			"definition" : "RSObject subclass: #RSQuadTreeF\r\tinstanceVariableNames: 'charge leaf soleChild northEastQuad northWestQuad southEastQuad southWestQuad centerOfCharge rectangle'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Layouts-Util'",			"comment" : [				"TODO"			],			"category" : "Roassal3-Layouts-Util"		},		"ImageReadWriter" : {			"hash" : 562944,			"definition" : "Object subclass: #ImageReadWriter\r\tinstanceVariableNames: 'stream'\r\tclassVariableNames: ''\r\tpackage: 'Graphics-Files'",			"comment" : [				"I am ImageReadWriter. ",				"I read an encoded image from a binary stream and return its as a Form. ",				"I write and encode an image as Form to a binary stream.",				"I am an abstract class, my subclasses implement concrete formats.",				"I can autodetect the format of some encoded images, so you can use me directly.",				"",				"Usage",				"",				"\tImageReadWriter formFromFileNamed: 'test.png'",				"\tImageReadWriter formFromStream: 'test.png' asFileReference binaryReadStream",				"",				"Implementation ",				"",				"Instance Variables:",				"\tstream\t\t<ReadStream|WriteStream>\tbinary stream that I read from or write to",				"",				"Subclasses must implement the following messages:",				"\taccessing",				"\t\tnextImage",				"\t\tnextPutImage:",				"\ttesting",				"\t\tcanUnderstand         (or my class side's #understandsImageFormat:)",				"\t\t\t",				"(original) copyright (c) Kazuki Yasumatsu, 1995. All rights reserved."			],			"category" : "Graphics-Files"		},		"StSpotterIterator" : {			"hash" : 5673472,			"definition" : "Object subclass: #StSpotterIterator\r\tinstanceVariableNames: 'context items'\r\tclassVariableNames: ''\r\tpackage: 'NewTools-Spotter-Iterators'",			"comment" : [				"Define an iterator to be used to feed items to spotter"			],			"category" : "NewTools-Spotter-Iterators"		},		"LayoutCell" : {			"hash" : 585472,			"definition" : "Object subclass: #LayoutCell\r\tinstanceVariableNames: 'target cellSize extraSpace flags nextCell'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-Layouts'",			"comment" : [				"I am used in table layouts to hold temporary values while the layout is being computed.",				"",				"Instance variables:",				"\ttarget \t\t<Morph>\t\tThe morph contained in this cell",				"\tcellSize \t\t<Point>\t\tThe size of the cell",				"\textraSpace \t<nil | Point>\tAdditional space to add after this cell",				"\tnextCell \t<nil | LayoutCell>\tThe next cell in the arrangement.",				"",				"Implementation note:",				"Both, cellSize and extraSpace contains points where",				"\tx - represents the primary table direction",				"\ty - represents the secondary table direction"			],			"category" : "Morphic-Base-Layouts"		},		"KMStorage" : {			"hash" : 584448,			"definition" : "Object subclass: #KMStorage\r\tinstanceVariableNames: 'namedRegistry anonymousRegistry'\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-Core-Base'",			"comment" : [				"I am a storage of shortcuts. I store and provide facilities to access named and annonimous shortcuts."			],			"category" : "Keymapping-Core-Base"		},		"SourceFile" : {			"hash" : 1140224,			"definition" : "Object subclass: #SourceFile\r\tinstanceVariableNames: 'path stream potentialLocations'\r\tclassVariableNames: ''\r\tpackage: 'System-Sources-Sources'",			"comment" : [				"asdasd"			],			"category" : "System-Sources-Sources"		},		"KMDispatchChain" : {			"hash" : 570112,			"definition" : "Object subclass: #KMDispatchChain\r\tinstanceVariableNames: 'target dispatcher initialTarget'\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-Core-Dispatching'",			"comment" : [				"I am an object that controls the dispatch order of keymaps given a hierarchy of morphs."			],			"category" : "Keymapping-Core-Dispatching"		},		"STONListWriter" : {			"hash" : 343296,			"definition" : "STONStreamWriter subclass: #STONListWriter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'STON-Core-Writer'",			"comment" : [				"STONArrayWriter helps in writing array based STON representations."			],			"category" : "STON-Core-Writer"		},		"SpActionBarPresenter" : {			"hash" : 2496512,			"definition" : "SpAbstractWidgetPresenter subclass: #SpActionBarPresenter\r\tinstanceVariableNames: 'items'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Widgets'",			"comment" : [				"A full width bar designed to present contextual actions. ",				"It is expected to be displayed below the content and expand horizontally to fill the area.",				"This is like the small action bars at the bottom of a list in most mobile apps (or macOS), which shows small icons with actions."			],			"category" : "Spec2-Core-Widgets"		},		"CTSkipListTest" : {			"hash" : 2777856,			"definition" : "TestCase subclass: #CTSkipListTest\r\tuses: TIceImagesExporting + MTTProfilingCopying + MTTUmlSequenceDiagramBuilderWithOutliners\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Containers-SkipList-Tests'",			"comment" : [				"A CTSkipListTest is a test class for testing the behavior of CTSkipList"			],			"category" : "Containers-SkipList-Tests"		},		"IRSequence" : {			"hash" : 1245440,			"definition" : "Object subclass: #IRSequence\r\tinstanceVariableNames: 'sequence orderNumber method'\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-IR-Nodes'",			"comment" : [				"A sequence is corresponds to a block in the control flow graph."			],			"category" : "OpalCompiler-Core-IR-Nodes"		},		"SocketStream" : {			"hash" : 1367296,			"definition" : "Object subclass: #SocketStream\r\tinstanceVariableNames: 'recentlyRead socket inBuffer outBuffer inNextToWrite outNextToWrite lastRead timeout autoFlush bufferSize binary shouldSignal'\r\tclassVariableNames: ''\r\tpackage: 'Network-Kernel-Base'",			"comment" : [				"SocketStream is a wrapper for class Socket making it easy to write networking code by giving the programmer a stream-like protocol. A Socket is a two way communication link with two logically separate channels - input and output. The Socket class is the lowest level in Pharo for network communication and using it directly can be difficult and bug prone.",				"",				"A SocketStream can be in binary or ascii mode, ascii is the default which means you are transmitting and receiving Strings. Most Internet protocols are in clear text ascii, like for example HTTP. Another setting is what timeout you want to use - default is the standardTimeout from Socket. More settings can be found in the method category 'configuration'.",				"",				"Simplest example of connecting, sending/receiving and closing:",				"",				"| stream result |",				"stream := SocketStream openConnectionToHostNamed: 'www.pharo-project.org' port: 80.",				"[[stream nextPutAll: 'GET / HTTP/1.0'; crlf; crlf; flush.",				"result := stream upToEnd. \"Give us all data until the socket is closed.\"",				"Transcript show: result; cr.]",				"\tensure: [stream close]]",				"\t\ton: ConnectionTimedOut",				"\t\tdo: [:ex | Transcript show: ex asString;cr. ex resume]",				"",				"There are two important things to note above:",				"\t- The methods in category \"stream in\" can signal two exceptions (unless turned off with #shouldSignal:):",				"\t\tConnectionClosed and ConnectionTimedOut",				"\t- We close the stream using #ensure:, that is to make sure it isn't left opened.",				"\t- We use #on:do: to catch any signal. In this case we do not need to catch ConnectionClosed since #upToEnd does that for us intrinsically.",				"",				"----------------",				"SocketStream (below called SS) is a reimplementation of 'Old'-SocketStream (below called OSS) - the class that originates from the original Comanche implementation but now is included in standard Squeak. SS has the same protocol as OSS and is meant to replace it. SS is faster, more flexible, is better documented and adds a few features:",				"",				"1. #shouldSignal:, which decides if SS should signal low level Socket exceptions (true) or if it should swallow them like original OSS did. Default is true. The only reason I added this is for backwards compatibility - not signalling causes problems - see bug 4 below.",				"",				"2. #nextAllInBuffer, #nextInBuffer:, #skip:, #receiveData:, #nextPutAllFlush: and #recentlyRead are new additions to the public protocol.",				"",				"",				"It also fixes various bugs:",				"",				"1. #isDataAvailable could theoretically answer false, when there actually is some in the buffer in OSS. If #receiveDataIfAvailable reads the last byte then the following \"socket dataAvailable\" would answer false. So the last byte would be sitting in the inStream missed.",				"",				"2. #upToAll: in OSS has several problems, for example - #positionOfSubCollection:ifAbsent: which was introduced answers one position too low. This was compensated in upToAll:, but only in the pushBack: call, not the actual result being returned which was cut short 1 byte. Amusingly this makes KomHttpServer not use \"Keep-Alive\" since the last $e in 'Alive' was cut short. :)",				"",				"3. SS doesn't inherit from PositionableStream since that just breaks various inherited messages, like for example #skip:. OSS should IMHO be changed to inherit from Object - or of course, replaced in full with SS. :)",				"",				"4. Since SocketStream by default signals closes and timeouts the SocketStreamTest now passes. The reason for SocketStream to fail is that while it does timeout on a low level (#SocketStream>>receiveData doesn't hang forever) - the callers of #receiveData sometimes loop - like in #next:, and thus eliminates the timeout. SS warns about some methods (in their method comments) not honouring timeouts if shouldSignal is false, I really don't know what they should do in that case:",				"\t#next:, #upTo:, #upToAll: and #upToEnd (and #receiveData:)",				"",				"",				"The primary reason for the SS implementation is optimal performance. The main differences in implementation with the old OSS are:",				"",				"1. SS uses two buffers directly (inBuffer and outBuffer) with pointers marking start and stop within the buffer. OSS instead uses two regular streams, a ReadStream and a WriteStream. Using internal buffers makes it possible to avoid copying and reallocation in various ways, it also makes SS be able to have specialized growing/buffer moving behaviour.",				"",				"2. #upTo:, #upToAll: and #peekForAll: uses selectged String messages that in turn uses fast primitives for searching. OSS used other messages that fell back on byte per byte reading.",				"",				"3. #receiveData in OSS creates a temporary buffer stream for each call! During a long read operation, like say #upToAll: (which for example is used when uploading files using HTTP POST forms), this is devastating - especially since the default size is only 2000 bytes - and leads to a very high number of low level read operations on the Socket, typically 100 times more calls than with OSS. The buffer in OSS is held in an instvar (not recreated for each call), is larger from the start and above all - grows dynamically by doubling. OSS can also avoid a grow/reallocation by doing a \"move down\" if data has been read from the SS as it comes in and through that making room in the lower part of the inBuffer. The net result is that upToAll: for large files is about 10 times faster.",				"",				"4. The implementation of upTo: and upToAll: tries to avoid doing unnecessary find operations in the buffer and is greedy by default, which means it favors reading more data - if available - before searching for the stop sequence. If we had #findString:startingAt:stoppingAt: this wouldn't have to be greedy and we wouldn't be needlessly scanning dead buffer area. VM hackers? Also, while you are at it - make it work for ByteArrays too. :)",				"",				"",				"SS can not be run unbuffered, since that seems unneeded. The option to autoFlush is still available, with it set to true SocketStream (just like OSS) will flush on its own on each nextPut:/nextPutAll:, otherwise flushing it will have to be done manually but is done on close.",				"",				"The first performance tests shows that, as noted above, receiving large amounts of data using #upToAll: is greatly improved - factor of 10. Serving HTTP with small payloads seemed at first not be faster at all - but this is due to the high overhead of Socket connect/close and other things. Increasing payloads show a difference and especially with keep alive on - where the new SS roughly doubles the throughput!"			],			"category" : "Network-Kernel-Base"		},		"IceNode" : {			"hash" : 2273536,			"definition" : "IceAbstractNode subclass: #IceNode\r\tinstanceVariableNames: 'parent childrenDictionary value'\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Changes'",			"comment" : [				"I am a tree implementation used for diffing and merging.",				"",				"I work by composition and not inheritance. My users should use the values of the node (kept in the #value instance variable) and not subclass myself.",				"Each node stores its child nodes in a dictionary, indexed by a key.",				"",				"Tree API:",				" - #/ access to children",				" - #path get the path of the current node in the tree",				" - #parent get the parent node of the current node",				" - #rootNode get the root node of the current tree",				" - #children get the children of the current node",				" - #keys, #keysDo:, #includesKey: enumerate the keys of the node",				" - #at:put, #childAt:ifAbsentPut:, #childAt:ifPresent:",				" - #resolve:, #resolve:ifAbsent: resolve a path in the current node",				" - #replaceBy: replaces the current node by another node",				" - #replace:with: replaces the given child node by another node",				"",				"Enumerating API:",				" - #allSatisfy:",				" - #anySatisfy:",				" - #collect:",				" - #detect:",				" - #select:",				" - #count:",				" - #do:",				"",				"Visiting API:",				" - visit:"			],			"category" : "Iceberg-Changes"		},		"SmallDictionary" : {			"hash" : 1135616,			"definition" : "Collection subclass: #SmallDictionary\r\tinstanceVariableNames: 'keys values size'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Dictionaries'",			"comment" : [				"`SmallDictionary` is a special dictionary optimized for small collections. In addition to the normal dictionary protocol, it also supports an `#empty` message which \"empties\" the collection but may hang on to the original elements (so it could collect garbage). Without `#empty` we would either need to create a new dictionary or explicitly remove everything from the dictionary. Both of these take more time and `#empty`. Be careful, I cannot have *nil* as key. ",				"",				"### Public API and Key Messages",				"",				"- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue \t\tallow to add an element.  ",				"- #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock \t\tallow to access my values.",				"- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: \t\tallow to iterate on me effectively",				"",				"### Examples ",				"",				"",				"To create a dictiony with indexes as key: ",				"",				"```",				"SmallDictionary withAll: #(7 3 1 3)   \t\t",				"\">>>  a SmallDictionaryDictionary(1->7 2->3 3->1 4->3 \"",				"```",				"To use Objects as key (here symbols): ",				"",				"```",				"\tcolors := SmallDictionary new ",				"\t\t\t\tat: #yellow put: Color yellow; ",				"\t\t\t\tat: #blue put: Color blue;",				"\t\t\t\tat: #red put: Color red;",				"\t\t\t\tyourself.",				"\t\t\t\t",				"\tcolors at: #yellow. \t\"returns:  Color yellow\"",				"\tcolors keys          \t\t\"returns: a Set(#blue #yellow #red)\"",				"\tcolors values     \t\t\"returns:  {Color blue. Color yellow. Color red}\"",				"",				"\tcolors empty \t\"a SmallDictionary()\"",				"```",				"",				"### Internal Representation and Key Implementation Points.",				"Instance Variables",				"- keys:\t\t<Array>\t\tArray of keys (we don't use Associations for our key value pairs)",				"- size:\t\t\t<Integer>\tSize of the dictionary",				"- values:\t\t<Array>\t\tArray of our values",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Unordered-Dictionaries"		},		"IceTipStandardAction" : {			"hash" : 6299904,			"definition" : "IceTipAction subclass: #IceTipStandardAction\r\tinstanceVariableNames: 'message successAnnounceBlock actionBlock'\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-TipUI-Commands'",			"comment" : [				"I'm a generic UI action.",				"I will perform an action by informing user what's happening.",				"I will also check for errors happening while performing the task and try to recover from them."			],			"category" : "Iceberg-TipUI-Commands"		},		"RubParagraphDecorator" : {			"hash" : 614144,			"definition" : "Object subclass: #RubParagraphDecorator\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Rubric-Editing-Core'",			"comment" : [				"I am a decorator for the paragraph of a text area. I can be used to draw something on the paragraph "			],			"category" : "Rubric-Editing-Core"		},		"StartupPreferencesLoader" : {			"hash" : 1449728,			"definition" : "Object subclass: #StartupPreferencesLoader\r\tinstanceVariableNames: 'errors actions'\r\tclassVariableNames: 'AllowStartupScript UniqueInstance'\r\tpackage: 'StartupPreferences'",			"comment" : [				"StartupPreferencesLoader searches for and executes .st files from certain locations such as Library/Preferences/pharo on Mac OS X.  ",				"",				"StartupPreferencesLoader looks within such locations for a 'pharo' folder. This contains the startup scripts common to all versions of Pharo, and also optionally a folder per Pharo version holding startup scripts suitable for that version only.  So a typical directory layout might be...",				"",				".../some/folders/pharo/Content/Resources/pharo.image.",				".../some/folders/pharo/Content/Resources/startup.st",				".../some/folders/.config/pharo/author.st",				".../some/folders/.config/pharo/useSharedCache.st",				".../some/folders/.config/pharo/1.4/mystartupFor14only.st",				".../some/folders/.config/pharo/2.0/mystartupFor20only.st",				"",				"(**Note however that '.config' is an invalid filename on Windows, so '..config' is used instead)",				"",				"To know the real values for you...",				"Print the result of \"StartupPreferencesLoader preferencesGeneralFolder\" which holds the startup scripts common to all versions of Pharo.",				"Print the result of \"StartupPreferencesLoader preferencesVersionFolder\" which holds the startup scripts specific to the version of the current image.",				"",				"-----------",				"",				"",				"StartupPreferencesLoader example",				"",				"will define a script sample startup.st in your unix root on unix ",				"",				"Its contents is ",				"",				"StartupPreferencesLoader default executeAtomicItems: {",				"\tStartupAtomicItem name: 'Open Help' code: 'Workspace openContents: ''Here is just an example of how to use the StartupPreferencesLoader.",				"I should only be displayed once.",				"\t",				"You can also see StartupPreferencesLoader class>>#example'' label: ''Help''' isSingleton: true.",				"\tStartupAtomicItem name: 'Open Workspace' code: 'Workspace openContents: ''I should be displayed each time'''.",				"}",				"",				"EXAMPLE 1",				"============",				"",				"\t\" an example of script generation \"",				"\t| item1 item2 |",				"\titem1 := StartupAction name: 'Open Help' code: 'Smalltalk tools workspace openContents: ''Here is just an example of how to use the StartupPreferencesLoader.",				"I should only be displayed once.",				"\t",				" You can also see StartupPreferencesLoader class>>#example'' label: ''Help''' runOnce: true.",				"\titem2 := StartupAction name: 'Open Workspace' code:  [ Workspace openContents: 'I should be displayed each time' ].",				"\tStartupPreferencesLoader default addAtStartupInGeneralPreferenceFolder: {item1. item2}.",				"\t",				"\tStartupPreferencesLoader default loadFromDefaultLocations.",				"\tStartupPreferencesLoader default loadFromDefaultLocations.",				"",				"EXAMPLE 2",				"============",				"",				"\t\" it's my personal script provided as example\"",				"\t| items |",				"\titems := OrderedCollection new.",				"\titems add: (StartupAction name: 'Set the Author' code: [ Author fullName: Author fullName printString ]). \"replace it by your name\"",				"\t",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'author.st'.",				"\titems removeAll.",				"\t",				"\titems add: (StartupAction name: 'Dragging Option' code: [ UITheme defaultSettings fastDragging: true ]).",				"\titems add: (StartupAction name: 'Dialog Auto Accept' code: [ TextEditorDialogWindow autoAccept: true ]).",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'settings.st'.",				"\titems removeAll.",				"\t",				"\titems add: (StartupAction name: 'Fonts option' code: [ FreeTypeSystemSettings loadFt2Library: true.\t",				"\tFreeTypeFontProvider current updateFromSystem.",				"\tStandardFonts defaultFont: (LogicalFont familyName: 'Lucida Grande' pointSize: 10) forceNotBold.",				"\tGraphicFontSettings resetAllFontToDefault.",				"\tStandardFonts codeFont: (LogicalFont familyName: 'Consolas' pointSize: 10).] runOnce: true).",				"\t",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'fonts.st'.",				"\titems removeAll.",				"\tStartupPreferencesLoader default addAtStartupInImageDirectory: items.",				"\t",				"\tStartupPreferencesLoader default loadFromDefaultLocations.",				"",				"EXAMPLE 3",				"============",				"",				"\t| items |",				"\titems := OrderedCollection new.",				"\t",				"\titems add: (StartupAction name: 'General Preferences for all Pharo versions' code: [ ",				"\t\tFileStream stdout lf; nextPutAll: 'Setting general preferences for all Pharo versions'; lf.",				"\t\tFileStream stdout lf; nextPutAll: 'Finished'; lf.",				"\t\t ]).",				"\tStartupPreferencesLoader default addAtStartupInGeneralPreferenceFolder: items named: 'generalSettings.st'.",				"\t",				"\titems removeAll.",				"\titems add: (StartupAction name: 'Settings' code: [ ",				"\t\tFileStream stdout lf; nextPutAll: 'Setting general preferences for Pharo 2.0'; lf.",				"\t\tFileStream stdout lf; nextPutAll: 'Finished'; lf.",				"\t\t ]).",				"\tStartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'settings.st'.",				"\t",				"\titems removeAll.",				"\titems add: (StartupAction name: 'Image diretory' code: [ ",				"\t\tFileStream stdout lf; nextPutAll: 'Setting preferences for image directory'; lf.",				"\t\tFileStream stdout lf; nextPutAll: 'Finished'; lf.",				"\t\t ]).",				"\tStartupPreferencesLoader default addAtStartupInImageDirectory: items "			],			"category" : "StartupPreferences"		},		"DoubleLinkedList" : {			"hash" : 1611264,			"definition" : "Object subclass: #DoubleLinkedList\r\tinstanceVariableNames: 'head tail'\r\tclassVariableNames: ''\r\tpackage: 'Collections-DoubleLinkedList-Base'",			"comment" : [				"I am DoubleLinkedList, an ordered list data structure consisting of objects, most likely DoubleLinks or something compatible, connected to each other by forward and backwards links.",				"",				"Note that some of my API deals with the elements that I hold, like any other collection, while some of my API references the links that I use internally (those usually have the word link in the selector name). Some methods accepts both values or links as argument (like #add:). Because I expose some if my internal structure, I can be broken quite easily.",				""			],			"category" : "Collections-DoubleLinkedList-Base"		},		"RelationSet" : {			"hash" : 3673088,			"definition" : "Collection subclass: #RelationSet\r\tinstanceVariableNames: 'owner slot set'\r\tclassVariableNames: ''\r\tpackage: 'Slot-Examples-Associations'",			"comment" : [				"I'm a Set like collection that is used to hold collections of associated objects. When an object is added to or removed from this collection the inverse side is also updated."			],			"category" : "Slot-Examples-Associations"		},		"Object" : {			"hash" : 805632,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		},		"OrderedCollection" : {			"hash" : 810240,			"definition" : "SequenceableCollection subclass: #OrderedCollection\r\tinstanceVariableNames: 'array firstIndex lastIndex'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I am one of the most common collection. I can grow, and elements can be added sequentially by the user.  ",				"I am more general than Array; my size grows on demand. I store data inside an Array and remember the first and last index. If I need, I can replace this Array by a larger one.",				"",				"I am usually used to store an unknown amount of objects. When my contents size will not move, one can send me the #asArray message to get better performances, but I cannot grow anymore (add: and remove: are not supported on Array).",				"",				"### Public API and Key Messages",				"",				"- #new / #withAll: aCollection / #with: anObject \tare common constructors",				"- #add: anObject / #at: anIndex put: anObject / #at: anIndex ifAbsentPut: anObject \tallow to add new elements to myself.",				"- #remove: anObject / #removeIndex: anIndex \tallow to remove an element.",				"- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock \tare common iterators.",				"",				"### Examples\t",				"",				"```\t",				"\t\"There is many ways to create an OrderedCollection, here are some:\"",				"\tordCol := OrderedCollection new.",				"\tordCol",				"\t\tadd: 'one';",				"\t\tadd: 'two';",				"\t\taddFirst: 'zero';",				"\t\taddLast: 'three'.",				"\tordCol.\t\t\"returns: an OrderedCollection('zero' 'one' 'two' 'three')\"",				"",				"\t\"or\"",				"\tordCol := OrderedCollection with: 'one' with: 'two' with: 'three'.",				"\tordCol.\t\t\"returns: an OrderedCollection('one' 'two' 'three')\"",				"",				"\t\"or from an other collection\"",				"\tordCol := OrderedCollection withAll: #('one' 'two' 'three').",				"\tordCol.\t\t\"returns: an OrderedCollection('one' 'two' 'three')\"",				"",				"\t\"or\"",				"\t#('one' 'two' 'three') asOrderedCollection.",				"",				"\t\"Some manipulations\"",				"\tordCol := OrderedCollection ofSize: 2.",				"\tordCol",				"\t\tat: 1 put: 'one';",				"\t\tat: 2 put: 'two';",				"\t\tat: 2 ifAbsentPut: 'three'.",				"\tordCol.\t\t\"returns: an OrderedCollection('one' 'two')\"",				"\tordCol",				"\t\tremove: 'two';",				"\t\tremoveIndex: 1.",				"\tordCol.\t\t\"returns:  an OrderedCollection()\"",				"",				"\t\"A last one\"",				"\tordCol := OrderedCollection with: $b with: $c with: $a.",				"\tordCol sort: [ :first :second | first < second ].\t\t\"returns: an OrderedCollection($a $b $c)\"",				"\tordCol collect: [ :element | element asUppercase ].\t\t\"returns:  an OrderedCollection($A $B $C)\"",				"\tordCol select: [ :element | element >= $b ].\t\t\"returns:  an OrderedCollection($b $c)\"",				"\tordCol do: [ :element | element inspect ].",				"\tordCol asArray\t\t\"returns: #($a $b $c)\"",				"``` ",				"",				"###Internal Representation and Key Implementation Points.",				"Instance Variables",				"- array:\t\t\t<Array> \t\tAn Array where I store my elements. If I need a bigger one I can remove this one and create a new one.",				"- firstIndex:\t\t<Integer> \tThe index of my first element.",				"- lastIndex:\t\t<Integer> \tThe index of my last element.",				"",				"I store my elements inside an array. This array is AT LEAST of the size of my elements. If someone adds an element and my array is not large enough, I remove it and I create a new one larger with the same elements (usually, the size double)."			],			"category" : "Collections-Sequenceable-Ordered"		},		"Integer" : {			"hash" : 1011968,			"definition" : "Number subclass: #Integer\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		},		"FLLargeIdentitySet" : {			"hash" : 749312,			"definition" : "FLLargeIdentityHashedCollection subclass: #FLLargeIdentitySet\r\tinstanceVariableNames: 'array includesNil'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Collections'",			"comment" : [				"A LargeIdentitySet is an IdentitySet for large collections.",				"Rather than using linear probing, it takes advantage of the fact that identityHash (on a classic, 32bit VM) ",				"in Pharo only has 4096 unique values, using a bucket for each of those.",				"It will still work if hash range changes (ie buckets are chosen mod 4096), ",				"but the potential gain will be lower the more diverse the hash space is.",				"",				"With linear probing you risk an array looking like this:",				"Index:\tHash:",				"\t1\tX",				"\t2\tX",				"\t3\tX",				"\t4\t4",				"\t5\t5",				"\t6\t4",				"\t7\t4",				"\t8\t7",				"\t9\t6",				"\t10\tX",				"",				"While with buckets the same dataset looks:",				"Index:\tHash:",				"\t1\tX",				"\t2\tX",				"\t3\tX",				"\t4\t[4, 4, 4]",				"\t5\t5",				"\t6\t6",				"\t7\t7",				"\t8\tX",				"\t9\tX",				"\t10\tX",				"",				"So includes: can generally be done faster (also sped up byusing a special primitive), ",				"and removal of objects does not have to do extensive cleanup if object was part of a chain."			],			"category" : "Fuel-Core-Collections"		},		"Interval" : {			"hash" : 804608,			"definition" : "SequenceableCollection subclass: #Interval\r\tinstanceVariableNames: 'start stop step'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"I represent a finite arithmetic progression (a range of number).",				"",				"Description",				"--------------------------",				"",				"I allow to iterate easily on a range of number (for example to manupulate an index) with a define step (by default one by one).",				"",				"Zero step size is not allowed and will raise an error.",				"",				"I know at which number I begin, at which number I end and the step.",				"",				"I work with the Number class. I manipulate some numbers and I can be created from a Number.  ",				"",				"Public API and Key Messages",				"--------------------------",				"",				"- I implement most of the classic Iterators as #do: or #collect:.",				"",				"- #from: to: and #from: to: by:  are my two common contructors. But I am usually created by a message send on Number  (See examples).",				"",				"Examples ",				"--------------------------",				"",				"To create an Interval from 1 to 100 there is many ways:",				"",				"\tInterval from: 1 to: 100",				"\tor",				"\tInterval from: 1 to: 100 by: 1",				"\t",				"\tor from a Number ",				"\t",				"\t1 to: 100 ",				"\tor ",				"\t1 to: 100 by: 1",				"\t",				"\tYou can also use floats or fractions: ",				"\t",				"\t0.1 to: 0.5 by: 0.01",				"\tor",				"\t1/10 to: 1/2 by: 1/100",				"\t",				"\tNB: both expressions will not give exactly the same result. The first will contains only floats and the second only fractions.",				"\t",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------------",				"",				"    Instance Variables",				"\tstart:\t\t<Number> \tThe beginning of the Interval.",				"\tstep:\t\t<Number> \tThe end of the Interval.",				"\tstop:\t\t<Number> \tThe step of the interval. If the step is 3 and we begin at 1 the interval will be 1, 4, 7, 10, 13… until the end."			],			"category" : "Collections-Sequenceable-Base"		},		"SpTransmission" : {			"hash" : 2671872,			"definition" : "Object subclass: #SpTransmission\r\tinstanceVariableNames: 'fromPort toPort transformBlock preTransmission postTransmission'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Transmission-Base'",			"comment" : [				"! What is a transmission?",				"Transmissions are a way to connect presenters, thinking on the \"flow\" of information more than the way it is displayed. For example, think on a master-detail (A->B) relationship, when you navigate the elements in master A, you want to see the detail B. This is tipically solved showing a list with master elements and a form with the detail of each master. ",				"In Spec, this will be declared more or less like this: ",				"",				"[[[language=Smalltalk",				"layout := SpBoxLayout newHorizontal",				"\tadd: (list := self newList);",				"\tadd: (detail := self newText);",				"\tyourself.\t",				"]]]",				"",				"But this does not says how ==list== and ==detail== are linked. ",				"",				"The transmission sub-framework solves this in an elegant way: Each presenter defines ''output ports'' (ports to send information) and ''input ports'' (ports to receive information). Each presenter defines also a default input port and a default output port.",				"",				"!! Transmitting from an output port to an input port (==#transmitTo:==)",				"",				"A transmission connects a presenter's output port with a presenter's input port. ",				"See this example: ",				"",				"[[[language=Smalltalk",				"list transmitTo: detail.",				"]]]",				"",				"This will connect the ==list== presenter \"\"default output port\"\" with the ==detail== presenter \"\"default input port\"\". This line is equivallent (but a lot simpler) to this one:  ",				"",				"[[[language=Smalltalk",				"list defaultOutputPort transmitTo: detail defaultInputPort",				"]]]",				"",				"Is important to remark that a transmission does not connects two components, it connect two \"\"component ports\"\". The distinction is important because there can be many ports!  ",				"Take for example *class:SpListPresenter*, it defines two output ports (selection and activation), this means it is possible to define also this transmission: ",				"",				"[[[language=Smalltalk",				"list outputActivationPort transmitTo: detail defaultInputPort",				"]]]",				"",				"!! Transforming a transmission (==#transmitTo:transform:==)",				"The object transmitted from a presenter output port can be inadequate for the input port. To solve this problem a transmission allow transformations.",				"This is as simple as using the ==#transform:== protocol: ",				"",				"[[[language=Smalltalk",				"list ",				"\ttransmitTo: detail ",				"\ttransform: [ :aValue | aValue asString ].",				"]]]",				"",				"[[[language=Smalltalk",				"list defaultOutputPort ",				"\ttransmitTo: detail defaultInputPort ",				"\ttransform: [ :aValue | aValue asString ].",				"]]]",				"",				"!! Transmitting from an output port to an arbitrary input receiver (==#transmitDo:==, ==#transmitDo:transform:==)",				"It is possible that the user requires to listen an output port, but instead transmitting the value to another presenter, other operation is needed. ",				"There is the ==#transmitDo:== protocol to handle this situation: ",				"",				"[[[language=Smalltalk",				"list transmitDo: [ :aValue | aValue crTrace ].",				"]]]",				"",				"!! Acting after a transmission (==#postTransmission:==)",				"Sometimes after a transmission happens, the user needs to react to modify something given the new status achieved by the presenter (like, pre-selecting something).",				"The ==#postTransmission:== protocol allows you to handle that situation.",				"",				"[[[language=Smalltalk",				"list ",				"\ttransmitTo: detail ",				"\tpostTransmission: [ :fromPresenter :toPresenter :value | ",				"\t\t\"something to do here\"",				"\t\ttoPresenter enabled: value isEmptyOrNil not ].",				"]]]",				"",				"See *method:SpTransmission#postTransmission:*"			],			"category" : "Spec2-Transmission-Base"		},		"ZnMultiValueDictionary" : {			"hash" : 1314560,			"definition" : "Dictionary subclass: #ZnMultiValueDictionary\r\tinstanceVariableNames: 'limit'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Resource-Meta-Core'",			"comment" : [				"I am ZnMultiValueDictionary. ",				"I am a Dictionary.",				"",				"I offer an #at:add: method to transparently create Array valued multi entries when needed.",				"My #keysAndValuesDo: is overwritten to transparently deal with multi entries.",				"To merge two instance preserving multiple values you can use #addAllMulti:",				"I normally limit the number of entries to protect me from resource abuse.",				"",				"Note that most other methods will show the actual value.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-Resource-Meta-Core"		},		"Set" : {			"hash" : 819456,			"definition" : "HashedCollection subclass: #Set\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Sets'",			"comment" : [				"I represent a set of objects without duplicates.  I can hold anything that responds to",				"`#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,",				"Note that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.",				"",				"",				"The core operation is #find`ElementOrNil:`, which either finds the position where an",				"object is stored in array, if it is present, or finds a suitable position holding nil, if",				"its argument is not present in array.",				"",				"### Instance structure:",				"",				"- array\tAn array whose non-nil elements are the elements of the set,",				"  and whose nil elements are empty slots.  There is always at least one nil.",				"  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.",				"",				"-  tally\tThe number of elements in the set.  The array size is always greater than this.",				""			],			"category" : "Collections-Unordered-Sets"		},		"Stream" : {			"hash" : 835328,			"definition" : "Object subclass: #Stream\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I am an abstract class that represents an accessor for a sequence of objects. This sequence is referred to as my \"contents\"."			],			"category" : "Collections-Streams-Base"		},		"ZnApplicationFormUrlEncodedEntity" : {			"hash" : 1412864,			"definition" : "ZnEntity subclass: #ZnApplicationFormUrlEncodedEntity\r\tinstanceVariableNames: 'fields representation'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Core'",			"comment" : [				"I am ZnApplicationFormUrlEncodedEntity, a concrete HTTP Entity ",				"holding a set of fields (key value pairs) that is form URL encoded.",				"I am a ZnEntity.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Core"		},		"AbstractMorphicAdapter" : {			"hash" : 1566464,			"definition" : "AbstractAdapter subclass: #AbstractMorphicAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec-MorphicAdapters-Base'",			"comment" : [				"I am an abstract class providing all the properties shared amongst all the morphic specific adapters"			],			"category" : "Spec-MorphicAdapters-Base"		},		"SpAbstractMorphicAdapter" : {			"hash" : 2867712,			"definition" : "SpAbstractAdapter subclass: #SpAbstractMorphicAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Morphic-Base'",			"comment" : [				"I am an abstract class providing all the properties shared amongs all the morphic specific adapters"			],			"category" : "Spec2-Adapters-Morphic-Base"		},		"MetacelloVersionNumber" : {			"hash" : 1517312,			"definition" : "Magnitude variableSubclass: #MetacelloVersionNumber\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Model'",			"comment" : [				"# Metacello version format",				"",				"Thanks to [Mozilla Toolkit version format](https://developer.mozilla.org/en/Toolkit_version_format) for inspiration.",				"",				"##Version Format",				"A version string consists of one or more version parts, separated with dots or dashes.",				"",				"A version part with a leading dot is numeric. A version part with a leading dash is string.",				"",				"The rationale behind splitting a version part into a sequence of strings and numbers is that when comparing version parts, the numeric parts are compared as numbers, e.g. '1.0-pre.1' < '1.0-pre.10', while the strings are compared bytewise. See the next section for details on how versions are compared.",				"",				"##Comparing versions",				"",				"When two version strings are compared, their version parts are compared left to right. Empty parts are ignored.",				"",				"If at some point a version part of one version string is greater than the corresponding version part of another version string, then the first version string is greater than the other one.",				"",				"If a version string has extra parts and the common parts are equal, the shorter version string is less than the longer version string (1.0 is less than 1.0.0).",				"",				"Otherwise, the version strings are equal. ",				"",				"##Comparing version parts",				"",				"Version parts are also compared left to right, A string-part that exists is always less-then a nonexisting string-part (1.6-a is less than 1.6).",				"",				"Examples",				"",				"```",				"1 == 1. < 1.0 == 1..--0",				"< 1.1-a < 1.1-aa < 1.1-ab < 1.1-b < 1.1-c",				"< 1.1-pre < 1.1-pre.0 ",				"< 1.1-pre.1-a < 1.1-pre.1-aa < 1.1-pre.1-b < 1.1-pre.1",				"< 1.1-pre.2",				"< 1.1-pre.10",				"< 1.1 < 1.1.0 < 1.1.00",				"< 1.10",				"< 2.0",				"```"			],			"category" : "Metacello-Core-Model"		},		"SDL2TouchStateMachine" : {			"hash" : 4343296,			"definition" : "Object subclass: #SDL2TouchStateMachine\r\tinstanceVariableNames: 'first finish move color'\r\tclassVariableNames: ''\r\tpackage: 'OSWindow-SDL2-Examples-Touch'",			"comment" : [				"my role is to record the movements of a finger and associate a color to this movement"			],			"category" : "OSWindow-SDL2-Examples-Touch"		},		"CacheWeight" : {			"hash" : 1614336,			"definition" : "Object subclass: #CacheWeight\r\tinstanceVariableNames: 'total maximum compute'\r\tclassVariableNames: ''\r\tpackage: 'System-Caching'",			"comment" : [				"I  am CacheWeight.",				"I keep track of the weight of a cache.",				"",				"The weight of a cache is the sum of the weight of all values currently present. The simplest and default weight calculation returns a constant 1 for each value, effectively counting the number of values.",				"",				"The default maximum is 16.",				"",				"Using compute, a selector or block, applied to a value, different calculation can be made. Consider for example #sizeInMemory."			],			"category" : "System-Caching"		},		"DACompositeDependency" : {			"hash" : 2002944,			"definition" : "DAPackageDependency subclass: #DACompositeDependency\r\tinstanceVariableNames: 'dependencies'\r\tclassVariableNames: ''\r\tpackage: 'Tool-DependencyAnalyser-Core'",			"comment" : [				"A PDCompositeDependency is a composite dependency. A composite pattern is using.",				"",				"Actually in all case this dependency contains the dependencies between two packages and the instance variable dependencies contains all the type of dependencies (Extension, Inheritance, Reference, Trait)."			],			"category" : "Tool-DependencyAnalyser-Core"		},		"FLLargeIdentityDictionary" : {			"hash" : 748800,			"definition" : "FLLargeIdentityHashedCollection subclass: #FLLargeIdentityDictionary\r\tinstanceVariableNames: 'keys values'\r\tclassVariableNames: ''\r\tpackage: 'Fuel-Core-Collections'",			"comment" : [				"I am an IdentityDictionary optimized for including a large number of elements."			],			"category" : "Fuel-Core-Collections"		},		"MethodDictionary" : {			"hash" : 826624,			"definition" : "Dictionary variableSubclass: #MethodDictionary\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I'm a special dictionary holding methods. I am just like a normal Dictionary, except that I am implemented differently.  Each Class has an instance of MethodDictionary to hold the correspondence between selectors (names of methods) and methods themselves.",				"",				"In a normal Dictionary, the instance variable 'array' holds an array of Associations.  Since there are thousands of methods in the system, these Associations waste space.  ",				"",				"Each MethodDictionary is a variable object, with the list of keys (selector Symbols) in the variable part of the instance.  The variable 'array' holds the values, which are CompiledMethods.",				"",				"About flushCache methods and usage.",				"",				"The VM caches method lookups in a lookup cache from class,selector pairs to method,primitive pairs, where primitive may be null.  This is called the first-level method lookup cache.  The JIT VM caches message lookups in machine code, so that a particular piece of machine code exists in a state that invokes a method for a specific class very fast by embedding the class reference in a register load and the target method in a call instruction, and having the target method verify this \"cache probe\" (this is an \"in-line cache).  The JIT also caches the translation of a byte coded method to machine code, by hiding a reference to a machine code method in a byte coded method.",				"",				"These caches can be invalidated in several circumstances:",				"",				"1a. if one adds or removes a method from a class's method dictionary it may change the correct results of a lookup not merely of the class whose dictionary was updated but also subclasses of the class.",				"1b. if one replaces a method in a method dictionary this changes the target method for a lookup of the selector for the class and subclasses",				"",				"2. if one wants to rewrite the byte code or literals of a method, for example because a Slot definition has changed, then if the method has been compiled to machine code, the machine code must be discarded before the new code may be executed",				"",				"1a & 1b are done via Symbol>>flushCache.  In response the normal VM flushes its first-level method lookup cache, and the JIT also scans all of machine code looking for inline caches with that selector, and voiding them, reverting each send site for that selector to the \"unlinked\" state.",				"",				"There used to be confusion in Squeak, which Pharo inherited, that using CompiledMethod>>flushCache was somehow the right way to void caches when updating method dictionaries, flushing the old method in the dictionary, if any, and the new method.  It isn't, precisely because adding or removing methods affects the visibility of inherited methods with the same selector.  So MethodDictionary code should use Symbol>>flushCache, and only once, on each update of a method dictionary.  As a result, the VM will ensure that the necessary send caches are flushed for that selector.",				"",				"2. is done via CompiledMethod>>flushCache.  In response the VM searches the first-level method lookup cache and removes all entries whose target is the method.  In addition the JIT discards the machine code for the method, and searches for all send sites with that method's machine code as the target and voids them, reverting them to the unlinked state.",				"",				"The VM must be told to flush the cached state for a compiled method via CompiledMethod>>flushCache and will /try/ and void the state for that method.  But it can't always deal with existing activations of that method, because if there are activations running the machine code, that machine code can't merely be thrown away, and can't be replaced because its length may change, depending on literals or byte codes.  So this kind of byte coded method manipulation needs to be done with case and some understanding of the total system state."			],			"category" : "Kernel-Methods"		},		"StGenericGenerator" : {			"hash" : 5640192,			"definition" : "StIterator subclass: #StGenericGenerator\r\tinstanceVariableNames: 'generator'\r\tclassVariableNames: ''\r\tpackage: 'NewTools-Spotter-Processors-Iterators'",			"comment" : [				"I wrap a generator to provide the same API than the iterators.",				"My subclasses should implement #elementsDo: to iterate the collection or implement the values.",				"In this method, each of the generated values should be used with the valuable pased.",				"",				"",				"Ex:",				"elementsDo: aValuable",				"\t[ true ] whileTrue: [ aValuable value: 42  ].",				"\t",				"This example generates an infinite iterator always returning 42.",				"Using the generator will produce that the method is only executed on demand.",				"",				"This Iterator can also wrap collections, iterating one element at the time.",				"",				"Ex:",				"elementsDo: aValuable",				"\tSystemNavigation default allBehaviorsDo: aValuable"			],			"category" : "NewTools-Spotter-Processors-Iterators"		},		"MetacelloVersionLoadDirective" : {			"hash" : 332032,			"definition" : "MetacelloDirective subclass: #MetacelloVersionLoadDirective\r\tinstanceVariableNames: 'loadDirectives'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-MC-Directives'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tloadDirectives:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-MC-Directives"		},		"ArrayedCollection" : {			"hash" : 855808,			"definition" : "SequenceableCollection subclass: #ArrayedCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys."			],			"category" : "Collections-Abstract-Base"		},		"RSCanvas" : {			"hash" : 5806592,			"definition" : "RSObjectWithProperty subclass: #RSCanvas\r\tuses: RSTContainer\r\tinstanceVariableNames: 'shapes fixedShapes camera animations extent color morph clearBackground showRectangles nodes edges'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Core'",			"comment" : [				"<keyClass>",				"Roassal keeps its shapes (i.e., instance of a subclass of `RSShape`) into a canvas. The class `RSCanvas` implements the Roassal canvas.",				"",				"*Responsibility*: keep the (i) structure of the Roassal shapes (both fixed and non-fixed) and (ii) the animations. `RSCanvas` hides the creation of the `RSAthensMorph`.",				"",				"*Collaborators*: This class is the entry point of Roassal. As soon as one wishes to use Roassal, she has to go through a canvas.",				"",				"*Variables*:",				"- `shapes` keeps a collection of shapes (i.e., instance of a subclass of `RSShape`) as an instance of `RSGroup`. Shapes contained in `shapes` are considered as non-fixed, which means that they are subject to the camera.",				"- `fixedShapes` is an instance of `RSGroup` that contains \"fixed\" shapes. A fixed shape is a shape that is not subject to the state of the camera. A fixed shape remains at the same position, independently if the canvas is scrolled.",				"- `color` is an instance of the Pharo class `Color` and is used to paint the background.",				"- `morph` refers to an instance of the class `RSAthensMorph`, which is the object that intersects Roassal and Morphic.",				"- `camera` refers to the camera of the canvas.",				"- `clearBackground` is a boolean indicating whether the background must be cleared at each refresh. This is useful sometime to obtain some interesting visual effects.",				"",				"*Example*:",				"```Smalltalk",				"c := RSCanvas new.",				"c add: (RSLabel new text: 'Hello from Roassal').",				"c",				"```"			],			"category" : "Roassal3-Core"		},		"CTSkipList class" : {			"hash" : 2776576,			"definition" : "CTSkipList class\r\tinstanceVariableNames: ''",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SkipList"		},		"OSEnvironment" : {			"hash" : 1607168,			"definition" : "Object subclass: #OSEnvironment\r\tinstanceVariableNames: 'platform'\r\tclassVariableNames: 'Current'\r\tpackage: 'System-OSEnvironments-Base'",			"comment" : [				"I represent the user environment variables. See  `man environ` for more details.",				"Get access using: ",				"",				"\tSmalltalk os environment",				"",				"I have a Dictionary-like API to access the system environment variables.",				"The common denominator for all platforms implements a simple API that uses strings.",				"In other words, methods",				"",				"- #at:",				"- #at:put:",				"",				"and its variants receive normal strings and decide whether they have to encode those strings to platform bytes or not depending on the platform.",				"",				"My subclasses may or may not provide additional APIs to have more control on the particular encoding used."			],			"category" : "System-OSEnvironments-Base"		},		"Array2D" : {			"hash" : 857600,			"definition" : "Collection subclass: #Array2D\r\tinstanceVariableNames: 'contents numberOfColumns numberOfRows'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Ordered'",			"comment" : [				"I represent a mathematical matrix or a two-dimensional array. I provide methods for creating matrices, operating on them arithmetically and algebraically. ",				"",				"Structure:",				" - numberOfRows : a non-negative integer saying how many rows there are.",				" - numberOfColumns : a non-negative integer saying how many columns there are.",				" - contents : an Array holding the elements in row-major order.  That is, for a 2x3 array the contents are (11 12 13 21 22 23).  ",				"",				"",				"Element-wise matrix arithmetic works; you can freely mix matrices and numbers but",				"don't try to mix matrices and arrays (yet).",				"Matrix multiplication, using the symbol +* (derived from APL's +.x), works between",				"(Matrix or Array) +* (Matrix or Array).  Don't try to use a number as an argument of +*.",				"Matrix * Number and Number * Matrix work fine, so you don't need +* with numbers."			],			"category" : "Collections-Sequenceable-Ordered"		},		"RSTContainer" : {			"hash" : 5803520,			"definition" : "Trait named: #RSTContainer\r\tinstanceVariableNames: ''\r\tpackage: 'Roassal3-Core'",			"comment" : [				"My users can have edges and nodes useful to build graphs with roassal"			],			"category" : "Roassal3-Core"		},		"IRBuilder" : {			"hash" : 1243392,			"definition" : "Object subclass: #IRBuilder\r\tinstanceVariableNames: 'ir currentScope jumpBackTargetStacks jumpAheadStacks currentSequence sourceMapNodes sourceMapByteIndex'\r\tclassVariableNames: ''\r\tpackage: 'OpalCompiler-Core-IR-Manipulation'",			"comment" : [				"I provide a simple interface for constructing an IRMethod.  For example, to create an ir method that compares first instVar to first arg and returns 'yes' or 'no' (same example as in BytecodeGenerator), do:",				"",				"\tIRBuilder new",				"\t\tnumArgs: 1;",				"\t\taddTemps: #(a z);",				"\t\tpushReceiver;",				"\t\tpushInstVar: 1;",				"\t\tpushTemp: #a;",				"\t\tsend: #>;",				"\t\tjumpAheadTo: #else if: false;",				"\t\tpushLiteral: 'yes';",				"\t\treturnTop;",				"\t\tjumpAheadTarget: #else;",				"\t\tpushLiteral: 'no';",				"\t\treturnTop;",				"\t\tir",				"",				"Sending #compiledMethod to an ir method will generate its compiledMethod.  Sending #methodNode to it will decompile to its parse tree."			],			"category" : "OpalCompiler-Core-IR-Manipulation"		},		"ZnBufferedReadStream" : {			"hash" : 1196800,			"definition" : "Object subclass: #ZnBufferedReadStream\r\tinstanceVariableNames: 'stream buffer position limit'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-Character-Encoding-Core'",			"comment" : [				"I am ZnBufferedReadStream.",				"",				"I wrap another ReadStream and add efficient buffering for the typical access pattern of parsers: sending lots of #next, #peek and #atEnd messages.",				"",				"By design I do not implement #position and #position: or anything based on that.",				"",				"I can wrap both binary or character streams and act accordingly.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-Character-Encoding-Core"		},		"ReadStream" : {			"hash" : 1106688,			"definition" : "PositionableStream subclass: #ReadStream\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"I represent an accessor for a sequence of objects that can only read objects from the sequence."			],			"category" : "Collections-Streams-Base"		},		"RxmLink" : {			"hash" : 1438464,			"definition" : "Object subclass: #RxmLink\r\tinstanceVariableNames: 'next'\r\tclassVariableNames: ''\r\tpackage: 'Regex-Core-Links'",			"comment" : [				"-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov",				"--",				"A matcher is built of a number of links interconnected into some intricate structure. Regardless of fancy stuff, any link (except for the terminator) has the next one. Any link can match against a stream of characters, recursively propagating the match to the next link. Any link supports a number of matcher-building messages. This superclass does all of the above. ",				"",				"The class is not necessarily abstract. It may double as an empty string matcher: it recursively propagates the match to the next link, thus always matching nothing successfully.",				"",				"Principal method:",				"\tmatchAgainst: aMatcher",				"\t\tAny subclass will reimplement this to test the state of the matcher, most",				"\t\tprobably reading one or more characters from the matcher's stream, and",				"\t\teither decide it has matched and answer true, leaving matcher stream",				"\t\tpositioned at the end of match, or answer false and restore the matcher",				"\t\tstream position to whatever it was before the matching attempt.",				"",				"Instance variables:",				"\tnext\t\t<RxmLink | RxmTerminator> The next link in the structure."			],			"category" : "Regex-Core-Links"		},		"Link class" : {			"hash" : 1023232,			"definition" : "Link class\r\tinstanceVariableNames: ''",			"comment" : [				"An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."			],			"category" : "Collections-Support-Links"		},		"Heap" : {			"hash" : 1001984,			"definition" : "Collection subclass: #Heap\r\tinstanceVariableNames: 'array tally sortBlock indexUpdateBlock'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Base'",			"comment" : [				"Heap implements a special data structure commonly referred to as 'heap' [ http://en.wikipedia.org/wiki/Heap_%28data_structure%29 ]",				"",				"Heaps are good at handling priority queues because:",				"\t1) greatest priority element according to the sort block will be stored in first position and thus accessed in O(1) operations",				"\t2) worse time for inserting or removing an element is in O(log n) operations, where n is the size of the Heap",				"\tInsertion/Removal times are more efficient than above upper bound, provided that:",				"\t\ta) Elements are only removed at the beginning",				"\t\tb) Elements are added with arbitrary sort order.",				"\t3) there is no need to fully sort the Heap, which makes it more efficient than a SortedCollection",				"",				"The heap can be fully sorted by sending the message #fullySort.",				"Worse time for fully sorting the Heap is in O(n log n) operations, but this is rarely used a feature.",				"Remind that the Heap does not fully sort the collection if you don't ask.",				"Thus don't expect #do: and other iterators to enumerate elements according to the sortBlock order.",				"",				"Instance variables:",				"       array           <Array>         The data repository",				"       tally           <Integer>       The number of elements in the heap",				"       sortBlock       <Block|nil>     A two-argument block defining the sort order,",				"                                                       or nil in which case the default sort order is",				"                                                               [:element1 :element2| element1 <= element2]",				"       indexUpdateBlock        <Block|nil>",				"                                                       A two-argument block of the form [:data :index | ... ]",				"                                                       which allows an application object to keep track of its",				"                                                       index within the heap.  Useful for quick heap update",				"                                                       when object's sort value changes (for example, when an",				"                                                       object in a priority queue has its priority increased",				"                                                       by an external event, you don't want to have to search",				"                                                       through the whole heap to find the index before fixing",				"                                                      the heap).  No update occurs if nil.",				"",				"The Heap can be viewed as a binary tree (every node in the tree has at most two children).",				"The root is stored in first slot of internal array.",				"The children are stored in next two slots.",				"The children of children in next four slots.",				"etc...",				"",				"For a node A of index i (1 based), the two children B1 and B2 are thus stored in indices (2*i) and (2*i+1).",				"Of course, the children indices must be less than the tally otherwise they are considered inexistent.",				"",				"The Heap does arrange to preserve the following invariant:",				"For any children B of a node A, A is sorted before B, in other words, (self sort: A before: B) = true",				"This implies that the root is always the first element according to sort order."			],			"category" : "Collections-Sequenceable-Base"		},		"SpecLayout" : {			"hash" : 1560320,			"definition" : "Object subclass: #SpecLayout\r\tinstanceVariableNames: 'type commands selector result shouldCheckSplitters currentOffset currentProportional numberOfProportionals lastFractionIndex autoFractionComputation size'\r\tclassVariableNames: ''\r\tpackage: 'Spec-Layout-Layouts'",			"comment" : [				"A SpecPresenter is a object used to describe a user interface"			],			"category" : "Spec-Layout-Layouts"		},		"UndefinedObject" : {			"hash" : 787200,			"definition" : "Object subclass: #UndefinedObject\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"I describe the behavior of my sole instance, nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless."			],			"category" : "Kernel-Objects"		},		"WideCharacterSet" : {			"hash" : 1187328,			"definition" : "Collection subclass: #WideCharacterSet\r\tinstanceVariableNames: 'map byteArrayMap'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-CharacterSets'",			"comment" : [				"WideCharacterSet is used to store a Set of WideCharacter with fast access and inclusion test.",				"",				"Implementation should be efficient in memory if sets are sufficently sparse.",				"",				"Wide Characters are at most 32bits.",				"We split them into 16 highBits and 16 lowBits.",				"",				"map is a dictionary key: 16 highBits value: map of 16 lowBits.",				"",				"Maps of lowBits  are stored as arrays of bits in a ByteArray.",				"If a bit is set to 1, this indicate that corresponding character is present.",				"8192 bytes are necessary in each lowmap.",				"Empty lowmap are removed from the map Dictionary.",				"",				"A byteArrayMap is maintained in parallel with map for fast handling of ByteString.",				"(byteArrayMap at: i+1) = 0 means that character of asciiValue i is absent, = 1 means present."			],			"category" : "Collections-Support-CharacterSets"		},		"RBProgramNode" : {			"hash" : 1153024,			"definition" : "RBNode subclass: #RBProgramNode\r\tinstanceVariableNames: 'parent properties'\r\tclassVariableNames: 'FormatterClass'\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBProgramNode is an abstract class that represents an abstract syntax tree node in a Smalltalk program.",				"",				"Subclasses must implement the following messages:",				"\taccessing",				"\t\tstart",				"\t\tstop",				"\tvisitor",				"\t\tacceptVisitor:",				"\ttesting",				"\t\tisFaulty",				"",				"The #start and #stop methods are used to find the source that corresponds to this node. \"source copyFrom: self start to: self stop\" should return the source for this node.",				"",				"The #acceptVisitor: method is used by RBProgramNodeVisitors (the visitor pattern). This will also require updating all the RBProgramNodeVisitors so that they know of the new node.",				"",				"The #isFaulty method is used to distinguish between valid nodes and nodes created from an invalid source Smalltalk code. For example, code parsed with RBParsers #parseFaultyExpression: or #parseFaultyMethod:.",				"",				"Subclasses might also want to redefine match:inContext: and copyInContext: to do parse tree searching and replacing.",				"",				"Subclasses that contain other nodes should override equalTo:withMapping: to compare nodes while ignoring renaming temporary variables, and children that returns a collection of our children nodes.",				"",				"Instance Variables:",				"\tproperties\t<Dictionary of: Symbol -> Object>\tA set of properties set to this node, for example every node can have the Property #comment to attach the method comment or the comment of the code line this node represents. Other classes or tools may add more type of properties; for example, the reflectivity support adds properties for managing Metalinks. ",				"\tparent\t<RBProgramNode>\tthe node we're contained in",				"",				"Class Variables:",				"\tFormatterClass\t<Behavior>\tthe formatter class that is used when we are formatted"			],			"category" : "AST-Core-Nodes"		},		"CTSkipList" : {			"hash" : 2776832,			"definition" : "Object subclass: #CTSkipList\r\tinstanceVariableNames: 'lists sortBlock lowerBound upperBound random'\r\tclassVariableNames: ''\r\tpackage: 'Containers-SkipList'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tlists:\t\t<Object>",				"\tlowerBound:\t\t<Object>",				"\trandom:\t\t<Object>",				"\tsortBlock:\t\t<Object>",				"\tupperBound:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Containers-SkipList"		},		"NavigationHistory" : {			"hash" : 598784,			"definition" : "Object subclass: #NavigationHistory\r\tinstanceVariableNames: 'storage index maxSize paused'\r\tclassVariableNames: ''\r\tpackage: 'Tool-Base-Utilities'",			"comment" : [				"I act as a web browser history"			],			"category" : "Tool-Base-Utilities"		},		"ProcessList" : {			"hash" : 1091072,			"definition" : "SequenceableCollection subclass: #ProcessList\r\tinstanceVariableNames: 'firstLink lastLink'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Processes'",			"comment" : [				"I am a VM Special class! Do not break me!",				"",				"I am a linked list that contains processes as Nodes. My implementation is tied to the VM: ",				"- every node I contain should have as first instance variable the next node in the list.",				"",				"My main user is ProcessScheduler, which contains an array with instances of myself. Each entry in that array a priority for processes. Processes are queues in each process list by the VM automatically."			],			"category" : "Kernel-Processes"		},		"RSComposite" : {			"hash" : 5841920,			"definition" : "RSBoundingShape subclass: #RSComposite\r\tuses: RSTContainer\r\tinstanceVariableNames: 'nodes edges children'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Shapes-Bounding'",			"comment" : [				"I am a composite shapes. I can therefore contain other shapes.",				"",				"Here is a simple example:",				"```",				"c := RSCanvas new.",				"",				"box := RSBox new width: 40; height: 10; color: Color blue.",				"label := RSLabel new text: 'Hello Roassal3'.",				"RSLocation new above; move: box on: label.",				"composite := RSComposite new.",				"composite shapes: { label . box }.",				"composite @ RSDraggable.",				"",				"c add: composite.",				"c open",				"```",				"",				"A composite can also have a background color. Simply use #color: for this:",				"```",				"c := RSCanvas new.",				"",				"box := RSBox new width: 40; height: 10; color: Color blue.",				"label := RSLabel new color: Color black; text: 'Hello Roassal3'.",				"RSLocation new above; move: box on: label.",				"composite := RSComposite new.",				"composite color: Color gray.",				"composite shapes: { label . box }.",				"composite @ RSDraggable.",				"",				"c add: composite.",				"c open",				"```",				"",				"A padding describes a space between the border of the composite element and the inner shapes. It can be adjusted using the message #padding:",				"",				"```",				"c := RSCanvas new.",				"",				"box := RSBox new width: 40; height: 10; color: Color blue.",				"label := RSLabel new color: Color black; text: 'Hello Roassal3'.",				"RSLocation new above; move: box on: label.",				"composite := RSComposite new.",				"composite color: Color gray.",				"composite shapes: { label . box }.",				"composite @ RSDraggable.",				"composite padding: 10.",				"",				"c add: composite.",				"c open",				"```",				"",				"Inner nodes can be layouted:",				"```",				"classes := RSObject withAllSubclasses.",				"",				"c := RSCanvas new.",				"",				"classes do: [ :cls |",				"\tlabel := RSLabel new text: cls name.",				"\tmethods := ",				"\t\tcls methods collect: [ :m |",				"\t\t\tRSBox new model: m; size: m sourceCode size sqrt; color: Color blue ] as: RSGroup.",				"\tRSGridLayout on: methods.",				"\tmethods @ RSPopup.",				"\tRSLocation new above; move: label on: methods.",				"\tcomposite := RSComposite new.",				"\tcomposite color: Color gray.",				"\tcomposite shapes: { label }, methods.",				"\tcomposite @ RSDraggable.",				"\tcomposite padding: 10.",				"\tc add: composite.",				"].",				"",				"RSFlowLayout on: c shapes.",				"",				"c @ RSCanvasController.",				"c open",				"```",				"",				"Lines can be added between composite. Here is an example:",				"```",				"classes := RSObject withAllSubclasses.",				"",				"c := RSCanvas new.",				"",				"classes do: [ :cls |",				"\tlabel := RSLabel new text: cls name.",				"\tmethods := ",				"\t\tcls methods collect: [ :m |",				"\t\t\tRSBox new model: m; size: m sourceCode size sqrt; color: Color blue ] as: RSGroup.",				"\tRSGridLayout on: methods.",				"\tmethods @ RSPopup.",				"\tRSLocation new above; move: label on: methods.",				"\tcomposite := RSComposite new.",				"\tcomposite model: cls.",				"\tcomposite color: Color gray.",				"\tcomposite shapes: { label }, methods.",				"\tcomposite @ RSDraggable.",				"\tcomposite padding: 10.",				"\tc add: composite.",				"].",				"",				"RSEdgeBuilder orthoVertical",				"\tcanvas: c;",				"\twithVerticalAttachPoint;",				"\tconnectFrom: #superclass.",				"",				"RSTreeLayout on: c nodes.",				"",				"c @ RSCanvasController.",				"c open.",				"```"			],			"category" : "Roassal3-Shapes-Bounding"		}	},	"messages" : {		"add:atHeight:predecessors:" : {			"implementors" : {				"CTSkipList" : {					"sourceCode" : [						"add: key atHeight: r predecessors: aLink",						"",						"\t| newLink predecessors |",						"\tpredecessors := aLink.",						"\tnewLink := nil.",						"",						"\tr timesRepeat: [ ",						"\t\t| predecessor |",						"\t\tpredecessor := predecessors value.",						"",						"\t\tnewLink := CTDoubleValueLink new",						"\t\t\t           value: key;",						"\t\t\t           previousLink: newLink;",						"\t\t\t           nextLink: predecessor nextLink;",						"\t\t\t           yourself.",						"",						"\t\tpredecessor nextLink: newLink.",						"",						"\t\tpredecessors := predecessors nextLink ].",						"",						"\t^ newLink"					],					"body" : [						"| newLink predecessors |",						"predecessors := aLink.",						"newLink := nil.",						"",						"r timesRepeat: [ ",						"\t| predecessor |",						"\tpredecessor := predecessors value.",						"",						"\tnewLink := CTDoubleValueLink new",						"\t\t           value: key;",						"\t\t           previousLink: newLink;",						"\t\t           nextLink: predecessor nextLink;",						"\t\t           yourself.",						"",						"\tpredecessor nextLink: newLink.",						"",						"\tpredecessors := predecessors nextLink ].",						"",						"^ newLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 54953276,					"argumentNames" : [						"key",						"r",						"aLink"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList>>#add:atHeight:",				"CTSkipListTest>>#testProfileAdditionOf35"			]		},		"onSortedCollection:lowerBound:upperBound:atRandom:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList class>>#onSortedCollection:lowerBound:upperBound:"			],			"implementors" : {				"CTSkipList class" : {					"sourceCode" : [						"onSortedCollection: aCollection lowerBound: lower upperBound: upper atRandom: aRandom",						"",						"\t| brgc lists nothing cleanLists lowerJust upperJust times |",						"\tnothing := Maybe nothing.",						"\tlowerJust := lower just.",						"\tupperJust := upper just.",						"",						"\tbrgc := aCollection size asBRGCCollection.",						"",						"\tlists := nil.",						"",						"\ttimes := aCollection",						"\t\t         ifEmpty: [ 0 ]",						"\t\t         ifNotEmpty: [ (aCollection size log: 2) floor + 1 ].",						"",						"\ttimes timesRepeat: [ ",						"\t\t| list link nextLinkSafe |",						"\t\tlink := lists value.",						"",						"\t\tnextLinkSafe := [ link := link ifNotNil: [ link nextLink ] ].",						"",						"\t\tlist := CTDoubleValueLink new",						"\t\t\t        value: lowerJust;",						"\t\t\t        previousLink: link;",						"\t\t\t        nextLink: nil;",						"\t\t\t        yourself.",						"",						"\t\tnextLinkSafe value.",						"",						"\t\taCollection withIndexDo: [ :each :index | ",						"\t\t\t| left eachForList |",						"\t\t\tleft := brgc at: index.",						"",						"\t\t\teachForList := left > 0",						"\t\t\t\t               ifTrue: [ each just ]",						"\t\t\t\t               ifFalse: [ nothing ].",						"",						"\t\t\tbrgc at: index put: left - 1.",						"",						"\t\t\tlist := CTDoubleValueLink new",						"\t\t\t\t        value: eachForList;",						"\t\t\t\t        previousLink: link;",						"\t\t\t\t        nextLink: list;",						"\t\t\t\t        yourself.",						"",						"\t\t\tnextLinkSafe value ].",						"",						"\t\tlist := CTDoubleValueLink new",						"\t\t\t        value: upperJust;",						"\t\t\t        previousLink: link;",						"\t\t\t        nextLink: list;",						"\t\t\t        yourself.",						"",						"\t\tnextLinkSafe value.",						"",						"\t\tself assert: link isNil.",						"",						"\t\tlists := list reversed ~~> lists ].",						"",						"\tcleanLists := lists.",						"",						"\t[ cleanLists ] whileNotNil: [ ",						"\t\t| list |",						"\t\tlist := cleanLists value.",						"",						"\t\t[ list ] whileNotNil: [ ",						"\t\t\t| each |",						"\t\t\teach := list nextLink.",						"",						"\t\t\t[ each value == nothing ] whileTrue: [ each := each nextLink ].",						"",						"\t\t\tlist := list",						"\t\t\t\t        value: list value content;",						"\t\t\t\t        nextLink: each;",						"\t\t\t\t        nextLink ].",						"",						"\t\tcleanLists := cleanLists nextLink ].",						"",						"",						"\t^ self new",						"\t\t  lists: lists;",						"\t\t  sortBlock: aCollection sortBlock;",						"\t\t  lowerBound: lower;",						"\t\t  upperBound: upper;",						"\t\t  random: aRandom;",						"\t\t  yourself"					],					"body" : [						"| brgc lists nothing cleanLists lowerJust upperJust times |",						"nothing := Maybe nothing.",						"lowerJust := lower just.",						"upperJust := upper just.",						"",						"brgc := aCollection size asBRGCCollection.",						"",						"lists := nil.",						"",						"times := aCollection",						"\t         ifEmpty: [ 0 ]",						"\t         ifNotEmpty: [ (aCollection size log: 2) floor + 1 ].",						"",						"times timesRepeat: [ ",						"\t| list link nextLinkSafe |",						"\tlink := lists value.",						"",						"\tnextLinkSafe := [ link := link ifNotNil: [ link nextLink ] ].",						"",						"\tlist := CTDoubleValueLink new",						"\t\t        value: lowerJust;",						"\t\t        previousLink: link;",						"\t\t        nextLink: nil;",						"\t\t        yourself.",						"",						"\tnextLinkSafe value.",						"",						"\taCollection withIndexDo: [ :each :index | ",						"\t\t| left eachForList |",						"\t\tleft := brgc at: index.",						"",						"\t\teachForList := left > 0",						"\t\t\t               ifTrue: [ each just ]",						"\t\t\t               ifFalse: [ nothing ].",						"",						"\t\tbrgc at: index put: left - 1.",						"",						"\t\tlist := CTDoubleValueLink new",						"\t\t\t        value: eachForList;",						"\t\t\t        previousLink: link;",						"\t\t\t        nextLink: list;",						"\t\t\t        yourself.",						"",						"\t\tnextLinkSafe value ].",						"",						"\tlist := CTDoubleValueLink new",						"\t\t        value: upperJust;",						"\t\t        previousLink: link;",						"\t\t        nextLink: list;",						"\t\t        yourself.",						"",						"\tnextLinkSafe value.",						"",						"\tself assert: link isNil.",						"",						"\tlists := list reversed ~~> lists ].",						"",						"cleanLists := lists.",						"",						"[ cleanLists ] whileNotNil: [ ",						"\t| list |",						"\tlist := cleanLists value.",						"",						"\t[ list ] whileNotNil: [ ",						"\t\t| each |",						"\t\teach := list nextLink.",						"",						"\t\t[ each value == nothing ] whileTrue: [ each := each nextLink ].",						"",						"\t\tlist := list",						"\t\t\t        value: list value content;",						"\t\t\t        nextLink: each;",						"\t\t\t        nextLink ].",						"",						"\tcleanLists := cleanLists nextLink ].",						"",						"",						"^ self new",						"\t  lists: lists;",						"\t  sortBlock: aCollection sortBlock;",						"\t  lowerBound: lower;",						"\t  upperBound: upper;",						"\t  random: aRandom;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "creation",					"comment" : [ ],					"hash" : 73435282,					"argumentNames" : [						"aCollection",						"lower",						"upper",						"aRandom"					]				}			}		},		"testLinkReferencingItself" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testLinkReferencingItself",						"",						"\t| l |",						"\tl := Link new.",						"",						"\tl next: l.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := Link new.",						"",						"l next: l.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3704624,					"argumentNames" : [ ]				}			}		},		"testThreeLinksTooMuchSkipping" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testThreeLinksTooMuchSkipping",						"",						"\t| l1 l2 l3 |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"\tl3 := Link new.",						"",						"\tl1 next: l2.",						"\tl2 next: l3.",						"",						"\t^ self shouldnt: [ l1 next: 10 ] raise: SubscriptOutOfBounds"					],					"body" : [						"| l1 l2 l3 |",						"l1 := Link new.",						"l2 := Link new.",						"l3 := Link new.",						"",						"l1 next: l2.",						"l2 next: l3.",						"",						"^ self shouldnt: [ l1 next: 10 ] raise: SubscriptOutOfBounds"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4230441,					"argumentNames" : [ ]				}			}		},		"testThreeLinksReferencingEachOther" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testThreeLinksReferencingEachOther",						"",						"\t| l1 l2 l3 |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"\tl3 := Link new.",						"",						"\tl1 next: l2.",						"\tl2 next: l3.",						"\tl3 next: l1.",						"",						"\t^ self exportSlotsGraphOf: l1"					],					"body" : [						"| l1 l2 l3 |",						"l1 := Link new.",						"l2 := Link new.",						"l3 := Link new.",						"",						"l1 next: l2.",						"l2 next: l3.",						"l3 next: l1.",						"",						"^ self exportSlotsGraphOf: l1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4230609,					"argumentNames" : [ ]				}			}		},		"next:" : {			"senders" : [				"AbstractBinaryFileStream>>#skip:",				"AbstractBinaryFileStream>>#nextLittleEndianNumber:",				"AbstractBinaryFileStream>>#next",				"AbstractFileReference>>#inspectionContents",				"AthensSimplePathBuilder>>#addSegment:",				"AthensTextDisplayCommand>>#addLast:",				"AthensTextDisplayCommand>>#insert:",				"AthensTextLine>>#addCommand:",				"BMPReadWriter>>#readColorMap",				"BMPReadWriter>>#readIndexedBmpFile:",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"BinaryFileStreamTest>>#testReadMoreThanAvailableYieldsOnlyAvailable",				"BinaryFileStreamTest>>#testReadMultipleBytes",				"BinaryFileStreamTest>>#testReadLessThanAvailableYieldsJustRead",				"CTLinksLinkTest>>#testLinkReferencingItself",				"CTLinksLinkTest>>#testLinkReferencingAnotherLink",				"CTLinksLinkTest>>#testLinkNext3",				"CTLinksLinkTest>>#testThreeLinksTooMuchSkipping",				"CTLinksLinkTest>>#testThreeLinksReferencingEachOther",				"CoBasicFetcherWithElementsTest>>#testNextManyAfterLimitShouldStopAfterLimit",				"CoBasicFetcherWithElementsTest>>#testResetShouldRestartGenerator",				"CoBasicFetcherWithElementsTest>>#testNextManyShouldReturnCollection",				"CoHeuristicBuilder>>#build",				"CoNarrowHistoryFetcherTest>>#testNarrowingAndUnnarrowingReturnsSameResult",				"CoNarrowHistoryFetcherTest>>#testNarrowingReturnsSameElementsThatCallingDirectly",				"CoResultSet>>#fetch:",				"CoSequenceFetcherTest>>#testCompletionCompositionNextShouldReturnValuesOfSecondCompletionAfterFirst",				"CoSequenceFetcherTest>>#testCompletionCompositionNextManyShouldStopAfterEndOfElements",				"CoSequenceFetcherTest>>#testNextManyAfterFirstSubfetcherShouldReturnCollectionWithSecondSubfetcherElements",				"CompilationContext class>>#cleanOptionString:",				"DateParser>>#parse:expectedSize:",				"EDEmergencyDebuggerTest>>#testComposeErrorTextFrom",				"FLAnalyzer>>#mappers",				"FLAnalyzer>>#privateMappers",				"FLPharoPlatform class>>#fuelNextWordsInto:",				"FileDialogWindow>>#updateTextPreview",				"FileList>>#readContentsHex:",				"FileList>>#streamFirst5000BytesWithEncodingFrom:",				"FileList>>#streamFirst5000BytesFrom:",				"Form>>#readResourceFrom:",				"GIFReadWriter>>#readCommentExtension",				"GIFReadWriter>>#readApplicationExtension",				"GeneratorTest>>#testFibonacci",				"HEBinaryReader>>#readInt32",				"HEBinaryReader>>#readByteArray",				"HEBinaryReader>>#readUInt32",				"IdentifierChooserMorph>>#newChoicesMorph",				"ImageReadWriter>>#next:",				"ImageReadWriter>>#hasMagicNumber:",				"InflateStream>>#getFirstBuffer",				"JPEGReadStream>>#nextBytes:",				"JPEGReadWriter>>#parseAPPn",				"JPEGReadWriter>>#skipMarker",				"JPEGReadWriter>>#parseHuffmanTable",				"KMKeyCombinationSequence class>>#first:next:",				"LIFOQueue>>#initialize",				"LIFOQueue>>#nextIfNone:",				"LIFOQueue>>#nextPut:",				"LIFOQueue>>#next",				"LzwGifDecoder>>#nextByte",				"LzwGifDecoder>>#codeStream:",				"LzwGifDecoder>>#peekByte",				"MCDataStream>>#readByteArray",				"ManifestHeuristicCompletionModel class>>#ruleReTempsReadBeforeWrittenRuleV1FalsePositive",				"MemoryFileSystemTest>>#testStreamWriteAndRead",				"NetNameResolver class>>#stringFromIPv6Address:",				"OSSDL2Driver>>#eventFilter",				"PNGReadWriter>>#processNextChunk",				"PharoFilesOpener>>#changesFileOrNilReadOnly:silent:",				"PopupChoiceDialogWindow>>#newChoicesMorph",				"PositionableStream>>#nextLittleEndianNumber:",				"PositionableStream>>#nextWordsInto:",				"PositionableStream>>#upToPosition:",				"PositionableStream>>#fuelNextWordsInto:",				"PositionableStream>>#string",				"RBScanner>>#scanNumber",				"Random>>#useUnixRandomGeneratorSeed",				"ReadStreamTest>>#testContents",				"ReadWriteStream>>#isZipArchive",				"ReadWriteStreamTest>>#testContents",				"ReadWriteStreamTest>>#testReset",				"ReadWriteStreamTest>>#testNext",				"RubAbstractTextArea>>#newParagraph",				"RubAbstractTextArea>>#withDecorator:",				"RubAbstractTextArea>>#withoutDecorator:",				"RubEditingArea>>#newParagraph",				"RubParagraphDecorator class>>#next:",				"RubShoutStylerDecorator>>#next:",				"RubTextFieldArea>>#newParagraph",				"RxMatcher>>#makeOptional:",				"RxMatcher>>#makePlus:",				"RxMatcher>>#subexpressions:",				"RxMatcher>>#makeStar:",				"RxMatcher>>#hookBranchOf:onto:",				"SHA1>>#hashStream:",				"STCommandLineHandler>>#skipShebangFrom:",				"SourceFile>>#getPreambleAt:",				"SourceFile>>#next:",				"SourceFileBufferedReadWriteStream>>#next:putAll:startingAt:",				"SourceFileBufferedReadWriteStream>>#upToEnd",				"SourceFileBufferedReadWriteStreamTest>>#testReadThenWrite",				"SourceFileBufferedReadWriteStreamTest>>#testReadUpToEnd",				"SourceFileBufferedReadWriteStreamTest>>#testBuffering",				"SourceFileCharacterReadWriteStream>>#next:",				"StGeneratorBlockIteratorTest>>#testIteratorWithInfiniteBlockOnlyCallFirstTimes",				"StGeneratorIteratorTest>>#testCollectionWithSingleWithALotOfElementsReturnsTheRequestedInCollection",				"StGeneratorIteratorTest>>#testResetRestartsIterationOnTheCollection",				"StGeneratorIteratorTest>>#testCollectionWithSingleManyElementsReturnsTheRequestedInCollection",				"StGenericGenerator>>#next:",				"StIteratorsTest>>#testIteratorOnACollectionReturnsTheCollection",				"StIteratorsTest>>#testNonDuplicatesRemoveDuplicatesWithThree",				"StIteratorsTest>>#testIteratorOnACollectionWithTwoCollectReturnsCorrectValues",				"StIteratorsTest>>#testSequenceDetectsAtEnd",				"StIteratorsTest>>#testIteratorOnACollectionWithCollectReturnsCorrectValues",				"StIteratorsTest>>#testIteratorOnACollectionIsFiltered",				"StIteratorsTest>>#testSequenceReturnsTheSequenceOfAllResultsInParts",				"StIteratorsTest>>#testNonDuplicatesRemoveDuplicates",				"StIteratorsTest>>#testSequenceReturnsTheSequenceOfAllResults",				"StIteratorsTest>>#testIteratorOnACollectedCollectionIsFiltered",				"StIteratorsTest>>#testNonDuplicatesRemoveDuplicatesResetReturnsWithoutDuplicates",				"StreamBugsTest>>#testReadWriteStreamNextNBug",				"TextBackgroundColor class>>#scanFrom:",				"TextColor class>>#scanFrom:",				"TextDoIt class>>#scanFrom:",				"TonelParser>>#word:",				"UnixResolver>>#xdgParseUserDirLine:",				"WaitfreeQueue>>#nextOrNilSuchThat:",				"WaitfreeQueue>>#initializeWithAll:",				"WaitfreeQueue>>#nextIfNone:",				"WaitfreeQueue>>#flush:",				"WaitfreeQueue>>#flushAllSuchThat:",				"WaitfreeQueue>>#nextPut:",				"ZdcAbstractSocketStreamTest>>#testPlainClientRead10kInPieces1",				"ZdcAbstractSocketStreamTest>>#testReverseEcho10kFixed",				"ZdcAbstractSocketStreamTest>>#testReverseEchoUpToEnd",				"ZipArchive>>#readEndOfCentralDirectoryFrom:",				"ZipArchiveTest>>#testZip",				"ZipArchiveTest>>#testCreateWithRelativeNames",				"ZipCrcTest>>#testInvalidZipCrc",				"ZipCrcTest>>#testValidZipCrc",				"ZipCrcTest>>#testValidZLibCrc",				"ZipCrcTest>>#testInvalidGZipCrc",				"ZipCrcTest>>#testMissingZipCrc",				"ZipCrcTest>>#testMissingGZipCrc",				"ZipCrcTest>>#testMissingZLibCrc",				"ZipCrcTest>>#testInvalidZLibCrc",				"ZipFileMember>>#skipLocalDirectoryFileHeaderFrom:",				"ZipFileMember>>#uncompressDataTo:from:to:",				"ZipFileMember>>#readLocalDirectoryFileHeaderFrom:",				"ZipFileMember>>#readRawChunk:",				"ZipFileMember>>#readCentralDirectoryFileHeaderFrom:",				"ZipNewFileMember>>#readRawChunk:",				"ZipStringMember>>#readRawChunk:",				"ZnBufferedReadStream>>#fuelNextWordsInto:",				"ZnBufferedReadStreamTest>>#testReadUpToEnd",				"ZnBufferedReadStreamTest>>#testBuffering",				"ZnBufferedReadStreamTest>>#testSetToEnd",				"ZnCharacterStreamTest>>#testPeek",				"ZnChunkedReadStream>>#getNextChunk",				"ZnChunkedStreamTest>>#testReadingNext",				"ZnEndianessReadWriteStream>>#nextLittleEndianNumber:",				"ZnLimitedReadStreamTest>>#testNextCountShort",				"ZnLimitedReadStreamTest>>#testNextCount",				"ZnPositionableReadStreamTest>>#testPlainExcursion",				"ZnPositionableReadStreamTest>>#testSearchBinary",				"ZnPositionableReadStreamTest>>#testUTF8",				"ZnPositionableReadStreamTest>>#testNestedExcursion",				"ZnPositionableReadStreamTest>>#testPositionErrors",				"ZnPositionableReadStreamTest>>#testSearch"			],			"implementors" : {				"CoFetcher" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ Array new: anInteger streamContents: [ :stream | ",						"\t\t  | total last |",						"\t\t  total := 0.",						"\t\t  [ ",						"\t\t  (last := self next) ifNotNil: [ :each | ",						"\t\t\t  stream nextPut: each.",						"\t\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t\t  total < anInteger and: [ last notNil ] ] ]"					],					"body" : [						"^ Array new: anInteger streamContents: [ :stream | ",						"\t  | total last |",						"\t  total := 0.",						"\t  [ ",						"\t  (last := self next) ifNotNil: [ :each | ",						"\t\t  stream nextPut: each.",						"\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t  total < anInteger and: [ last notNil ] ] ]"					],					"isTestMethod" : false,					"category" : "fetching",					"comment" : [ ],					"hash" : 23306743,					"argumentNames" : [						"anInteger"					]				},				"SourceFileBufferedReadWriteStream" : {					"sourceCode" : [						"next: aQuantity",						"",						"\t| read collection |",						"\tcollection := self collectionSpecies new: aQuantity.",						"",						"\tread := self readInto: collection startingAt: 1 count: aQuantity.",						"",						"\t^ read = aQuantity",						"\t\t  ifTrue: [ collection ]",						"\t\t  ifFalse: [ collection copyFrom: 1 to: read - 1 ]"					],					"body" : [						"| read collection |",						"collection := self collectionSpecies new: aQuantity.",						"",						"read := self readInto: collection startingAt: 1 count: aQuantity.",						"",						"^ read = aQuantity",						"\t  ifTrue: [ collection ]",						"\t  ifFalse: [ collection copyFrom: 1 to: read - 1 ]"					],					"isTestMethod" : false,					"category" : "reading",					"comment" : [ ],					"hash" : 19502067,					"argumentNames" : [						"aQuantity"					]				},				"FTGlyphSlotRec" : {					"sourceCode" : [						"next: anObject",						"",						"\t\"This method was automatically generated\"",						"",						"\thandle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"body" : [						"handle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"isTestMethod" : false,					"category" : "accessing - structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 18869264,					"argumentNames" : [						"anObject"					]				},				"ZdcAbstractSocketStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount bytes and return them as a ByteArray.",						"\tIf less are available, a smaller ByteArray will be returned.\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "stream in",					"comment" : [						"Read requestedCount bytes and return them as a ByteArray.",						"\tIf less are available, a smaller ByteArray will be returned."					],					"hash" : 18141039,					"argumentNames" : [						"requestedCount"					]				},				"PositionableStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection.\"",						"",						"\t| newArray |",						"\tnewArray := collection species new: anInteger.",						"\t1 to: anInteger do: [ :index | newArray at: index put: self next ].",						"\t^ newArray"					],					"body" : [						"| newArray |",						"newArray := collection species new: anInteger.",						"1 to: anInteger do: [ :index | newArray at: index put: self next ].",						"^ newArray"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection."					],					"hash" : 19383340,					"argumentNames" : [						"anInteger"					]				},				"ImageReadWriter" : {					"sourceCode" : [						"next: size",						"",						"\t^ stream next: size"					],					"body" : [						"^ stream next: size"					],					"isTestMethod" : false,					"category" : "stream access",					"comment" : [ ],					"hash" : 18396532,					"argumentNames" : [						"size"					]				},				"RxmLink" : {					"sourceCode" : [						"next: aLink",						"",						"\t\"Set the next link, either an RxmLink or an RxmTerminator.\"",						"",						"\tnext := aLink"					],					"body" : [						"next := aLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Set the next link, either an RxmLink or an RxmTerminator."					],					"hash" : 19272086,					"argumentNames" : [						"aLink"					]				},				"StdioStream" : {					"sourceCode" : [						"next: n",						"",						"\t\"Return a string with the next n characters of the filestream in it.\"",						"",						"\t| readBuffer read startingAt |",						"\treadBuffer := ByteArray new: n.",						"\tstartingAt := 1.",						"\tpeekBuffer ifNotNil: [ ",						"\t\treadBuffer at: 1 put: peekBuffer.",						"\t\tstartingAt := startingAt + 1.",						"\t\tpeekBuffer := nil ].",						"\tread := File",						"\t\t        read: handle",						"\t\t        into: readBuffer",						"\t\t        startingAt: startingAt",						"\t\t        count: n - startingAt + 1.",						"\t^ read = (n - startingAt + 1)",						"\t\t  ifTrue: [ readBuffer ]",						"\t\t  ifFalse: [ readBuffer copyFrom: 1 to: read ]"					],					"body" : [						"| readBuffer read startingAt |",						"readBuffer := ByteArray new: n.",						"startingAt := 1.",						"peekBuffer ifNotNil: [ ",						"\treadBuffer at: 1 put: peekBuffer.",						"\tstartingAt := startingAt + 1.",						"\tpeekBuffer := nil ].",						"read := File",						"\t        read: handle",						"\t        into: readBuffer",						"\t        startingAt: startingAt",						"\t        count: n - startingAt + 1.",						"^ read = (n - startingAt + 1)",						"\t  ifTrue: [ readBuffer ]",						"\t  ifFalse: [ readBuffer copyFrom: 1 to: read ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return a string with the next n characters of the filestream in it."					],					"hash" : 19768741,					"argumentNames" : [						"n"					]				},				"ZnLimitedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 19238255,					"argumentNames" : [						"requestedCount"					]				},				"AthensPathSegment" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 21001878,					"argumentNames" : [						"anObject"					]				},				"OSSDLPasteEventFilter" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22135190,					"argumentNames" : [						"anObject"					]				},				"SourceFile" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ stream next: anInteger"					],					"body" : [						"^ stream next: anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18973813,					"argumentNames" : [						"anInteger"					]				},				"ZnPositionableReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned.\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned."					],					"hash" : 19050095,					"argumentNames" : [						"requestedCount"					]				},				"StIterator" : {					"sourceCode" : [						"next: aQuantity",						"",						"\t^ OrderedCollection streamContents: [ :stream | ",						"\t\t  | total last |",						"\t\t  total := 0.",						"\t\t  [ ",						"\t\t  last := self next.",						"\t\t  last ifNotNil: [ ",						"\t\t\t  stream nextPut: last.",						"\t\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t\t  total < aQuantity and: [ last notNil ] ] ]"					],					"body" : [						"^ OrderedCollection streamContents: [ :stream | ",						"\t  | total last |",						"\t  total := 0.",						"\t  [ ",						"\t  last := self next.",						"\t  last ifNotNil: [ ",						"\t\t  stream nextPut: last.",						"\t\t  total := total + 1 ] ] doWhileTrue: [ ",						"\t\t  total < aQuantity and: [ last notNil ] ] ]"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 23473574,					"argumentNames" : [						"aQuantity"					]				},				"ReadWriteStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection.  overriden for efficiency\"",						"",						"\t| ans endPosition |",						"\treadLimit := readLimit max: position.",						"",						"\tendPosition := position + anInteger min: readLimit.",						"\tans := collection copyFrom: position + 1 to: endPosition.",						"\tposition := endPosition.",						"\t^ ans"					],					"body" : [						"| ans endPosition |",						"readLimit := readLimit max: position.",						"",						"endPosition := position + anInteger min: readLimit.",						"ans := collection copyFrom: position + 1 to: endPosition.",						"position := endPosition.",						"^ ans"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection.  overriden for efficiency"					],					"hash" : 19466989,					"argumentNames" : [						"anInteger"					]				},				"ZnBufferedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned.\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements and return them as a collection.",						"\tIf less are available, a smaller collection will be returned."					],					"hash" : 19030895,					"argumentNames" : [						"requestedCount"					]				},				"RubShoutStylerDecorator" : {					"sourceCode" : [						"next: aDecorator",						"",						"\tsuper next: aDecorator.",						"\taDecorator ifNotNil: [ ",						"\t\tself paragraph textArea announcer",						"\t\t\twhen: RubTextAcceptRequest",						"\t\t\tsend: #whenTextAcceptRequest:",						"\t\t\tto: self ]"					],					"body" : [						"super next: aDecorator.",						"aDecorator ifNotNil: [ ",						"\tself paragraph textArea announcer",						"\t\twhen: RubTextAcceptRequest",						"\t\tsend: #whenTextAcceptRequest:",						"\t\tto: self ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 21853377,					"argumentNames" : [						"aDecorator"					]				},				"AbstractBinaryFileStream" : {					"sourceCode" : [						"next: n",						"",						"\t\"Return a string with the next n characters of the filestream in it.\"",						"",						"\t^ self next: n into: (ByteArray new: n)"					],					"body" : [						"^ self next: n into: (ByteArray new: n)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Return a string with the next n characters of the filestream in it."					],					"hash" : 18668722,					"argumentNames" : [						"n"					]				},				"Link" : {					"sourceCode" : [						"next: anObject",						"",						"\t^ anObject nextFromLink: self"					],					"body" : [						"^ anObject nextFromLink: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18857152,					"argumentNames" : [						"anObject"					]				},				"ReadStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection.  overriden for efficiency\"",						"",						"\t| ans endPosition |",						"\tendPosition := position + anInteger min: readLimit.",						"\tans := collection copyFrom: position + 1 to: endPosition.",						"\tposition := endPosition.",						"\t^ ans"					],					"body" : [						"| ans endPosition |",						"endPosition := position + anInteger min: readLimit.",						"ans := collection copyFrom: position + 1 to: endPosition.",						"position := endPosition.",						"^ ans"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection.  overriden for efficiency"					],					"hash" : 19465849,					"argumentNames" : [						"anInteger"					]				},				"UndefinedObject" : {					"sourceCode" : [						"next: n",						"",						"\t^ self"					],					"body" : [						"^ self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18620556,					"argumentNames" : [						"n"					]				},				"AthensTextDisplayCommand" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19502230,					"argumentNames" : [						"anObject"					]				},				"RubParagraphDecorator" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18447766,					"argumentNames" : [						"anObject"					]				},				"SourceFileCharacterReadWriteStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ readStream next: anInteger"					],					"body" : [						"^ readStream next: anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18976116,					"argumentNames" : [						"anInteger"					]				},				"CoASTNodeFetcherHeuristic" : {					"sourceCode" : [						"next: nextHeuristic",						"",						"\tnext := nextHeuristic"					],					"body" : [						"next := nextHeuristic"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 23296150,					"argumentNames" : [						"nextHeuristic"					]				},				"MCDataStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer an Array of the next anInteger objects in the stream.\"",						"",						"\t| array |",						"\tarray := Array new: anInteger.",						"\t1 to: anInteger do: [ :i | array at: i put: self next ].",						"\t^ array"					],					"body" : [						"| array |",						"array := Array new: anInteger.",						"1 to: anInteger do: [ :i | array at: i put: self next ].",						"^ array"					],					"isTestMethod" : false,					"category" : "other",					"comment" : [						"Answer an Array of the next anInteger objects in the stream."					],					"hash" : 19716283,					"argumentNames" : [						"anInteger"					]				},				"SocketStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Read count elements and return them in a collection.",						"\tIf the receiver is #atEnd before count elements were read, ",						"\treturn a smaller collection and don't signal ConnectionClosed.\"",						"",						"\t^ self nextInto: (self streamBuffer: anInteger)"					],					"body" : [						"^ self nextInto: (self streamBuffer: anInteger)"					],					"isTestMethod" : false,					"category" : "stream in",					"comment" : [						"Read count elements and return them in a collection.",						"\tIf the receiver is #atEnd before count elements were read, ",						"\treturn a smaller collection and don't signal ConnectionClosed."					],					"hash" : 19201200,					"argumentNames" : [						"anInteger"					]				},				"ZnEncodedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 19036783,					"argumentNames" : [						"requestedCount"					]				},				"StGenericGenerator" : {					"sourceCode" : [						"next: aQuantity",						"",						"\t^ generator next: aQuantity"					],					"body" : [						"^ generator next: aQuantity"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 23473781,					"argumentNames" : [						"aQuantity"					]				},				"ZnChunkedReadStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 19237743,					"argumentNames" : [						"requestedCount"					]				},				"SDL_PixelFormat" : {					"sourceCode" : [						"next: anObject",						"",						"\t\"This method was automatically generated\"",						"",						"\thandle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"body" : [						"handle pointerAt: OFFSET_NEXT put: anObject getHandle"					],					"isTestMethod" : false,					"category" : "accessing - structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 22157072,					"argumentNames" : [						"anObject"					]				},				"Random" : {					"sourceCode" : [						"next: anInteger",						"",						"\t^ self next: anInteger into: (Array new: anInteger)"					],					"body" : [						"^ self next: anInteger into: (Array new: anInteger)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18939058,					"argumentNames" : [						"anInteger"					]				},				"InflateStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection.  overriden for simplicity\"",						"",						"\t| newArray |",						"\t\"try to do it the fast way\"",						"\tposition + anInteger < readLimit ifTrue: [ ",						"\t\tnewArray := collection",						"\t\t\t            copyFrom: position + 1",						"\t\t\t            to: position + anInteger.",						"\t\tposition := position + anInteger.",						"\t\t^ newArray ].",						"",						"\t\"oh, well...\"",						"\tnewArray := collection species new: anInteger.",						"\t1 to: anInteger do: [ :index | ",						"\t\tnewArray",						"\t\t\tat: index",						"\t\t\tput: (self next ifNil: [ ^ newArray copyFrom: 1 to: index - 1 ]) ].",						"\t^ newArray"					],					"body" : [						"| newArray |",						"\"try to do it the fast way\"",						"position + anInteger < readLimit ifTrue: [ ",						"\tnewArray := collection",						"\t\t            copyFrom: position + 1",						"\t\t            to: position + anInteger.",						"\tposition := position + anInteger.",						"\t^ newArray ].",						"",						"\"oh, well...\"",						"newArray := collection species new: anInteger.",						"1 to: anInteger do: [ :index | ",						"\tnewArray",						"\t\tat: index",						"\t\tput: (self next ifNil: [ ^ newArray copyFrom: 1 to: index - 1 ]) ].",						"^ newArray"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection.  overriden for simplicity"					],					"hash" : 19697582,					"argumentNames" : [						"anInteger"					]				},				"NullStream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection.\"",						"",						"\tposition := position + anInteger.",						"\t^ self collectionSpecies new: anInteger"					],					"body" : [						"position := position + anInteger.",						"^ self collectionSpecies new: anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger elements of my collection. Must override ",						"\tbecause default uses self contents species, which might involve a large ",						"\tcollection."					],					"hash" : 18909852,					"argumentNames" : [						"anInteger"					]				},				"RubParagraphDecorator class" : {					"sourceCode" : [						"next: aDecoratorOrAParagraph",						"",						"\t^ self new next: aDecoratorOrAParagraph"					],					"body" : [						"^ self new next: aDecoratorOrAParagraph"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18447677,					"argumentNames" : [						"aDecoratorOrAParagraph"					]				},				"Stream" : {					"sourceCode" : [						"next: anInteger",						"",						"\t\"Answer the next anInteger number of objects accessible by the receiver.\"",						"",						"\t| aCollection |",						"\taCollection := OrderedCollection new.",						"\tanInteger timesRepeat: [ aCollection addLast: self next ].",						"\t^ aCollection"					],					"body" : [						"| aCollection |",						"aCollection := OrderedCollection new.",						"anInteger timesRepeat: [ aCollection addLast: self next ].",						"^ aCollection"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer the next anInteger number of objects accessible by the receiver."					],					"hash" : 18932050,					"argumentNames" : [						"anInteger"					]				},				"KMKeyCombinationSequence" : {					"sourceCode" : [						"next: aShortcut",						"",						"\tself addShortcut: aShortcut"					],					"body" : [						"self addShortcut: aShortcut"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18407061,					"argumentNames" : [						"aShortcut"					]				},				"STONCStyleCommentsSkipStream" : {					"sourceCode" : [						"next: requestedCount",						"",						"\t\"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available\"",						"",						"\t^ self",						"\t\t  next: requestedCount",						"\t\t  into: (self collectionSpecies new: requestedCount)"					],					"body" : [						"^ self",						"\t  next: requestedCount",						"\t  into: (self collectionSpecies new: requestedCount)"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Read requestedCount elements into new collection and return it,",						"\t it could be that less elements were available"					],					"hash" : 18174831,					"argumentNames" : [						"requestedCount"					]				},				"AtomicQueueItem" : {					"sourceCode" : [						"next: anObject",						"",						"\t\"Set the value of next\"",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Set the value of next"					],					"hash" : 18925974,					"argumentNames" : [						"anObject"					]				},				"FLMapper" : {					"sourceCode" : [						"next: anObject",						"",						"\tnext := anObject"					],					"body" : [						"next := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18569110,					"argumentNames" : [						"anObject"					]				}			}		},		"add:" : {			"implementors" : {				"MethodDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\t^ self at: anAssociation key put: anAssociation value"					],					"body" : [						"^ self at: anAssociation key put: anAssociation value"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18660573,					"argumentNames" : [						"anAssociation"					]				},				"StartupPreferencesLoader" : {					"sourceCode" : [						"add: anAction",						"",						"\t| action |",						"\taction := actions at: anAction name ifAbsentPut: [ anAction ].",						"\t\"make sure the possible existing action ueses new code or",						"\tchanged runOnce-behavior\"",						"\taction code: anAction code.",						"\taction runOnce: anAction runOnce.",						"\t^ action"					],					"body" : [						"| action |",						"action := actions at: anAction name ifAbsentPut: [ anAction ].",						"\"make sure the possible existing action ueses new code or",						"\tchanged runOnce-behavior\"",						"action code: anAction code.",						"action runOnce: anAction runOnce.",						"^ action"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19547567,					"argumentNames" : [						"anAction"					]				},				"SpecWrapperTableLayout" : {					"sourceCode" : [						"add: aSpec",						"",						"\telementAdded",						"\t\tifTrue: [ ",						"\t\t\tError signal:",						"\t\t\t\t('{0} can only hold 1 element' format: { self class name }) ]",						"\t\tifFalse: [ ",						"\t\t\tsuper add: aSpec.",						"\t\t\telementAdded := true ]"					],					"body" : [						"elementAdded",						"\tifTrue: [ ",						"\t\tError signal:",						"\t\t\t('{0} can only hold 1 element' format: { self class name }) ]",						"\tifFalse: [ ",						"\t\tsuper add: aSpec.",						"\t\telementAdded := true ]"					],					"isTestMethod" : false,					"category" : "commands",					"comment" : [ ],					"hash" : 19399519,					"argumentNames" : [						"aSpec"					]				},				"CoFetcherSequence" : {					"sourceCode" : [						"add: aCompletion",						"",						"\tsubcompletions add: aCompletion"					],					"body" : [						"subcompletions add: aCompletion"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 23313227,					"argumentNames" : [						"aCompletion"					]				},				"SpMorphicMillerAdapter" : {					"sourceCode" : [						"add: aPresenter",						"",						"\tself add: aPresenter constraints: SpLayoutConstraints new"					],					"body" : [						"self add: aPresenter constraints: SpLayoutConstraints new"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20719173,					"argumentNames" : [						"aPresenter"					]				},				"CacheWeight" : {					"sourceCode" : [						"add: value",						"",						"\t| weight |",						"\tweight := compute cull: value.",						"\ttotal := total + weight"					],					"body" : [						"| weight |",						"weight := compute cull: value.",						"total := total + weight"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19710641,					"argumentNames" : [						"value"					]				},				"Heap" : {					"sourceCode" : [						"add: anObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject.\"",						"",						"\ttally = array size ifTrue: [ self grow ].",						"\tarray at: (tally := tally + 1) put: anObject.",						"\tself updateObjectIndex: tally.",						"\tself upHeap: tally.",						"\t^ anObject"					],					"body" : [						"tally = array size ifTrue: [ self grow ].",						"array at: (tally := tally + 1) put: anObject.",						"self updateObjectIndex: tally.",						"self upHeap: tally.",						"^ anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject."					],					"hash" : 18838025,					"argumentNames" : [						"anObject"					]				},				"DAPackage" : {					"sourceCode" : [						"add: aDependency",						"",						"\t^ dependencies add: aDependency"					],					"body" : [						"^ dependencies add: aDependency"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19834484,					"argumentNames" : [						"aDependency"					]				},				"IRSequence" : {					"sourceCode" : [						"add: anInstruction",						"",						"\tsequence add: anInstruction.",						"\tanInstruction sequence: self.",						"\t^ anInstruction"					],					"body" : [						"sequence add: anInstruction.",						"anInstruction sequence: self.",						"^ anInstruction"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19079832,					"argumentNames" : [						"anInstruction"					]				},				"Dictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\t\"Add anAssociation to the dictionary. If the key is already in the dictionary then the value ",						"\twill overwrite the one currently present.",						"\t",						"\t```",						"\td := Dictionary new at: 5 put: 1; yourself.  \"\"a Dictionary(5->1)\"\"",						"\td add: 5-> 12.  \"\"a Dictionary(5->12)\"\"",						"\ta add: 4->4. \"\"a Dictionary(5->12,4->4)\"\"",						"\t```",						"\t\"",						"",						"\t| index element |",						"\tindex := self findElementOrNil: anAssociation key.",						"\telement := array at: index.",						"\telement",						"\t\tifNil: [ self atNewIndex: index put: anAssociation ]",						"\t\tifNotNil: [ element value: anAssociation value ].",						"\t^ anAssociation"					],					"body" : [						"| index element |",						"index := self findElementOrNil: anAssociation key.",						"element := array at: index.",						"element",						"\tifNil: [ self atNewIndex: index put: anAssociation ]",						"\tifNotNil: [ element value: anAssociation value ].",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add anAssociation to the dictionary. If the key is already in the dictionary then the value ",						"\twill overwrite the one currently present.",						"\t",						"\t```",						"\td := Dictionary new at: 5 put: 1; yourself.  \"\"a Dictionary(5->1)\"\"",						"\td add: 5-> 12.  \"\"a Dictionary(5->12)\"\"",						"\ta add: 4->4. \"\"a Dictionary(5->12,4->4)\"\"",						"\t```",						"\t"					],					"hash" : 19162675,					"argumentNames" : [						"anAssociation"					]				},				"SpCompositeOutputPort" : {					"sourceCode" : [						"add: aPort",						"",						"\tports := ports copyWith: aPort"					],					"body" : [						"ports := ports copyWith: aPort"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20503617,					"argumentNames" : [						"aPort"					]				},				"OrderedCollection" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Add a new object at the end of the collection, and returns the object itself\"",						"",						"\t\"((OrderedCollection new add: 42; yourself) add: 43; yourself) asArray >>> #(42 43)\"",						"",						"\t\"Add returns the object itself\"",						"",						"\t\"(OrderedCollection new add: 42) >>> 42\"",						"",						"\t\"You may want to use yourself to return the collection itself\"",						"",						"\t\"(OrderedCollection new add: 42; yourself) class >>> OrderedCollection\"",						"",						"\t\"(OrderedCollection new add: 42; yourself) size >>> 1\"",						"",						"\t^ self addLast: newObject"					],					"body" : [						"^ self addLast: newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add a new object at the end of the collection, and returns the object itself"					],					"hash" : 18643904,					"argumentNames" : [						"newObject"					]				},				"Interval" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Adding to an Interval is not allowed.\"",						"",						"\tself shouldNotImplement"					],					"body" : [						"self shouldNotImplement"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Adding to an Interval is not allowed."					],					"hash" : 18638404,					"argumentNames" : [						"newObject"					]				},				"SortedCollection" : {					"sourceCode" : [						"add: newObject",						"",						"\t^ super insert: newObject before: (self indexForInserting: newObject)"					],					"body" : [						"^ super insert: newObject before: (self indexForInserting: newObject)"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18972758,					"argumentNames" : [						"newObject"					]				},				"DoubleLinkedList" : {					"sourceCode" : [						"add: anObjectOrLink",						"",						"\t\"Add anObjectOrLink at the end of me.",						"\tReturn the internal link object.\"",						"",						"\t^ self addLast: anObjectOrLink"					],					"body" : [						"^ self addLast: anObjectOrLink"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add anObjectOrLink at the end of me.",						"\tReturn the internal link object."					],					"hash" : 19444928,					"argumentNames" : [						"anObjectOrLink"					]				},				"STONListWriter" : {					"sourceCode" : [						"add: anObject",						"",						"\tfirst",						"\t\tifTrue: [ first := false ]",						"\t\tifFalse: [ writer listElementSeparator ].",						"\twriter nextPut: anObject"					],					"body" : [						"first",						"\tifTrue: [ first := false ]",						"\tifFalse: [ writer listElementSeparator ].",						"writer nextPut: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18178090,					"argumentNames" : [						"anObject"					]				},				"CTSkipList" : {					"sourceCode" : [						"add: key",						"",						"\tself add: key atHeight: random next"					],					"body" : [						"self add: key atHeight: random next"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20610846,					"argumentNames" : [						"key"					]				},				"Set" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject.\"",						"",						"\t| index |",						"\tindex := self scanFor: newObject.",						"\t(array at: index) ifNil: [ ",						"\t\tself atNewIndex: index put: newObject asCollectionElement ].",						"\t^ newObject"					],					"body" : [						"| index |",						"index := self scanFor: newObject.",						"(array at: index) ifNil: [ ",						"\tself atNewIndex: index put: newObject asCollectionElement ].",						"^ newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject."					],					"hash" : 18916886,					"argumentNames" : [						"newObject"					]				},				"SpActionBarPresenter" : {					"sourceCode" : [						"add: aButtonPresenter",						"",						"\t\"Add a button presenter to be shown at the start of the action bar (at the left).\"",						"",						"\t(items at: #start ifAbsentPut: [ OrderedCollection new ]) add:",						"\t\taButtonPresenter"					],					"body" : [						"(items at: #start ifAbsentPut: [ OrderedCollection new ]) add:",						"\taButtonPresenter"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"Add a button presenter to be shown at the start of the action bar (at the left)."					],					"hash" : 20331071,					"argumentNames" : [						"aButtonPresenter"					]				},				"AbstractAdapter" : {					"sourceCode" : [						"add: aWidget",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 18709828,					"argumentNames" : [						"aWidget"					]				},				"NavigationHistory" : {					"sourceCode" : [						"add: anEntry",						"",						"\tself addEntry: anEntry"					],					"body" : [						"self addEntry: anEntry"					],					"isTestMethod" : false,					"category" : "collection compatibility",					"comment" : [ ],					"hash" : 18432661,					"argumentNames" : [						"anEntry"					]				},				"IRBuilder" : {					"sourceCode" : [						"add: instr",						"",						"\t\"Associate instr with current parse node or byte range\"",						"",						"\tinstr sourceNode: self sourceNode.",						"\tinstr bytecodeIndex: self sourceByteIndex.",						"\t^ currentSequence add: instr"					],					"body" : [						"instr sourceNode: self sourceNode.",						"instr bytecodeIndex: self sourceByteIndex.",						"^ currentSequence add: instr"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [						"Associate instr with current parse node or byte range"					],					"hash" : 19078328,					"argumentNames" : [						"instr"					]				},				"ZnApplicationFormUrlEncodedEntity" : {					"sourceCode" : [						"add: association",						"",						"\tself at: association key put: association value"					],					"body" : [						"self at: association key put: association value"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19247026,					"argumentNames" : [						"association"					]				},				"WeakRegistry" : {					"sourceCode" : [						"add: anObject",						"",						"\t\"Add anObject to the receiver. Store the object as well as the associated executor.\"",						"",						"\t^ self add: anObject executor: anObject executor"					],					"body" : [						"^ self add: anObject executor: anObject executor"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add anObject to the receiver. Store the object as well as the associated executor."					],					"hash" : 19018916,					"argumentNames" : [						"anObject"					]				},				"MCDependencySorter" : {					"sourceCode" : [						"add: anItem",						"",						"\t| requirements |",						"\trequirements := self unresolvedRequirementsFor: anItem.",						"\trequirements isEmpty",						"\t\tifTrue: [ self addToOrder: anItem ]",						"\t\tifFalse: [ self addRequirements: requirements for: anItem ].",						"\t^ anItem"					],					"body" : [						"| requirements |",						"requirements := self unresolvedRequirementsFor: anItem.",						"requirements isEmpty",						"\tifTrue: [ self addToOrder: anItem ]",						"\tifFalse: [ self addRequirements: requirements for: anItem ].",						"^ anItem"					],					"isTestMethod" : false,					"category" : "building",					"comment" : [ ],					"hash" : 18369436,					"argumentNames" : [						"anItem"					]				},				"Bag" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject.\"",						"",						"\t^ self add: newObject withOccurrences: 1"					],					"body" : [						"^ self add: newObject withOccurrences: 1"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject."					],					"hash" : 18698018,					"argumentNames" : [						"newObject"					]				},				"RSGroup" : {					"sourceCode" : [						"add: shape",						"",						"\tself resetShapeFromModelCache.",						"\t^ super add: shape"					],					"body" : [						"self resetShapeFromModelCache.",						"^ super add: shape"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 23642845,					"argumentNames" : [						"shape"					]				},				"WideCharacterSet" : {					"sourceCode" : [						"add: aCharacter",						"",						"\t| val high low lowmap |",						"\tval := aCharacter asciiValue.",						"\tval < 256 ifTrue: [ self byteArrayMap at: val + 1 put: 1 ].",						"\thigh := val bitShift: -16.",						"\tlow := val bitAnd: 16rFFFF.",						"\tlowmap := map",						"\t\t          at: high",						"\t\t          ifAbsentPut: [ \"create a chunk of 65536=8192*8 bits\" ",						"\t\t          ByteArray new: 8192 ].",						"\tself setBitmap: lowmap at: low.",						"\t^ aCharacter"					],					"body" : [						"| val high low lowmap |",						"val := aCharacter asciiValue.",						"val < 256 ifTrue: [ self byteArrayMap at: val + 1 put: 1 ].",						"high := val bitShift: -16.",						"low := val bitAnd: 16rFFFF.",						"lowmap := map",						"\t          at: high",						"\t          ifAbsentPut: [ \"create a chunk of 65536=8192*8 bits\" ",						"\t          ByteArray new: 8192 ].",						"self setBitmap: lowmap at: low.",						"^ aCharacter"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20073303,					"argumentNames" : [						"aCharacter"					]				},				"RSCompositeAnimation" : {					"sourceCode" : [						"add: anAnimation",						"",						"\tanimations add: anAnimation"					],					"body" : [						"animations add: anAnimation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 23703895,					"argumentNames" : [						"anAnimation"					]				},				"SpCollectionListModel" : {					"sourceCode" : [						"add: anItem",						"",						"\tcollection := collection copyWith: anItem.",						"",						"\tself refreshList.",						"\tself announcer announce: (ValueChanged newValue: self)"					],					"body" : [						"collection := collection copyWith: anItem.",						"",						"self refreshList.",						"self announcer announce: (ValueChanged newValue: self)"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20291181,					"argumentNames" : [						"anItem"					]				},				"OCLiteralSet" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements.  If equivalent is already present don't add and return equivalent object\"",						"",						"\t| index |",						"\tnewObject ifNil: [ ",						"\t\tself error: 'Sets cannot meaningfully contain nil as an element' ].",						"\tindex := self findElementOrNil: newObject.",						"\t^ (array at: index)",						"\t\t  ifNil: [ ",						"\t\t\t  self atNewIndex: index put: newObject.",						"\t\t\t  newObject ]",						"\t\t  ifNotNil: [ array at: index ]"					],					"body" : [						"| index |",						"newObject ifNil: [ ",						"\tself error: 'Sets cannot meaningfully contain nil as an element' ].",						"index := self findElementOrNil: newObject.",						"^ (array at: index)",						"\t  ifNil: [ ",						"\t\t  self atNewIndex: index put: newObject.",						"\t\t  newObject ]",						"\t  ifNotNil: [ array at: index ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements.  If equivalent is already present don't add and return equivalent object"					],					"hash" : 19342279,					"argumentNames" : [						"newObject"					]				},				"CollectionValueHolder" : {					"sourceCode" : [						"add: newObject",						"",						"\t| result |",						"\tresult := value add: newObject.",						"\tself valueAdded: newObject.",						"\t^ result"					],					"body" : [						"| result |",						"result := value add: newObject.",						"self valueAdded: newObject.",						"^ result"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 20009109,					"argumentNames" : [						"newObject"					]				},				"SpPanedLayout" : {					"sourceCode" : [						"add: aPresenterLayoutOrSymbol",						"",						"\t\"Adds `aPresenterLayoutOrSymbol` as one of the elements to put in the paned layout. ",						"\t Te position of the element will be calculated in order of addition (and there cannot ",						"\t be more than two). ",						"\t `aPresenterLayoutOrSymbol` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add.\"",						"",						"\tself",						"\t\tadd: aPresenterLayoutOrSymbol",						"\t\twithConstraints: [ :constraints |  ]",						"\t\tplace: children size + 1"					],					"body" : [						"self",						"\tadd: aPresenterLayoutOrSymbol",						"\twithConstraints: [ :constraints |  ]",						"\tplace: children size + 1"					],					"isTestMethod" : false,					"category" : "api - adding",					"comment" : [						"Adds `aPresenterLayoutOrSymbol` as one of the elements to put in the paned layout. ",						"\t Te position of the element will be calculated in order of addition (and there cannot ",						"\t be more than two). ",						"\t `aPresenterLayoutOrSymbol` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add."					],					"hash" : 20258863,					"argumentNames" : [						"aPresenterLayoutOrSymbol"					]				},				"ArrayedCollection" : {					"sourceCode" : [						"add: newObject",						"",						"\tself shouldNotImplement"					],					"body" : [						"self shouldNotImplement"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18689604,					"argumentNames" : [						"newObject"					]				},				"RSCanvas" : {					"sourceCode" : [						"add: aShape",						"",						"\t\"Main method to add a shape to a shape to a canvas\"",						"",						"\tself",						"\t\tassert: aShape notNil",						"\t\tdescription: 'Nil cannot be added to a canvas'.",						"",						"\tself",						"\t\tassert: (aShape class inheritsFrom: RSShape)",						"\t\tdescription: 'A shape must be provided'.",						"\taShape",						"\t\taddedIn: self;",						"\t\trenderOn: self.",						"\t^ aShape"					],					"body" : [						"self",						"\tassert: aShape notNil",						"\tdescription: 'Nil cannot be added to a canvas'.",						"",						"self",						"\tassert: (aShape class inheritsFrom: RSShape)",						"\tdescription: 'A shape must be provided'.",						"aShape",						"\taddedIn: self;",						"\trenderOn: self.",						"^ aShape"					],					"isTestMethod" : false,					"category" : "adding - nodes edges",					"comment" : [						"Main method to add a shape to a shape to a canvas"					],					"hash" : 23642761,					"argumentNames" : [						"aShape"					]				},				"RunArray" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message.\"",						"",						"\t^ self addLast: newObject"					],					"body" : [						"^ self addLast: newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message."					],					"hash" : 19478464,					"argumentNames" : [						"newObject"					]				},				"ExceptionSet" : {					"sourceCode" : [						"add: anException",						"",						"\t\"Add anException to the exceptions that I handle\"",						"",						"\t^ exceptions add: anException"					],					"body" : [						"^ exceptions add: anException"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [						"Add anException to the exceptions that I handle"					],					"hash" : 18788468,					"argumentNames" : [						"anException"					]				},				"SpecStubAbstractAdapter" : {					"sourceCode" : [						"add: aWidget",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 20220300,					"argumentNames" : [						"aWidget"					]				},				"WeakFinalizerItem" : {					"sourceCode" : [						"add: newExecutor",						"",						"\texecutor ifNil: [ executor := newExecutor ] ifNotNil: [ ",						"\t\texecutor hasMultipleExecutors",						"\t\t\tifTrue: [ executor add: newExecutor ]",						"\t\t\tifFalse: [ ",						"\t\t\t\texecutor := ObjectFinalizerCollection",						"\t\t\t\t\t            with: executor",						"\t\t\t\t\t            with: newExecutor ] ]"					],					"body" : [						"executor ifNil: [ executor := newExecutor ] ifNotNil: [ ",						"\texecutor hasMultipleExecutors",						"\t\tifTrue: [ executor add: newExecutor ]",						"\t\tifFalse: [ ",						"\t\t\texecutor := ObjectFinalizerCollection",						"\t\t\t\t            with: executor",						"\t\t\t\t            with: newExecutor ] ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19013115,					"argumentNames" : [						"newExecutor"					]				},				"MCDefinitionIndex" : {					"sourceCode" : [						"add: aDefinition",						"",						"\t^ definitions at: aDefinition description put: aDefinition"					],					"body" : [						"^ definitions at: aDefinition description put: aDefinition"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18104855,					"argumentNames" : [						"aDefinition"					]				},				"MTSession" : {					"sourceCode" : [						"add: aDecorator",						"",						"\t| key |",						"\tkey := aDecorator compiledMethod.",						"",						"\t^ (forbiddenMethods includes: key)",						"\t\t  ifTrue: [ Object new ]",						"\t\t  ifFalse: [ ",						"\t\t\t  decorators at: key ifAbsentPut: [ ",						"\t\t\t\t  aDecorator",						"\t\t\t\t\t  owner: self;",						"\t\t\t\t\t  yourself ] ]"					],					"body" : [						"| key |",						"key := aDecorator compiledMethod.",						"",						"^ (forbiddenMethods includes: key)",						"\t  ifTrue: [ Object new ]",						"\t  ifFalse: [ ",						"\t\t  decorators at: key ifAbsentPut: [ ",						"\t\t\t  aDecorator",						"\t\t\t\t  owner: self;",						"\t\t\t\t  yourself ] ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20624057,					"argumentNames" : [						"aDecorator"					]				},				"SmallDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself at: anAssociation key put: anAssociation value.",						"\t^ anAssociation"					],					"body" : [						"self at: anAssociation key put: anAssociation value.",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18969847,					"argumentNames" : [						"anAssociation"					]				},				"ProcessList" : {					"sourceCode" : [						"add: aLinkOrObject",						"",						"\t\"Add aLink to the end of the receiver's list. Answer aLink.\"",						"",						"\t^ self addLast: aLinkOrObject"					],					"body" : [						"^ self addLast: aLinkOrObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add aLink to the end of the receiver's list. Answer aLink."					],					"hash" : 18924736,					"argumentNames" : [						"aLinkOrObject"					]				},				"SubscriptionRegistry" : {					"sourceCode" : [						"add: subscription",						"",						"\t^ self protected: [ subscriptions add: subscription ]"					],					"body" : [						"^ self protected: [ subscriptions add: subscription ]"					],					"isTestMethod" : false,					"category" : "add/remove",					"comment" : [ ],					"hash" : 18662351,					"argumentNames" : [						"subscription"					]				},				"WeakSet" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject\"",						"",						"\t| index element |",						"\tindex := self scanFor: newObject.",						"\t((element := array at: index) == flag or: [ element == nil ]) ",						"\t\tifTrue: [ self atNewIndex: index put: newObject asCollectionElement ].",						"\t^ newObject"					],					"body" : [						"| index element |",						"index := self scanFor: newObject.",						"((element := array at: index) == flag or: [ element == nil ]) ifTrue: [ ",						"\tself atNewIndex: index put: newObject asCollectionElement ].",						"^ newObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements, but only if",						"\tnot already present. Answer newObject"					],					"hash" : 19170208,					"argumentNames" : [						"newObject"					]				},				"MetacelloRepositoriesSpec" : {					"sourceCode" : [						"add: aStringOrSpec",						"",						"\taStringOrSpec addToMetacelloRepositories: self"					],					"body" : [						"aStringOrSpec addToMetacelloRepositories: self"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 18153621,					"argumentNames" : [						"aStringOrSpec"					]				},				"STONShortListWriter" : {					"sourceCode" : [						"add: anObject",						"",						"\tfirst",						"\t\tifTrue: [ first := false ]",						"\t\tifFalse: [ writer shortListElementSeparator ].",						"\twriter nextPut: anObject"					],					"body" : [						"first",						"\tifTrue: [ first := false ]",						"\tifFalse: [ writer shortListElementSeparator ].",						"writer nextPut: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18178602,					"argumentNames" : [						"anObject"					]				},				"Collection" : {					"sourceCode" : [						"add: newObject",						"",						"\t\"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message.\"",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Include newObject as one of the receiver's elements. Answer newObject. ",						"\tArrayedCollections cannot respond to this message."					],					"hash" : 18684484,					"argumentNames" : [						"newObject"					]				},				"PluggableMenuSpec" : {					"sourceCode" : [						"add: aString",						"",						"\t^ self add: aString action: nil"					],					"body" : [						"^ self add: aString action: nil"					],					"isTestMethod" : false,					"category" : "construction",					"comment" : [ ],					"hash" : 18539040,					"argumentNames" : [						"aString"					]				},				"CharacterSet" : {					"sourceCode" : [						"add: aCharacter",						"",						"\t\"I automatically become a WideCharacterSet if you add a wide character to myself\"",						"",						"\taCharacter asciiValue >= 256 ifTrue: [ ",						"\t\t| wide |",						"\t\twide := WideCharacterSet new.",						"\t\twide addAll: self.",						"\t\twide add: aCharacter.",						"\t\tself becomeForward: wide.",						"\t\t^ aCharacter ].",						"\tmap at: aCharacter asciiValue + 1 put: 1.",						"\t^ aCharacter"					],					"body" : [						"aCharacter asciiValue >= 256 ifTrue: [ ",						"\t| wide |",						"\twide := WideCharacterSet new.",						"\twide addAll: self.",						"\twide add: aCharacter.",						"\tself becomeForward: wide.",						"\t^ aCharacter ].",						"map at: aCharacter asciiValue + 1 put: 1.",						"^ aCharacter"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"I automatically become a WideCharacterSet if you add a wide character to myself"					],					"hash" : 18983314,					"argumentNames" : [						"aCharacter"					]				},				"ClapValidationReport" : {					"sourceCode" : [						"add: aDiagnostic",						"",						"\taDiagnostic isFailure ifTrue: [ problems add: aDiagnostic ]"					],					"body" : [						"aDiagnostic isFailure ifTrue: [ problems add: aDiagnostic ]"					],					"isTestMethod" : false,					"category" : "controlling",					"comment" : [ ],					"hash" : 18240498,					"argumentNames" : [						"aDiagnostic"					]				},				"ClapParameterized" : {					"sourceCode" : [						"add: aParameter",						"",						"\tparameters",						"\t\tat: aParameter identifier",						"\t\tifPresent: [ :param | ",						"\t\tself signalIdentifierConflictOf: aParameter with: param ]",						"\t\tifAbsentPut: aParameter.",						"\t^ aParameter addTo: self"					],					"body" : [						"parameters",						"\tat: aParameter identifier",						"\tifPresent: [ :param | ",						"\tself signalIdentifierConflictOf: aParameter with: param ]",						"\tifAbsentPut: aParameter.",						"^ aParameter addTo: self"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18236440,					"argumentNames" : [						"aParameter"					]				},				"WeakValueDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself at: anAssociation key put: anAssociation value.",						"\t^ anAssociation"					],					"body" : [						"self at: anAssociation key put: anAssociation value.",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19014903,					"argumentNames" : [						"anAssociation"					]				},				"OrderedDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\t| oldSize |",						"\toldSize := dictionary size.",						"\tdictionary add: anAssociation.",						"\tdictionary size > oldSize ifTrue: [ ",						"\t\torderedKeys size > oldSize ifFalse: [ self growOrderedKeys ].",						"\t\torderedKeys at: oldSize + 1 put: anAssociation key ].",						"\t^ anAssociation"					],					"body" : [						"| oldSize |",						"oldSize := dictionary size.",						"dictionary add: anAssociation.",						"dictionary size > oldSize ifTrue: [ ",						"\torderedKeys size > oldSize ifFalse: [ self growOrderedKeys ].",						"\torderedKeys at: oldSize + 1 put: anAssociation key ].",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19179959,					"argumentNames" : [						"anAssociation"					]				},				"SpMorphicBoxAdapter" : {					"sourceCode" : [						"add: aPresenter",						"",						"\tself add: aPresenter constraints: SpBoxConstraints new"					],					"body" : [						"self add: aPresenter constraints: SpBoxConstraints new"					],					"isTestMethod" : false,					"category" : "factory",					"comment" : [ ],					"hash" : 20718149,					"argumentNames" : [						"aPresenter"					]				},				"RSComposite" : {					"sourceCode" : [						"add: aShape",						"",						"\tself",						"\t\tassert: aShape notNil",						"\t\tdescription: 'Nil cannot be added to a canvas'.",						"\taShape",						"\t\taddedIn: self;",						"\t\trenderOn: self.",						"\t^ aShape"					],					"body" : [						"self",						"\tassert: aShape notNil",						"\tdescription: 'Nil cannot be added to a canvas'.",						"aShape",						"\taddedIn: self;",						"\trenderOn: self.",						"^ aShape"					],					"isTestMethod" : false,					"category" : "adding nodes edges",					"comment" : [ ],					"hash" : 23677149,					"argumentNames" : [						"aShape"					]				},				"LinkedList" : {					"sourceCode" : [						"add: aLinkOrObject",						"",						"\t\"Add aLink to the end of the receiver's list. Answer aLink.\"",						"",						"\t^ self addLast: aLinkOrObject"					],					"body" : [						"^ self addLast: aLinkOrObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"Add aLink to the end of the receiver's list. Answer aLink."					],					"hash" : 18857920,					"argumentNames" : [						"aLinkOrObject"					]				},				"DACompositeDependency" : {					"sourceCode" : [						"add: aDependency",						"",						"\tdependencies add: aDependency"					],					"body" : [						"dependencies add: aDependency"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19836747,					"argumentNames" : [						"aDependency"					]				},				"SpecLayout" : {					"sourceCode" : [						"add: aSpec",						"",						"\tself add: aSpec origin: 0 @ 0 corner: 1 @ 1"					],					"body" : [						"self add: aSpec origin: 0 @ 0 corner: 1 @ 1"					],					"isTestMethod" : false,					"category" : "commands",					"comment" : [ ],					"hash" : 19394833,					"argumentNames" : [						"aSpec"					]				},				"RSQuadTreeF" : {					"sourceCode" : [						"add: aNode",						"",						"\tleaf",						"\t\tifTrue: [ ",						"\t\t\tsoleChild isNil",						"\t\t\t\tifTrue: [ soleChild := aNode ]",						"\t\t\t\tifFalse: [ ",						"\t\t\t\t\t(soleChild position closeTo: aNode position)",						"\t\t\t\t\t\tifTrue: [ self addChild: aNode ]",						"\t\t\t\t\t\tifFalse: [ ",						"\t\t\t\t\t\t\t| firstChild |",						"\t\t\t\t\t\t\tfirstChild := soleChild.",						"\t\t\t\t\t\t\tsoleChild := nil.",						"\t\t\t\t\t\t\tself",						"\t\t\t\t\t\t\t\taddChild: aNode;",						"\t\t\t\t\t\t\t\taddChild: firstChild ] ] ]",						"\t\tifFalse: [ self addChild: aNode ]"					],					"body" : [						"leaf",						"\tifTrue: [ ",						"\t\tsoleChild isNil",						"\t\t\tifTrue: [ soleChild := aNode ]",						"\t\t\tifFalse: [ ",						"\t\t\t\t(soleChild position closeTo: aNode position)",						"\t\t\t\t\tifTrue: [ self addChild: aNode ]",						"\t\t\t\t\tifFalse: [ ",						"\t\t\t\t\t\t| firstChild |",						"\t\t\t\t\t\tfirstChild := soleChild.",						"\t\t\t\t\t\tsoleChild := nil.",						"\t\t\t\t\t\tself",						"\t\t\t\t\t\t\taddChild: aNode;",						"\t\t\t\t\t\t\taddChild: firstChild ] ] ]",						"\tifFalse: [ self addChild: aNode ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 24008323,					"argumentNames" : [						"aNode"					]				},				"SDL2TouchStateMachine" : {					"sourceCode" : [						"add: aPoint",						"",						"\tmove add: aPoint"					],					"body" : [						"move add: aPoint"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22177099,					"argumentNames" : [						"aPoint"					]				},				"SpMillerLayout" : {					"sourceCode" : [						"add: aName",						"",						"\tself add: aName withConstraints: [ :constraints |  ]"					],					"body" : [						"self add: aName withConstraints: [ :constraints |  ]"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 20259507,					"argumentNames" : [						"aName"					]				},				"SpBoxLayout" : {					"sourceCode" : [						"add: aPresenterLayoutOrSymbol",						"",						"\t\"Adds `aPresenterLayoutOrSymbol` to the list of presenters to be arranged in the layout. ",						"\t `aPresenterLayoutOrSymboll` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add.\"",						"",						"\tself",						"\t\tadd: aPresenterLayoutOrSymbol",						"\t\twithConstraints: [ :constraints |  ]"					],					"body" : [						"self",						"\tadd: aPresenterLayoutOrSymbol",						"\twithConstraints: [ :constraints |  ]"					],					"isTestMethod" : false,					"category" : "api - adding",					"comment" : [						"Adds `aPresenterLayoutOrSymbol` to the list of presenters to be arranged in the layout. ",						"\t `aPresenterLayoutOrSymboll` can be",						"\t\t- any instance of `SpPresenter` hierarchy, ",						"\t\t- another layout or ",						"\t\t- a Symbol, matching the name of the instance variable who will contain the element to add."					],					"hash" : 20257971,					"argumentNames" : [						"aPresenterLayoutOrSymbol"					]				},				"MetacelloMemberListSpec" : {					"sourceCode" : [						"add: aSpec",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 19321412,					"argumentNames" : [						"aSpec"					]				},				"SpToolbarPresenter" : {					"sourceCode" : [						"add: aToolbarButtonPresenter",						"",						"\t\"Add a toolbar button to the toolbar.\"",						"",						"\tself addItem: aToolbarButtonPresenter"					],					"body" : [						"self addItem: aToolbarButtonPresenter"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"Add a toolbar button to the toolbar."					],					"hash" : 20341141,					"argumentNames" : [						"aToolbarButtonPresenter"					]				},				"SpButtonBarPresenter" : {					"sourceCode" : [						"add: aButtonPresenter",						"",						"\t\"Add `aButtonPresenter` to the button list.\"",						"",						"\taButtonPresenter owner: self.",						"\titems add: aButtonPresenter"					],					"body" : [						"aButtonPresenter owner: self.",						"items add: aButtonPresenter"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"Add `aButtonPresenter` to the button list."					],					"hash" : 20332114,					"argumentNames" : [						"aButtonPresenter"					]				},				"KMStorage" : {					"sourceCode" : [						"add: aKeymap",						"",						"\taKeymap hasName",						"\t\tifTrue: [ namedRegistry at: aKeymap name put: aKeymap ]",						"\t\tifFalse: [ anonymousRegistry add: aKeymap ]"					],					"body" : [						"aKeymap hasName",						"\tifTrue: [ namedRegistry at: aKeymap name put: aKeymap ]",						"\tifFalse: [ anonymousRegistry add: aKeymap ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18419468,					"argumentNames" : [						"aKeymap"					]				},				"SpStubAbstractAdapter" : {					"sourceCode" : [						"add: aWidget",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 20517516,					"argumentNames" : [						"aWidget"					]				},				"SpecTableLayout" : {					"sourceCode" : [						"add: aSpec",						"",						"\tcommands add: (SpecTableLayoutAdd subwidget: aSpec)"					],					"body" : [						"commands add: (SpecTableLayoutAdd subwidget: aSpec)"					],					"isTestMethod" : false,					"category" : "commands",					"comment" : [ ],					"hash" : 19396880,					"argumentNames" : [						"aSpec"					]				},				"MetacelloPackagesSpec" : {					"sourceCode" : [						"add: aSpec",						"",						"\taSpec addToMetacelloPackages: self"					],					"body" : [						"aSpec addToMetacelloPackages: self"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 19322005,					"argumentNames" : [						"aSpec"					]				},				"Array2D" : {					"sourceCode" : [						"add: newObject",						"",						"\tself shouldNotImplement"					],					"body" : [						"self shouldNotImplement"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 18691396,					"argumentNames" : [						"newObject"					]				},				"CoStatisticsHeuristicBuilder" : {					"sourceCode" : [						"add: anHeuristic",						"",						"\tsuper add: (CoStatisticsHeuristicWrapper new",						"\t\t\t statistics: statistics;",						"\t\t\t wrapped: anHeuristic;",						"\t\t\t yourself)"					],					"body" : [						"super add: (CoStatisticsHeuristicWrapper new",						"\t\t statistics: statistics;",						"\t\t wrapped: anHeuristic;",						"\t\t yourself)"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 23319785,					"argumentNames" : [						"anHeuristic"					]				},				"ZnCookieJar" : {					"sourceCode" : [						"add: aCookie",						"",						"\t(self removeIfExpired: aCookie) ifTrue: [ ^ nil ].",						"\tself cookies do: [ :cookie | ",						"\t\tcookie = aCookie ifTrue: [ self cookies remove: cookie ] ].",						"\tself cookies add: aCookie"					],					"body" : [						"(self removeIfExpired: aCookie) ifTrue: [ ^ nil ].",						"self cookies do: [ :cookie | ",						"\tcookie = aCookie ifTrue: [ self cookies remove: cookie ] ].",						"self cookies add: aCookie"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19244286,					"argumentNames" : [						"aCookie"					]				},				"CoHeuristicBuilder" : {					"sourceCode" : [						"add: anHeuristic",						"",						"\theuristics add: anHeuristic"					],					"body" : [						"heuristics add: anHeuristic"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 23317833,					"argumentNames" : [						"anHeuristic"					]				},				"AbstractMorphicAdapter" : {					"sourceCode" : [						"add: aWidget",						"",						"\tself widgetDo: [ :w | w ensureLayoutAndAddMorph: aWidget asWidget ]"					],					"body" : [						"self widgetDo: [ :w | w ensureLayoutAndAddMorph: aWidget asWidget ]"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 19400612,					"argumentNames" : [						"aWidget"					]				},				"RelationSet" : {					"sourceCode" : [						"add: anObject",						"",						"\t(self includes: anObject) ifTrue: [ ^ anObject ].",						"",						"\tslot add: anObject to: owner.",						"\t^ set add: anObject"					],					"body" : [						"(self includes: anObject) ifTrue: [ ^ anObject ].",						"",						"slot add: anObject to: owner.",						"^ set add: anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 21507817,					"argumentNames" : [						"anObject"					]				},				"RSTContainer" : {					"sourceCode" : [						"add: aShape",						"",						"\tself",						"\t\tassert: aShape notNil",						"\t\tdescription: 'Nil cannot be added to a canvas'.",						"\taShape",						"\t\taddedIn: self;",						"\t\trenderOn: self.",						"\t^ aShape"					],					"body" : [						"self",						"\tassert: aShape notNil",						"\tdescription: 'Nil cannot be added to a canvas'.",						"aShape",						"\taddedIn: self;",						"\trenderOn: self.",						"^ aShape"					],					"isTestMethod" : false,					"category" : "adding nodes edges",					"comment" : [ ],					"hash" : 23638749,					"argumentNames" : [						"aShape"					]				},				"CharacterSetComplement" : {					"sourceCode" : [						"add: aCharacter",						"",						"\t\"a character is present if not absent, so adding a character is removing it from the absent\"",						"",						"\t(absent includes: aCharacter) ifTrue: [ ",						"\t\tbyteArrayMapCache := nil.",						"\t\tabsent remove: aCharacter ].",						"\t^ aCharacter"					],					"body" : [						"(absent includes: aCharacter) ifTrue: [ ",						"\tbyteArrayMapCache := nil.",						"\tabsent remove: aCharacter ].",						"^ aCharacter"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [						"a character is present if not absent, so adding a character is removing it from the absent"					],					"hash" : 18719588,					"argumentNames" : [						"aCharacter"					]				},				"FLLargeIdentitySet" : {					"sourceCode" : [						"add: anObject",						"",						"\t| hash |",						"\tanObject ifNil: [ ",						"\t\tincludesNil ifFalse: [ ",						"\t\t\tincludesNil := true.",						"\t\t\ttally := tally + 1 ].",						"\t\t^ anObject ].",						"\t(array at: (hash := anObject largeIdentityHash \\\\ 4096 + 1))",						"\t\tifNil: [ ",						"\t\t\tarray at: hash put: (Array with: anObject).",						"\t\t\ttallies at: hash put: 1.",						"\t\t\ttally := tally + 1 ]",						"\t\tifNotNil: [ :list | ",						"\t\t\t(list fuelPointsTo: anObject) ifFalse: [ ",						"\t\t\t\t| newIndex |",						"\t\t\t\ttally := tally + 1.",						"\t\t\t\tlist size < (newIndex := (tallies at: hash) + 1)",						"\t\t\t\t\tifFalse: [ list at: newIndex put: anObject ]",						"\t\t\t\t\tifTrue: [ ",						"\t\t\t\t\t\t| newList |",						"\t\t\t\t\t\tnewList := Array new: list size * 2.",						"\t\t\t\t\t\tnewList",						"\t\t\t\t\t\t\treplaceFrom: 1",						"\t\t\t\t\t\t\tto: list size",						"\t\t\t\t\t\t\twith: list",						"\t\t\t\t\t\t\tstartingAt: 1;",						"\t\t\t\t\t\t\tat: newIndex put: anObject.",						"\t\t\t\t\t\tarray at: hash put: newList ].",						"\t\t\t\ttallies at: hash put: newIndex ] ].",						"\t^ anObject"					],					"body" : [						"| hash |",						"anObject ifNil: [ ",						"\tincludesNil ifFalse: [ ",						"\t\tincludesNil := true.",						"\t\ttally := tally + 1 ].",						"\t^ anObject ].",						"(array at: (hash := anObject largeIdentityHash \\\\ 4096 + 1))",						"\tifNil: [ ",						"\t\tarray at: hash put: (Array with: anObject).",						"\t\ttallies at: hash put: 1.",						"\t\ttally := tally + 1 ]",						"\tifNotNil: [ :list | ",						"\t\t(list fuelPointsTo: anObject) ifFalse: [ ",						"\t\t\t| newIndex |",						"\t\t\ttally := tally + 1.",						"\t\t\tlist size < (newIndex := (tallies at: hash) + 1)",						"\t\t\t\tifFalse: [ list at: newIndex put: anObject ]",						"\t\t\t\tifTrue: [ ",						"\t\t\t\t\t| newList |",						"\t\t\t\t\tnewList := Array new: list size * 2.",						"\t\t\t\t\tnewList",						"\t\t\t\t\t\treplaceFrom: 1",						"\t\t\t\t\t\tto: list size",						"\t\t\t\t\t\twith: list",						"\t\t\t\t\t\tstartingAt: 1;",						"\t\t\t\t\t\tat: newIndex put: anObject.",						"\t\t\t\t\tarray at: hash put: newList ].",						"\t\t\ttallies at: hash put: newIndex ] ].",						"^ anObject"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19633511,					"argumentNames" : [						"anObject"					]				},				"WeakKeyDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself at: anAssociation key put: anAssociation value.",						"\t^ anAssociation"					],					"body" : [						"self at: anAssociation key put: anAssociation value.",						"^ anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19012343,					"argumentNames" : [						"anAssociation"					]				},				"MetacelloVersionLoadDirective" : {					"sourceCode" : [						"add: aDirective",						"",						"\tself loadDirectives add: aDirective"					],					"body" : [						"self loadDirectives add: aDirective"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 18166056,					"argumentNames" : [						"aDirective"					]				},				"TextEmphasis" : {					"sourceCode" : [						"add: anotherCodeOrEmphasis",						"",						"\t\"add anotherCodeOrEmphasis to me\"",						"",						"\temphasisCode := emphasisCode bitOr: anotherCodeOrEmphasis value"					],					"body" : [						"emphasisCode := emphasisCode bitOr: anotherCodeOrEmphasis value"					],					"isTestMethod" : false,					"category" : "combining",					"comment" : [						"add anotherCodeOrEmphasis to me"					],					"hash" : 19475585,					"argumentNames" : [						"anotherCodeOrEmphasis"					]				},				"SpAbstractAdapter" : {					"sourceCode" : [						"add: aWidget",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 20318532,					"argumentNames" : [						"aWidget"					]				},				"ZnMultiValueDictionary" : {					"sourceCode" : [						"add: anAssociation",						"",						"\tself checkLimitForKey: anAssociation key.",						"\t^ super add: anAssociation"					],					"body" : [						"self checkLimitForKey: anAssociation key.",						"^ super add: anAssociation"					],					"isTestMethod" : false,					"category" : "adding",					"comment" : [ ],					"hash" : 19149001,					"argumentNames" : [						"anAssociation"					]				},				"SpAbstractMorphicAdapter" : {					"sourceCode" : [						"add: anAdapter",						"",						"\tself widgetDo: [ :w | w spEnsureLayoutAndAddMorph: anAdapter widget ]"					],					"body" : [						"self widgetDo: [ :w | w spEnsureLayoutAndAddMorph: anAdapter widget ]"					],					"isTestMethod" : false,					"category" : "protocol",					"comment" : [ ],					"hash" : 20701860,					"argumentNames" : [						"anAdapter"					]				},				"SpecFocusOrder" : {					"sourceCode" : [						"add: aPresenter",						"",						"\tpresenters add: aPresenter"					],					"body" : [						"presenters add: aPresenter"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18778953,					"argumentNames" : [						"aPresenter"					]				}			},			"senders" : [				"ASPathConverter>>#addSegment",				"ASTClassBuilderTest>>#testCreateNormalClassWithSharedPools",				"AbstractFileReference>>#childGeneratorBlock:matching:",				"AbstractTonelTest>>#trait2",				"AbstractTonelTest>>#classWithTraits",				"AbstractTonelTest>>#trait1",				"AbstractTonelTest>>#classWithTraitsWithClassComposition",				"AbstractTool class>>#undoLastRefactoring",				"AbstractTool class>>#protocolSuggestionsFor:",				"AbstractTwoButtons>>#initializeWidgets",				"AbstractTwoButtons class>>#horizontal",				"AbstractTwoButtons class>>#vertical",				"ActiveClassAnnotationsTest>>#testCanBeEnumeratedForGivenClassAndUser",				"ActiveClassAnnotationsTest>>#testCanBeEnumeratedForGivenUser",				"AndreasSystemProfilerTest>>#testGetNewTab",				"Announcement class>>#-",				"AnnouncementSet>>#,",				"AnnouncementSet>>#-",				"AnnouncementSetWithExclusions>>#addExclusion:",				"Announcer>>#basicSubscribe:",				"Announcer>>#when:do:",				"Array>>#generateSpec",				"ArrayTest>>#testDo2",				"ArrayTest>>#testAllButFirstDo",				"ArrayTest>>#testReverseDoEmpty",				"ArrayTest>>#testAllButLastDo",				"ArrayTest>>#testDo",				"ArrayTest>>#testKeysAndValuesDoEmpty",				"ArrayTest>>#collectionWithIdentical",				"ArrayTest>>#testFromToDo",				"ArrayTest>>#testReverseDo",				"ArrayTest>>#firstIndexesOf:in:",				"ArrayTest>>#testWithIndexDo",				"ArrayTest>>#collectionWithCopy",				"ArrayTest>>#testKeysAndValuesDo",				"AthensBalloonPath>>#visitCloseSegment:",				"AthensBalloonPath>>#visitQuadSegment:",				"AthensBalloonPath>>#duplicateLastPoint",				"AthensBalloonPath>>#visitMoveSegment:",				"AthensBalloonPath>>#visitLineSegment:",				"AthensDemoPresenter>>#initializeWidgets",				"AthensDemoPresenter class>>#defaultSpec",				"AthensPolygon>>#moveTo:",				"AthensPolygon>>#newContour",				"AthensPolygon>>#lineTo:",				"AthensTextScanner>>#newLine:",				"AthensTiger>>#readParts",				"AthensTreeDemo>>#buildSubtreeFor:level:",				"AthensTreeDemo>>#rowAt:",				"Bag>>#asShapeHistogram",				"BagTest>>#testPrintOn",				"BagTest>>#testOccurrencesOf",				"BagTest>>#testFlatCollect",				"BagTest>>#testPrintOnDelimiter",				"BagTest>>#testPrintElementsOn",				"BagTest>>#testRemove",				"BagTest>>#testTAddTwice",				"BagTest>>#testTAdd",				"BagTest>>#testPrintOnDelimiterLast",				"BagTest>>#testAsCommaStringMore",				"BagTest>>#nonEmpty1Element",				"BagTest>>#testAdd",				"BagTest>>#setUp",				"BagTest>>#test0FixtureOccurrencesTest",				"BagTest>>#testEqual",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"BaselineOfIDE>>#additionalInitialization",				"BasicBehaviorClassMetaclassTest>>#testMetaclassSuperclassHierarchy",				"BasicBehaviorClassMetaclassTest>>#testSuperclass",				"Behavior>>#withAllSubclasses",				"Behavior>>#allSelectorsBelow:",				"Behavior>>#selectSuperclasses:",				"Behavior>>#selectSubclasses:",				"Behavior>>#activatedPackages:classes:methods:",				"Behavior>>#dependentClasses",				"Behavior>>#allSelectorsAboveUntil:",				"Behavior>>#allSubInstances",				"Behavior>>#allSubclassesWithLevelDo:startingLevel:",				"BehaviorTest>>#testAllMethods",				"BlockClosure>>#kissingFractions",				"BlockClosureTest>>#testOnForkSplit",				"BlockClosureTest>>#testOneArgument",				"BlockClosuresTestCase>>#continuationExample2:",				"BlockClosuresTestCase>>#continuationExample3:",				"BlockClosuresTestCase>>#continuationExample1:",				"BlockClosuresTestCase>>#example2:",				"BlockClosuresTestCase>>#testNestedLoopsExample1",				"Breakpoint class>>#addBreakpoint:",				"ByteArray>>#inspectorCanvasBitsDumpBigEndian",				"CDBehaviorDefinitionNode>>#addSlot:",				"CDFluidClassParserTest>>#testWithRB8",				"CDFluidClassParserTest>>#testWithRB9",				"CDFluidClassParserTest>>#testWithRB4",				"CDFluidClassParserTest>>#testWithRB3",				"CDFluidClassParserTest>>#testWithRB6",				"CDFluidClassParserTest>>#testWithRB5",				"CDFluidClassParserTest>>#testWithRB7",				"CDNode>>#addChild:",				"CTBinaryTreeAbstractTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"CTBinaryTreeAbstractTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTBinaryTreeNode>>#shapes:edges:",				"CTBinomialTree>>#shapes:edges:",				"CTCollapsedSccDfsPainter>>#crossTuples:lineBuilder:",				"CTCollapsedSccDfsPainter>>#dfsWalk",				"CTCollapsedSccDfsPainter>>#treeTuples:lineBuilder:",				"CTDfsPainter>>#forbiddenShapes:withDfsEdgesDo:",				"CTDfsWalker>>#createStronglyConnectedComponentIfNecessaryOnShape:",				"CTDfsWalker>>#atLevel:putShape:",				"CTHeapQ>>#inspectorCanvasValuesTree",				"CTHeapQ>>#inspectorCanvasBubblesTree",				"CTLinkedStoragePoolPolynomialTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"CTLinkedStoragePoolPolynomialTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTLinkedStoragePoolTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnCircular",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnQueue",				"CTLinkedStoragePoolTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTLinkedStoragePoolTest>>#testSomePushesThenPopsOnStack",				"CTLinksLinkTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"CTLinksLinkTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTLinksValueLinkTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"CTLinksValueLinkTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CTOrderPreservingTree>>#children:",				"CTOrderPreservingTree>>#inspectorCanvasValuesTree",				"CTOrderPreservingTree>>#roots",				"CTOrderPreservingTree>>#asShapeValuesHorizontalTreeModelShape:indexBlock:",				"CTSccDfsPainter>>#layoutTuples:lineBuilder:",				"CTSkipListTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"CTSkipListTest>>#testProfileAdditionOf35",				"CTSkipListTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"CalendarMorph>>#computeDays",				"Categorizer>>#changeFromCategorySpecs:",				"ChangeSet>>#methodsWithoutClassifications",				"ChangeSet>>#checkForSlips",				"ChangeSet>>#changedMessageList",				"ChangeSet>>#methodsWithoutComments",				"ChangeSet>>#fileOutChangesFor:on:",				"ChangeSet class>>#gatherChangeSets",				"ChangeSet class>>#reorderChangeSets",				"ChangeSet class>>#fileOutChangeSetsNamed:",				"ChangeSet class>>#promoteToTop:",				"ChangeSet class>>#scanFile:category:class:meta:stamp:",				"ChangeSet class>>#basicNewChangeSet:",				"ChangesBrowser>>#setFocus",				"ChangesBrowser class>>#defaultSpec",				"CharacterSet>>#add:",				"CharacterSet class>>#allCharacters",				"CharacterSetComplement>>#remove:",				"ChunkFileFormatParser>>#addDeclaration:",				"ChunkReadStream>>#decodeString:andRuns:",				"ClapCodeEvaluator class>>#evaluate",				"ClapCommand>>#addFlag:",				"ClapCommand>>#addSubcommand:",				"ClapCommand class>>#forHelp",				"ClapCommandLineExamples class>>#hello",				"ClapCommandLineExamples class>>#git",				"ClapCommandTest>>#testMatchingStopsAtWrongFlag",				"ClapCommandTest>>#testMatchesWithSingleFlag",				"ClapCommandTest>>#testAddFlag",				"ClapCommandTest>>#testMatchesWithSinglePositional",				"ClapCommandTest>>#testAddSubcommand",				"ClapCommandTest>>#testMatchesWithSingleSubcommand",				"ClapCompositeMatch>>#addChild:",				"ClapContext>>#validateOn:",				"ClapContext class>>#defaultRoot",				"ClapHelloWorldTest>>#setUp",				"ClapHelloWorldTest>>#testLanguageFlag",				"ClapImage class>>#image",				"ClapImage class>>#cleanupCommand",				"ClapImage class>>#saveCommand",				"ClapMatchesTest>>#setUp",				"ClapMatchesTest>>#testMultiplePositional",				"ClapMatchesTest>>#testFlagOmittedValue",				"ClapMeaningsTest>>#testArgFlagCollectionMeaning",				"ClapMeaningsTest>>#testArgFlagBasicMeaning",				"ClapMeaningsTest>>#testArgFlagScalarMeaning",				"ClapMetacello class>>#metacello",				"ClapParameterized>>#addPositional:",				"ClapParameterizedTest>>#testAddPositional",				"ClapParameterizedTest>>#testIdentifierConflict",				"ClapPharoVersion class>>#version",				"ClapTestRunner class>>#test",				"ClapValidationReport>>#add:",				"ClapValidationReport>>#addAll:",				"Class>>#removeSharedPool:",				"Class>>#basicDeclareClassVariable:",				"Class>>#addSharedPool:",				"Class>>#sharing:",				"Class>>#dependentClassesWithOccurences",				"ClassAnnotationRegistry>>#addAnnotation:",				"ClassAnnotationRegistry>>#createAnnotationsForAllSubclassesFromPragma:",				"ClassAnnotationRegistry class>>#collectAnnotationPragmas",				"ClassChangeRecord>>#noteChangeType:fromClass:",				"ClassChangeRecord>>#checkCoherence",				"ClassChangeRecord>>#allChangeTypes",				"ClassDescription>>#classesThatImplementAllOf:",				"ClassDescription>>#packages",				"ClassFactoryForTestCase>>#redefineClass:subclassOf:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:",				"ClassFactoryForTestCase>>#newTraitNamed:uses:tag:",				"ClassFactoryForTestCase>>#newSubclassOf:uses:instanceVariableNames:classVariableNames:poolDictionaries:category:",				"ClassFactoryForTestCase>>#duplicateClass:withNewName:",				"ClassFactoryForTestCaseTest class>>#lastStoredRun",				"ClassFactoryWithOrganization>>#newClassNamed:subclassOf:instanceVariableNames:classVariableNames:category:",				"ClassFactoryWithOrganization>>#newSubclassOf:instanceVariableNames:classVariableNames:category:",				"ClyAbstractClassScope>>#collectAllClasses",				"ClyAbstractClassScope>>#processDynamicMethodGroups:by:",				"ClyActiveBreakpointsQueryTest>>#installBreakpointInto:",				"ClyAllClassGroupsQuery>>#buildResult:",				"ClyAllClassVariablesQuery>>#buildResult:",				"ClyAllInstanceVariablesQuery>>#buildResult:",				"ClyAllMethodGroupsQuery>>#buildResult:",				"ClyAllPackagesQuery>>#buildResult:",				"ClyAllVariablesQuery>>#buildResult:",				"ClyAsyncBrowserQueryResultAdapter>>#findItemsSimilarTo:",				"ClyBothMetaLevelClassScopeTest>>#testClassEnumerationWhenMetaClassIsBasis",				"ClyBothMetaLevelClassScopeTest>>#testMethodsEnumerationWhenBasisIsMetaclass",				"ClyBothMetaLevelClassScopeTest>>#testClassEnumeration",				"ClyBothMetaLevelClassScopeTest>>#testMethodsEnumerationWhenBasisIsClass",				"ClyBrowserItem>>#addProperty:",				"ClyBrowserMorph>>#allContexts",				"ClyBrowserMorph>>#addPlugin:",				"ClyBrowserMorph>>#newNavigationView",				"ClyBrowserQueryResult>>#findItemsSimilarTo:",				"ClyBrowserToolMorph>>#addDecorator:",				"ClyClassCommentsQuery>>#buildResult:",				"ClyClassGroupProviderTest>>#buildGroupsFor:",				"ClyClassGroupProviderTest>>#buildGroupsForAll:",				"ClyClassHierarchyMap>>#addActualChild:to:",				"ClyClassQuery>>#buildResult:",				"ClyClassScopeTest>>#testVariablesEnumerationWhenThereAreNoVariables",				"ClyClassScopeTest>>#testClassVarsEnumerationFromClassSideOfDefiningClass",				"ClyClassScopeTest>>#testVariablesEnumerationForClassWithInstanceVariables",				"ClyClassScopeTest>>#testVariablesEnumerationForTwoClassesWithClassAndInstanceVars",				"ClyClassScopeTest>>#testInstVarsEnumerationWhenThereAreNoVariables",				"ClyClassScopeTest>>#testVariablesEnumerationForObject",				"ClyClassScopeTest>>#testMethodsEnumeration",				"ClyClassScopeTest>>#testClassVarsEnumeration",				"ClyClassScopeTest>>#testClassEnumeration",				"ClyClassScopeTest>>#testMethodGroupsEnumeration",				"ClyClassScopeTest>>#testClassVarsEnumerationWhenTheyNotExist",				"ClyClassScopeTest>>#testInstVarsEnumeration",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClass",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClassClassSide",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsMetaclass",				"ClyClassSideScopeTest>>#testClassEnumeration",				"ClyClassSideScopeTest>>#testMethodsEnumerationWhenBasisIsClass",				"ClyCollapsedDataSource>>#expand:",				"ClyCompositeScope>>#collectAllClasses",				"ClyConstantMethodQuery>>#scopedMethods",				"ClyDataSourceSelection>>#groupItemsByType",				"ClyDataSourceUpdateScheduler>>#processQueue",				"ClyExpandedDataSource>>#collapse:",				"ClyExtendingPackagesQuery>>#buildResult:",				"ClyExtensionLastSortedClassResult>>#fillWith:",				"ClyFailedTestMethodsQuery>>#buildResult:",				"ClyFullEnvironmentUpdateStrategy>>#announceChangesOf:",				"ClyGroupedCritiqueResult>>#fillWith:",				"ClyGroupedExtendingPackagesResult>>#fillWith:",				"ClyGroupedInstanceVariablesResult>>#addClassVariableGroup",				"ClyGroupedInstanceVariablesResult>>#addInheritedMethodGroup",				"ClyGroupedVariablesResult>>#groupVariablesByTypeAndDefinition:",				"ClyGroupedVariablesResult>>#fillWithVariables:type:",				"ClyHierarchicalSystemItemsResult>>#buildItemsPerClassFrom:",				"ClyHierarchicallySortedClassesResult>>#buildItemFor:from:depth:",				"ClyInheritanceAnalysisEnvironmentPlugin>>#cacheMethod:",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClass",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsTraitedClassClasSide",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsMetaclass",				"ClyInstanceSideScopeTest>>#testClassEnumeration",				"ClyInstanceSideScopeTest>>#testMethodsEnumerationWhenBasisIsClass",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationShouldStopAtObject",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationOverClassShouldStopAtObject",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationWhenObjectIsFirstSuperclass",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationOverMetaclassBasisWhenInstanceSideIsLocalScope",				"ClyInterestingSuperclassScopeTest>>#testClassEnumerationOverMetaclassBasisWhenClassSideIsLocalScope",				"ClyMainItemCellMorph>>#addExtraTool:",				"ClyMetaLinkInstallationPresenter>>#toolbarButtons",				"ClyMetaLinkInstallationPresenter class>>#defaultSpec",				"ClyMethodCallCountersQueryTest>>#installCounterInto:",				"ClyMethodQuery>>#buildResult:",				"ClyMethodScopeTest>>#testMethodsEnumeration",				"ClyMethodVisibilityGroupsResult>>#buildGroupFor:depth:toShowMethodsFrom:",				"ClyMethodVisibilityGroupsResult>>#fillWith:",				"ClyMethodWatchQueryTest>>#installWatchInto:",				"ClyNavigationEnvironment>>#addPlugin:",				"ClyNavigationHistory>>#recordState:",				"ClyNoTagClassGroup>>#importClass:",				"ClyNotebookManager>>#addTool:",				"ClyNotebookManager>>#updateTabsWith:",				"ClyNotebookManager>>#buildToolsOn:for:",				"ClyNotebookManager>>#updateToolsForChangedEnvironment",				"ClyNotebookMorph>>#addPage:label:",				"ClyNotebookPageHeaderPresenter class>>#defaultSpec",				"ClyOldMessageBrowserQuery>>#selectsMethod:",				"ClyOverriddenMethodTableDecorator class>>#decorateMainTableCell:inContext:",				"ClyPackageExtensionScopeTest>>#testClassesEnumeration",				"ClyPackageExtensionScopeTest>>#testMethodsEnumeration",				"ClyPackageExtensionScopeTest>>#testPackageEnumeration",				"ClyPackageScopeTest>>#testMethodsEnumeration",				"ClyPackageScopeTest>>#testPackageEnumeration",				"ClyPackageScopeTest>>#testClassesEnumeration",				"ClyPackageScopeTest>>#testClassGroupEnumeration",				"ClyProjectManagerRegistry>>#registerProjectManager:",				"ClyQueryBrowserContext>>#selectedClassItems",				"ClyQueryBrowserContext>>#selectedPackageItems",				"ClyQueryBrowserMorph>>#setUpActiveScope",				"ClyQueryResultBrowserAdapter>>#itemsWhere:",				"ClyQueryResultBrowserAdapter>>#findItemsSimilarTo:",				"ClyQueryResultMetadata>>#addProperty:",				"ClyRunTestsFromMethodsCommand>>#targetTestCasesFor:",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenClassSideIsLocalScope",				"ClySubclassScopeTest>>#testMethodsEnumerationWhenBothMetaLevels",				"ClySubclassScopeTest>>#testMethodsEnumeration",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenInstanceSideIsLocalScope",				"ClySubclassScopeTest>>#testMethodsEnumerationWhenInstanceSideMetaLevel",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenConcreteClassScopeIsLocal",				"ClySubclassScopeTest>>#testClassEnumeration",				"ClySubclassScopeTest>>#testClassEnumerationOverMetaClass",				"ClySubclassScopeTest>>#testClassEnumerationOverClassWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverMetaclassWhenConcreteClassScopeIsScope",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassBasisWhenInstanceSideIsLocalScope",				"ClySuperclassScopeTest>>#testClassEnumerationOverInstanceSideBasisWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumeration",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassWhenClassSideIsLocalScope",				"ClySuperclassScopeTest>>#testClassEnumeration",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testClassEnumerationOverMetaclassWhenConcreteClassScopeIsLocal",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverInstanceSideWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverMetaclassWhenBothMetaLevelsAreLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumerationOverMetaclassWhenClassSideIsLocalScope",				"ClySuperclassScopeTest>>#testMethodsEnumerationWithBothMetaLevelScopeShouldNotDublicateMethods",				"ClyTabManager>>#addTool:",				"ClyTabManager>>#updateTabsWith:",				"ClyTabManager>>#buildToolsOn:for:",				"ClyTabManager>>#restoreSelectedTools:",				"ClyTabManager>>#updateToolsForChangedEnvironment",				"ClyTaggedClassGroup>>#importClass:",				"ClyTraitUserScopeTest>>#testMethodsEnumeration",				"ClyTraitUserScopeTest>>#testMethodsEnumerationWhenBothMetaLevels",				"ClyTraitUserScopeTest>>#testClassEnumeration",				"ClyTypedQuery class>>#mergeOwnInstances:unifiedBy:",				"ClyTypedScope>>#withExtraBasisObjects:",				"ClyUnimplementedMethodsQuery>>#methodsToImplementIn:",				"ClyVariableReferencesQuery>>#buildResult:",				"CmCommandCollector>>#visitCommand:",				"CmUILeftPositionStrategy>>#addButton:toActionBar:",				"CmdCommandActivationStrategy class>>#createActivatorsExecutableInContext:",				"CmdCommandActivationStrategyTest>>#testIteratingInstancesShouldSkipAbstractCommands",				"CmdMenu>>#groupsWithCommandLike:",				"CmdMenuGroup>>#addItem:",				"CmdMenuGroup>>#allGroupsWhich:",				"CmdMenuGroup>>#allItemsWhich:",				"CoASTHeuristicsResultSetBuilder>>#variablesHeuristic",				"CoASTHeuristicsResultSetBuilder>>#methodNodeHeuristic",				"CoASTHeuristicsResultSetBuilder>>#messageHeuristic",				"CoASTSessionResultSetBuilder>>#messageHeuristic",				"CoAvoidRepeatedFetcher>>#entriesDo:",				"CoFetcher>>#,",				"CoFetcherSequence>>#add:",				"CoHeuristicBuilder>>#add:",				"CoNarrowHistoryFetcher>>#entriesDo:",				"CoStaticBenchmarks>>#benchCallsite:atPosition:",				"CoStatistics>>#logCancelEvent:",				"CoStatistics>>#logAcceptEvent:",				"CoStatisticsHeuristicBuilder>>#add:",				"CoStatisticsTest>>#testHeuristicBuilderForSingleHeuristicBuildsWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForSingleHeuristicLastIsNullHeuristic",				"CoStatisticsTest>>#testHeuristicBuilderForSingleHeuristicWrapsNonWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicWrapsNonWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicSecondWrapperWrapsNonWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicBuildsWrapper",				"CoStatisticsTest>>#testHeuristicBuilderForTwoHeuristicNextIsWrapper",				"CoTypeInferencer>>#initialize",				"CoTypeInferencer>>#visitMethodNode:",				"Collection>>#fillFrom:with:",				"Collection>>#groupedBy:",				"Collection>>#addIfNotPresent:ifPresentDo:",				"Collection>>#addAll:",				"Collection>>#selectEvery:",				"Collection>>#copyWith:",				"Collection>>#collect:",				"Collection>>#unzip",				"Collection>>#addIfNotPresent:",				"Collection>>#add:withOccurrences:",				"Collection>>#select:",				"Collection class>>#with:with:with:with:",				"Collection class>>#fromSton:",				"Collection class>>#with:",				"Collection class>>#with:with:with:with:with:",				"Collection class>>#with:with:",				"Collection class>>#with:with:with:with:with:with:",				"Collection class>>#with:with:with:",				"CollectionRootTest>>#testDoWithout",				"CollectionRootTest>>#testDo2",				"CollectionTest>>#testGroupedByGroupsOrderSimple",				"CollectionTest>>#testGroupedByGroupsOrderWithSortedCollectionOfDates",				"CollectionValueHolder>>#add:",				"CollectionValueHolderTest>>#testChangeAddOne",				"CollectionValueHolderTest>>#testAddOne",				"Color class>>#initializeGrayToIndexMap",				"ColorForm>>#colorsUsed",				"CompilationContext>>#addASTTransformationPlugin:",				"CompilationContext class>>#addDefaultTransformationPlugin:",				"CompilationContext class>>#writeDefaultOption:value:",				"CompiledCode>>#withAllBlocks",				"CompiledCode>>#inspectorNodes",				"CompiledMethod>>#activatedPackages:classes:methods:",				"CompiledMethod>>#referencedClasses",				"CompiledMethod>>#dependentClassesWithOccurences",				"ComplexUnit>>#calculateBaseUnits",				"ConfigurationCommandLineHandler>>#printMetacelloProjectDetails:",				"Context>>#exceptionsToCaptureWhenStepping",				"Context class>>#tallyInstructions:",				"Context class>>#tallyMethods:",				"ContinuationTest>>#testRemoveUptoLast",				"CoverageDemo>>#exampleNotCompleteCoverage",				"CoverageDemo>>#initialize",				"CoverageDemo class>>#defaultSpec",				"CriticBrowser>>#initializeWidgets",				"CriticBrowser class>>#defaultSpec",				"CriticToolbar>>#setFocusOrder",				"CriticToolbar class>>#defaultSpec",				"CriticsCache>>#addCritic:forRule:",				"CriticsCache>>#addFalsePositive:forRule:",				"CriticsCache>>#addToDo:forRule:",				"CriticsCache>>#addFalsePositiveClass:",				"CriticsCache>>#replaceAll:by:",				"CriticsCache>>#addFalsePositiveRule:forPackage:",				"CustomHelpHelpBuilder>>#createTopicFrom:",				"DAAddPackagePresenter class>>#defaultSpec",				"DACompositeDependency>>#add:",				"DADependencyChecker>>#computeDependenciesOf:visitedPackages:",				"DADependencyReport>>#transitiveDependenciesOf:visited:",				"DADependencyReport>>#addWarning:",				"DAMessageSendAnalyzer>>#implementedMessages",				"DAPackage>>#add:",				"DAPackage>>#dependentPackages",				"DAPackageAnalyzerDiffTreePresenter class>>#defaultSpec",				"DAPackageAnalyzerReverseTreePresenter class>>#defaultSpec",				"DAPackageAnalyzerTreePresenter>>#relationGraph:",				"DAPackageAnalyzerTreePresenter class>>#defaultSpec",				"DAPackageCycle>>#addPackage:",				"DAPackageCycleDetectionTreePresenter class>>#defaultSpec",				"DAPackageCycleDetector>>#addVisitedNodes:",				"DAPackageCycleDetector>>#addCycle:",				"DAPackageCycleDetectorTest>>#testCyclesWithAtLeast",				"DAPackageCycleDetectorTest>>#graphWithThreeCycles",				"DAPackageCycleDetectorTest>>#testfindCycles",				"DAPackageCycleDetectorTest>>#testFindCyclesOne",				"DAPackageCycleGenerator>>#buildNodes",				"DAPackageCycleTest>>#testRemoveOutgoingDependencies",				"DAPackageCycleTest>>#testIsAtLeastInCycle",				"DAPackageDependenciesWelcome class>>#defaultSpec",				"DAPackageDependencyTest>>#testExtensionDependencies",				"DAPackageDependencyTest>>#testReferenceDependencies",				"DAPackageDependencyTest>>#testContainsOnlyExtensionDependency",				"DAPackageDependencyTest>>#testDependenciesWithoutExtensionDependency",				"DAPackageDependencyTest>>#testDependenciesSize",				"DAPackageDependencyTest>>#testReferenceDependenciesFrom",				"DAPackageDependencyTest>>#testDependenciesFrom",				"DAPackageRelationGraph>>#addExtensionDependencies:",				"DAPackageRelationGraph>>#combineDependencies:",				"DAPackageRelationGraph>>#usersOf:",				"DAPackageRelationGraph>>#addInheritanceDependencies:",				"DAPackageRelationGraph>>#addPoolDictionaryDependencies:",				"DAPackageRelationGraph>>#findReferencesIn:for:",				"DAPackageRelationGraph>>#addMessageSendDependencies:",				"DAPackageRelationGraph>>#outgoing",				"DAPackageRelationGraph>>#predecessors:",				"DAPackageRelationGraph>>#addTraitDependencies:",				"DAPackageRelationGraph>>#successors:",				"DAPackageRelationGraphDiff>>#addNewPackage:",				"DAPackageRelationGraphDiff>>#addUndeterminatePackage:",				"DAPackageRelationGraphDiff>>#addUndeterminateDependentPackage:from:",				"DAPackageRelationGraphDiff>>#addRemovedPackage:",				"DAPackageRelationGraphDiff>>#addNewDependentPackage:from:",				"DAPackageRelationGraphDiff>>#addRemovedDependentPackage:from:",				"DAPackageRelationGraphGenerator>>#buildNodes",				"DAPackageRelationGraphTest>>#testSuccessors",				"DAPackageRelationGraphTest>>#testPredecessors",				"DAPackageRelationGraphTest>>#testIncludedPackages",				"DAPackageRelationGraphTest>>#testAllDependentPackages",				"DAPackageRelationGraphTest>>#testUsersOf",				"DAPackageRelationGraphTest>>#testPackages",				"DAPackageRelationGraphTest>>#testCombineDependencies",				"DAPackageRelationGraphTest>>#testDependenciesFrom",				"DAPackageRelationGraphTest>>#testAllDependentPackagesFromSeenPackages",				"DAPackageTest>>#testDependantPackages",				"DAPackageTest>>#testDependenciesSizeTo",				"DAPackageTest>>#testDependentPackagesSize",				"DAPackageTest>>#testAdd",				"DAPackageTest>>#setUp",				"DAPackageTest>>#testDependenciesSize",				"DAPackageTest>>#testNumberOfDependentPackage",				"DAPackageTest>>#testRemoveAllInternal",				"DATarjanAlgorithm>>#popStackAndUpdateCurrentSCC:until:",				"DATarjanAlgorithmTest>>#testRunTarjan",				"DATarjanAlgorithmTest>>#testRunTarjanWikipedia",				"DTDefaultPluginPresenter class>>#defaultSpec",				"DTFilterableListPresenter class>>#defaultSpec",				"DTLeavesCollector>>#visitDTTreeLeaf:",				"DTTestsProfilerVisitor>>#visitTestCase:",				"DatePresenter class>>#spec",				"DeepCopier>>#basicCheckClass:",				"DelayBasicScheduler>>#scheduleAtTimingPriority",				"Deprecation>>#defaultAction",				"Deprecation>>#transform",				"DialogItemsChooserUI>>#unselectedSelectionItems",				"DialogItemsChooserUI>>#selectedSelectionItems",				"Dictionary>>#associationsSelect:",				"Dictionary>>#select:",				"Dictionary>>#difference:",				"Dictionary>>#declare:from:",				"Dictionary>>#at:inOrderedCollectionAdd:",				"Dictionary>>#keysAndValuesRemove:",				"Dictionary class>>#newFrom:",				"Dictionary class>>#newFromAssociations:",				"DictionaryTest>>#testSelect",				"DictionaryTest>>#testAddWithKeyNotIn",				"DictionaryTest>>#testValuesDo",				"DictionaryTest>>#testIncludesAssociationNoValue",				"DictionaryTest>>#testDeclareFrom",				"DictionaryTest>>#testPrintOnDelimiterLast",				"DictionaryTest>>#testNewFromPairs",				"DictionaryTest>>#testAsCommaStringMore",				"DictionaryTest>>#testIncludesAssociationWithValue",				"DictionaryTest>>#testAdd",				"DictionaryTest>>#test0FixtureOccurrencesTest",				"DictionaryTest>>#testDo",				"DictionaryTest>>#testAddAll",				"DictionaryTest>>#testAddWithKeyAlreadyIn",				"DictionaryTest>>#collectionWithElement",				"DictionaryTest>>#testAssociationsSelect",				"DictionaryTest>>#testPrintOn",				"DictionaryTest>>#testPrintOnDelimiter",				"DictionaryTest>>#testPrintElementsOn",				"DictionaryTest>>#testAssociationsDo",				"DictionaryTest>>#testAsSet",				"DictionaryTest>>#testKeysAndValuesDo",				"DictionaryTest>>#setUp",				"DictionaryTest>>#testCollect",				"DictionaryTest>>#testKeysDo",				"DiffBuilder>>#applyDiff:origin:dest:",				"DiffMorph>>#calculatedJoinMappings",				"DoubleLinkedList>>#collect:",				"DoubleLinkedList>>#addAll:",				"DoubleLinkedList>>#select:",				"DoubleLinkedList>>#reject:",				"DoubleLinkedListTest>>#testAddAfterLink",				"DoubleLinkedListTest>>#testAddLast",				"DoubleLinkedListTest>>#testReverseLinksDo",				"DoubleLinkedListTest>>#testThreeRemoveLast",				"DoubleLinkedListTest>>#testFirstAndLastLink",				"DoubleLinkedListTest>>#testOneRemoveLast",				"DoubleLinkedListTest>>#testAddFirst",				"DoubleLinkedListTest>>#testOne",				"DoubleLinkedListTest>>#testAddBeforeLink",				"DoubleLinkedListTest>>#testOneRemoveFirst",				"DoubleLinkedListTest>>#testThree",				"DoubleLinkedListTest>>#testThreeRemoveFirst",				"DoubleLinkedListTest>>#testThreeRemoveLink",				"DoubleLinkedListTest>>#testLinksDo",				"DrTests class>>#defaultSpec",				"DrTestsUITest>>#testMultipleSelectingPackagesWillUpdateTheClassesList",				"DropListButton>>#initializeWidgets",				"DropListPresenter>>#addItemLabeled:do:icon:",				"DropListPresenter>>#addItemLabeled:do:",				"DynamicMessageImplementor>>#argumentNameAt:",				"DynamicPresentersListBuilder>>#nullPresentersInstVarNamesAndPresenterNamesArray",				"DynamicPresentersListBuilder>>#instVarNamesAndPresenterNamesArray",				"EditableList class>>#spec",				"EmbeddedFreeTypeFontInstaller>>#cacheEmbeddedFileInfo:index:",				"EpDashboardPresenter class>>#defaultSpec",				"EpEntryItem>>#asMorph",				"EpLog>>#priorEntriesFrom:upTo:",				"EpLogBrowserPresenter class>>#defaultSpec",				"EpLogBrowserToolbarPresenter class>>#defaultSpec",				"EpLogNode>>#populateReferencedNodesWith:",				"EpLogNodeGraphPresenter>>#initializePresenters",				"EpUnifiedBrowserPresenter>>#initializePresenters",				"EpUnifiedBrowserPresenter>>#initializeToolbar",				"EphemeronRegistry>>#registerEphemeron:",				"EssentialsObjectTest>>#testInspectHeap",				"EssentialsObjectTest>>#testInspectProbabilisticMedianRatioWithSorting",				"EssentialsObjectTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"EssentialsObjectTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"EventManagerTest>>#addArg1:addArg2:",				"EventManagerTest>>#testBlockReceiverOneArg",				"EventManagerTest>>#testNoArgumentEventDependentSuppliedArgument",				"EventManagerTest>>#testOneArgumentEvent",				"ExampleSetTest>>#testOccurrences",				"ExampleSetTest>>#testAdd",				"Exception class>>#,",				"Exception class>>#-",				"ExceptionSet>>#-",				"ExceptionSet>>#,",				"ExceptionSet>>#add:",				"ExceptionSetWithExclusions>>#addExclusion:",				"ExceptionTester>>#doubleOuterPassTestResults",				"ExceptionTester>>#simpleIsNestedTestResults",				"ExceptionTester>>#simpleNoTimeoutTestResults",				"ExceptionTester>>#simpleResignalAsTestResults",				"ExceptionTester>>#simpleEnsureTestWithUparrowResults",				"ExceptionTester>>#simpleRetryTestResults",				"ExceptionTester>>#simpleReturnTestResults",				"ExceptionTester>>#log:",				"ExceptionTester>>#simpleOuterTestResults",				"ExceptionTester>>#simpleEnsureTestResults",				"ExceptionTester>>#doubleResumeTestResults",				"ExceptionTester>>#doublePassOuterTestResults",				"ExceptionTester>>#simpleResumeTestResults",				"ExceptionTester>>#simpleEnsureTestWithNotificationResults",				"ExceptionTester>>#nonResumableFallOffTheEndHandlerResults",				"ExceptionTester>>#simplePassTestResults",				"ExceptionTester>>#simpleRetryUsingTestResults",				"ExceptionTester>>#resumableFallOffTheEndHandlerResults",				"ExceptionTester>>#simpleEnsureTestWithErrorResults",				"ExceptionTester>>#simpleTimeoutTestResults",				"ExceptionTester>>#signalFromHandlerActionTestResults",				"ExceptionTester>>#simpleTimeoutWithZeroDurationTestResults",				"ExceptionTester>>#logTest:",				"ExecutionEnvironmentStub>>#prepareForNewProcess:",				"ExternalAddress>>#autoRelease",				"ExternalAddress class>>#gcallocate:",				"ExternalBrowser>>#initializeWidgets",				"ExternalBrowser class>>#defaultSpec",				"ExternalChangesBrowser class>>#fileReaderServicesForFile:suffix:",				"ExternalChangesBrowser class>>#defaultSpec",				"ExternalDropHandler class>>#registerHandler:",				"ExternalStructure class>>#sortStructs:into:",				"FBDDecompiler>>#generateNativeBoostCallErrorMethodFrom:",				"FBDExamples>>#exampleWhileModificationBefore",				"FBDExamples>>#exampleWhileModificationAfterNotInlined",				"FBDExamples>>#exampleToDoOutsideTemp",				"FBDExamples>>#exampleCascadeIntoBlockWithTempIfTrueIfFalse",				"FBDExamples>>#exampleWhileModificationBeforeNotInlined",				"FBDExamples>>#singleRemoteTempVar",				"FBDExamples>>#exampleToDoInsideTemp",				"FBDExamples>>#exampleInlineBlockCollectionLR3",				"FBDExamples>>#exampleCascadeIfTrueIfFalse2",				"FBDExamples>>#exampleWhileWithTempNotInlined",				"FBDExamples>>#exampleWhileWithTemp",				"FBDExamples>>#exampleCascadeIfNil",				"FBDExamples>>#exampleToDoInsideTempNotInlined",				"FBDExamples>>#exampleToDoArgument",				"FBDExamples>>#exampleToDoOutsideTempNotInlined",				"FBDExamples>>#exampleToDoArgumentNotInlined",				"FBDExamples>>#exampleBlockNumCopied",				"FBDLoopScanner>>#jump:",				"FBDOptimizedMessagesRewriter>>#analyseSeq:",				"FFICalloutMethodBuilder>>#addFunctionResolveStrategy:",				"FFIExternalStructureFlatLayout>>#reduce:inGroupsOfSize:with:",				"FFIExternalStructureFlatLayout>>#addField:size:alignment:",				"FFIFunctionSpec>>#addArgument:",				"FFIMethodRegistry>>#registerMethod:",				"FFIStructure class>>#resetStructureIfNotIn:",				"FIFOQueueTest>>#runValidationTest",				"FIFOQueueTest>>#testHeavyContention",				"FIFOQueueTest>>#testHeavyContention2",				"FLAnalyzer>>#considerGlobal:",				"FLAnalyzer>>#mappers",				"FLAnalyzer>>#privateMappers",				"FLAnalyzer>>#when:substituteBy:",				"FLBasicSerializationTest>>#testSet",				"FLBasicSerializationTest>>#testBag",				"FLBasicSerializationTest>>#testCyclicIdentitySet",				"FLBasicSerializationTest>>#testLotsOfCharacters",				"FLClusterization>>#clusterBuckets",				"FLDictionaryCollectionCluster>>#materializeReferencesOf:with:",				"FLGZippedBasicSerializationTest>>#testCompleteBinaryTree",				"FLGZippedBasicSerializationTest>>#testWideString",				"FLHashedCollectionSerializationTest>>#testSetRehash",				"FLHeader>>#addPostMaterializationAction:",				"FLHeader>>#addPreMaterializationAction:",				"FLIteratingCluster>>#addReferenceFrom:to:",				"FLLightGlobalMapper class>>#valuesFor:in:",				"FLMaterialization>>#clusterInstancesStep",				"FLSerializationTest>>#newSubclassNamed:of:instanceVariableNames:classVariableNames:",				"FLSerializationTest>>#registerBehavior:",				"FLSimpleCollectionCluster>>#materializeReferencesOf:with:",				"FLSubstitutionCluster>>#add:substitutedBy:traceWith:",				"FLVariableObjectCluster>>#addVariableReferenceFrom:to:",				"FLVariablesMapping>>#instanceVariableNamesToSerialize",				"FT2Outline>>#contoursCollection",				"FTAllItemsStrategy>>#filter",				"FTAllItemsStrategy>>#searchIn:",				"FTExampleMethodListGeneratorDataSource>>#elementAt:ifAbsent:",				"FTOutlineDataSource>>#searchText:",				"FTPluggableIconListMorphAdaptorDataSource>>#searchText:",				"FTRootItemsStrategy>>#realSearch",				"FTSimpleDataSource>>#searchText:",				"FTTableContainerMorph>>#drawRowsOn:",				"FTVisibleItemsStrategy>>#filter",				"FTVisibleItemsStrategy>>#realSearch",				"File class>>#register:",				"FileDialogWindow>>#initialDirectories",				"FileHandle class>>#register:",				"FileList>>#fileContentsMenu:shifted:",				"FileList>>#itemsForAnyFile",				"FileList>>#itemsForDirectory:",				"FileSystemGuide>>#push:",				"FileSystemTest>>#markForCleanup:",				"Finder>>#methodSearch:",				"Finder>>#constructDictionaryWithPragmaSearch:",				"Finder>>#classSearch:",				"Finder>>#constructSourceDictionary",				"Finder>>#pragmaSearch:",				"Finder>>#constructDictionaryWithMessagesNameSearch:",				"Finder>>#constructDictionaryWithMethodFinder:",				"FloatArrayTest>>#testAllButFirstDo",				"FloatArrayTest>>#testReverseDoEmpty",				"FloatArrayTest>>#testAllButLastDo",				"FloatArrayTest>>#collectionWithIdentical",				"FloatArrayTest>>#testKeysAndValuesDoEmpty",				"FloatArrayTest>>#testFromToDo",				"FloatArrayTest>>#testReverseDo",				"FloatArrayTest>>#firstIndexesOf:in:",				"FloatArrayTest>>#testWithIndexDo",				"FloatArrayTest>>#collectionWithCopy",				"FloatArrayTest>>#testKeysAndValuesDo",				"FloatTest>>#testComparison",				"FloatTest>>#testSetOfFloat",				"FloatTest>>#testNaN3",				"FloatTest>>#testNaNCompare",				"FontChooserMorph>>#pangrams",				"Form>>#colorsUsed",				"Form class>>#services",				"Form class>>#fileReaderServicesForFile:suffix:",				"Fraction>>#kissingFractions",				"Fraction>>#inspectorCanvasFordCircles",				"FreeTypeCache>>#removeAllForFont:",				"FreeTypeCache>>#removeAllForType:",				"FreeTypeCacheTest>>#testGlyphAccessIsThreadSafe",				"FreeTypeCacheTest>>#testGlyphAccessIsThreadSafeWhenAskingWidth",				"FreeTypeCacheTest>>#validateCollections:",				"FreeTypeFont>>#hasDistinctGlyphsForAll:",				"FreeTypeFontFamily>>#addMember:",				"FreeTypeFontFamily>>#addSimulatedMembers",				"FreeTypeFontProvider>>#addFontInstaller:",				"FreeTypeFontProvider>>#guessWindowsFontFolderPath",				"FreeTypeFontProvider>>#winFontDirectories",				"FreeTypeFontProvider>>#addFileInfo:",				"FreeTypeFontProvider>>#fileInfosByFamilyAndGroup",				"FreeTypeFontProvider>>#cacheFileInfo:index:",				"FreeTypeFontProvider>>#updateFromDirectory:done:",				"FreeTypeFontProvider>>#addFileInfo:index:",				"FreeTypeNameParser>>#tokenize:",				"FuzzyMatcher class>>#allSortedByScoreMatching:in:by:",				"FuzzyMatcherExample>>#match:for:",				"FuzzyMatcherExample class>>#exampleAuthors",				"GIFReadWriter>>#readBody",				"GIFReadWriterTest>>#animatedColorFrames",				"GPolygon>>#edges",				"GPolygon class>>#convexHullOn:",				"GZipReadStream class>>#fileReaderServicesForFile:suffix:",				"GoferFetch>>#initializeOn:",				"GoferPush>>#initializeOn:",				"GoferResource>>#setUpVersionReferences",				"GradientPaint>>#atStop:put:",				"GreatestCommonDivisor>>#initialize",				"GuideTest>>#visitDirectory:",				"GuideTest>>#visitFile:",				"HDCoverageReport>>#addTestsIn:to:",				"HEPackage>>#readClassFrom:",				"HEPackage>>#addClass:",				"HEPackage>>#readFrom:",				"HashTableSizes>>#computeSizes",				"HashTableSizes>>#initialize",				"HashTableSizes>>#primeAlmostFactorsOf:",				"HashedCollection>>#add:withOccurrences:",				"Heap>>#inspectorCanvasValuesTree",				"Heap class>>#heapExample",				"HeapTest>>#testHeap",				"HeapTest>>#testAddEmptyGrows",				"HeapTest>>#testAddNonEmptyGrowsWhenNewElement",				"HeapTest>>#test1",				"HeapTest>>#testRemove",				"HeapTest>>#testTAddTwice",				"HeapTest>>#testTAdd",				"HeapTest>>#collectionWithCopy",				"HeapTest>>#setUp",				"HeapTest>>#testAdd",				"HeapTest>>#test0FixtureOccurrencesTest",				"HeapTest>>#collectionWithIdentical",				"HeapTest>>#testDo",				"HeapTest>>#testFirst",				"HelpTopic>>#addSubtopic:",				"HiNode>>#addIncomingLink:",				"HiNode>>#addOutgoingLink:",				"HiRuler>>#addLinkFrom:to:",				"HiSpecExample>>#initializeActionBar",				"HiSpecExample class>>#defaultSpec",				"HistoryNode>>#addItem:",				"HookGenerator>>#preamble",				"HookGenerator>>#wrapCondition:link:",				"IRBuilder>>#pushFullClosureCompiledBlock:copiedValues:",				"IRBuilder>>#storeInstVar:",				"IRBuilder>>#pushConsArray:",				"IRBuilder>>#storeRemoteTemp:inVector:",				"IRBuilder>>#createTempVectorNamed:withVars:",				"IRBuilder>>#storeTemp:",				"IRBuilder>>#pushLiteral:",				"IRBuilder>>#jumpAheadTo:if:",				"IRBuilder>>#pushInstVar:",				"IRBuilder>>#send:",				"IRBuilder>>#pushTemp:",				"IRBuilder>>#blockReturnTop",				"IRBuilder>>#jumpAheadTo:",				"IRBuilder>>#pushNewArray:",				"IRBuilder>>#pushThisProcess",				"IRBuilder>>#popTop",				"IRBuilder>>#pushThisContext",				"IRBuilder>>#initialize",				"IRBuilder>>#add:",				"IRBuilder>>#pushDup",				"IRBuilder>>#jumpBackTo:",				"IRBuilder>>#send:toSuperOf:",				"IRBuilder>>#pushReceiver",				"IRBuilder>>#returnTop",				"IRBuilder>>#pushLiteralVariable:",				"IRBuilder>>#startNewSequence",				"IRBuilder>>#pushRemoteTemp:inVector:",				"IRBuilder>>#storeIntoLiteralVariable:",				"IRBytecodeGenerator>>#addLiteral:",				"IRBytecodeGenerator>>#nextPut:",				"IRBytecodeGenerator>>#irPrimitive:",				"IRBytecodeGenerator>>#mapBytesTo:",				"IRBytecodeScope>>#newTempVector:at:",				"IRFix>>#visitPop:",				"IRFix>>#visitReturn:",				"IRMethod>>#predecessorsOf:",				"IRMethod>>#allInstructionsMatching:",				"IRMethod>>#allInstructions",				"IRMethod>>#addAdditionalLiteral:",				"IRMethod>>#addPragma:",				"IRReconstructor>>#createTempVectorNamed:withVars:",				"IRReconstructor>>#rememberReference:to:in:",				"IRSequence>>#addInstructions:",				"IRSequence>>#absorbJumpToSingleInstr:",				"IRSequence>>#withAllSuccessorsDo:alreadySeen:",				"IRSequence>>#splitAfter:",				"IRSequence>>#addLast:",				"IRSequence>>#withNonBodySuccessorsDo:alreadySeen:",				"IRSequence>>#withAllSuccessors",				"IRSequence>>#add:",				"IRSequence>>#instructionsForDecompiling",				"IRTransformTest>>#testAddBefore",				"IRTransformTest>>#testAddIntructionsBeforeFromLList",				"IRTransformTest>>#testAdd",				"IRTranslator>>#pushOuterVectors:",				"ISOLanguageDefinition class>>#buildIso3166CodesTables",				"IceAbstractCommitWalk>>#commits",				"IceAnnouncer>>#suspendAllMatching:while:",				"IceCherrypicker>>#addPackageDependency:",				"IceCherrypicker>>#addExtendedClassDependency:",				"IceCherrypicker>>#addMethodDependencyOf:",				"IceCherrypicker>>#addClassDependencyOf:",				"IceCherrypicker>>#addMetaclassDependency:",				"IceCherrypicker>>#addDependency:",				"IceCherrypicker>>#addTraitDependencyOf:",				"IceCherrypickerDiffPruner>>#visitAddition:",				"IceCherrypickerDiffPruner>>#visitRemoval:",				"IceCherrypickerDiffPruner>>#visitModification:",				"IceGitHubAcceptPullRequestModel class>>#defaultSpec",				"IceGitHubCreatePullRequestModel class>>#defaultSpec",				"IceGitHubNewBranchFromIssuePanel class>>#defaultSpec",				"IceGitHubNewPullRequestAction>>#validateMakePullRequestOn:",				"IceGitHubPullRequestDetailModel class>>#defaultSpec",				"IceGitHubRejectPullRequestModel class>>#defaultSpec",				"IceGitHubRemoveBranchesModel>>#initializePresenters",				"IceGitHubRemoveBranchesModel class>>#defaultSpec",				"IceGitHubSelectItem>>#addItem",				"IceGitHubTipPullRequestBrowser class>>#defaultSpec",				"IceGitIndex>>#storeMCVersion:",				"IceGitIndex>>#addPackage:",				"IceGitIndex>>#addPath:",				"IceGitNetworkRemote>>#projectPath",				"IceHistory>>#lookupCommits",				"IceLibgitFiletreeLog>>#fileNameForMethod:",				"IceLibgitFiletreeLogReader>>#loadDefinitions",				"IceLibgitTonelLog>>#fileNameForMethod:",				"IceLibgitTreeBuilder>>#addEntryNamed:withContents:",				"IceLog>>#collectCommitsFor:path:",				"IceLog>>#collectVersionsFrom:method:path:",				"IceMetacelloLoadSession>>#recordChoice:",				"IceMetadatalessStCypressWriter>>#writeDefinitions:",				"IceNodeQuery>>#visitExtensionDefinition:",				"IceNodeQuery>>#visitClassDefinition:",				"IceNodeQuery>>#visitMethodNode:",				"IceNodeQuery>>#visitTraitDefinition:",				"IceNodeQuery>>#visitPackage:",				"IceRepository class>>#registerRepository:",				"IceTipAddPackagesDialog>>#initializePackagesList",				"IceTipAddPackagesDialog class>>#defaultSpec",				"IceTipAddPlaintextCredentialsModel class>>#defaultSpec",				"IceTipAddRemoteDialog class>>#defaultSpec",				"IceTipAddSSHCredentialsModel class>>#defaultSpec",				"IceTipAddTokenCredentialsModel class>>#defaultSpec",				"IceTipAskForPlaintextCredentialsModel class>>#defaultSpec",				"IceTipAskForPlaintextOtpCredentialsModel class>>#defaultSpec",				"IceTipBranchModel>>#commitModels",				"IceTipCheckoutNewBranchPanel class>>#defaultSpec",				"IceTipCheckoutPreviewBrowser class>>#defaultSpec",				"IceTipCherrypickPreviewBrowser>>#initializePresenters",				"IceTipCherrypickPreviewBrowser class>>#defaultSpec",				"IceTipCommentPanel>>#initializePresenters",				"IceTipCommentPanel class>>#defaultSpec",				"IceTipCommitBrowser class>>#defaultSpec",				"IceTipCommitInfoPresenter class>>#defaultSpec",				"IceTipCommitModel>>#commitModels",				"IceTipCreateTagPanel class>>#defaultSpec",				"IceTipCredentialsStoreBrowser class>>#defaultSpec",				"IceTipCritiquesBeforeCommitBrowser class>>#defaultSpec",				"IceTipDiffPanel class>>#defaultSpec",				"IceTipDiffSelectingPanel>>#initialize",				"IceTipDiffSelectingPanel>>#activateItem:",				"IceTipDiffSelectingPanel>>#refresh",				"IceTipEditPlaintextCredentialsModel class>>#defaultSpec",				"IceTipEditProjectDialog>>#expandAndSelect:",				"IceTipEditProjectDialog class>>#defaultSpec",				"IceTipEditSSHCredentialsModel class>>#defaultSpec",				"IceTipErrorDialog class>>#defaultSpec",				"IceTipExistingBranchPanel class>>#defaultSpec",				"IceTipFiletreeToTonelDialog class>>#defaultSpec",				"IceTipGitHubPullRequestListBrowser class>>#defaultSpec",				"IceTipGitProviderRepositoryPanel class>>#defaultSpec",				"IceTipGitRepositoryPanel class>>#defaultSpec",				"IceTipGitUsernameAndEmailDialog class>>#defaultSpec",				"IceTipHistoryActionBrowser>>#initializePresenters",				"IceTipHistoryBrowser class>>#defaultSpec",				"IceTipHistoryBrowser class>>#panelSpec",				"IceTipLocationPresenter class>>#defaultSpec",				"IceTipMergeSelectingPanel>>#initialize",				"IceTipMergeSelectingPanel>>#changeListColumn",				"IceTipMergeSelectingPanel>>#refresh",				"IceTipMergeSelectingPanel class>>#defaultSpec",				"IceTipNewRepositoryPanel class>>#defaultSpec",				"IceTipOptionDialog class>>#defaultSpec",				"IceTipPreviewBrowser>>#initializePresenters",				"IceTipPreviewBrowser class>>#defaultSpec",				"IceTipReadOnlyFormBuilder>>#newRowPresenterForLabel:value:",				"IceTipRemovePackageDialog class>>#defaultSpec",				"IceTipRemoveRepositoryDialog class>>#defaultSpec",				"IceTipRepositoriesBrowser class>>#defaultSpec",				"IceTipRepositoryBrowser class>>#defaultSpec",				"IceTipRepositoryModel>>#status",				"IceTipSelectRemotePresenter class>>#defaultSpec",				"IceTipTagModel>>#commitModels",				"IceTipTreeGroup>>#addChild:",				"IceTipVersionHistoryBrowser class>>#defaultSpec",				"IceTipWorkingCopyBrowser class>>#defaultSpec",				"IceWorkingCopy>>#changesTo:",				"IdentifierChooserMorph>>#newChoicesMorph",				"IdentityBagTest>>#testIdentity",				"IdentityBagTest>>#testIdentityAdd",				"IdentityBagTest>>#identityCollectionWithElementsCopyNotIdentical",				"IdentitySetTest>>#testIdentity",				"IdentitySetTest>>#testGrowWithNil",				"IdentitySetTest>>#identityCollectionWithElementsCopyNotIdentical",				"ImageCleaner>>#createLiteralTable",				"IndentingListItemMorph>>#recursiveAddTo:",				"IndentingListItemMorph>>#children",				"InitializePackagesCommandLineHandler>>#initializePackagesFrom:",				"InlineTextDiffBuilder>>#split:",				"InputTextDropList>>#initializeWidgets",				"InstructionStream>>#addSelectorTo:",				"InstructionStreamTest>>#blockReturnTop",				"InstructionStreamTest>>#directedSuperSend:numArgs:",				"InstructionStreamTest>>#pushConstant:",				"InstructionStreamTest>>#pushLiteralVariable:",				"InstructionStreamTest>>#pushReceiver",				"InstructionStreamTest>>#send:super:numArgs:",				"Integer>>#inspectorCanvasRepresentations",				"IntervalTest>>#testAllButFirstDo",				"IntervalTest>>#testReverseDoEmpty",				"IntervalTest>>#testPermutationsDo",				"IntervalTest>>#testAllButLastDo",				"IntervalTest>>#testKeysAndValuesDoEmpty",				"IntervalTest>>#test0FixtureOccurrencesTest",				"IntervalTest>>#testFromToDo",				"IntervalTest>>#firstIndexesOf:in:",				"IntervalTest>>#testWithIndexDo",				"IntervalTest>>#testKeysAndValuesDo",				"JPEGHuffmanTable>>#makeDerivedTables",				"JPEGReadWriter class>>#initialize",				"Job>>#addChild:",				"JobTest>>#testJobAnnouncements",				"JoinSection>>#addHighlightsFrom:to:to:color:",				"JoinSection>>#createHighlights",				"KMBuffer>>#addEvent:",				"KMCatcherMorph>>#keyStroke:",				"KMCategory>>#addKeymapEntry:at:",				"KMCategory>>#addKeymapEntry:",				"KMCombinationTest>>#testCombinationSeveralShortcuts",				"KMComposedModifier>>#command",				"KMComposedModifier>>#shift",				"KMComposedModifier>>#alt",				"KMComposedModifier>>#control",				"KMComposedModifier>>#meta",				"KMComposedModifier>>#modifiedBy:",				"KMDescriptionPresenter class>>#defaultSpec",				"KMDispatcher>>#attachCategory:onProperty:",				"KMDispatcher>>#attachCategory:targetting:",				"KMKeyCombinationSequence>>#addShortcut:",				"KMRepository>>#attach:to:",				"KMRepository>>#setAsGlobalCategory:",				"KMStorage>>#add:",				"KMStorage>>#addAll:",				"LGitBlob>>#names",				"LGitDiff>>#files",				"LGitIndex>>#entriesSelect:",				"LGitTree>>#names",				"LIFOQueueTest>>#testHeavyContention",				"LRUCache>>#validateInvariantWith:",				"LRUCache>>#testSupportGetCachedAssociations",				"LRUCache>>#addWeight:",				"LabelledContainer>>#content:",				"LayoutClassScope>>#allVisibleSlots",				"LayoutClassScope>>#slots",				"LayoutClassScope>>#visibleSlots",				"LazyListMorph>>#selectRow:",				"LazyMorphListMorph>>#selectRow:",				"LinkInstallerTest>>#testLinkTargetsObjectsByIdentity",				"LinkedList>>#collect:",				"LinkedList>>#select:thenCollect:",				"LinkedList>>#collect:thenSelect:",				"LinkedList>>#select:",				"LinkedList>>#reject:",				"LinkedList>>#reject:thenCollect:",				"LinkedList>>#copyWithout:",				"LinkedList>>#copyWith:",				"LinkedList>>#collect:thenReject:",				"LinkedListTest>>#testDo2",				"LinkedListTest>>#testAddAfterLast",				"LinkedListTest>>#test01add",				"LinkedListTest>>#test05addBefore",				"LinkedListTest>>#test04addBefore",				"LinkedListTest>>#testPrintOnDelimiterLast",				"LinkedListTest>>#testAllButFirstDo",				"LinkedListTest>>#test06addAfter",				"LinkedListTest>>#testReverseDoEmpty",				"LinkedListTest>>#testAllButLastDo",				"LinkedListTest>>#testKeysAndValuesDoEmpty",				"LinkedListTest>>#test0FixtureOccurrencesTest",				"LinkedListTest>>#test14removeIfAbsent",				"LinkedListTest>>#testFromToDo",				"LinkedListTest>>#testPrintOn",				"LinkedListTest>>#test11removeLast",				"LinkedListTest>>#testDoWithout",				"LinkedListTest>>#testAddAfter",				"LinkedListTest>>#test22addAll",				"LinkedListTest>>#testPrintOnDelimiter",				"LinkedListTest>>#testPrintElementsOn",				"LinkedListTest>>#testReverseDo",				"LinkedListTest>>#firstIndexesOf:in:",				"LinkedListTest>>#testTAdd",				"LinkedListTest>>#test10removeFirst",				"LinkedListTest>>#testRemoveAll",				"LinkedListTest>>#testWithIndexDo",				"LinkedListTest>>#test12remove",				"LinkedListTest>>#test09addAfter",				"LinkedListTest>>#test07addAfter",				"LinkedListTest>>#testKeysAndValuesDo",				"LinkedListTest>>#setUp",				"LinkedListTest>>#test13remove",				"LinkedListTest>>#testAtPut",				"LinkedListTest>>#test08addAfter",				"LocalRecursionStopper class>>#stopMethod:during:",				"LogicalFont class>>#new",				"LogicalFontManager>>#bestFontFor:whenFindingAlternativeIgnoreAll:",				"MCAncestry>>#breadthFirstAncestorsDo:",				"MCAncestry>>#hasAncestor:alreadySeen:",				"MCAnnouncementTest>>#testMCVersionSaved",				"MCCacheRepository>>#rescan",				"MCChangeSelector>>#listSelectionAt:put:",				"MCClassTraitParser>>#addDefinitionsTo:",				"MCConfiguration>>#upgradeByLoading",				"MCConfiguration>>#load",				"MCConfiguration>>#upgradeByMerging",				"MCConfiguration>>#updateFromRepositories",				"MCConfiguration>>#merge",				"MCConfiguration class>>#fromArray:",				"MCConfigurationBrowser>>#addRepository",				"MCConfigurationBrowser>>#migrate",				"MCConfigurationBrowser>>#addDependency",				"MCConfigurationBrowser>>#add",				"MCDefinitionIndex>>#addAll:",				"MCDependencySorter>>#addToOrder:",				"MCDependencySorter>>#addAll:",				"MCDependencySorter>>#addRequirement:for:",				"MCDependencySorter>>#addProvision:",				"MCFileBasedRepository>>#addVersionInformationExtractedFrom:to:",				"MCFileRepositoryInspector>>#packageListUpdate",				"MCFileRepositoryInspector>>#refresh",				"MCFileTreeAbstractReader>>#addDefinitionFromFile:inDirectory:",				"MCFileTreeAbstractReader>>#addClassAndMethodDefinitionsFromDirectoryEntries:",				"MCFileTreeAbstractReader>>#loadDependencies",				"MCFileTreeStCypressReader>>#addMethodDefinitionsForClass:methodProperties:in:extensionMethod:",				"MCFileTreeStCypressReader>>#loadDefinitions",				"MCFileTreeStCypressReader>>#addTraitDefinitionFrom:comment:",				"MCFileTreeStCypressReader>>#addClassDefinitionFrom:comment:",				"MCFileTreeStCypressWriter>>#fileNameMapFor:",				"MCFileTreeStCypressWriter>>#writeDefinitions:",				"MCFileTreeStSnapshotWriter>>#visitClassDefinition:",				"MCFileTreeStSnapshotWriter>>#visitTraitDefinition:",				"MCFileTreeStSnapshotWriter>>#visitMethodDefinition:",				"MCFileTreeStSnapshotWriter>>#writeDefinitions:",				"MCFileTreeStSnapshotWriter>>#visitClassTraitDefinition:",				"MCFileTreeStWriter>>#visitClassDefinition:",				"MCFileTreeStWriter>>#visitTraitDefinition:",				"MCFileTreeStWriter>>#visitClassTraitDefinition:",				"MCFrontier>>#remove:",				"MCFtpRepository>>#parseDirectoryListing:",				"MCHttpRepository>>#parseFileNamesFromStream:",				"MCMcdWriter>>#writePatch:",				"MCMerger>>#addConflictWithOperation:",				"MCMethodDefinition>>#addMethodAdditionTo:",				"MCPackage>>#basicSnapshot",				"MCPackage>>#snapshot",				"MCPackageLoader>>#tryToLoad:",				"MCPackageLoader>>#loadClassDefinition:",				"MCPackageLoader>>#addDefinition:",				"MCPackageLoader>>#removeDefinition:",				"MCPackageManager class>>#bestMatchingManagerForCategory:do:",				"MCPackageManagerTest>>#testManagersForCategoryDo",				"MCPatch>>#initializeWithBase:target:",				"MCPatcher>>#addDefinition:",				"MCRepository>>#retrieveVersionsWithPackageNames:",				"MCRepositoryGroup>>#addBasicRepository:",				"MCScriptParser>>#addDefinitionsTo:",				"MCSnapshotBrowser>>#visibleProtocols",				"MCSnapshotBrowserTest>>#morphsOfClass:",				"MCStReader>>#loadDefinitions",				"MCStWriter>>#writeMethodInitializer:",				"MCSubDirectoryRepository>>#findFullNameForWriting:",				"MCSubDirectoryRepository>>#loadAllFileNames",				"MCSystemCategoryParser>>#addDefinitionsTo:",				"MCThreeWayMerger>>#addOperation:",				"MCThreeWayMerger>>#addBaseSnapshot:",				"MCThreeWayMerger>>#addDefinition:",				"MCTraitParser>>#addDefinitionsTo:",				"MCVersionInfo>>#allAncestorsTo:",				"MCVersionInfoWriter>>#wrote:",				"MCVersionLoader>>#addVersion:",				"MCVersionMerger>>#addVersion:",				"MCVersionSorter>>#addVersionInfo:",				"MCVersionSorter>>#addToCurrentLayer:",				"MCVersionSorter>>#pushLayer",				"MCVersionSorter>>#addAllAncestorsOf:to:",				"MCVersionSorter>>#registerStepChildrenOf:seen:",				"MCVersionTest>>#assert:orders:as:unresolved:",				"MCVersionTest>>#assert:orders:as:",				"MCWorkingCopy>>#requiredPackagesParallelCollect:withMessage:",				"MCWorkingCopy>>#requirePackage:",				"MIMEDocument>>#parts",				"MTCompiledMethodChoosePresenter>>#initializePresenters",				"MTContextsTree>>#asShapeUMLSequenceDiagram:metadata:",				"MTHandlerProfiling>>#run:with:in:preContext:tracker:",				"MTHandlerSenderPropagating>>#run:with:in:context:tracker:",				"MTHandlerTest>>#testCountSlowFactorial",				"MTHandlerTest>>#testCountIfTrueDuringSlowFactorial",				"MTHandlerTest>>#testProfileSlowFibonacciMemoing",				"MTObservedDataset>>#statistics",				"MTOverviewSpPresenter>>#initializePresenters",				"MTOverviewSpPresenter>>#connectPresenters",				"MTSession class>>#initialize",				"MTSession class>>#compiledMethods:thenSelect:",				"MTSpContextsTreePresenter>>#initializePresenters",				"MTTemperaturePresenter>>#initializePresenters",				"MTTemperaturePresenter>>#runSequenceDiagramMethodsTemperaturesStCommand:",				"MTTemperaturePresenter>>#heatmap:xLabels:yLabels:matrix:",				"MTTemperaturePresenter>>#xLabels:yLabels:matrix:",				"MTTemperaturePresenter class>>#defaultSpec",				"MTVisualizationsTest>>#testInspectProbabilisticMedian",				"MTVisualizationsTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"MTVisualizationsTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"MailMessage>>#parseParts",				"MailMessage>>#fromRfc822:",				"MalBfsNode>>#to:edge:",				"MalCyclesCoverage>>#run",				"MalCyclesCoverage>>#retrieveCircuitsFromSccExtractor:",				"MalDijkstra>>#backtrack:edgeDo:",				"MalDijkstra>>#backtrack:",				"MalDijkstraNode>>#from:edge:",				"MalDijkstraNode>>#to:edge:",				"MalDisjointSets>>#run",				"MalDisjointSetsNextNode>>#to:",				"MalDominanceNode>>#from:",				"MalGraphAlgorithm>>#addEdge:from:to:",				"MalGraphAlgorithm>>#addNodeFor:",				"MalGraphReducer>>#mergeNodesInCircuit:",				"MalHal>>#hierarchyLevels",				"MalHalNode>>#from:",				"MalHalNode>>#to:",				"MalKruskal>>#run",				"MalKruskalTest>>#setUp",				"MalLongestPath>>#computeStep",				"MalNodeWithNext>>#to:",				"MalNodeWithPreviousAndNext>>#from:",				"MalSccExtractor>>#addCircuit:",				"MalSccNodeDecomposition>>#run:",				"MalTEdgeNode>>#to:edge:",				"MalTEdgeNode>>#from:edge:",				"MalTarjan>>#popStackAndUpdateCurrentScc:until:",				"MalTopologicalSorting>>#removeEdgesOf:",				"MalWeightedHitsNode>>#to:edge:",				"MalWeightedHitsNode>>#from:edge:",				"ManyTestResourceTestCase>>#testTearDownOrder",				"MemoryLogger>>#nextPut:",				"MenuGroupPresenter>>#addMenuItem:",				"MenuPresenter>>#addMenuGroup:",				"MenuRegistration>>#addItem:",				"MenuRegistration>>#buildMenuSpec:",				"MenuRegistration>>#collectMisplacedItemsIn:",				"MeshGradientPaint>>#addPatch:",				"MessageBrowser>>#setFocus",				"MessageBrowser>>#handleMethodAdded:",				"MessageBrowser>>#handleMethodModified:",				"MessageBrowser class>>#defaultSpec",				"MessageCatcher>>#doesNotUnderstand:",				"MessageList class>>#defaultSpec",				"MessageTally>>#bump:fromSender:",				"MetaLink>>#optionMetalevel:",				"MetaLink>>#installOn:",				"MetaLink>>#installOnVariable:",				"MetaLink>>#optionInlineCondition:",				"MetaLink>>#optionOneShot:",				"MetaLink>>#optionInlineMetaObject:",				"MetaLink>>#allReifications",				"MetaLink>>#checkForCompatibilityWith:",				"MetaLink>>#optionDisabledLink:",				"MetaLink>>#optionAnnounce:",				"MetaLink>>#optionArgsAsArray:",				"MetaLink>>#optionCompileOnLinkInstallation:",				"MetaLinkAnonymousClassBuilder>>#newAnonymousSubclassFor:",				"MetaLinkInstaller>>#installSuperJumpLinksInMethodNode:",				"MetaLinkInstaller>>#canRemoveMethodNodeContaining:",				"MetaLinkNodesMapper>>#addNode:forObject:",				"MetaLinkObjectAPITest>>#tagExec:",				"MetaLinkRegistry>>#addMetaLink:forObject:",				"MetaLinkRegistry>>#registerPermaLink:",				"MetaLinkRegistryTest>>#setUp",				"Metacello>>#addStatement:args:",				"Metacello>>#execute:args:",				"MetacelloAbstractConstructor>>#extractPragmas:for:into:",				"MetacelloAbstractVersionConstructor>>#packageForVersion:",				"MetacelloAbstractVersionConstructor>>#addAttribute:",				"MetacelloAbstractVersionConstructor>>#groupForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#projectForVersion:overrides:",				"MetacelloAbstractVersionConstructor>>#setFor:do:",				"MetacelloAbstractVersionConstructor>>#packageForVersion:overrides:",				"MetacelloAddMemberSpec>>#applyToList:",				"MetacelloAlternateResource>>#setUpVersionReferences",				"MetacelloAtomicLoadDirective>>#loadPreloadDirective:",				"MetacelloAtomicLoadDirective>>#loadPackageDirective:gofer:",				"MetacelloAtomicLoadDirective>>#loadPostloadDirective:",				"MetacelloAtomicMonticelloResource>>#setUpVersionReferences",				"MetacelloCommonMCSpecLoader>>#repositoriesFrom:ignoreOverrides:",				"MetacelloDictionaryRepositoryTest>>#setUp",				"MetacelloDirective>>#addTo:",				"MetacelloFetchingMCSpecLoader>>#resolveDependencies:nearest:into:",				"MetacelloIssue108Resource>>#setUpVersionReferences",				"MetacelloLoaderPolicy>>#pushLoadDirective:during:",				"MetacelloLoadingMCSpecLoader>>#packagesNeedSavingUsing:into:",				"MetacelloMCBaselineOfProjectSpec>>#validateVersionString:withDefaultVersionString:",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageC",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageD",				"MetacelloMCPackagesSpecTestCase>>#testMergePackageD",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageA",				"MetacelloMCPackagesSpecTestCase>>#testMergePackageB",				"MetacelloMCPackagesSpecTestCase>>#testRemovePackageB",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageA",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageB",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageC",				"MetacelloMCPackagesSpecTestCase>>#testAddPackageD",				"MetacelloMCPackagesSpecTestCase>>#testCopyToPackage",				"MetacelloMCPackagesSpecTestCase>>#testMergePackageA",				"MetacelloMCProjectSpec>>#loadedPackageNames:",				"MetacelloMCProjectSpec>>#validateVersionString:withDefaultVersionString:",				"MetacelloMCProjectSpec>>#validateForScriptLoad:withDefaultVersionString:withDefaultRepositoryDecription:",				"MetacelloMCVersion>>#packages",				"MetacelloMCVersion>>#packageAndProjectNamesToLoad:loader:",				"MetacelloMCVersionSpec>>#isPartiallyCurrentAgainst:",				"MetacelloMCVersionSpec>>#packageSpecsInLoadOrderForMap:",				"MetacelloMCVersionSpec>>#repository:",				"MetacelloMCVersionSpecTestCase>>#testMCVersionSpec",				"MetacelloMCVersionValidator>>#validateVersionTests:",				"MetacelloMCVersionValidator>>#validateVersionLoad:loads:",				"MetacelloMCVersionValidator>>#validateBaselineVersionSpec:",				"MetacelloMemberListSpec>>#addMember:",				"MetacelloMemberListSpec>>#collect:",				"MetacelloMemberListSpec>>#specListSelect:",				"MetacelloMemberListSpec>>#select:",				"MetacelloMonticelloResource>>#setUpVersionReferences",				"MetacelloNullRecordingMCSpecLoader>>#packages",				"MetacelloNullRecordingMCSpecLoader>>#postLoad:",				"MetacelloNullRecordingMCSpecLoader>>#loadedPackages",				"MetacelloNullRecordingMCSpecLoader>>#preLoad:",				"MetacelloPackagesSpec>>#slideIn:spec:baseIndex:seen:firstTime:for:",				"MetacelloPackagesSpec>>#applyIncludesTo:for:firstTime:for:",				"MetacelloPackagesSpec>>#packageSpecsInLoadOrderFor:",				"MetacelloPackagesSpec>>#sortPackageSpecs:packageSpec:groupLoops:for:",				"MetacelloPackagesSpecTestCase>>#testAddGroupA",				"MetacelloPackagesSpecTestCase>>#testAddGroupB",				"MetacelloPackagesSpecTestCase>>#testCopyToGroup",				"MetacelloPackagesSpecTestCase>>#testMergeGroupA",				"MetacelloPackagesSpecTestCase>>#testMergeProjectA",				"MetacelloPackagesSpecTestCase>>#testRemoveGroupB",				"MetacelloPackagesSpecTestCase>>#testMergeProjectB",				"MetacelloPackagesSpecTestCase>>#testCopyToProject",				"MetacelloPackagesSpecTestCase>>#testRemoveGroupA",				"MetacelloPackagesSpecTestCase>>#testRemoveGroupC",				"MetacelloPackagesSpecTestCase>>#testAddProjectA",				"MetacelloPackagesSpecTestCase>>#testRemoveProjectB",				"MetacelloPackagesSpecTestCase>>#testAddProjectB",				"MetacelloPackagesSpecTestCase>>#testMergeGroupB",				"MetacelloPackagesSpecTestCase>>#testRemoveProjectA",				"MetacelloPharoCommonPlatform>>#defaultPlatformAttributes",				"MetacelloPostLoadDirective>>#addTo:",				"MetacelloPreLoadDirective>>#addTo:",				"MetacelloProjectReferenceSpec>>#packagesNeedSavingVisited:using:into:",				"MetacelloProjectRegistration class>>#configurationClasses",				"MetacelloProjectRegistry>>#baselineProjectSpecs",				"MetacelloProjectRegistry>>#configurationProjectSpecs",				"MetacelloRepositoriesSpecTestCase>>#testMergeC",				"MetacelloRepositoriesSpecTestCase>>#testAddB",				"MetacelloRepositoriesSpecTestCase>>#testRemoveA",				"MetacelloRepositoriesSpecTestCase>>#testAddA",				"MetacelloRepositoriesSpecTestCase>>#testAddC",				"MetacelloRepositoriesSpecTestCase>>#testRemoveC",				"MetacelloRepositoriesSpecTestCase>>#testCopyTo",				"MetacelloRepositoriesSpecTestCase>>#testMergeB",				"MetacelloRepositoriesSpecTestCase>>#testRemoveB",				"MetacelloRepositoriesSpecTestCase>>#testRemoveD",				"MetacelloRepositoriesSpecTestCase>>#testMergeA",				"MetacelloScriptApiExecutor>>#projectSpecsFromRepositoryArg",				"MetacelloScriptExecutor>>#execute:",				"MetacelloSemanticVersionNumber class>>#fromString:forPattern:",				"MetacelloSymbolicVersionMethodSpec>>#addMethodSection:versionString:",				"MetacelloToolBox>>#modifySection:sectionIndex:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#modifyBaselineOf",				"MetacelloToolBox>>#updateVersionSpec:fullVersionSpec:updateProjects:updatePackages:visited:updated:",				"MetacelloToolBox>>#editVersionSpecsForImport:projectAttributes:active:fullVersionSpec:updateProjects:updatePackages:visited:updated:",				"MetacelloToolBox>>#updateVersionMethodForVersion:projectAttributes:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox class>>#validatePlatformLoad:for:",				"MetacelloToolBox class>>#modifyDevelopmentVersionIn:imports:requiredProjects:packages:description:",				"MetacelloToolBox class>>#validatePlatformLoad:for:version:",				"MetacelloToolBoxConstructor>>#setFor:version:",				"MetacelloToolBoxConstructor>>#methodSectionsInEvaluationOrder:do:",				"MetacelloToolBoxConstructor>>#setFor:do:",				"MetacelloToolBoxConstructor>>#methodSection:inEvaluationOrder:do:",				"MetacelloVersion>>#groups",				"MetacelloVersion>>#projects",				"MetacelloVersionConstructor>>#calculate:project:",				"MetacelloVersionConstructor>>#collectAllVersionsFromVersionImportPragmasInto:using:satisfiedPragmas:",				"MetacelloVersionLoadDirective>>#add:",				"MetacelloVersionMethodSection>>#addMethodSection:",				"MetacelloVersionMethodSpec>>#addMethodSection:versionSpec:",				"MetacelloVersionNumber class>>#fromString:",				"MetacelloVersionSpec>>#configPackagesSpecMethodOn:indent:",				"MetacelloVersionValidator>>#validateBaselineProject:",				"MetacelloVersionValidator>>#validatePragmas",				"MetacelloVersionValidator>>#validateProject:version:",				"MetacelloVersionValidator>>#recordValidationCriticalWarning:versionString:callSite:reasonCode:",				"MetacelloVersionValidator>>#validateProject:",				"MetacelloVersionValidator>>#recordValidationError:versionString:callSite:reasonCode:",				"MetacelloVersionValidator>>#validateProjectCreationFrom:onError:",				"MetacelloVersionValidator>>#recordValidationWarning:versionString:callSite:reasonCode:",				"MetacelloVisitedPackages>>#visit:doing:",				"MetaclassForTraits>>#addUser:",				"MethodClassifier>>#protocolByOtherImplementors:",				"MethodConstantTest>>#testUsingConstJustInSameMethod",				"MethodDictionaryTest>>#testAssociationsDoGoesOverEntireDictionary",				"MethodToolbar>>#setFocusOrder",				"MethodToolbar class>>#defaultSpec",				"MicAbstractBlock>>#addChild:",				"MicInlineParser>>#addATextFrom:to:toFinalArray:",				"MicInlineParser>>#linkOrFigureProcess:",				"MicInlineParser>>#insertBasicText:withFinalArray:from:to:",				"MicInlineParser>>#addInlineBlock:",				"MicTableBlock>>#addLineAndReturnNextNode:",				"MiniDrTests class>>#defaultSpec",				"MockObject>>#on:withArguments:verify:",				"MonitorTest>>#testExample1",				"MonitorTest>>#testExample2",				"MonthTest>>#testEnumerating",				"Morph>>#ownerChain",				"Morph>>#allMorphsInto:",				"Morph>>#showActions",				"Morph>>#allStringsAfter:",				"Morph>>#removeAllMorphsIn:",				"Morph class>>#morphsUnknownToTheirOwners",				"MorphTreeMorph>>#buildTopHeader",				"MorphTreeMorph>>#addMorphsTo:from:withExpandedItems:atLevel:",				"MorphTreeMorph>>#headerBounds",				"MorphTreeMorph>>#addMorphsAfter:fromCollection:",				"MorphTreeMorphMultipleSelection>>#addNodePath:",				"MorphTreeNodeModel>>#pathIn:",				"MorphTreeNodeMorph>>#recursiveAddTo:",				"MorphTreeNodeMorph>>#selected:",				"MorphTreeNodeMorph>>#path",				"MorphTreeNodeMorph>>#buildRowMorph",				"MorphTreeNodeMorph>>#children",				"MorphicEventHandler>>#methodRefList",				"MorphicEventHandler>>#addSubscription:toEvent:",				"MultistateButtonMorph>>#fillStyles",				"MustBeBooleanTest>>#testMultipleOrsInMethod",				"MutexTest>>#fork:at:",				"MutexTest>>#fork:",				"NECDetailMorph>>#drawArrowOn:",				"NSInterpolator>>#gtCanvasForInspector",				"NSOrdinalScale>>#scale:",				"NSOrdinalScale>>#domain:",				"NSPolylinearScale>>#rescale",				"NetNameResolver class>>#findLongestIPv6ZerosIn:",				"NetNameResolver class>>#stringFromIPv6Address:",				"NetNameResolver class>>#splitIPv6HextetsOn:",				"NetworkSystemSettings class>>#addHttpProxyException:",				"OCASTDoubleBlockTranslatorTest>>#testComposedExample:withTemps:withFirstBlock:withSecondBlock:",				"OCASTSingleBlockTranslatorTest>>#testComposedExample:withTemps:withBlock:withArguments:",				"OCASTVariableTranslatorTest>>#testAssignGlobalVariable",				"OCASTVariableTranslatorTest>>#testPushGlobalVariable",				"OCClosureCompilerTest>>#testInlineBlockCollectionEM1",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR2",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR3",				"OCClosureCompilerTest>>#testInlineBlockCollectionSD1",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR1",				"OCClosureTest>>#testWhileWithTempIsNil",				"OCClosureTest>>#testToDoArgumentNotInlined",				"OCClosureTest>>#testToDoInsideTemp",				"OCClosureTest>>#testToDoOutsideTempNotInlined",				"OCClosureTest>>#testWhileModificationAfter",				"OCClosureTest>>#testWhileModificationBeforeNotInlined",				"OCClosureTest>>#testToDoInsideTempNotInlined",				"OCClosureTest>>#testWhileModificationBefore",				"OCClosureTest>>#testWhileWithTemp",				"OCClosureTest>>#testToDoOutsideTemp",				"OCClosureTest>>#testWhileModificationAfterNotInlined",				"OCClosureTest>>#testWhileWithTempNotInlined",				"OCClosureTest>>#testToDoArgument",				"OCCompiledMethodIntegrityTest>>#testUndeclaredVariableWhenItIsAlreadyRegisteredAsAssociation",				"OCLiteralList>>#addLast:",				"OCOpalExamples>>#exampleWhileModificationBefore",				"OCOpalExamples>>#exampleWhileModificationAfterNotInlined",				"OCOpalExamples>>#exampleToDoOutsideTemp",				"OCOpalExamples>>#singleRemoteTempVar",				"OCOpalExamples>>#exampleWhileModificationBeforeNotInlined",				"OCOpalExamples>>#exampleToDoInsideTemp",				"OCOpalExamples>>#exampleInlineBlockCollectionLR3",				"OCOpalExamples>>#exampleWhileWithTempNotInlined",				"OCOpalExamples>>#exampleWhileWithTemp",				"OCOpalExamples>>#exampleToDoInsideTempNotInlined",				"OCOpalExamples>>#exampleToDoArgument",				"OCOpalExamples>>#exampleToDoOutsideTempNotInlined",				"OCOpalExamples>>#exampleToDoArgumentNotInlined",				"OCScopesCollector>>#visitBlockNode:",				"OCScopesCollector>>#visitMethodNode:",				"OCUndeclaredVariableWarning>>#openMenuIn:",				"OSSDL2Driver>>#registerGlobalListener:",				"OSSDLPasteEventFilter>>#addEvent:",				"OSTouchFingerTracker>>#addToMove:",				"OSWindowGestureHandler>>#trackFinger:",				"OSWindowGestureHandler>>#registerGesture:",				"OSWindowJoystickExample>>#shoot",				"OSWindowRenderThread>>#createdWindow:",				"Object>>#inspectorCanvasSlotsGraphCollapsedSCCs",				"Object>>#inspectorCanvasSlotsGraphLayered",				"Object>>#recursivelySetIsReadOnlyObject:exceptObjectsIn:",				"Object>>#inspectorCanvasSlotsGraphTopologicallySorted",				"Object>>#split:",				"Object>>#inspectorCanvasSlotsGraphSCCs",				"Object>>#inspectorCanvasSlotsGraph",				"ObservableValueHolder>>#whenChangedDo:",				"OkCancelToolbar>>#initializeWidgets",				"OkToolbar>>#initializeWidgets",				"OmBlockFileStore>>#refreshNewBlocksFrom:",				"OmMemoryStore>>#newEntry:",				"OmReference>>#stonOn:",				"OmSTONEntryReader>>#entryPositionsUpTo:",				"OmSessionStore class>>#register:",				"OmStore>>#entries",				"OrderedCollection>>#at:ifAbsentPut:",				"OrderedCollection>>#removeDuplicates",				"OrderedCollection>>#copyReplaceFrom:to:with:",				"OrderedCollection>>#copyWith:",				"OrderedCollectionTest>>#unsortedCollection",				"OrderedCollectionTest>>#collectionNotIncluded",				"OrderedCollectionTest>>#testTAddTwice",				"OrderedCollectionTest>>#testAllButFirstDo",				"OrderedCollectionTest>>#testReverseDoEmpty",				"OrderedCollectionTest>>#nonEmpty1Element",				"OrderedCollectionTest>>#testBeginsWithAnyOf",				"OrderedCollectionTest>>#testAllButLastDo",				"OrderedCollectionTest>>#replacementCollectionSameSize",				"OrderedCollectionTest>>#testAdd",				"OrderedCollectionTest>>#testKeysAndValuesDoEmpty",				"OrderedCollectionTest>>#collectionWithIdentical",				"OrderedCollectionTest>>#test0FixtureOccurrencesTest",				"OrderedCollectionTest>>#sortedInAscendingOrderCollection",				"OrderedCollectionTest>>#testRemoveIfAbsent",				"OrderedCollectionTest>>#testFromToDo",				"OrderedCollectionTest>>#collectionWith2TimeSubcollection",				"OrderedCollectionTest>>#testCapacityFromAsOrderedCollection",				"OrderedCollectionTest>>#collectionWith1TimeSubcollection",				"OrderedCollectionTest>>#testReverseDo",				"OrderedCollectionTest>>#firstIndexesOf:in:",				"OrderedCollectionTest>>#testTAdd",				"OrderedCollectionTest>>#testWithIndexDo",				"OrderedCollectionTest>>#collectionWithCopy",				"OrderedCollectionTest>>#testEndsWithAnyOf",				"OrderedCollectionTest>>#testKeysAndValuesDo",				"OrderedCollectionTest>>#setUp",				"OrderedCollectionTest>>#testCompact",				"OrderedDictionary>>#addAll:",				"OrderedDictionary>>#declare:from:",				"OrderedDictionary>>#keysAndValuesRemove:",				"OrderedDictionary>>#add:",				"OrderedDictionaryTest>>#testValues",				"OrderedDictionaryTest>>#testKeyAtIndex",				"OrderedDictionaryTest>>#testIncludesIdentity",				"OrderedDictionaryTest>>#testValuesDo",				"OrderedDictionaryTest>>#testKeyAtValue",				"OrderedDictionaryTest>>#testAssociationAtIfAbsent",				"OrderedDictionaryTest>>#testKeyAtValueIfAbsent",				"OrderedDictionaryTest>>#testAssociationAt",				"OrderedDictionaryTest>>#testDeclareFrom",				"OrderedDictionaryTest>>#testAtIfPresent",				"OrderedDictionaryTest>>#testAssociationAtIfPresent",				"OrderedDictionaryTest>>#testAssociations",				"OrderedDictionaryTest>>#testIndexOfKey",				"OrderedDictionaryTest>>#testBindingsDo",				"OrderedDictionaryTest>>#testAssociationsDo",				"OrderedDictionaryTest>>#testKeyAtIdentityValueIfAbsent",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsent",				"OrderedDictionaryTest>>#testIdentityIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testIncludesKey",				"OrderedDictionaryTest>>#testKeys",				"OrderedDictionaryTest>>#testAtIfAbsent",				"OrderedDictionaryTest>>#testIncludesAssociation",				"OrderedDictionaryTest>>#testEquals",				"OrderedDictionaryTest>>#testKeyAtIdentityValue",				"OrderedDictionaryTest>>#testKeysSortedSafely",				"OrderedDictionaryTest>>#testKeyForIdentity",				"OrderedDictionaryTest>>#testHash",				"OrderedDictionaryTest>>#testIncludes",				"OrderedDictionaryTest>>#testAdd",				"OrderedDictionaryTest>>#testKeysAndValuesDo",				"OrderedDictionaryTest>>#testKeyAtIndexIfAbsent",				"OrderedDictionaryTest>>#testDo",				"OrderedDictionaryTest>>#testKeysDo",				"OrderedDictionaryTest>>#testSize",				"OrderedDictionaryTest>>#testIdentityIndexOfKey",				"OrderedDictionaryTest>>#should:enumerate:",				"OrderedDictionaryTest>>#testAt",				"OupsDebugRequest>>#computePreDebugActions",				"OupsDummyDebugRequest>>#computePreDebugActions",				"PNGReadWriter>>#processNonInterlaced",				"PNGReadWriter>>#processNextChunk",				"PNGReadWriter>>#processInterlaced",				"POP3Client class>>#example",				"PSMCChangesGrouper>>#ensureClassChangeWrapperNamed:",				"PSMCChangesGrouper>>#visitOrganizationDefinition:",				"PSMCChangesGrouper>>#visitDefaultDefinition:",				"PaSimpleMatrixExampleTest>>#testAddAndRemove",				"PaSimpleMatrixExampleTest>>#testIncludes",				"PaSimpleMatrixExampleTest>>#testAdd",				"PanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"PanelMorphWithSplitters>>#addMorph:",				"PanelMorphWithSplitters>>#addMorph:fullFrame:",				"PanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"Paragraph>>#selectionRectsFrom:to:",				"ParametrizedTestMatrix>>#addCase:",				"ParametrizedTestMatrix>>#forSelector:addOptions:",				"Path>>#segments",				"Path>>#withParents",				"Path>>#stonOn:",				"Path class>>#addParentElementTo:",				"Path class>>#addEmptyElementTo:",				"Path class>>#addElement:to:",				"PathShape>>#addVertex:",				"PharoCommonTools>>#register:as:",				"PickListPresenter>>#initializeWidgets",				"PickListPresenter>>#addPicked:",				"PickListPresenter class>>#defaultSpec",				"PluggableDictionaryTest>>#testEqualBlock",				"PluggableMenuSpec>>#addMenuItem",				"PluggableMenuSpec>>#addToMenuModel:",				"PluggableMenuSpec class>>#exampleWithSubMenu",				"Point>>#stonOn:",				"PolygonMorph>>#midVertices",				"PolygonMorph>>#intersectionsWith:",				"PopupChoiceDialogWindow>>#newChoicesMorph",				"PositionableStream>>#decodeString:andRuns:",				"Pragma class>>#addToCache:",				"PragmaCollector>>#addPragma:",				"PragmaMenuAndShortcutRegistration>>#createNewItem",				"PragmaMenuBuilder>>#pragmaKeyword:",				"PreorderGuide>>#pushAll:",				"Process>>#pvtSignal:list:",				"Process class>>#updateInheritableKeys",				"ProcessBrowser class>>#registerWellKnownProcess:label:allowStop:allowDebug:",				"ProcessList>>#collect:",				"ProcessList>>#select:thenCollect:",				"ProcessList>>#collect:thenSelect:",				"ProcessList>>#select:",				"ProcessList>>#copyWith:",				"ProcessList>>#copyWithout:",				"ProcessMonitorTestService>>#handleNewProcess:",				"ProcessorScheduler>>#tallyCPUUsageFor:every:",				"ProperMethodCategorizationTest>>#testNoLeadingOrTrailingSpacesInCategoryNames",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedIn:whenSubclassOf:",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedInProtocols:whenSubclassOf:",				"ProperPackagesTest>>#testProperClassTagCasing",				"ProperPackagesTest>>#testProperManifestCategorization",				"ProperlyImplementedSUnitClassesTest>>#testAndMakeSureSuperTearDownIsCalledAsLastMessageInTearDownMethodsOfTestCases",				"ProperlyImplementedSUnitClassesTest>>#testAndMakeSureSuperSetupIsCalledAsFirstMessageInSetupMethodsOfTestCases",				"ProportionalSplitterMorph>>#addLeftOrTop:",				"ProportionalSplitterMorph>>#addRightOrBottom:",				"ProtoObject>>#pointersToExcept:",				"Protocol>>#addMethodSelector:",				"ProtocolClient>>#logProgressToTranscript",				"ProtocolClient>>#pushResponse:",				"ProtocolOrganizer>>#addProtocol:",				"ProtocolOrganizer>>#addProtocolNamed:",				"QSystemTally>>#bump:fromSender:",				"QueryAnnotationsFromClassTest>>#testCanBeEnumerated",				"RBAbstractBlockVisitor class>>#visit:select:",				"RBAbstractClass>>#withAllSubclasses",				"RBAbstractClass>>#allSuperclasses",				"RBAbstractClass>>#withAllSuperclassesUntil:",				"RBAbstractClass>>#whichSelectorsReferToClass:",				"RBAbstractClass>>#withAllSuperclasses",				"RBAbstractClass>>#addInstanceVariable:",				"RBAbstractClass>>#whichSelectorsReferToSymbol:",				"RBAbstractClass>>#addSubclass:",				"RBAbstractClass>>#whichSelectorsReferToClassVariable:",				"RBAbstractClass>>#removeMethod:",				"RBAbstractClass>>#allSuperclassesUntil:",				"RBAbstractClass>>#whichSelectorsReferToInstanceVariable:",				"RBAbstractRefactoringTest>>#extractMethodTestData",				"RBAbstractRefactoringTest>>#abstractVariableTestData",				"RBAbstractSelectionPresenter class>>#defaultSpec",				"RBAbstractVariablesRefactoring>>#processAssignmentNode:",				"RBAbstractVariablesRefactoring>>#processReferenceNode:",				"RBAddParameterRefactoring>>#senders",				"RBAddParameterTransformation>>#senders",				"RBArrayErrorNode>>#repairCollectionFromStop",				"RBArrayErrorNode>>#repairCollectionFromStart",				"RBArrayNode>>#addNode:",				"RBAssignmentNode>>#tagType:",				"RBBasicDummyLintRuleTest class>>#returnsBooleanAndOther",				"RBBasicDummyLintRuleTest class>>#collectionMessagesToExternalObject",				"RBBlockErrorNode>>#repairCollectionFromStart",				"RBBrowserEnvironment>>#allClassesAndTraits",				"RBBrowserEnvironment>>#classesAndTraits",				"RBBrowserEnvironment>>#keys",				"RBBrowserEnvironment>>#classNames",				"RBBrowserEnvironment>>#forClasses:",				"RBBrowserEnvironment>>#selectorsForClass:",				"RBBrowserEnvironment>>#methods",				"RBBrowserEnvironment>>#allNonMetaClasses",				"RBBrowserEnvironment>>#allMetaClasses",				"RBBrowserEnvironment>>#addSearchString:",				"RBBrowserEnvironment>>#traits",				"RBBrowserEnvironment>>#allClasses",				"RBBrowserEnvironment>>#classes",				"RBBrowserEnvironmentTest>>#uniqueClassesIn:",				"RBBrowserEnvironmentTest>>#testSystemIntegrity",				"RBBrowserEnvironmentTest>>#testConstructedSelectorEnvironment",				"RBCategoryEnvironment>>#addCategory:",				"RBClass>>#addClassVariable:",				"RBClass>>#addPoolDictionary:",				"RBClassEnvironment>>#addClass:",				"RBCombinatorVisitor>>#visitSequenceNode:",				"RBCompositeLintRule class>>#rulesFor:",				"RBCompositeRefactoryChange>>#addChange:",				"RBCreateCascadeRefactoring>>#addStatementNode:",				"RBDeprecateMethodTransformation>>#buildTransformations",				"RBDummyRefactoryTestDataApp>>#missingYourself",				"RBDummyRefactoryTestDataApp>>#collectionProtocol",				"RBEnvironmentsPresenter class>>#defaultSpec",				"RBExpandReferencedPoolsRefactoring>>#computePoolsToMove",				"RBExpandReferencedPoolsTransformation>>#computePoolsToMove",				"RBExtractMethodTransformation>>#buildTransformations",				"RBFindAndReplacePreviewPresenter>>#initializeChangeList",				"RBFindAndReplacePreviewPresenter class>>#defaultSpec",				"RBFindAndReplaceRefactoring>>#argumentsOf:",				"RBFindAndReplaceRefactoring>>#matchNodes",				"RBInlineParameterRefactoring>>#expressionsToInlineFrom:",				"RBItemsSelectionPresenter class>>#defaultSpec",				"RBLintRule>>#check:ifNoCritiques:",				"RBMessageNode>>#sentMessages",				"RBMethodArgumentsSelector>>#removeAssociation",				"RBMethodNameEditor>>#add",				"RBMethodNode>>#addReplacement:",				"RBMethodNode>>#children",				"RBMoveInstVarToClassRefactoring>>#collectSendersOfInstVar",				"RBMoveMethodRefactoring>>#checkTemporaryVariableNames",				"RBMoveMethodRefactoring>>#getNewMethodName",				"RBMoveTemporaryVariableDefinitionTransformation>>#buildTransformations",				"RBMoveTemporaryVariableDefinitionTransformation>>#checkLocationsIn:",				"RBMoveTemporaryVariableDefinitionTransformation>>#checkAllBlocksIn:",				"RBMoveVariableDefinitionRefactoring>>#checkNodes:",				"RBMoveVariableDefinitionRefactoring>>#subblocksIn:",				"RBNamespace>>#removeClassKeepingSubclassesNamed:",				"RBNamespace>>#allClassesDo:",				"RBNamespace>>#privateRootClasses",				"RBNamespace>>#privateReferencesTo:",				"RBNamespace>>#markAsRemoved:",				"RBNamespace>>#markPackageAsRemoved:",				"RBNamespace>>#allClassesInPackages:do:",				"RBNamespace>>#defineClass:",				"RBNamespace>>#removeClassNamed:",				"RBNamespace>>#privateReferencesTo:in:",				"RBNamespace>>#privateReferencesTo:inPackages:",				"RBNamespace>>#privateImplementorsOf:",				"RBNamespace>>#privateImplementorsOf:in:",				"RBOrEnvironment>>#selectorsForClass:do:",				"RBOrEnvironment>>#classesDo:",				"RBPackageEnvironment>>#classesDo:",				"RBPackageEnvironment>>#addPackage:",				"RBParseTreeRewriter>>#visitCascadeNode:",				"RBParseTreeRewriter class>>#mapArguments:toValues:in:",				"RBParseTreeSearcher>>#addRule:",				"RBParseTreeSearcher>>#addArgumentRule:",				"RBParseTreeSearcher class>>#treeMatchings:in:",				"RBParser>>#parseKeywordMessageWith:",				"RBParser>>#parseStatementList:into:until:",				"RBParser>>#parseLiteralArray",				"RBParser>>#parseStatementInto:periodList:withAcceptedStatementClosers:",				"RBParser>>#parseKeywordPattern",				"RBParser>>#parseStatementList:into:untilAnyCloserOf:",				"RBParser>>#parsePrimitiveKeywordPragma",				"RBParser>>#parseArgs",				"RBParser>>#parseKeywordPragma",				"RBParser>>#parseIncompleteExpression:",				"RBParser>>#parseBlockArgsInto:",				"RBParser>>#parseTemps",				"RBParser>>#parseStatementInto:periodList:",				"RBParser>>#parseCascadeMessage",				"RBParserTest>>#testIsA",				"RBParserTest>>#testParseFaultyMethod",				"RBParserTest>>#testLiteralArrayContainsLiteralValues",				"RBParserTest>>#testLiteralArray",				"RBPragmaEnvironment>>#addKeyword:",				"RBPragmaNode>>#sentMessages",				"RBProgramNode>>#link:",				"RBProgramNode>>#addBreakpoint:",				"RBProgramNode>>#inspectorRoassalTree",				"RBProtectInstanceVariableRefactoring>>#getterSetterMethods",				"RBProtocolEnvironment>>#addProtocol:",				"RBPullUpMethodParametrizedTest>>#testPullUpWhenSuperClassDoesNotDirectlyImplement",				"RBPullUpMethodTransformation>>#checkInstVarsFor:",				"RBPullUpVariableTransformation>>#buildTransformations",				"RBPushDownVariableTransformation>>#buildTransformations",				"RBReadBeforeWrittenTester>>#createScope",				"RBReadBeforeWrittenTester>>#read",				"RBReadBeforeWrittenTester>>#processStatementNode:",				"RBRefactoryChangeManager>>#undoOperation",				"RBRefactoryChangeManager>>#redoOperation",				"RBRefactoryDefinitionChange>>#namesIn:",				"RBRefactoryTestDataApp>>#missingYourself",				"RBRefactoryTestDataApp>>#collectionProtocol",				"RBRefactoryTyper>>#processCollectionMessagesFor:in:",				"RBRefactoryTyper>>#computeMessagesSentToVariables",				"RBRefactoryTyper>>#refineTypes:with:",				"RBRefactoryTyper>>#backpointersSetWith:",				"RBRefactoryTyper>>#guessTypeFromAssignment:",				"RBRefactoryTyper>>#processCollectionFor:messagesTo:in:",				"RBRefactoryTyper>>#implementorsOf:in:storeIn:",				"RBRefactoryTyper>>#typesFor:in:model:",				"RBRefactoryTyper class>>#typesFor:in:model:",				"RBRegexRefactoring>>#replace:with:ignoreCase:",				"RBRemoveAllSendersRefactoring>>#selfSendIn:",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownInstVarsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownMethodsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownClassVarsOf:",				"RBRemoveHierarchyMethodTransformation>>#delete:in:",				"RBRemoveMethodRefactoring>>#checkReferencesToAnyOf:",				"RBRemoveMethodRefactoring>>#checkSuperMethods",				"RBRemoveMethodRefactoring>>#justSendsSuper:",				"RBRemoveMethodTransformation>>#justSendsSuper:",				"RBRemoveMethodTransformation>>#checkReferences",				"RBRenamePackageTransformation>>#renameManifestClass",				"RBReplacePreview class>>#defaultSpec",				"RBScanner>>#scanComment",				"RBSearchTest>>#createMethodSearchWith:selectors:inClass:",				"RBSearchTest>>#createSearchWith:selectors:inClass:",				"RBSearchTest>>#buildSimpleLiteralSearch",				"RBSearchTest>>#createArgumentSearchWith:selectors:inClass:",				"RBSelectorEnvironment>>#packages",				"RBSelectorEnvironment>>#smallLintCritics",				"RBSelectorEnvironment>>#addClass:selector:",				"RBSelectorEnvironment class>>#implementorsMatching:in:",				"RBSequenceNode>>#addNode:",				"RBSequenceNode>>#replaceNode:withNodes:",				"RBSequenceNode>>#addFaultyNode:",				"RBSequenceNodeTest>>#testModifyParametersShouldNotModifyPeriods",				"RBSmalllintContext>>#checkLiteral:",				"RBSmalllintTestObject>>#missingYourself",				"RBSmalllintTestObject>>#multiplePeriodsTerminatingAssignmentStatement",				"RBSmalllintTestObject>>#collectionProtocol",				"RBSplitClassTransformation>>#addClass",				"RBSplitClassTransformation>>#addInstanceVariables",				"RBSplitClassTransformation>>#createReference",				"RBSplitClassTransformation>>#abstractReferenceTo:",				"RBTransformationTest>>#abstractVariableTestData",				"RBTransformationsTest>>#testCompositeTransform",				"RBValueNode>>#addParenthesis:",				"RBVariableEnvironment>>#addClass:classVariable:",				"RBVariableEnvironment>>#addClass:instanceVariable:",				"RBVariableEnvironment>>#addClass:instanceVariableReader:",				"RBVariableEnvironment>>#addClass:instanceVariableWriter:",				"RFArgumentsReification>>#preambleForMessage:",				"RFArgumentsReification>>#preambleForMethod:",				"RFArgumentsReification>>#preambleSequence:",				"RFMethodToExecuteReification>>#preambleForMessage:",				"RFOperationReification>>#preambleForMessage:",				"RFOperationReification>>#preambleForMethod:",				"RFOperationReification>>#preambleForArray:",				"RFReceiverReification>>#preambleForMessage:",				"RFValueReification>>#preambleForArray:",				"RGAbstractContainer>>#addElement:in:",				"RGAnnouncementsTest>>#testAnnouncementTimestamps",				"RGAnnouncementsTest>>#testBehaviorDefinitionModifiedForCategory",				"RGAnnouncementsTest>>#testBehaviorCommentModified",				"RGAnnouncementsTest>>#testBehaviorDefinitionModifiedForSuperclass",				"RGAnnouncementsTest>>#testAnnouncerSuspendingWithStoring",				"RGAnnouncementsTest>>#testBehaviorParentRenamed",				"RGAnnouncementsTest>>#testAnnouncerSuspending",				"RGAnnouncementsTest>>#testUnsubscribe",				"RGAnnouncementsTest>>#testDirectAnnouncement",				"RGAnnouncementsTest>>#testBehaviorAdded",				"RGBSliders>>#initializeWidgets",				"RGBSliders class>>#defaultSpec",				"RGBWidget>>#initializeWidgets",				"RGBWidget class>>#defaultSpec",				"RGBehavior>>#tagsForMethods",				"RGBehavior>>#withAllSubclasses",				"RGBehavior>>#tagsForMethodsSet",				"RGBehavior>>#tagsSet",				"RGBehavior>>#pvtTagWith:",				"RGBehavior>>#pvtAddLocalMethod:",				"RGBehavior>>#localMethodsSet",				"RGBehavior>>#subclasses",				"RGBehavior>>#pvtAddMethodTag:",				"RGBehaviorDefinition>>#allSuperclasses",				"RGBehaviorDefinition>>#addProtocol:",				"RGBehaviorDefinition>>#addSubclass:",				"RGChunkImporter>>#visitDoItChunk:",				"RGClassDefinition>>#addUser:",				"RGClassDefinitionTest>>#testWithProtocols",				"RGClassDefinitionTest>>#testAddingMethods",				"RGClassDefinitionTest>>#testRemovingMethods",				"RGClassDescriptionDefinition>>#addVariable:in:",				"RGClassStrategy>>#pvtAddSharedPool:",				"RGClassStrategy>>#sharedPools",				"RGClassStrategy>>#sharedPoolNames",				"RGClassStrategy>>#pvtAddClassVariable:",				"RGContainer>>#loadPackagesFromImage",				"RGEnvironment>>#pvtAddGlobalVariable:",				"RGEnvironment>>#pvtAddPackage:",				"RGEnvironment>>#removeUnusedPackages",				"RGEnvironment>>#pvtAddBehavior:",				"RGEnvironment>>#cleanUnusedUnreferencedBehaviors",				"RGEnvironmentAnnouncer>>#announce:",				"RGEnvironmentQueryInterface>>#globalVariables",				"RGEnvironmentQueryInterface>>#packages",				"RGEnvironmentQueryInterface>>#behaviors",				"RGMethod>>#tags",				"RGMethod>>#pvtTagWith:",				"RGMethodDefinitionTest>>#testExistingMethodWithoutClass",				"RGMethodDefinitionTest>>#testDifferentObjectButSameMethodInSet",				"RGMethodDefinitionTest>>#testSameMethodInSet",				"RGMethodDefinitionTest>>#testExistingMethodWithClass",				"RGMonticelloTest>>#testConvertingMCMethodDefinition",				"RGPackage>>#extensionMethods",				"RGPackage>>#pvtAddDefinedBehavior:",				"RGPackage>>#definedBehaviors",				"RGPackage>>#tagsForClasses",				"RGPackage>>#pvtAddClassTag:",				"RGPackage>>#pvtAddExtensionMethod:",				"RGPointerLayout>>#slots",				"RGPointerLayout>>#pvtAddSlot:",				"RGTraitAlias>>#pvtAddAlias:",				"RGTraitAlias>>#aliases",				"RGTraitComposition>>#transformations",				"RGTraitComposition>>#pvtAddTransformation:",				"RGTraitCompositionVisitor>>#visitMessageNode:",				"RGTraitDescriptionDefinition>>#addUser:",				"RGTraitDescriptionStrategy>>#users",				"RGTraitDescriptionStrategy>>#methods",				"RGTraitExclusion>>#exclusions",				"RGTraitExclusion>>#pvtAddExclusion:",				"RGTraitV2Strategy>>#pvtAddSharedPool:",				"RGTraitV2Strategy>>#sharedPools",				"RGTraitV2Strategy>>#sharedPoolNames",				"RGTraitV2Strategy>>#pvtAddClassVariable:",				"RGVariableDefinitionTest>>#testClassVariable",				"RGVariableDefinitionTest>>#testPoolVariable",				"RPackage>>#updateDefinedClassNamed:withNewName:",				"RPackage>>#methods",				"RPackage>>#addSelector:ofMetaclassName:",				"RPackage>>#updateExtensionSelector:inClass:withNewSelector:",				"RPackage>>#addMethod:",				"RPackage>>#renameTo:",				"RPackage>>#updateDefinedSelector:inClass:withNewSelector:",				"RPackage>>#basicAddClassTag:",				"RPackage>>#activatedPackages:classes:methods:",				"RPackage>>#addClassDefinitionName:",				"RPackage>>#extensionMethods",				"RPackage>>#addSelector:ofClassName:",				"RPackage>>#definedClasses",				"RPackageIncrementalTest>>#testPrivateClassRegisterUnregister",				"RPackageOrganizer>>#registerExtendingPackage:forClassName:",				"RPackageOrganizer>>#registerExtendingPackage:forClass:",				"RPackageOrganizer>>#addPackageNameToCache:",				"RPackageTag>>#addClassNamed:",				"RPackageTestCase>>#createNewPackageNamed:",				"RPackageTestCase>>#createNewClassNamed:inCategory:",				"RPackageTestCase>>#createNewTraitNamed:inCategory:",				"RSAbstractChartPlot>>#addShape:",				"RSAbstractConnection>>#output:",				"RSAbstractGraphLayout>>#validateCycleFor:path:",				"RSAbstractGraphLayout>>#parentsFor:",				"RSAbstractGraphLayout>>#childrenFor:",				"RSAbstractLabelDecoration>>#renderIn:",				"RSAbstractTreeBuilder>>#createElements:using:depth:",				"RSAbstractTreeBuilder>>#createElements:nesting:leaves:depth:",				"RSAbstractUMLClassRenderer>>#createEllipsisIfNecessaryOn:",				"RSAlgoritmia>>#doSimpleOutline:",				"RSAlpharo>>#renderIn:",				"RSAlpharo>>#updateRedLine",				"RSAnimationExamples>>#example46Lines",				"RSAnimationExamples>>#example04Phyco",				"RSAnimationExamples>>#example36Title",				"RSAnimationExamples>>#example02BoxesLineCircles",				"RSAnimationExamples>>#example05ElasticEllipses",				"RSAnimationExamples>>#example23PerlinNoise",				"RSAnimationExamples>>#example43Waves",				"RSAnimationExamples>>#example13ArcNoise",				"RSAnimationExamples>>#example42OneLine",				"RSAnimationExamples>>#example45Beziers",				"RSAnimationExamples>>#example18Rainbow",				"RSAnimationExamples>>#example26Bezier",				"RSAnimationExamples>>#example28AlteredWorld",				"RSAnimationExamples>>#example29Tick",				"RSAnimationExamples>>#example09PerlinParticles",				"RSAnimationExamples>>#example09b",				"RSAnimationExamples>>#example21Lines",				"RSAnimationExamples>>#example08ArcTree",				"RSAnimationExamples>>#example25AnimationCircle",				"RSAnimationExamples>>#example07CircleParty",				"RSAnimationExamples>>#example40Circles",				"RSAnimationExamples>>#example22Lines",				"RSAnimationExamples>>#example41River",				"RSAnimationExamples>>#example16Gris",				"RSAnimationExamples>>#example06LinePatterns",				"RSAnimationExamples>>#example32SimpleClock",				"RSAnimationExamples>>#example27RSLocate",				"RSAnimationTest>>#addingInComposite:duration:",				"RSAreaPlot>>#renderIn:",				"RSAttachPoint>>#commonParents:in:",				"RSAttachPointTest>>#testBorderAttachPoint",				"RSAttachPointTest>>#testVerticalAttachPoint",				"RSAttachPointTest>>#testCenteredAttachPoint",				"RSAttachPointTest>>#testHorizontalAttachPoint",				"RSBarChartExample>>#example03TilePaint",				"RSBaselineCalypso>>#setLevels:in:level:",				"RSBaselineCalypso>>#buildLegendOn:",				"RSBaselineCalypso>>#buildMenuOn:",				"RSBasicAnimationExamples>>#example05LoopEvent",				"RSBasicAnimationExamples>>#example07CornerRadius",				"RSBasicAnimationExamples>>#example08Markers",				"RSBasicAnimationExamples>>#example06Parallel",				"RSBasicShapeExamples>>#example05BasicGroup",				"RSBasicShapeExamples>>#example39YikigeiAnimated",				"RSBasicShapeExamples>>#example42GhostDraggable",				"RSBasicShapeExamples>>#example32RotateShapeByMouse",				"RSBasicShapeExamples>>#example33EdgesBetweenChildren",				"RSBasicShapeExamples>>#example34PaletteVisualization",				"RSBasicShapeExamples>>#example41PopupAndMarkers",				"RSBasicShapeExamples>>#example03BasicComposite",				"RSBasicShapeExamples>>#example31BorderAttachPointWithOffset",				"RSBasicShapeExamples>>#example38Interaction",				"RSBasicShapeExamples>>#example37AngleDirection",				"RSBasicShapeExamples>>#example04BasicComposite",				"RSBasicSpecExample>>#initializeRoassal3:",				"RSBasicSpecExample class>>#defaultSpec",				"RSBasicUMLClassRenderer>>#addLines:title:",				"RSBoundingShape>>#addConnectedEdge:",				"RSBoundingShape>>#addConnectedLine:",				"RSBoundingShape>>#allRecursiveConnectedShapesIn:",				"RSCameraTest>>#testPosition",				"RSCanvas>>#addLine:",				"RSCanvas>>#deepShapeFromModel:result:",				"RSCanvas>>#addNode:",				"RSCanvas>>#addFixedShape:",				"RSCanvas>>#addAnimation:",				"RSCanvas>>#addAll:",				"RSCanvas>>#addBasicShape:",				"RSCanvas>>#addEdge:",				"RSCanvas>>#withAllChildren",				"RSCanvasTest>>#testShapeFromModelAndComposite3",				"RSCanvasTest>>#testDrawCanvasWithGroup",				"RSCanvasTest>>#testEventKnowsItsCanvas02",				"RSCanvasTest>>#testNestedShapeNotAddedToACanvas",				"RSCanvasTest>>#testPushFront",				"RSCanvasTest>>#testShapeFromModelAndComposite",				"RSCanvasTest>>#testNestedShape",				"RSCanvasTest>>#testDeepNodes",				"RSCanvasTest>>#testPush",				"RSCanvasTest>>#testPushBackEdges",				"RSCanvasTest>>#testShapeFromModelAndComposite2",				"RSCanvasTest>>#testAddShapeBefore",				"RSCat>>#tileFor:pos:in:",				"RSCat>>#newStar",				"RSCellLayout>>#doExecute:",				"RSChannel>>#mark:",				"RSChannelExample>>#exampleBasic",				"RSChannelTest>>#testLocationsOfUnderlines",				"RSChannelTest>>#testBasicWithCallbacks",				"RSChannelTest>>#testAnnouncement",				"RSChart>>#addPlot:",				"RSChart>>#addDecoration:",				"RSChartExample>>#example17CLPvsUSD",				"RSChartExample>>#example08TwoCharts",				"RSChartExample>>#example18Animation",				"RSChartExample>>#example09LinearSqrtSymlog",				"RSChartExample>>#example12ScatterPlotAndNormalizer",				"RSChartSpineDecoration>>#renderIn:",				"RSChartTest>>#testMustInclude04",				"RSChartTest>>#testMustInclude05",				"RSChartTickTest>>#testFromNames",				"RSChessBackgroundInteraction>>#onShape:",				"RSClusterLayout>>#initializeNode:",				"RSClusteringLayout>>#getClusterFor:",				"RSClusteringLayoutTest>>#testCycles",				"RSColorPaletteChooser>>#paletteFor:",				"RSColorPaletteChooser class>>#defaultSpec",				"RSColoredTreePalette>>#allLeavesAccessibleFrom:in:",				"RSComposite>>#deepShapesFromModel:result:",				"RSComposite>>#addLine:",				"RSComposite>>#addNode:",				"RSComposite>>#addAll:",				"RSComposite>>#deepShapeFromModel:result:",				"RSComposite>>#addBasicShape:",				"RSComposite>>#addEdge:",				"RSComposite>>#withAllChildren",				"RSComposite>>#deepShapesFromModels:result:",				"RSCompositeAnimation>>#add:",				"RSCompositeTest>>#testPaddingOkay",				"RSCompositeTest>>#testEdgesCanvasAndComposite05",				"RSCompositeTest>>#testAdjustChildren",				"RSCompositeTest>>#testPositionInCanvas",				"RSCompositeTest>>#testEdgesCanvasAndComposite04",				"RSCompositeTest>>#testEdgesCanvasAndComposite03",				"RSContextInteraction>>#initialize",				"RSDelaunay class>>#generateEdge:closed:vertices:c:j:edges:",				"RSDelaunay class>>#generateMesh:circle:vertices:",				"RSDelaunayExample>>#addParticle:",				"RSDelaunayExample>>#girlFrom:",				"RSDelaunayExample>>#run",				"RSDelaunayExample>>#step",				"RSDelaunayExample>>#run2",				"RSDraggableCanvasTest>>#setUp",				"RSEasel class>>#defaultSpec",				"RSEdgeBuilderTest>>#testSource",				"RSEdgeBuilderTest>>#testInferCanvas3",				"RSExpandingBoxes>>#run",				"RSExporterExamples>>#example11PDFExport",				"RSExporterExamples>>#example12SVGRelax",				"RSFlowCanvas>>#initializeCanvas",				"RSFlowCanvas>>#updateBreadcrumbs",				"RSFlowCanvas>>#clickOnModel:",				"RSFlowCanvasTest>>#testNestedNodes",				"RSFlowLayout>>#linesFor:",				"RSGhostDraggable>>#createGhost:",				"RSGhostDraggableTest>>#testBasic",				"RSGhostDraggableTest>>#testComposite",				"RSGraphCanvasMonitorInteraction>>#updateShape",				"RSGroup>>#add:",				"RSGroupTest>>#testTranslucent",				"RSGroupTest>>#testDrawGroup",				"RSGroupTest>>#testModels",				"RSGroupTest>>#testAddShape",				"RSHanoiRoassal>>#createGroup:length:size:index:",				"RSHanoiRoassal>>#createLink",				"RSHeatmap>>#show:",				"RSHierarchyPackerInteraction>>#fill:with:",				"RSHighlightable>>#withLines",				"RSHighlightable>>#withIncomingLines",				"RSHighlightable>>#withIncomingEdges",				"RSHighlightable>>#record:selector:value:",				"RSHighlightable>>#withEdges",				"RSHorizontalFlowLayout>>#linesFor:",				"RSHorizontalTreeLayoutTest>>#testCycles",				"RSHorizontalVanDerPloegTreeLayout>>#initialize:associations:",				"RSInspectableExample>>#example04ChagingContext",				"RSInspectableExample>>#example02Inspect",				"RSKeyNavigationCanvasInteraction>>#processKeyDown:",				"RSLabel>>#emphasisAdd:",				"RSLayoutExamples>>#example20FlowLayout",				"RSLayoutExamples>>#example16SimpleClassHierarchy",				"RSLayoutExamples>>#example13VisualizeQuatree",				"RSLayoutExamples>>#example19AutomaticLayoutWhenWindowIsResized",				"RSLayoutExamples>>#example15SimpleClassHierarchy",				"RSLegend>>#renderOnDemandIn:",				"RSLegend>>#text:withShape:",				"RSLegend>>#text:description:",				"RSLegend>>#polymetricWidth:height:box:",				"RSLegend>>#customText:shape:",				"RSLineBuilder>>#edgeFrom:to:",				"RSLineBuilder>>#createEdgeIfNecessaryFrom:to:",				"RSLineBuilder>>#source:connectFrom:to:",				"RSLineBuilder>>#source:connectFromAll:to:",				"RSLineBuilder>>#source:connectFrom:toAll:",				"RSLineDrivenLayout>>#executeOnElements:",				"RSLinePlot>>#renderIn:",				"RSLissajous>>#createLineAnimationFor:",				"RSLissajous>>#createAnimationFor:and:",				"RSLissajous>>#createBigCircleFor:",				"RSMondrian>>#nodes:forEach:",				"RSMondrianTest>>#testWithNullElement",				"RSMondrianTest>>#testComposingMondrian",				"RSMondrianTest>>#testWithNullElementWithFixed",				"RSMonitorEventsTest>>#testWriteToFile",				"RSMultiBezierEdgeBuilder>>#commonShapes:with:",				"RSMultiBezierEdgeBuilder>>#followersOf:with:",				"RSNiceStepSizeGenerator>>#next",				"RSPAnimationTest>>#testError",				"RSParallelAnimationTest>>#testDuration",				"RSParallelAnimationTest>>#testStep",				"RSParallelAnimationTest>>#testStepEvent",				"RSParticleD>>#moveIn:",				"RSPieChartExample>>#visualizeChart:package:",				"RSPieChartExample class>>#defaultSpec",				"RSPieExamples>>#example24ManyPies",				"RSPieExamples>>#example23RotatedAnimation",				"RSPieExamples>>#example20AddingRemoving",				"RSPieExamples>>#example25Massiva",				"RSPieExamples>>#esportPrizepool",				"RSPieExamples>>#example22RotatedAnimation",				"RSPieLabeledInteraction>>#onShape:",				"RSPieTitleInteraction>>#onShape:",				"RSPopupTest>>#testPopupSimple",				"RSPunchCardBuilder>>#renderDots:",				"RSQuadTreeF>>#addChild:",				"RSQuadTreeF class>>#withAll:rectangle:",				"RSSVGAnimationExamples>>#example06AnimatedSVG",				"RSSVGAnimationExamples>>#example03Boat",				"RSSVGAnimationExamples>>#example05Corona",				"RSSVGExporter>>#writePathLabel:",				"RSSVGExporterTest>>#testLabelsWithoutFonts",				"RSSVGExporterTest>>#testBezier",				"RSSVGExporterTest>>#testLine",				"RSSVGPath>>#computePolygons",				"RSSankey>>#createLines",				"RSSankeyExamples>>#sankeyData",				"RSScatterPlot>>#renderIn:",				"RSSearchInCanvasInteraction>>#searchForShapes:",				"RSSearchInCanvasTest>>#testWithEdge",				"RSSearchInCanvasTest>>#testWithEdgeAndhighlightable",				"RSSelectionPresentationTest>>#testCanvasInspect",				"RSSequentialAnimationTest>>#testDuration",				"RSSequentialAnimationTest>>#testStep",				"RSSequentialAnimationTest>>#testStepEvent",				"RSShape>>#deepShapesFromModel:result:",				"RSShape>>#addRecursivelyIn:",				"RSShape>>#deepShapeFromModel:result:",				"RSShape>>#deepShapesFromModels:result:",				"RSShape>>#newAnimation",				"RSShapeExamples>>#example36ShapePosition",				"RSShapeExamples>>#example41Butterfly",				"RSShapeExamples>>#example17Labeled",				"RSShapeExamples>>#example14Marker",				"RSShapeExamples>>#example03LinePath",				"RSShapeExamples>>#example02BasicEdge",				"RSShapeExamples>>#example32RSLabeledOnComposite",				"RSShapeExamples>>#example35Lines",				"RSShapeExamples>>#example06JoinStyles",				"RSShapeExamples>>#example05CapStyles",				"RSShapeExamples>>#example18ExampleFromMondrian",				"RSShapeExamples>>#example26AnimatedPopup",				"RSShapeExamples>>#example38Transformable",				"RSShapeExamples>>#example30EdgesToChildren",				"RSShapeExamples>>#example09Polyline",				"RSShapeExamples>>#example27MultilineLabelBasic",				"RSShapeExamples>>#example13Arrow",				"RSShapeExamples>>#example04LineDashes",				"RSShapeExamples>>#example40LabelingLine",				"RSShapeExamples>>#example16Bezier",				"RSShapeExamples>>#example31BasicGrapher",				"RSShapeExamples>>#example11ClassTree",				"RSShapeExamples>>#example34MorphicPopup",				"RSShapeExamples>>#example12Polygons",				"RSShapeTest>>#testTranslateMiddleRightTo",				"RSShowProgressLabelDecorator>>#render",				"RSSimpleChartPopupBuilder>>#rowShapeFor:point:",				"RSSugiyamaLayout>>#addDummyNodes",				"RSSugiyamaLayout>>#buildLayers:",				"RSSugiyamaLayout>>#assignLabels:",				"RSSunburstExamples>>#example06Rotation",				"RSSunburstExamples>>#example07FadeInteraction",				"RSSunburstFadeInteraction>>#pathFor:",				"RSTContainer>>#deepShapesFromModel:result:",				"RSTContainer>>#addLine:",				"RSTContainer>>#deepShapeFromModel:result:",				"RSTContainer>>#addNode:",				"RSTContainer>>#addEdge:",				"RSTContainer>>#withAllChildren",				"RSTContainer>>#addAll:",				"RSTContainer>>#deepShapesFromModels:result:",				"RSTWalkBasedRegularTreeLayout>>#initialize:associations:",				"RSTimeLinePlot>>#renderIn:",				"RSTransformable>>#createHandlesFor:",				"RSTreeLayoutTest>>#testCycles",				"RSUMLCalypsoRenderer>>#methodFor:",				"RSUMLSequenceBuilder>>#initialize",				"RSUMLSequenceBuilder>>#lifeLines:selfMessageSends:lineBuilder:descriptor:startShape:endShape:",				"RSUMLSequenceBuilder>>#lifeLines:",				"RSUMLSequenceDescriptor>>#selectorShapeOfMessageSend:",				"RSVanDerPloegTreeLayout>>#initialize:associations:",				"RSWrapStrategy>>#wrapLineShapesFor:with:",				"RSWrapStrategy>>#wordsAndSpacesFor:",				"RSXmasBranch>>#addBaseIndex:",				"RSXmasBranch>>#addThickness:",				"RSXmasBranch>>#addPosition:",				"RSXmasExample>>#title",				"RSXmasExample>>#icon",				"RSXmasExample>>#myIcon",				"RSXmasExample>>#background",				"RSXmasTree>>#renderIn:",				"RSXmasTree>>#initializeBraches",				"RadioButtonGroup>>#addRadioButton:",				"RadioButtonGroupPresenter>>#dynamicLayout",				"RadioButtonGroupPresenter>>#addRadioButton:",				"RandomTest>>#testDistribution",				"RandomTestDistributions>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"RandomTestDistributions>>#exportShapeOf:accessorBlock:pathSuffix:",				"ReAbstractCritique>>#actions",				"ReAbstractRule>>#check:ifNoCritiques:",				"ReAbstractRule>>#check:",				"ReAbstractRuleTestCase>>#myCritiquesOnMethod:",				"ReAbstractRuleTestCase>>#critiguesFor:onMethod:",				"ReAbstractRuleTestCase>>#myCritiquesOnClass:",				"ReAbstractRuleTestCase>>#myCritiques",				"ReBasicScenarioExceptionStrategyTest>>#validationScenario",				"ReCriticEngine>>#critiquesOf:",				"ReCriticEngine>>#nodeCritiquesOf:",				"ReInvocationSequenceRule>>#add:requiresPostSend:",				"ReInvocationSequenceRule>>#add:requiresPreSend:",				"ReInvocationSequenceRule class>>#exampleSequenceMethods",				"ReNoPrintStringInPrintOnRuleTest>>#testRule",				"ReNodeMatchRule>>#addMatchingMethod:",				"ReNodeMatchRule>>#addMatchingExpression:",				"ReSmalllintChecker>>#addCritique:",				"ReSmalllintChecker>>#reParseRule",				"ReSmalllintTest>>#testUniqueIdentifierName",				"ReUsesAddRule>>#basicCheck:",				"ReUtilityMethodsRuleTest>>#myCritiques",				"RealEstateAgent class>>#standardPositionsInWorld:",				"RectangleTest>>#testMergingOverlappingRects",				"RectangleTest>>#testAreasOutside2",				"RectangleTest>>#testMergingOneRectangleReturnsThisRectangle",				"RectangleTest>>#testMergingNestedRectanglesReturnTheContainer",				"RectangleTest>>#testAreasOutside1",				"RectangleTest>>#testMergingTwoRectangles",				"RectangleTest>>#testMergingOverlappingRectangles",				"RectangleTest>>#testMergingDisjointRectangles",				"RecursionStopper>>#stopMethod:during:",				"RefactoringSettings class>>#addScope:",				"RefactoringSettings class>>#addScope:withKey:",				"ReferenceFinder>>#processLinkTo:from:",				"ReferenceFinder>>#computePathFor:",				"ReferenceFinder>>#addBacklinkLevel",				"ReferenceFinder>>#findAllPaths:",				"RegisteredClassAnnotationsTest>>#testCanBeEnumerated",				"RelationSet>>#add:",				"RelationSet>>#inverseAdd:",				"ReleaseTest>>#testWorldMenuHasHelpForAllEntries",				"ResetWindow>>#setFocusOrder",				"ResetWindow class>>#defaultSpec",				"ResumableTestFailureTestCase>>#logFailure:",				"ResumableTestFailureTestCase class>>#lastStoredRun",				"RewriteRuleChangesBrowser>>#initializePresenters",				"RewriteRuleChangesBrowser class>>#defaultSpec",				"RewriteRuleEditor>>#initializePresenters",				"RingChunkImporter>>#visitDoItChunk:",				"RingChunkImporter>>#removedMethod:with:",				"RubAbstractTextArea>>#addSegment:",				"RubParagraph>>#verticesFrom:to:",				"RubScrolledTextMorph>>#withRuler:",				"RubSegmentMorph>>#midVertices",				"RubSmalltalkEditor>>#widenSelectionIn:selection:ifFound:",				"RubTextSegmentMorph>>#computeSmoothVertices",				"RubTextSegmentMorph>>#computeStraightVertices",				"RubUnderlinedSegmentMorph>>#underlineShapeFromPosition:toPosition:",				"RubUnderlinedSegmentMorph>>#computeVertices",				"RunArray>>#select:",				"RunArray class>>#scanFrom:",				"RunArrayTest>>#testAdd",				"RunArrayTest>>#testAddAddsAsLastElement",				"RunArrayTest>>#testWithStartStopAndValueDo",				"RxCharSetParser>>#parseEscapeChar",				"RxCharSetParser>>#addRangeFrom:to:",				"RxCharSetParser>>#parseNamedSet",				"RxCharSetParser>>#addChar:",				"RxMatchOptimizer>>#syntaxNonWordBoundary",				"RxMatchOptimizer>>#initialize:ignoreCase:",				"RxMatchOptimizer>>#syntaxBeginningOfWord",				"RxMatchOptimizer>>#syntaxMessagePredicate:",				"RxMatchOptimizer>>#syntaxEndOfWord",				"RxMatchOptimizer>>#syntaxEndOfLine",				"RxMatchOptimizer>>#syntaxLookaround:",				"RxMatchOptimizer>>#syntaxPredicate:",				"RxMatchOptimizer>>#syntaxWordBoundary",				"RxMatchOptimizer>>#syntaxBeginningOfLine",				"RxMatchOptimizer>>#syntaxCharacter:",				"RxMatchOptimizer>>#determineTestMethod",				"RxMatchOptimizer>>#syntaxAny",				"RxMatcher>>#matchesOnStream:collect:",				"RxMatcher>>#matchesOnStream:",				"RxMatcher>>#matchesIn:",				"RxMatcher>>#matchingRangesIn:",				"RxMatcher>>#matchesIn:collect:",				"RxMatcher>>#subexpressions:",				"RxMatcherTest>>#testStringRegexMatchesDo",				"RxsCharacter>>#enumerateTo:ignoringCase:",				"RxsRange>>#enumerateTo:ignoringCase:",				"SDL2AthensDrawingExample>>#startStrokeAt:",				"SDL2AthensDrawingExample>>#moveAt:",				"SDL2TouchExample>>#move:at:",				"SDL2TouchStateMachine>>#add:",				"SDL2TouchStateMachine>>#finish:",				"SHStyleElement>>#styleForTable",				"STONWriteReadTest>>#testAssociations",				"STONWriteReadTest>>#testCustomAssociations",				"SUnitExtensionsTest class>>#lastStoredRun",				"SUnitTest class>>#lastStoredRun",				"Schedule>>#dateAndTimes",				"ScheduleTest>>#testDaysOfWeekAreConsistent",				"ScheduleTest>>#testFromDateAndTime",				"SearchableTree>>#initializeWidgets",				"SearchableTree class>>#searchAtBottom",				"SearchableTree class>>#defaultSpec",				"SelectBrowser>>#setFocusOrder",				"SelectBrowser class>>#defaultSpec",				"SelectEntity>>#initializeWidgets",				"SelectEntity class>>#defaultSpec",				"SelectPackageBrowser class>>#defaultSpec",				"SelectRuleBrowser>>#addItems",				"SelfPropagatingLinkDemo>>#installOnAllSendsInMethod:",				"SemaphoreTest>>#testMutualExclusion",				"SequenceableCollection>>#groupsOf:",				"SequenceableCollection>>#stFasterDifferencePreservingOrder:",				"SequenceableCollection>>#kth:ranking:atRandom:",				"SequenceableCollection>>#piecesCutWhere:",				"SessionManager>>#createCategory:",				"Set>>#collect:",				"Set>>#parseOptions:",				"Set>>#intersection:",				"SetTest>>#testPrintOn",				"SetTest>>#testMax",				"SetTest>>#testUnion",				"SetTest>>#testAddEmptyGrows",				"SetTest>>#testPrintOnDelimiter",				"SetTest>>#testAddNonEmptyGrowsWhenNewElement",				"SetTest>>#testCollect2",				"SetTest>>#testPrintElementsOn",				"SetTest>>#testAllowInclusionOfNils",				"SetTest>>#testIsHealthy",				"SetTest>>#testOccurrences",				"SetTest>>#testCopy",				"SetTest>>#testDoWithoutNoDuplicates",				"SetTest>>#testPrintOnDelimiterLast",				"SetTest>>#testIntersection",				"SetTest>>#testAsSet",				"SetTest>>#testAsCommaStringMore",				"SetTest>>#testAtRandom",				"SetTest>>#testSize2",				"SetTest>>#testAddNewElementIncrementsSize",				"SetTest>>#testAdd",				"SetTest>>#setUp",				"SetTest>>#test0FixtureOccurrencesTest",				"SetTest>>#testAddAlreadyThereDoesNotCount",				"SetTest>>#testCopyWithout",				"SettingBrowser>>#addToSearchedTextList:",				"SettingBrowser>>#setViewedPackageNames:",				"SettingDeclaration>>#addToList:",				"SettingDeclaration>>#listenersForEvent:",				"SettingNode>>#deeplySelect:in:",				"SettingTree>>#retainedNodesFromList:",				"SettingTreeBuilder>>#nodeClass:name:",				"SettingsStonWriter>>#addSetting:",				"ShClassChanged>>#propagateToSubclasses:",				"ShInstanceShapeChanged>>#propagateToSubclasses:",				"ShMetaclassChanged>>#propagateToSubclasses:",				"ShSuperclassChanged>>#propagateToSubclasses:",				"ShiftClassBuilder>>#addChange:",				"ShiftClassBuilder>>#addChangeComparer:",				"ShiftClassInstaller>>#migrateInstancesTo:",				"ShiftClassInstaller>>#migrateClassTo:",				"SimpleHierarchicalListMorph>>#addSubmorphsAfter:fromCollection:allowSorting:",				"SimpleHierarchicalListMorph>>#addMorphsTo:from:allowSorting:withExpandedItems:atLevel:",				"SimpleTestResourceTestCase class>>#lastStoredRun",				"SindarinDebugger>>#messageArguments",				"SindarinDebugger>>#stepBatchAndReturnNodeHashAndStackSize",				"SindarinDebugger>>#addStepHook:",				"SindarinDebuggerTest>>#tearDown",				"SingleCodeCriticResultList>>#initializeWidgets",				"SingleCodeCriticResultList class>>#defaultSpec",				"SliderInput>>#initializeWidgets",				"SlotAnnouncementsTest>>#subscribeOn:",				"SlotExampleMovie>>#addActor:",				"SlotExampleMovieAndPersonTest>>#testAddMovieDirectorInvalid",				"SlotExampleMovieAndPersonTest>>#testAddMovieDirectorTwice",				"SlotExampleMovieAndPersonTest>>#testAddMovieDirector",				"SmallDictionary>>#associationsSelect:",				"SmallDictionary>>#isHealthy",				"SmallDictionary>>#select:",				"SmallDictionary>>#difference:",				"SmallDictionary>>#declare:from:",				"SmallDictionary>>#keysAndValuesRemove:",				"SmallDictionary class>>#newFrom:",				"SmallDictionaryTest>>#testStoreOnRoundTrip",				"SmalltalkImage>>#removeAllLineFeedsQuietlyCalling:",				"SmalltalkImage>>#extractMinusParameters",				"Socket class>>#register:",				"SortedCollection>>#groupedBy:",				"SortedCollection>>#addAll:",				"SortedCollectionTest>>#testDo2",				"SortedCollectionTest>>#testSort",				"SortedCollectionTest>>#testTAddTwice",				"SortedCollectionTest>>#testAllButFirstDo",				"SortedCollectionTest>>#testMedianForOddSizeCollection",				"SortedCollectionTest>>#testEquals",				"SortedCollectionTest>>#testReverseDoEmpty",				"SortedCollectionTest>>#testAllButLastDo",				"SortedCollectionTest>>#testAdd",				"SortedCollectionTest>>#otherCollection",				"SortedCollectionTest>>#testKeysAndValuesDoEmpty",				"SortedCollectionTest>>#collectionWithIdentical",				"SortedCollectionTest>>#test0FixtureOccurrencesTest",				"SortedCollectionTest>>#testAddAll",				"SortedCollectionTest>>#testSpeciesLooseSortBlock",				"SortedCollectionTest>>#collectionWithElement",				"SortedCollectionTest>>#testFromToDo",				"SortedCollectionTest>>#collectionWith2TimeSubcollection",				"SortedCollectionTest>>#collectionWith1TimeSubcollection",				"SortedCollectionTest>>#subCollectionNotIn",				"SortedCollectionTest>>#testReverseDo",				"SortedCollectionTest>>#testCopy",				"SortedCollectionTest>>#testTAdd",				"SortedCollectionTest>>#testRemoveAll",				"SortedCollectionTest>>#testWithIndexDo",				"SortedCollectionTest>>#collectionWithCopy",				"SortedCollectionTest>>#testSortBlock",				"SortedCollectionTest>>#testAddAll2",				"SortedCollectionTest>>#testKeysAndValuesDo",				"SortedCollectionTest>>#setUp",				"SortedCollectionTest>>#testCollect",				"SourceFileArray>>#changeRecordsFrom:className:isMeta:",				"SpAbstractWidgetPresenter>>#traverseInFocusOrderDo:excluding:",				"SpAbstractWidgetPresenter>>#traversePresentersDo:excluding:",				"SpActionBarPresenter>>#add:",				"SpActionBarPresenter>>#addLast:",				"SpActionBarPresenter class>>#example",				"SpApplication>>#registerWindow:",				"SpApplicationWithToolbar>>#initializePresenters",				"SpApplicationWithToolbar class>>#defaultSpec",				"SpBoxLayout class>>#exampleVAlignEnd",				"SpBoxLayout class>>#exampleBeHomogeneous",				"SpBoxLayout class>>#exampleVAlignStart",				"SpBoxLayout class>>#exampleVAlignAndHAlign",				"SpBoxLayout class>>#exampleHAlignCenter",				"SpBoxLayout class>>#exampleHAlignStart",				"SpBoxLayout class>>#exampleExpand",				"SpBoxLayout class>>#exampleHAlignEnd",				"SpBoxLayout class>>#exampleVAlignCenter",				"SpBoxLayoutAdapterTest>>#testReplaceElementAppliesStyle",				"SpBoxLayoutAdapterTest>>#testAdapterElementsAreInSameOrderThanLayout",				"SpBoxLayoutAdapterTest>>#testReplaceElementAfterOpen",				"SpBoxLayoutAdapterTest>>#testRemoveElementAddedAfterOpenRemovesFromAdapter",				"SpBoxLayoutAdapterTest>>#testRemoveElementRemovesFromAdapter",				"SpBoxLayoutAdapterTest>>#testLayoutCanHaveMoreThanTwoChildren",				"SpBoxLayoutAdapterTest>>#testAddElementAddsToAdapter",				"SpBoxLayoutAdapterTest>>#testAddElementAfterOpenAddsToAdapter",				"SpBoxLayoutAdapterTest>>#testReplaceElementBeforeOpenAppliesStyle",				"SpBoxLayoutAlignmentExample>>#initializePresenters",				"SpBoxLayoutAlignmentExample>>#newVerticalAlignmentLayout",				"SpBoxLayoutAlignmentExample>>#newHorizontalAlignmentLayout",				"SpBoxLayoutReplacePresenterExample>>#initializePresenters",				"SpBoxLayoutTest>>#testReplaceWith",				"SpBoxLayoutTest>>#testRemoveElementFromLayoutTakesItOut",				"SpBoxLayoutTest>>#testElementsAreAddedInOrder",				"SpBoxLayoutTest>>#testReplaceAtindexWith",				"SpBoxLayoutTest>>#testLayoutWithOneElementIsNotEmpty",				"SpBoxLayoutWithTableForTestPresenter class>>#defaultSpec",				"SpButtonBarPresenter>>#add:",				"SpButtonBarPresenter class>>#example",				"SpChangeSorterPresenter>>#setFocus",				"SpChangeSorterPresenter class>>#defaultSpec",				"SpCheckBoxExample>>#setFocus",				"SpCheckBoxExample class>>#defaultSpec",				"SpChooserPresenter>>#initializeLayout",				"SpClassMethodBrowser>>#initializePresenters",				"SpClassMethodBrowser class>>#defaultSpec",				"SpClassStyle>>#mergedStylesWith:",				"SpCodePresenterTest>>#testDoBrowseSendersOfClassNameShouldSelectClassUsers",				"SpCodePresenterTest>>#testDoBrowseSendersOfClassNameWhenInPlayground",				"SpCodeScriptingInteractionModel>>#addBinding:",				"SpComponentListPresenter>>#addPresenter:",				"SpCompositeTableColumn>>#addColumn:",				"SpConfirmDialog class>>#defaultSpec",				"SpDatePresenter class>>#defaultSpec",				"SpDemo>>#initializePresenters",				"SpDemo>>#connectPresenters",				"SpDemoAbstractModalPresenter class>>#defaultSpec",				"SpDemoActionBarPresenter>>#initializePresenters",				"SpDemoActionBarPresenter class>>#defaultSpec",				"SpDemoButtonsPresenter>>#initializePresenters",				"SpDemoCheckboxesPresenter class>>#defaultSpec",				"SpDemoFormPresenter>>#initializePresenters",				"SpDemoFormPresenter class>>#defaultSpec",				"SpDemoImagePresenter class>>#defaultSpec",				"SpDemoLinksPresenter class>>#defaultSpec",				"SpDemoListsPresenter class>>#defaultSpec",				"SpDemoMenuButtonPresenter class>>#defaultSpec",				"SpDemoMessageBrowser>>#initializePresenters",				"SpDemoModalPresenter class>>#defaultSpec",				"SpDemoNotebookPresenter class>>#defaultSpec",				"SpDemoPage class>>#defaultSpec",				"SpDemoRadioButtonsPresenter class>>#defaultSpec",				"SpDemoStandaloneFormPresenter class>>#defaultSpec",				"SpDemoTablePresenter>>#initializePresenters",				"SpDemoTablePresenter class>>#defaultSpec",				"SpDemoToolbarPresenter class>>#defaultSpec",				"SpDemoTreeTablePresenter class>>#defaultSpec",				"SpDialogWindowPresenter>>#addButton:",				"SpDropListExample>>#setFocus",				"SpDropListExample class>>#defaultSpec",				"SpDropListPresenter>>#addItemLabeled:do:icon:",				"SpDualChangeSorterPresenter>>#setFocusOrder",				"SpDualChangeSorterPresenter class>>#defaultSpec",				"SpDynamicWidgetChange class>>#defaultSpec",				"SpEditableListPresenter>>#connectPresenters",				"SpEditableListPresenter class>>#defaultSpec",				"SpEditableListPresenter class>>#withoutOrderingBar",				"SpEventHandler>>#register:",				"SpEventHandlerTest>>#testEventIsInstalledDynamically",				"SpEventHandlerTest>>#testEventIsInstalledOnBuild",				"SpEventHandlerTest>>#testEventIsTransmittedOnText",				"SpFilteringListPresenter class>>#bottomLayout",				"SpFilteringListPresenter class>>#topLayout",				"SpFilteringSelectableListPresenter>>#activateItem:",				"SpFontStyle class>>#addFontToCache:",				"SpGeneratorListModel>>#at:ifAbsent:",				"SpHorizontalBoxLayoutTest>>#testReplaceWithFixedWidthComposed",				"SpHorizontalBoxLayoutTest>>#testPresenterExtentFollowsChildrenExtent",				"SpHorizontalBoxLayoutTest>>#testReplaceWithFixedWidth",				"SpInformDialog class>>#defaultSpec",				"SpInitializeWindowExample class>>#defaultSpec",				"SpLabeledPresenter>>#input:",				"SpLabeledPresenter class>>#defaultSpec",				"SpListPresenter class>>#exampleDragAndDrop",				"SpListSelectionPresenter class>>#defaultSpec",				"SpMenuBarPresenter class>>#example",				"SpMenuGroupPresenter>>#addMenuItem:",				"SpMenuPresenter>>#addMenuGroup:",				"SpMenuPresenter>>#fromSpec:",				"SpMenuPresenterTest>>#testFromSpecSubMenu",				"SpMenuPresenterTest>>#testFromSpecSingle",				"SpMethodBrowser>>#initializePresenters",				"SpMethodBrowser class>>#defaultSpec",				"SpMethodToolbarPresenter>>#setFocusOrder",				"SpMethodToolbarPresenter class>>#defaultSpec",				"SpMillerColumnPresenter>>#addPresenter:",				"SpMillerPaginatorPresenter>>#initializePresenters",				"SpMockDynamicPresenter class>>#defaultSpec",				"SpMockFocusOrderPresenter class>>#defaultSpec",				"SpMockPesenterWithoutGetter class>>#defaultSpec",				"SpMorphStyle>>#calculateMergedProperties",				"SpMorphStyle>>#propertiesLike:",				"SpMorphStyle class>>#fromStylesheet:adapter:",				"SpMorphicBoxLayoutTest>>#testBeHomogeneousWorksWhenContractingWindow",				"SpMorphicBoxLayoutTest>>#testLayoutHeightTakesAllSpaceNeeded",				"SpMorphicBoxLayoutTest>>#testBeHomogeneous",				"SpMorphicBoxLayoutTest>>#testBeHomogeneousWorksWhenExpandingWindow",				"SpMorphicButtonBarAdapter>>#addModelTo:",				"SpMorphicDialogWindowAdapter>>#buildButtonBar",				"SpMorphicMenuBarAdapter>>#adoptMenuItemModel:accumulator:",				"SpMorphicPanedAdapter>>#basicAdd:constraints:to:",				"SpMorphicPanedLayoutTest>>#testListTakesAssignedSpace",				"SpMorphicPatchLineVisitor>>#visitInsert:",				"SpMorphicPatchLineVisitor>>#visitDelete:",				"SpMorphicStatusBarAdapter>>#pushMessage:to:",				"SpMorphicTreeTableAdapter>>#suspendSelectionEventsDuring:",				"SpNotebookPresenter>>#addPage:",				"SpNotebookPresenter>>#traverseInFocusOrderDo:excluding:",				"SpNullMillerPresenter class>>#defaultSpec",				"SpObjectInspector>>#initializePresenters",				"SpOpenOnIntExample class>>#defaultSpec",				"SpOpenOnStringExample class>>#defaultSpec",				"SpOpenOnStringExample class>>#bottomLayout",				"SpOutputPort>>#,",				"SpOverlayLayout>>#addOverlay:",				"SpOverlayLayout>>#addOverlay:withConstraints:",				"SpPaginatorExample>>#initializePresenters",				"SpPaginatorPresenter>>#pages:",				"SpPaginatorPresenter>>#addPage:",				"SpPanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"SpPanelMorphWithSplitters>>#addMorph:",				"SpPanelMorphWithSplitters>>#addMorph:fullFrame:",				"SpPanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"SpPopoverContentExample>>#initializePresenters",				"SpPopoverExample>>#showPopover:relativeTo:",				"SpPopoverPresenterTest>>#initializeTestedInstance",				"SpPresenter>>#traversePresentersDo:excluding:",				"SpPresenterFocusOrderTest>>#testCustomFocusOrder",				"SpPresenterSelectorExample class>>#defaultSpec",				"SpPresenterSelectorPresenter>>#updatePresenter",				"SpPresenterTest>>#testPresentersIncludesPresentersAddedToTheLayout",				"SpPresenterTest>>#testAdapterDoesNotRemainsAsDependencyWhenReplacingIt",				"SpPresenterTest>>#testTraversePresentersDoIncludesPresentersAddedToTheLayout",				"SpProgressBarDemo class>>#defaultSpec",				"SpRGBSlidersPresenter>>#initializePresenters",				"SpRGBSlidersPresenter class>>#defaultSpec",				"SpRGBWidget>>#initializePresenters",				"SpRGBWidget class>>#defaultSpec",				"SpRadioButtonExample class>>#defaultSpec",				"SpRequestDialog class>>#defaultSpec",				"SpRequestTextDialog class>>#defaultSpec",				"SpRubFindReplaceDialog>>#initializePresenters",				"SpRubFindReplaceDialog>>#initializeDialogWindow:",				"SpRubFindReplaceDialog class>>#defaultSpec",				"SpScrollSyncExample>>#defaultSpecLayout",				"SpScrollSyncExample class>>#defaultSpec",				"SpSelectDialog class>>#defaultSpec",				"SpSelectEntity>>#initializePresenters",				"SpSelectEntity class>>#defaultSpec",				"SpSliderInputPresenter class>>#sliderLeft",				"SpSliderInputPresenter class>>#sliderTop",				"SpSliderInputPresenter class>>#sliderRight",				"SpSliderInputPresenter class>>#sliderBottom",				"SpSliderPresenter>>#addMark:at:",				"SpStatusBarPresenter class>>#example",				"SpTestPresenterWithThreeRadioButtons class>>#defaultSpec",				"SpTestPresenterWithToolbar class>>#defaultSpec",				"SpTestingPresenter class>>#defaultSpec",				"SpTestingPresenterWithAdditionalPresenters class>>#defaultSpec",				"SpTestingPresenterWithModel class>>#defaultSpec",				"SpTextFieldExample class>>#defaultSpec",				"SpToggleButtonExample class>>#defaultSpec",				"SpToolbarPresenter>>#addItemLeft:",				"SpToolbarPresenter>>#addItemRight:",				"SpToolbarPresenter class>>#example",				"SpToolbarToggleButtonExample>>#initializePresenters",				"SpToolbarToggleButtonExample class>>#defaultSpec",				"SpTransmissionExample class>>#defaultSpec",				"SpValueHolder>>#whenChangedDo:",				"SpVersatileDialogPresenter>>#layout",				"SpVerticalBoxLayoutTest>>#testReplaceWithFixedHeight",				"SpVerticalBoxLayoutTest>>#testPresenterExtentFollowsChildrenExtent",				"SpVerticalBoxLayoutTest>>#testReplaceWithFixedHeightComposed",				"SpaceTally>>#printSpaceDifferenceFrom:to:",				"SpaceTallyResult>>#addItem:",				"SpecColumnLayout>>#addSplitter",				"SpecFocusOrder>>#add:",				"SpecLayout>>#newColumn:origin:corner:offsetOrigin:offsetCorner:",				"SpecLayout>>#newRow:origin:corner:offsetOrigin:offsetCorner:",				"SpecLayout>>#computeSplitters",				"SpecLayout>>#computeNotSplitterWidget:",				"SpecLayout>>#addVSplitter",				"SpecLayout>>#add:origin:corner:offsetOrigin:offsetCorner:",				"SpecLayout>>#asArray",				"SpecLayout>>#addHSplitter",				"SpecLayout>>#add:withSpec:origin:corner:offsetOrigin:offsetCorner:",				"SpecLayout>>#send:withArguments:",				"SpecLayoutAdd>>#initialize",				"SpecRowLayout>>#addSplitter",				"SpecTableLayout>>#newColumn:",				"SpecTableLayout>>#newRow:height:",				"SpecTableLayout>>#add:",				"SpecTableLayout>>#add:withSpec:wrapped:",				"SpecTableLayout>>#addSpacerWeighted:",				"SpecTableLayout>>#addSpacerSized:",				"SpecTableLayout>>#newColumn:width:",				"SpecTableLayout>>#add:withSpec:",				"SpecTableLayout>>#newRow:",				"SpecTableLayout>>#add:wrapped:",				"SpecTableLayout>>#send:withArguments:",				"SpecTableLayoutAdd>>#initialize",				"SpecTableLayoutAddSpacer>>#generateArguments",				"SpecWrapperTableLayout>>#add:",				"SpecWrapperTableLayout class>>#wrap:",				"StAbstractStringFilter>>#next",				"StBaseFilter>>#addItem:",				"StDebugger>>#warning:for:",				"StDebugger>>#registerExtensionTool:",				"StDebugger class>>#codeLayout",				"StDebugger class>>#debuggerWithoutExtensionsSpec",				"StDebugger class>>#stackAndCodeLayout",				"StDebugger class>>#stackLayout",				"StDebugger class>>#debuggerWithExtensionsSpec",				"StDebuggerActionModelTest>>#testFilterMissingSubclassResponsibilityStack",				"StDebuggerActionModelTest>>#testFilterStack",				"StDebuggerActionModelTest>>#testFilterDNUStack",				"StDebuggerContext>>#doesNotUnderstandNodesFor:",				"StDebuggerContext>>#exceptionNodesFor:",				"StDebuggerContext>>#buildInspectorNodes",				"StDebuggerInspector>>#initializeLateralToolbar",				"StDebuggerInspector class>>#defaultSpec",				"StDebuggerInspector class>>#assertionFailureSpec",				"StDebuggerRawObjectInspector>>#initializeLayout",				"StDebuggerRawObjectInspector class>>#noHeaderSpec",				"StDebuggerTest>>#testPrintReceiverClassInContext",				"StDebuggerUsingSpecSelectorMock>>#availableSpecSelectors",				"StFailingAssertionInspector class>>#defaultSpec",				"StFailingAssertionInspector class>>#stringSpec",				"StFilterAlike>>#applyFilterWithQuery",				"StFilterSubstring>>#doApplyFilterWithQuery",				"StHaltAndBreakpointControlTest>>#methodWithHaltSources",				"StHaltCache>>#cacheNode:forSelector:",				"StHeaderPanel>>#presenter:",				"StHelpBrowserPresenter>>#createTopicsFromFileOrFolder:",				"StHelpBrowserPresenter>>#searchAndClick:",				"StHelpBrowserPresenter class>>#search:in:with:",				"StHelpBrowserPresenter class>>#defaultSpec",				"StInspector class>>#defaultSpec",				"StInspectorRefreshService>>#register:",				"StMetaBrowser class>>#defaultSpec",				"StMockCandidatesList>>#addObject:inProcessor:",				"StMockCandidatesList>>#addCandidate:in:",				"StMockContext>>#stepIntoQuickMethod:",				"StNodeCollector>>#indexedNodes",				"StNullFilter>>#doApplyFilterWithQuery",				"StObjectBreakpointInspection class>>#defaultSpec",				"StObjectContextPresenter>>#intializePresentersWithEvaluator",				"StObjectContextPresenter>>#intializePresentersWithoutEvaluator",				"StObjectInspectorPresenter>>#initializeLayout",				"StObjectInspectorPresenter>>#keepPresenter:",				"StPharoApplication>>#addSharedBinding:",				"StPlaygroundBindingsPresenter class>>#defaultSpec",				"StPlaygroundInteractionModel>>#addBinding:",				"StPlaygroundInteractionModel>>#bindings",				"StPlaygroundPagePresenter class>>#defaultSpec",				"StPlaygroundPageVersionsPresenter>>#initializePresenters",				"StPlaygroundPagesPresenter class>>#defaultSpec",				"StPresenterInspection class>>#defaultSpec",				"StQuery>>#updateFromContext:",				"StQuery>>#toggleFilter:",				"StRawInspection class>>#defaultSpec",				"StReporter>>#addTopicSpec:",				"StReporter class>>#defaultSpec",				"StSelector>>#addMethod:",				"StSindarinBytecodeContextInspectorModel>>#allInspectorNodes",				"StSindarinBytecodeDebuggerPresenter class>>#defaultSpec",				"StSindarinDebuggerPresenter class>>#defaultSpec",				"StSindarinDebuggerScriptingPresenter class>>#defaultSpec",				"StSpotter>>#updateResultList:",				"StSpotter>>#addPreviewPanelTo:",				"StSpotter>>#initializePresenters",				"StSpotter>>#showPreview:",				"StSpotter>>#addTipsPanel",				"StSpotterCandidateLinkPresenter>>#initializePresenters",				"StSpotterCandidatesList>>#getCandidateLinks:",				"StSpotterCandidatesList>>#addProcessor:",				"StSpotterHeaderPresenter>>#addCandidate:inSpotter:",				"StSpotterIterator>>#collect:as:",				"StSpotterIterator>>#reject:as:",				"StSpotterIterator>>#reject:thenCollect:as:",				"StSpotterIterator>>#do:",				"StSpotterIterator>>#select:thenCollect:as:",				"StSpotterIterator>>#items",				"StSpotterIterator>>#select:as:",				"StSpotterProcessor>>#newSource",				"StSpotterProcessor>>#executeQuery",				"StSpotterQuery>>#candidateAdded:",				"StSpotterStep>>#addProcessor:",				"StStringFilter>>#applyFilterWithoutQuery",				"StSystemReporter>>#topicSpec",				"StUnifiedProcessor>>#newSource",				"StUnifiedProcessor>>#calculateLowercaseSourcesOn:",				"StUnifiedProcessor>>#calculateUppercaseSourcesOn:",				"StUnorderedFilter>>#doApplyFilterWithQuery",				"StWithoutDuplicatesDecorator>>#next",				"StartupAction>>#execute",				"StartupPreferencesHandler>>#buildActionList",				"StartupPreferencesHandler>>#lookInFolder:",				"StartupPreferencesHandler>>#lookInFolder:forFilesMatching:",				"StartupPreferencesLoader>>#executeAtomicItems:",				"Stopwatch>>#duration",				"Stopwatch>>#activate",				"StoredSettingsFactory>>#fromSettingNodes:",				"StoredSettingsMerger>>#addStoredSetting:",				"Stream>>#upToEnd",				"String>>#findTokens:escapedBy:",				"String>>#findTokens:keep:",				"String>>#findTokens:",				"String>>#findBetweenSubstrings:",				"String>>#splitCamelCase",				"String>>#correctAgainstEnumerator:continuedFrom:",				"StringTest>>#testAllButLastDo",				"StringTest>>#testKeysAndValuesDoEmpty",				"StringTest>>#testLinesDo",				"StringTest>>#testAllButFirstDo",				"StringTest>>#testReverseDoEmpty",				"StringTest>>#test0FixtureOccurrencesTest",				"StringTest>>#testFromToDo",				"StringTest>>#testReverseDo",				"StringTest>>#firstIndexesOf:in:",				"StringTest>>#testWithIndexDo",				"StringTest>>#testKeysAndValuesDo",				"SubclassResponsibilityDebugAction>>#askForSuperclassOf:to:toImplement:ifCancel:",				"SubscriptionRegistry>>#add:",				"SubscriptionRegistry>>#replace:with:",				"SubscriptionRegistry>>#getInteractionsForClass:",				"SycMethodNameEditorPresenter>>#setFocus",				"SycMethodNameEditorPresenter class>>#defaultSpec",				"SycRefactoringPreviewPresenter>>#setFocus",				"SycRefactoringPreviewPresenter class>>#defaultSpec",				"SycRemoveClassStrategy class>>#createForBrowser:references:subclasses:users:",				"SycRemoveMethodStrategy class>>#createAllForBrowser:",				"Symbol class>>#rebuildSelectorTable",				"Symbol class>>#internSelector:",				"Symbol class>>#possibleSelectorsFor:",				"Symbol class>>#intern:",				"Symbol class>>#selectorsContaining:",				"SymbolTest>>#testAllButFirstDo",				"SymbolTest>>#testReverseDoEmpty",				"SymbolTest>>#testAllButLastDo",				"SymbolTest>>#testKeysAndValuesDoEmpty",				"SymbolTest>>#test0FixtureOccurrencesTest",				"SymbolTest>>#testFromToDo",				"SymbolTest>>#testReverseDo",				"SymbolTest>>#firstIndexesOf:in:",				"SymbolTest>>#testWithIndexDo",				"SymbolTest>>#testKeysAndValuesDo",				"SymbolicBytecodeBuilder>>#addBytecode:",				"SymbolicIntegerTest>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"SymbolicIntegerTest>>#exportShapeOf:accessorBlock:pathSuffix:",				"SymbolicIntegerTest>>#testGCDofAdjacentFibonacciNumbers",				"SystemAnnouncer>>#announce:",				"SystemDictionary>>#declare:from:",				"SystemDictionary>>#fillCaches",				"SystemDictionary>>#poolUsers",				"SystemDictionary>>#renameClass:from:to:",				"SystemNavigation>>#allSentMessagesInClass:",				"SystemNavigation>>#browseClassCommentsWithString:matchCase:",				"SystemNavigation>>#chooseInstVarFrom:thenDo:",				"SystemNavigation>>#allSentMessages",				"SystemNavigation>>#browseClassVarRefs:",				"SystemNavigation>>#obsoleteClasses",				"SystemNavigation>>#allMethodsWithSourceString:matchCase:",				"SystemNavigation>>#allMethodsSelect:",				"SystemNavigation>>#allSentMessagesInPackage:",				"SystemOrganizer>>#fileOutCategory:on:initializing:",				"SystemWindow>>#addPaneVSplitterBetween:and:",				"SystemWindow>>#setUpdatablePanesFrom:",				"SystemWindow>>#addPaneHSplitterBetween:and:",				"T2AbstractTest>>#newClass:superclass:with:trait:category:",				"T2AbstractTest>>#newTrait:with:uses:category:",				"T2AbstractTest>>#newClass:superclass:with:uses:category:",				"T2AbstractTest>>#newTrait:with:trait:category:",				"TAddForUniquenessTest>>#testAddAlreadyThereDoesNotCount",				"TAddForUniquenessTest>>#testAddNewElementIncrementsSize",				"TAddTest>>#testTAddTwice",				"TAddTest>>#testTAdd",				"TAsStringCommaAndDelimiterTest>>#testAsCommaStringMore",				"TConvertAsSetForMultiplinessIdentityTest>>#collectionWithCopy",				"TConvertAsSetForMultiplinessIdentityTest>>#collectionWithIdentical",				"TCopySequenceableWithReplacement>>#firstIndexesOf:in:",				"TDictionaryAddingTest>>#testAddAll",				"TDictionaryAddingTest>>#testAddWithKeyAlreadyIn",				"TDictionaryAddingTest>>#testDeclareFrom",				"TDictionaryAddingTest>>#testAddWithKeyNotIn",				"TDictionaryEnumeratingTest>>#testCollect",				"TDictionaryEnumeratingTest>>#testSelect",				"TDictionaryEnumeratingTest>>#testAssociationsDo",				"TDictionaryEnumeratingTest>>#testKeysDo",				"TDictionaryEnumeratingTest>>#testKeysAndValuesDo",				"TDictionaryEnumeratingTest>>#testValuesDo",				"TDictionaryEnumeratingTest>>#testAssociationsSelect",				"TDictionaryEnumeratingTest>>#testDo",				"TFStringType>>#allocateString:",				"TFUFFIFunctionCallTest>>#testLongCalloutDoesNotBlockImage",				"TFinalizable>>#noteNeedsToBeFinalized",				"TGrowableTest>>#testAddEmptyGrows",				"TGrowableTest>>#testAddNonEmptyGrowsWhenNewElement",				"TIceImagesExporting>>#exportSlotsGraphOf:slotDescriptorsContext:pathSuffix:",				"TIceImagesExporting>>#exportShapeOf:accessorBlock:pathSuffix:",				"TIdentityAddTest>>#testIdentityAdd",				"TIncludesForIdentityCollectionsTest>>#testIncludesAnyOfForIdentityCollections",				"TIncludesForIdentityCollectionsTest>>#testIncludesAllOfForIdentityCollections",				"TIterateSequencedReadableTest>>#testAllButLastDo",				"TIterateSequencedReadableTest>>#testKeysAndValuesDo",				"TIterateSequencedReadableTest>>#testReverseDo",				"TIterateSequencedReadableTest>>#testKeysAndValuesDoEmpty",				"TIterateSequencedReadableTest>>#testAllButFirstDo",				"TIterateSequencedReadableTest>>#testWithIndexDo",				"TIterateSequencedReadableTest>>#testReverseDoEmpty",				"TIterateSequencedReadableTest>>#testFromToDo",				"TIterateTest>>#testDoWithout",				"TIterateTest>>#testDo2",				"TKTCommonQueueWorkerPool>>#privateNewWorker",				"TKTFuture>>#addSuccessCallback:",				"TKTFuture>>#addFailureCallback:",				"TKTFuture class>>#fromCollectionOfFutures:",				"TKTFutureTest>>#testFutureAndThenFailsIfFirstFails",				"TKTFutureTest>>#testFutureSuccessCallbackExecutesInNewProcess",				"TKTFutureTest>>#testFutureAndThenThenFailuresAreJustSkipped",				"TKTFutureTest>>#testFutureAndThenExecutesInOrder",				"TKTFutureTest>>#testFutureAndThenSuccessIfAndThenFails",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsInNewProcessEveryTime",				"TKTService>>#onStoppedDo:",				"TKTServiceManager>>#startService:",				"TKTWatchDog>>#watch:",				"TKTWorker>>#noteNeedsToBeFinalized",				"TKTWorkerPool>>#newWorker",				"TModelBuilder>>#abstractVariableTestData",				"TModelBuilder>>#extractMethodTestData",				"TOccurrencesForMultiplinessTest>>#test0FixtureOccurrencesTest",				"TOccurrencesTest>>#test0FixtureOccurrencesTest",				"TPrintTest>>#testPrintOn",				"TPrintTest>>#testPrintOnDelimiter",				"TPrintTest>>#testPrintElementsOn",				"TPrintTest>>#testPrintOnDelimiterLast",				"TTLCache>>#removeStaleValues",				"TaSequence>>#addMember:",				"TabBarMorph>>#addTab:",				"TabExample>>#tabs",				"TabGroupMorph>>#addPage:label:selected:",				"TabGroupMorph>>#addPage:label:",				"TabManagerMorph>>#addLastTabContents:among:delta:",				"TabManagerMorph>>#addSplitterOn:delta:",				"TabManagerMorph>>#addTabContents:at:delta:",				"TabManagerMorph>>#setTabContentFrom:",				"TabManagerPresenter>>#addDependent:",				"TabManagerPresenter>>#addTab:",				"TabMorph>>#addAction:",				"TabSelectorMorph>>#tabsAndControls",				"TabSelectorMorph>>#calculateVisibleTabs",				"TabSelectorMorph>>#addTab:",				"TabSelectorMorph>>#addTab:selected:",				"TabState>>#buildBorderVertices",				"TaskbarMorph>>#updateOrderedTasksFrom:",				"TaskbarMorphTest>>#addWindowToWorld",				"TaskbarMorphTest>>#updateOrderedTasksFrom:",				"TestCase class>>#lastStoredRun",				"TestCaseTest>>#testAnnouncement",				"TestCommandLineHandler>>#addPackagesMatchingGlob:to:",				"TestCommandLineHandler>>#addPackagesMatching:to:",				"TestCommandLineHandler>>#addPackagesMatchingRegex:to:",				"TestExecutionEnvironment>>#registerService:",				"TestExecutionEnvironmentTestCase>>#newProcess:toImmediatelyExecute:",				"TestResource class>>#resetOrAddResourcesTo:",				"TestResult>>#addSkip:",				"TestResult>>#addPass:",				"TestResult>>#addError:",				"TestResult>>#addFailure:",				"TestResult>>#updateResultsInHistory",				"TestResult class>>#updateTestHistoryFor:status:",				"TestReviver>>#selectTestFailures",				"TestReviver>>#initializeWidgets",				"TestReviver class>>#defaultSpec",				"TestRunner>>#showProgress",				"TestRunner>>#addMethodsUnderTestIn:to:",				"TestRunner>>#findPackages",				"TestRunner>>#addDeclaredPackagesUnderTestTo:",				"TestServiceExample>>#handleNewProcess:",				"TestServiceExample>>#handleException:",				"TestSuite>>#defaultResources",				"TestSuite>>#addTest:",				"TestWorkingSession>>#handleError:",				"Text>>#embeddedMorphsFrom:to:",				"Text>>#embeddedMorphs",				"TextAlignmentTest>>#setUp",				"TextAnchorTest>>#setUp",				"TextConverter class>>#allEncodingNames",				"TextEmphasisTest>>#testRemove",				"TextEmphasisTest>>#testAdd",				"TextEmphasisTest>>#setUp",				"TextFontChangeTest>>#setUp",				"TextFontChangeTest>>#testHash",				"TextFontReferenceTest>>#setUp",				"TextKernTest>>#setUp",				"TextLineTest>>#setUp",				"TheManifestBuilder>>#addRejectClass:",				"TheManifestBuilder>>#unwrap:",				"TheManifestBuilder>>#addRejectRule:",				"TheManifestBuilder>>#addManuallyResolvedDependency:",				"Timespan>>#years",				"Timespan>>#dates",				"Timespan>>#weeks",				"Timespan>>#months",				"TonelWriter>>#writeMethodExtensions",				"ToolDockingBarMorph>>#adoptMenuItemModel:accumulator:",				"Trait>>#classDefinitions",				"Trait>>#addUser:",				"TraitBuilderEnhancer>>#eliminateDuplicates:withSuperclassSlots:",				"TraitChange>>#remove:into:changes:",				"TraitChange>>#update:into:changes:",				"TraitChange>>#add:into:changes:",				"TraitCompositionTest>>#testClassMethodsTakePrecedenceOverTraitsMethods",				"TraitFileOutTest>>#testFileOutTrait",				"TraitMethodDescription>>#addLocatedMethod:",				"TraitedClass class>>#addUser:",				"TraitsResource>>#createTraitNamed:uses:",				"TraitsResource>>#createClassNamed:superclass:uses:",				"TraitsTestCase>>#createTraitNamed:uses:",				"TraitsTestCase>>#createClassNamed:superclass:uses:",				"TreeChunkPagerMorph>>#buildPanel",				"TreeNavigationBarMorph>>#pageSearchText:",				"TreeNodePresenter>>#allUnselectedItems",				"TreeNodePresenter>>#allSelectedItems",				"TreePagerMorph>>#allIntervals",				"TreePagerMorph>>#buildPanel",				"TreePagerMorph>>#choosePage",				"UITheme>>#verticesForSimpleArrow:",				"UITheme>>#verticesForComplexArrow:",				"UUIDGeneratorTest>>#testUniqueness",				"UUIDPrimitivesTest>>#testDuplicationsKinda",				"UndeclaredVariable>>#register",				"Unit>>#multipliedBy:",				"UserInterruptHandler>>#killAllProcess",				"VTermOutputStyle>>#addStyle:",				"Variable>>#link:",				"VariableBreakpointTest>>#argNodes",				"VariableBreakpointTest>>#nodesForV2InVariableBreakpointMockSubclass",				"VariableBreakpointTest>>#tempReadNodes",				"VariableBreakpointTest>>#tempWriteNodes",				"VariableBreakpointTest>>#nodesForV1InFieldWatchpointMockClass",				"VariableBreakpointTest>>#nodesForV1InVariableBreakpointMockSubclass",				"VersionBrowser>>#replaceSourceWith:",				"VersionBrowser>>#initializePresenters",				"VileFinalizer>>#initialize:",				"VirtualBreakpoint>>#whenHit:",				"VirtualBreakpoint class>>#newOnNode:setBy:",				"VisibleClassAnnotationsTest>>#testCanBeEnumeratedForGivenClassAndUser",				"VisibleClassAnnotationsTest>>#testCanBeEnumeratedForGivenUser",				"WaitfreeQueueTest>>#newItems:",				"Watch>>#addValue:",				"WatchesWindow class>>#defaultSpec",				"WeakFinalizerItem>>#add:",				"WeakIdentitySetTest>>#testAddIdenticalElements",				"WeakIdentitySetTest>>#testAddEqualElements",				"WeakKeyDictionaryTest class>>#timingMany",				"WeakMessageSendTest>>#testCollectArguments",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionSomeGarbageCollected",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionAllGarbageCollected",				"WeakRegistry>>#finalizeValues",				"WeakRegistry>>#add:executor:",				"WeakRegistryTest>>#testFinalization",				"WeakRegistryTest>>#testRemovingByAHighPriorityProcessDoesntLeak",				"WeakRegistryTest>>#testRemovingDoesntLeak",				"WeakSet>>#collect:",				"WeakSet>>#asArray",				"WeakSetTest>>#testAddIncludesSizeReclaim",				"WeakSetTest>>#testIncludesNil",				"WeakSetTest>>#testDoDontIterateOnReclaimedObjects",				"WeakSetTest>>#testAddNil",				"WeakSetTest>>#testIncludes",				"WeakSetTest>>#testGrowWhenNecessary",				"WeakSetTest>>#testCollisions",				"WeakSetTest>>#testAsArray",				"WeakSetTest>>#testAddEqualElements",				"WeakSetTest>>#testDontGrowWhenUnecessary",				"WeakSetTest>>#testGrowWithNil",				"WeekTest>>#testEnumerating",				"WideCharacterSetTest>>#testAddingToCharacterSet",				"WidgetExample class>>#exampleBasicControls",				"WindowAnnouncementTest>>#testResizingClosing",				"WorkingSession>>#addDeferredStartupAction:",				"Workspace>>#bindingOf:",				"Workspace>>#whenTextAccepted:",				"WorldState>>#addAlarm:withArguments:for:at:",				"WorldState>>#drawWorld:submorphs:invalidAreasOn:",				"WorldState>>#runLocalStepMethodsIn:",				"WorldState>>#startStepping:at:selector:arguments:stepTime:",				"ZdcSecurePOP3Client class>>#retrieveMessagesFromGMailAccount:password:limit:",				"ZipArchive class>>#fileReaderServicesForFile:suffix:",				"ZipEncoderTree>>#buildTree:maxDepth:",				"ZipEncoderTree>>#buildHierarchyFrom:",				"ZnClient>>#formAdd:",				"ZnClient>>#receiveCookies",				"ZnClientTest>>#testLogging",				"ZnCookieJar>>#add:",				"ZnMagicCookieJarTest>>#testCookieAtForUrl",				"ZnMagicCookieJarTest>>#testCookiesForUrl",				"ZnMagicCookieJarTest>>#testAdd",				"ZnManagingMultiThreadedServer>>#socketStreamOn:",				"ZnMimePart>>#contentDispositionValues",				"ZnMultiPartFormDataEntity>>#addPart:",				"ZnMultiThreadedServer>>#exceptionSet:",				"ZnMultiValueDictionary>>#add:",				"ZnMultiValueDictionaryTest>>#testMultiValues",				"ZnRequestTest>>#testCookiesWriting",				"ZnServer class>>#register:",				"ZnUrl>>#addPathSegment:",				"ZnUrlCopy>>#addPathSegment:"			]		},		"do:" : {			"senders" : [				"AbsolutePath>>#asZnUrl",				"AbstractDelayTicker>>#restoreResumptionTimes:",				"AbstractDelayTicker>>#saveResumptionTimes:",				"AbstractDrTestsPresenter>>#locked:",				"AbstractEnumerationVisitorTest>>#assertEntries:are:",				"AbstractFileReference>>#childGeneratorBlock:matching:",				"AbstractFileReference>>#deleteAllChildren",				"AbstractFontSelectorDialogWindow>>#newFontFamilyMorph",				"AbstractTonelTest>>#tearDown",				"AbstractTool>>#removeClasses:",				"AbstractTool class>>#undoLastRefactoring",				"AbstractTutorial class>>#contentsOfTutorials",				"AbstractUITestCase>>#runCase",				"AbstractWorldRenderer>>#displayWorldState:ofWorld:",				"AbstractWorldRenderer class>>#logRenderingTimeMeasurements:",				"AlignmentMorph>>#inARightColumn:",				"AlignmentMorph>>#inAColumn:",				"AlignmentMorph>>#inARow:",				"AlignmentMorph class>>#removeFromSystem:",				"AlignmentMorph class>>#traitComposition:",				"AlignmentMorph class>>#fileOutLocalMethodsInCategory:on:",				"AlignmentMorph class>>#recategorizeSelector:from:to:",				"AlignmentMorph class>>#doRebuildMethodDictionary",				"Announcer>>#inspectionSubscriptions",				"AnnouncerTest>>#testAccessingSubscribers",				"Archive>>#addTree:relativeTo:match:",				"ArgumentVariableTest>>#testDeclaringNode",				"Array>>#beReadOnlyLiteral",				"Array>>#generateSpec",				"Array>>#recursiveDo:",				"Array>>#settingStoreOn:",				"Array>>#asTestMatrix",				"Array2D>>#atColumn:put:",				"Array2D>>#do:",				"Array2D>>#atRow:put:",				"Array2D class>>#diagonal:",				"Array2DTest>>#testAtAllPut",				"Array2DTest>>#testCollectCreatesANewMatrix",				"ArrayTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"ArrayTest>>#testOccurrencesOf",				"ArrayTest>>#assertNoDuplicates:whenConvertedTo:",				"ArrayTest>>#testDo2",				"ArrayTest>>#testAsStringOnDelimiterOne",				"ArrayTest>>#testCopyNonEmptyWith",				"ArrayTest>>#test0FixtureOccurrencesForMultiplinessTest",				"ArrayTest>>#assertSameContents:whenConvertedTo:",				"ArrayTest>>#testSort",				"ArrayTest>>#testAsStringOnDelimiterMore",				"ArrayTest>>#testAsCommaStringMore",				"ArrayTest>>#testShuffled",				"ArrayTest>>#testCopyReplaceAllWithManyOccurrence",				"ArrayTest>>#test0FixturePutOneOrMoreElementsTest",				"ArrayTest>>#testDifferenceWithNonNullIntersection",				"ArrayTest>>#testShuffleChangeOrder",				"ArrayTest>>#testAtAllPut",				"ArrayTest>>#testDo",				"ArrayTest>>#test0FixtureTConvertAsSetForMultiplinessTest",				"ArrayTest>>#testAsSetWithEqualsElements",				"ArrayTest>>#test0SortingArrayedTest",				"ArrayTest>>#testCopyNonEmptyWithout",				"ArrayTest>>#testAsStringOnDelimiterLastOne",				"ArrayTest>>#testPairsCollect",				"ArrayTest>>#test0FixtureIncludeTest",				"ArrayTest>>#testSortedUsingBlock",				"ArrayTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"ArrayTest>>#testAsSortedCollection",				"ArrayTest>>#testAsByteArray",				"ArrayTest>>#testCopyNonEmptyWithoutAll",				"ArrayTest>>#testCopyNonEmptyWithoutNotIncluded",				"ArrayTest>>#testSorted",				"ArrayTest>>#testIntersectionItself",				"ArrayTest>>#test0FixtureCopyPartOfSequenceableTest",				"ArrayTest>>#testWithAll",				"ArrayTest>>#testAsIdentitySetWithEqualsElements",				"ArrayTest>>#testAtAllIndexesPut",				"ArrayTest>>#testCopyEmptyWithoutAll",				"ArrayTest>>#testSortUsingSortBlock",				"ArrayTest>>#test0CopyTest",				"ArrayTest>>#testConcatenation",				"ArrayTest>>#testKeysAndValuesDo",				"ArrayTest>>#testDifference",				"ArrayTest>>#testCopyNonEmpty",				"ArrayTest>>#testDifferenceWithSeparateCollection",				"ArrayTest>>#testAsSortedCollectionWithSortBlock",				"ArrayTest>>#testAsIdentitySetWithIdentityEqualsElements",				"ArrayedCollection>>#fillFrom:with:",				"ArrayedCollection>>#countingSort:maximum:",				"AthensBalloonEngine>>#fillBezierShape:",				"AthensBalloonEngine>>#strokeBezierShape:width:",				"AthensCairoCanvas class>>#removeFromSystem:",				"AthensCairoCanvas class>>#traitComposition:",				"AthensCairoCanvas class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoCanvas class>>#recategorizeSelector:from:to:",				"AthensCairoCanvas class>>#doRebuildMethodDictionary",				"AthensCairoGradientPaint>>#initializeRadialBetween:extending:and:extending:withColorRamp:",				"AthensCairoGradientPaint>>#populateRamp:",				"AthensCairoMatrix class>>#removeFromSystem:",				"AthensCairoMatrix class>>#traitComposition:",				"AthensCairoMatrix class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoMatrix class>>#recategorizeSelector:from:to:",				"AthensCairoMatrix class>>#doRebuildMethodDictionary",				"AthensCairoMeshGradientPaint>>#populatePatches:",				"AthensCairoPaintMode class>>#removeFromSystem:",				"AthensCairoPaintMode class>>#traitComposition:",				"AthensCairoPaintMode class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPaintMode class>>#recategorizeSelector:from:to:",				"AthensCairoPaintMode class>>#doRebuildMethodDictionary",				"AthensCairoPath class>>#removeFromSystem:",				"AthensCairoPath class>>#traitComposition:",				"AthensCairoPath class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPath class>>#recategorizeSelector:from:to:",				"AthensCairoPath class>>#doRebuildMethodDictionary",				"AthensCairoPathBuilder class>>#removeFromSystem:",				"AthensCairoPathBuilder class>>#traitComposition:",				"AthensCairoPathBuilder class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPathBuilder class>>#recategorizeSelector:from:to:",				"AthensCairoPathBuilder class>>#doRebuildMethodDictionary",				"AthensCairoPatternPaint class>>#removeFromSystem:",				"AthensCairoPatternPaint class>>#traitComposition:",				"AthensCairoPatternPaint class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoPatternPaint class>>#recategorizeSelector:from:to:",				"AthensCairoPatternPaint class>>#doRebuildMethodDictionary",				"AthensCairoSolidPaint class>>#removeFromSystem:",				"AthensCairoSolidPaint class>>#traitComposition:",				"AthensCairoSolidPaint class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoSolidPaint class>>#recategorizeSelector:from:to:",				"AthensCairoSolidPaint class>>#doRebuildMethodDictionary",				"AthensCairoStrokePaint class>>#removeFromSystem:",				"AthensCairoStrokePaint class>>#traitComposition:",				"AthensCairoStrokePaint class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoStrokePaint class>>#recategorizeSelector:from:to:",				"AthensCairoStrokePaint class>>#doRebuildMethodDictionary",				"AthensCairoSurface class>>#removeFromSystem:",				"AthensCairoSurface class>>#recategorizeSelector:from:to:",				"AthensCairoSurface class>>#traitComposition:",				"AthensCairoSurface class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoSurface class>>#doRebuildMethodDictionary",				"AthensCairoText class>>#removeFromSystem:",				"AthensCairoText class>>#traitComposition:",				"AthensCairoText class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoText class>>#recategorizeSelector:from:to:",				"AthensCairoText class>>#doRebuildMethodDictionary",				"AthensCairoTransform class>>#removeFromSystem:",				"AthensCairoTransform class>>#traitComposition:",				"AthensCairoTransform class>>#fileOutLocalMethodsInCategory:on:",				"AthensCairoTransform class>>#recategorizeSelector:from:to:",				"AthensCairoTransform class>>#doRebuildMethodDictionary",				"AthensCompositePaint>>#athensFillPath:on:",				"AthensCompositePaint>>#athensFillRectangle:on:",				"AthensCompositeStrokePaint>>#athensFillRectangle:on:",				"AthensFontDescription>>#asString",				"AthensPathSegment>>#sendCommandsTo:",				"AthensSimpleTreeNode>>#renderOn:",				"AthensSimpleTreeNode>>#layoutHorizontally:",				"AthensSimpleTreeNode>>#layoutWidth",				"AthensTextComposer>>#scan:for:",				"AthensTextLine>>#renderOn:",				"AthensTextRenderer>>#render:lines:on:",				"AthensTextScanner>>#applyAttributes",				"AthensTiger>>#readParts",				"AthensTiger>>#draw",				"AthensTiger class>>#commands",				"AthensTreeDemo>>#layOutGeometry",				"Author class>>#fixStamp:",				"BMPReadWriter class>>#displayAllFrom:",				"BMPReadWriter class>>#readAllFrom:",				"Bag>>#size",				"BagTest>>#testPrintOn",				"BagTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"BagTest>>#testCopyNonEmptyWithout",				"BagTest>>#assertNoDuplicates:whenConvertedTo:",				"BagTest>>#testAsStringOnDelimiterOne",				"BagTest>>#testCopyNonEmptyWith",				"BagTest>>#testAsStringOnDelimiterLastOne",				"BagTest>>#test0FixtureOccurrencesForMultiplinessTest",				"BagTest>>#testPrintOnDelimiter",				"BagTest>>#testPrintElementsOn",				"BagTest>>#testAsSortedCollection",				"BagTest>>#testRemoveAllFoundIn",				"BagTest>>#testAsByteArray",				"BagTest>>#testCopyNonEmptyWithoutAll",				"BagTest>>#testCopyNonEmptyWithoutNotIncluded",				"BagTest>>#testAsCommaStringOne",				"BagTest>>#testAsStringOnDelimiterLastMore",				"BagTest>>#testIntersectionItself",				"BagTest>>#testAsStringOnDelimiterMore",				"BagTest>>#testPrintOnDelimiterLast",				"BagTest>>#testWithAll",				"BagTest>>#testAsIdentitySetWithEqualsElements",				"BagTest>>#testAsCommaStringMore",				"BagTest>>#testCopyEmptyWithoutAll",				"BagTest>>#testDifferenceWithNonNullIntersection",				"BagTest>>#testRemoveAllSuchThat",				"BagTest>>#test0CopyTest",				"BagTest>>#testDifference",				"BagTest>>#testConcatenation",				"BagTest>>#testCopyNonEmpty",				"BagTest>>#testConcatenationWithDuplicate",				"BagTest>>#test0FixtureOccurrencesTest",				"BagTest>>#testDifferenceWithSeparateCollection",				"BagTest>>#testAsSetWithEqualsElements",				"BagTest>>#testAsSortedCollectionWithSortBlock",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"BaselineOfBookletDSst>>#runAllTests",				"BaselineOfFuelPlatform>>#loadAll",				"BaselineOfMorphic>>#postload:package:",				"BaselineOfMorphic>>#exportBitmapDejaVuSans",				"BaselineOfRoassal3>>#registerPackages:",				"BasicCommandLineHandler>>#list",				"Behavior>>#selectSuperclasses:",				"Behavior>>#withAllSubclassesDo:",				"Behavior>>#compileAllFrom:",				"Behavior>>#selectSubclasses:",				"Behavior>>#dependentClasses",				"Behavior>>#allInstancesDo:",				"Behavior>>#allSelectorsAboveUntil:",				"Behavior>>#allSubclassesWithLevelDo:startingLevel:",				"BehaviorTest>>#testAllReferencesTo",				"Bitmap>>#storeBits:to:on:",				"Bitmap>>#readCompressedFrom:",				"BlockClosureTest>>#testHasMethodReturn",				"BlockClosureTest>>#testOneArgument",				"BorderedMorph>>#addPaneSplitters",				"BorderedMorph>>#linkSubmorphsToSplitters",				"BorderedMorph>>#removeCornerGrips",				"BorderedMorph>>#addBorderStyleMenuItems:hand:",				"BorderedMorph>>#removePaneSplitters",				"Breakpoint class>>#removeAll",				"Breakpoint class>>#isInstalledIn:",				"Breakpoint class>>#removeFromMethod:",				"Breakpoint class>>#handleClassRemoved:",				"Breakpoint class>>#removeFrom:",				"BreakpointIconStyler>>#iconBlock:",				"ByteArray>>#printHexOn:",				"ByteArray>>#hex",				"BytecodeEncoder class>>#specialSelectors",				"CDAbstractClassDefinitionParser>>#handleSlotsNodesFromArrayNode:",				"CDBehaviorDefinitionNode>>#slots:",				"CDClassDefinitionNode>>#sharedPools:",				"CDClassDefinitionNode>>#sharedSlots:",				"CDFluidClassDefinitionParser>>#visitCascadeNode:",				"CTBinaryTreeAbstractTest class>>#removeFromSystem:",				"CTBinaryTreeAbstractTest class>>#recategorizeSelector:from:to:",				"CTBinaryTreeAbstractTest class>>#traitComposition:",				"CTBinaryTreeAbstractTest class>>#fileOutLocalMethodsInCategory:on:",				"CTBinaryTreeAbstractTest class>>#doRebuildMethodDictionary",				"CTBinomialTree>>#shapes:edges:",				"CTCollapsedSccDfsPainter>>#crossTuples:lineBuilder:",				"CTCollapsedSccDfsPainter>>#dfsWalk",				"CTCollapsedSccDfsPainter>>#treeTuples:lineBuilder:",				"CTDfsPainter>>#layoutTuples:lineBuilder:",				"CTDfsPainter>>#forbiddenShapes:withDfsEdgesDo:",				"CTHeapQTest>>#testUpdate",				"CTHeapQTest>>#testHeapify",				"CTLayeredDfsPainter>>#dfsWalk",				"CTLinkedStoragePoolArray2D>>#at:at:",				"CTLinkedStoragePoolArray2D class>>#dimensions:terms:",				"CTLinkedStoragePoolPolynomial class>>#termAssociations:",				"CTLinkedStoragePoolPolynomialTest class>>#removeFromSystem:",				"CTLinkedStoragePoolPolynomialTest class>>#recategorizeSelector:from:to:",				"CTLinkedStoragePoolPolynomialTest class>>#traitComposition:",				"CTLinkedStoragePoolPolynomialTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinkedStoragePoolPolynomialTest class>>#doRebuildMethodDictionary",				"CTLinkedStoragePoolTest class>>#removeFromSystem:",				"CTLinkedStoragePoolTest class>>#recategorizeSelector:from:to:",				"CTLinkedStoragePoolTest class>>#traitComposition:",				"CTLinkedStoragePoolTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinkedStoragePoolTest class>>#doRebuildMethodDictionary",				"CTLinksLinkTest class>>#removeFromSystem:",				"CTLinksLinkTest class>>#recategorizeSelector:from:to:",				"CTLinksLinkTest class>>#traitComposition:",				"CTLinksLinkTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinksLinkTest class>>#doRebuildMethodDictionary",				"CTLinksValueLinkTest class>>#removeFromSystem:",				"CTLinksValueLinkTest class>>#recategorizeSelector:from:to:",				"CTLinksValueLinkTest class>>#traitComposition:",				"CTLinksValueLinkTest class>>#fileOutLocalMethodsInCategory:on:",				"CTLinksValueLinkTest class>>#doRebuildMethodDictionary",				"CTOrderPreservingTree>>#associationsDo:",				"CTOrderPreservingTree>>#asArray",				"CTOrderPreservingTree>>#pre:post:withIndex:parent:allChildren:",				"CTOrderPreservingTree>>#pre:post:",				"CTOrderPreservingTree>>#leaves",				"CTOrderPreservingTree>>#parent:children:",				"CTSccDfsPainter>>#layoutOn:edges:",				"CTSccDfsPainter>>#backTuples:lineBuilder:",				"CTSccDfsPainter>>#dfsWalk",				"CTSkipListTest>>#compiledMethods:wrapping:then:",				"CTSkipListTest class>>#removeFromSystem:",				"CTSkipListTest class>>#recategorizeSelector:from:to:",				"CTSkipListTest class>>#traitComposition:",				"CTSkipListTest class>>#fileOutLocalMethodsInCategory:on:",				"CTSkipListTest class>>#doRebuildMethodDictionary",				"CairoFontFace class>>#removeFromSystem:",				"CairoFontFace class>>#traitComposition:",				"CairoFontFace class>>#fileOutLocalMethodsInCategory:on:",				"CairoFontFace class>>#recategorizeSelector:from:to:",				"CairoFontFace class>>#doRebuildMethodDictionary",				"CairoFontMetricsProvider class>>#removeFromSystem:",				"CairoFontMetricsProvider class>>#traitComposition:",				"CairoFontMetricsProvider class>>#fileOutLocalMethodsInCategory:on:",				"CairoFontMetricsProvider class>>#recategorizeSelector:from:to:",				"CairoFontMetricsProvider class>>#doRebuildMethodDictionary",				"CairoFontOptions class>>#removeFromSystem:",				"CairoFontOptions class>>#traitComposition:",				"CairoFontOptions class>>#fileOutLocalMethodsInCategory:on:",				"CairoFontOptions class>>#recategorizeSelector:from:to:",				"CairoFontOptions class>>#doRebuildMethodDictionary",				"CairoFreetypeFontRenderer class>>#removeFromSystem:",				"CairoFreetypeFontRenderer class>>#traitComposition:",				"CairoFreetypeFontRenderer class>>#fileOutLocalMethodsInCategory:on:",				"CairoFreetypeFontRenderer class>>#recategorizeSelector:from:to:",				"CairoFreetypeFontRenderer class>>#doRebuildMethodDictionary",				"CairoScaledFont class>>#removeFromSystem:",				"CairoScaledFont class>>#traitComposition:",				"CairoScaledFont class>>#fileOutLocalMethodsInCategory:on:",				"CairoScaledFont class>>#recategorizeSelector:from:to:",				"CairoScaledFont class>>#doRebuildMethodDictionary",				"CalendarMorph>>#mouseUp:",				"CalendarMorph>>#drawDaysOn:",				"CalendarMorph>>#mouseDown:",				"Categorizer>>#classifyAll:under:",				"Categorizer>>#categories:",				"Categorizer>>#changeFromCategorySpecs:",				"Categorizer class>>#sortAllCategories",				"ChangeSet>>#trimHistory",				"ChangeSet>>#methodsWithoutClassifications",				"ChangeSet>>#checkForSlips",				"ChangeSet>>#assimilateAllChangesFoundIn:",				"ChangeSet>>#fileOutOn:",				"ChangeSet>>#forgetAllChangesFoundIn:",				"ChangeSet>>#fileOutPSFor:on:",				"ChangeSet>>#methodsWithoutComments",				"ChangeSet class>>#gatherChangeSets",				"ChangeSet class>>#reorderChangeSets",				"ChangeSet class>>#fileOutChangeSetsNamed:",				"ChangeSet class>>#removeChangeSetsNamedSuchThat:",				"ChangesBrowser>>#accept",				"ChangesBrowser>>#updateChanges",				"CharacterScanner>>#setFont",				"CharacterSet>>#do:",				"CharacterSet>>#byteComplement",				"CharacterSet>>#asString",				"CharacterTest>>#testIsSeparator",				"CharacterTest>>#testStoreStringAll",				"CharacterTest>>#testPrintStringAll",				"CheckboxMorph class>>#removeFromSystem:",				"CheckboxMorph class>>#traitComposition:",				"CheckboxMorph class>>#fileOutLocalMethodsInCategory:on:",				"CheckboxMorph class>>#recategorizeSelector:from:to:",				"CheckboxMorph class>>#doRebuildMethodDictionary",				"ClapCommand>>#parametersDo:",				"ClapCommandLineExamples>>#sayHelloOn:",				"ClapCompositeMatch>>#validateOn:",				"ClapDocumentationFormatter>>#tabularize:",				"ClapParameterized>>#addAll:",				"ClapParameterized>>#parametersDo:",				"ClapPharoVersion>>#showVersionsNamed:",				"ClapValidationReport>>#addAll:",				"ClapValidationReport>>#printOn:",				"Class>>#addClassVariable:",				"Class>>#innerBindingOf:",				"Class>>#asFullRingDefinition",				"Class>>#removeSharedPool:",				"Class>>#sharedPoolsDo:",				"Class>>#anyUserOfClassVarNamed:",				"Class>>#possibleVariablesFor:continuedFrom:",				"Class>>#addSubclass:",				"Class>>#classAnnotationsDo:",				"Class>>#asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackageKeys:in:",				"Class>>#subclassesDo:",				"Class>>#sharing:",				"Class>>#dependentClassesWithOccurences",				"Class>>#applyDeprecation",				"Class>>#declareClassVariables:",				"Class>>#addInstVarNamed:",				"Class>>#fileOutPool:onFileStream:",				"Class>>#fileOutSharedPoolsOn:",				"ClassAPIHelpBuilder>>#buildSubnodesForSubclasses",				"ClassAPIHelpBuilder>>#buildMethodTopicsOn:for:",				"ClassAnnotation class>>#cleanRedefinedGarbage",				"ClassAnnotation class>>#registeredInstancesDo:",				"ClassAnnotationRegistry>>#addAllFromPragmas:",				"ClassChangeRecord>>#assimilateAllChangesIn:",				"ClassDescription>>#removeProtocol:",				"ClassDescription>>#copyAll:from:classified:",				"ClassDescription>>#classCommentBlank",				"ClassDescription>>#fileOutLocalMethodsInCategory:on:",				"ClassDescription>>#fileOutOn:",				"ClassDescription>>#fileOutChangedMessages:on:",				"ClassDescription>>#fileOutCategory:on:",				"ClassDescription>>#classesThatImplementAllOf:",				"ClassDescription>>#copyAllCategoriesFrom:",				"ClassDescription>>#allProtocolsUpTo:",				"ClassDescription>>#newInstanceFrom:variable:size:",				"ClassDescription>>#reformatAll",				"ClassDiffBuilder>>#split:",				"ClassFactoryForTestCase>>#cleanUpChangeSetForClassNames:",				"ClassFactoryForTestCase>>#deleteClasses",				"ClassFactoryForTestCase>>#deleteTraits",				"ClassFactoryWithOrganizationTest>>#testClassCreationInDifferentCategories",				"ClassFactoryWithOrganizationTest>>#testSingleClassCreation",				"ClassFactoryWithOrganizationTest>>#testClassFastCreationInDifferentCategories",				"ClassFactoryWithOrganizationTest>>#testMultipleClassCreation",				"ClassFactoryWithOrganizationTest>>#testSingleClassFastCreation",				"ClassHierarchyPrinter>>#printSubclassesOf:",				"ClassHierarchyTest>>#testSubclassInstVar",				"ClassHierarchyTest class>>#fixSlotScope",				"ClassOrganization>>#initializeClass:",				"ClassOrganization>>#copyFrom:",				"ClassOrganization>>#removeEmptyCategories",				"ClassOrganization>>#classify:under:suppressIfDefault:",				"ClassOrganization>>#renameCategory:toBe:",				"ClassOrganization>>#cleanUpCategoriesForClass:",				"ClassRenameFixTest>>#removeEverythingInSetFromSystem:",				"ClassTest>>#tearDown",				"ClassTest>>#testReferencedClasses",				"ClyAbstractClassScope>>#methodGroupsDo:",				"ClyAbstractClassScope>>#methodGroupProvidersDo:",				"ClyAbstractClassScope>>#processDynamicMethodGroups:by:",				"ClyAbstractClassScope>>#instanceVariablesOf:do:",				"ClyAccrossWindowNavigationState>>#createBrowser",				"ClyActiveBreakpointsQueryTest>>#tearDown",				"ClyAddConditionalBreakpointCommand>>#rewriteASTToSimulateExecutionInADifferentContext:",				"ClyAllBasisCritiqueQuery>>#analyzedObjectsDo:",				"ClyAllMethodGroup>>#importMethod:",				"ClyAsyncBrowserQueryResultAdapter>>#prepareItems:",				"ClyAsyncBrowserQueryResultAdapter>>#findItemsSimilarTo:",				"ClyBothMetaLevelClassScope>>#classesDo:",				"ClyBrowserContext>>#initializeForBrowserStateSnapshot",				"ClyBrowserMorph>>#update",				"ClyBrowserMorph>>#decorateTool:",				"ClyBrowserMorph>>#initializeNavigationPanel",				"ClyBrowserMorph>>#navigationContextsDo:",				"ClyBrowserMorph>>#windowIsClosing",				"ClyBrowserQueryResult>>#itemsStartingAt:count:",				"ClyBrowserQueryResult>>#itemsWhere:",				"ClyBrowserQueryResult>>#findItemsSimilarTo:",				"ClyBrowserToolMorph>>#cleanAfterRemove",				"ClyBrowserToolMorph>>#applyDecorations",				"ClyClassGroup>>#removeWithClasses",				"ClyClassGroup>>#importClasses:",				"ClyClassHierarchyMap>>#rootsDo:",				"ClyClassHierarchyMap>>#build",				"ClyClassHierarchyMap>>#allChildrenOf:do:",				"ClyClassHierarchyMap>>#allChildrenOf:depth:do:",				"ClyClassHierarchyScope>>#methodsDo:",				"ClyClassHierarchyScope>>#classesDo:",				"ClyClassSideScope>>#methodsDo:",				"ClyClassVariable>>#detectDefiningClassFrom:ifAbsent:",				"ClyClassWithTraits class>>#removeFromSystem:",				"ClyClassWithTraits class>>#traitComposition:",				"ClyClassWithTraits class>>#fileOutLocalMethodsInCategory:on:",				"ClyClassWithTraits class>>#recategorizeSelector:from:to:",				"ClyClassWithTraits class>>#doRebuildMethodDictionary",				"ClyCollapsedDataSource>>#findDataSourceSameAs:ifNone:",				"ClyCollapsedDataSource>>#forceFullUpdate",				"ClyCollapsedDataSource>>#globalPositionOf:",				"ClyCollapsedDataSource>>#close",				"ClyCollapsedDataSource>>#openOn:",				"ClyCollapsedDataSource>>#elementAt:",				"ClyCompositeQuery>>#collectMetadataOf:by:",				"ClyCompositeQuery>>#fixStateBeforeExecution",				"ClyCompositeQuery>>#printExtraInfoOn:",				"ClyCompositeQuery>>#decorateMethodGroupTableCell:of:",				"ClyCompositeQuery>>#decorateItemGroup:",				"ClyCompositeQuery>>#decorateResultMethodEditor:",				"ClyCompositeQueryTest>>#testFixingStateBeforeExecutionShouldFixSubqueriesState",				"ClyCompositeScope>>#classesDo:",				"ClyCompositeScope>>#printDescriptionOn:",				"ClyCompositeScope>>#bindTo:",				"ClyCompositeScope>>#packagesDo:",				"ClyCompositeScope>>#asRBEnvironment",				"ClyCompositeScope>>#collectAllClasses",				"ClyCompositeScopeTest>>#testAdoptQuery",				"ClyConvertMethodGroupToTagCommand>>#execute",				"ClyCriticDecorator>>#adoptBrowserToolLayout",				"ClyCriticalTextSegmentMorph>>#addItemToMenu:",				"ClyDataSourceSelection>>#updateIfDirty",				"ClyDataSourceSelection>>#groupItemsByType",				"ClyDataSourceSelection>>#printOn:",				"ClyDataSourceUpdateScheduler>>#runUpdateFor:",				"ClyDefaultSystemEnvironmentPlugin>>#checkPackageHasClassGroups:",				"ClyDesiredSelection>>#checkItemsOfCurrentSelection:",				"ClyExpandedDataSource>>#globalPositionOf:",				"ClyExpandedDataSource>>#elementAt:",				"ClyExtensionLastSortedClassResult>>#buildExtensionItemsFrom:",				"ClyExtensionLastSortedClassResult>>#fillWith:",				"ClyFailedTestMethodsQuery>>#buildResult:",				"ClyFileOutCommand>>#execute",				"ClyFullEnvironmentUpdateStrategy>>#publishCollectedChanges",				"ClyGroupedCritiqueResult>>#fillWith:",				"ClyGroupedExtendingPackagesResult>>#fillWith:",				"ClyGroupedVariablesResult>>#groupVariablesByTypeAndDefinition:",				"ClyGroupedVariablesResult>>#fillWithVariables:type:",				"ClyGroupedVariablesTest>>#assertVars:",				"ClyHierarchicalSystemItemsResult>>#fillWith:",				"ClyHierarchicalSystemItemsResult>>#buildItemsPerClassFrom:",				"ClyHierarchicallySortedClassesResult>>#buildItemFor:from:depth:",				"ClyInheritedMethodGroup>>#decorateTableCell:of:",				"ClyJumpToTestClassCommand class>>#removeFromSystem:",				"ClyJumpToTestClassCommand class>>#traitComposition:",				"ClyJumpToTestClassCommand class>>#fileOutLocalMethodsInCategory:on:",				"ClyJumpToTestClassCommand class>>#recategorizeSelector:from:to:",				"ClyJumpToTestClassCommand class>>#doRebuildMethodDictionary",				"ClyJumpToTestMethodCommand>>#execute",				"ClyLocalClassScope>>#methodsDo:",				"ClyLocalClassScope>>#classesDo:",				"ClyMainItemCellMorph>>#buildWithFullIndentation",				"ClyMainItemCellMorph>>#buildWithLabelIndentation",				"ClyMergedHierarchy>>#sortFunction:",				"ClyMergedHierarchy>>#buildParentMap:for:",				"ClyMetaLinkInstallationPresenter>>#initializePresenter",				"ClyMethodCallCountersQueryTest>>#tearDown",				"ClyMethodCodeEditorToolMorph>>#decorateByCritic:",				"ClyMethodCodeEditorToolMorph>>#applyDecorations",				"ClyMethodEditorToolMorph>>#tagEditingMethod:",				"ClyMethodEditorToolMorph>>#textChanged:",				"ClyMethodGroup>>#fileOut",				"ClyMethodGroup>>#importMethods:",				"ClyMethodGroup>>#convertToMethodTag:",				"ClyMethodGroup>>#removeWithMethods",				"ClyMethodScope>>#methodsDo:",				"ClyMethodWatchQueryTest>>#tearDown",				"ClyMoveMethodGroupToClassCommand>>#execute",				"ClyMoveMethodGroupsToPackageCommand>>#execute",				"ClyMultipleClassRelationScope>>#classesRelatedTo:do:",				"ClyNavigationEnvironment>>#handleSystemChange:",				"ClyNavigationEnvironment>>#detachFromSystem",				"ClyNavigationEnvironment>>#attachToSystem",				"ClyNavigationEnvironment>>#pluginsDo:",				"ClyNavigationEnvironment class>>#reset",				"ClyNavigationEnvironment class>>#installNewPlugin:",				"ClyNoTagClassGroup>>#importClass:",				"ClyNoTagClassGroup>>#renameClassTagTo:",				"ClyNoTagMethodGroup>>#renameMethodTagTo:",				"ClyNotebookManager>>#updateTabsWith:",				"ClyNotebookManager>>#restoreSelectedTools:",				"ClyNotebookManager>>#updateToolsForChangedEnvironment",				"ClyNotebookManager>>#windowIsClosing",				"ClyNotebookMorph>>#themeChanged",				"ClyNotebookPageMorph>>#themeChanged",				"ClyOverriddenMethodTableDecorator class>>#decorateTableCell:withCommands:inContext:",				"ClyPackageExtensionScope>>#packagesDo:",				"ClyPackageExtensionScope>>#methodsDo:",				"ClyPackageScope>>#packagesDo:",				"ClyPackageScope>>#classGroupProvidersDo:",				"ClyPackageScope>>#methodsDo:",				"ClyPackageScope>>#classesDo:",				"ClyPackageScope>>#includesClassGroupsAffectedBy:",				"ClyProjectScope>>#classesDo:",				"ClyProjectScope>>#packagesDo:",				"ClyProjectScope>>#projectsDo:",				"ClyQueryBrowserContext>>#selectedClassItems",				"ClyQueryBrowserContext>>#selectedPackageItems",				"ClyQueryResult>>#rawItemsDo:",				"ClyRemoveDebuggingCommand>>#execute",				"ClyRemoveMethodGroupCommand>>#execute",				"ClyRunTestsForPackageOrClassGroupCommand>>#runTestsOf:",				"ClyRunTestsForPackageOrClassGroupCommand>>#execute",				"ClyRunTestsFromClassesCommand>>#execute",				"ClyRunTestsFromMethodsCommand>>#targetTestCasesFor:",				"ClyRunTestsFromMethodsCommand>>#runTestItem:",				"ClyRunTestsFromMethodsCommand>>#execute",				"ClyRunTestsFromMethodsCommand>>#defaultMenuIcon",				"ClyScope>>#printBasisOn:",				"ClySwitchQueryScopeCommand>>#fillContextMenu:using:",				"ClySystemEnvironmentScope>>#packagesDo:",				"ClySystemEnvironmentScope>>#projectsDo:",				"ClySystemEnvironmentScope>>#classesDo:",				"ClySystemEnvironmentScope>>#methodsDo:",				"ClySystemEnvironmentScope>>#processesDo:",				"ClyTabManager>>#updateTabsWith:",				"ClyTabManager>>#restoreSelectedTools:",				"ClyTabManager>>#updateToolsForChangedEnvironment",				"ClyTabManager>>#windowIsClosing",				"ClyTaggedClassGroup>>#renameClassTagTo:",				"ClyTaggedClassGroupProvider>>#classGroupsIn:do:",				"ClyTaggedMethodGroup>>#renameMethodTagTo:",				"ClyTaggedMethodGroupProvider>>#buildGroupsFrom:",				"ClyTestedEnvironmentPluginTest>>#testFindingTestCoveringMethod",				"ClyTextEditorToolMorph>>#findAnyString:in:",				"ClyTraitChild1 classTrait>>#traitComposition:",				"ClyTraitChild1 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild1 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitChild1 classTrait>>#doRebuildMethodDictionary",				"ClyTraitChild2 classTrait>>#traitComposition:",				"ClyTraitChild2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild2 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitChild2 classTrait>>#doRebuildMethodDictionary",				"ClyTraitChild2Child classTrait>>#traitComposition:",				"ClyTraitChild2Child classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild2Child classTrait>>#recategorizeSelector:from:to:",				"ClyTraitChild2Child classTrait>>#doRebuildMethodDictionary",				"ClyTraitChild3 classTrait>>#traitComposition:",				"ClyTraitChild3 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitChild3 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitChild3 classTrait>>#doRebuildMethodDictionary",				"ClyTraitRoot1 classTrait>>#traitComposition:",				"ClyTraitRoot1 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitRoot1 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitRoot1 classTrait>>#doRebuildMethodDictionary",				"ClyTraitRoot2 classTrait>>#traitComposition:",				"ClyTraitRoot2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"ClyTraitRoot2 classTrait>>#recategorizeSelector:from:to:",				"ClyTraitRoot2 classTrait>>#doRebuildMethodDictionary",				"ClyTraitUserScope class>>#classesRelatedTo:do:",				"ClyTypedScope>>#withExtraBasisObjects:",				"CmCommand class>>#removeFromSystem:",				"CmCommand class>>#commandClassesFromPragma:",				"CmCommand class>>#traitComposition:",				"CmCommand class>>#fileOutLocalMethodsInCategory:on:",				"CmCommand class>>#recategorizeSelector:from:to:",				"CmCommand class>>#doRebuildMethodDictionary",				"CmCommandDecorator class>>#removeFromSystem:",				"CmCommandDecorator class>>#traitComposition:",				"CmCommandDecorator class>>#fileOutLocalMethodsInCategory:on:",				"CmCommandDecorator class>>#recategorizeSelector:from:to:",				"CmCommandDecorator class>>#doRebuildMethodDictionary",				"CmCommandGroup class>>#removeFromSystem:",				"CmCommandGroup class>>#traitComposition:",				"CmCommandGroup class>>#fileOutLocalMethodsInCategory:on:",				"CmCommandGroup class>>#recategorizeSelector:from:to:",				"CmCommandGroup class>>#doRebuildMethodDictionary",				"CmCommandGroupDecorator class>>#removeFromSystem:",				"CmCommandGroupDecorator class>>#traitComposition:",				"CmCommandGroupDecorator class>>#fileOutLocalMethodsInCategory:on:",				"CmCommandGroupDecorator class>>#recategorizeSelector:from:to:",				"CmCommandGroupDecorator class>>#doRebuildMethodDictionary",				"CmTDecorable classTrait>>#traitComposition:",				"CmTDecorable classTrait>>#fileOutLocalMethodsInCategory:on:",				"CmTDecorable classTrait>>#recategorizeSelector:from:to:",				"CmTDecorable classTrait>>#doRebuildMethodDictionary",				"CmTDecorator classTrait>>#traitComposition:",				"CmTDecorator classTrait>>#fileOutLocalMethodsInCategory:on:",				"CmTDecorator classTrait>>#recategorizeSelector:from:to:",				"CmTDecorator classTrait>>#doRebuildMethodDictionary",				"CmTWithBasicNameAndDescription classTrait>>#traitComposition:",				"CmTWithBasicNameAndDescription classTrait>>#fileOutLocalMethodsInCategory:on:",				"CmTWithBasicNameAndDescription classTrait>>#recategorizeSelector:from:to:",				"CmTWithBasicNameAndDescription classTrait>>#doRebuildMethodDictionary",				"CmdCommand>>#executeRefactorings",				"CmdMenu>>#asSpMenuPresenter",				"CmdMenuGroup>>#inlineContextMenuItemsInto:",				"CmdMenuGroup>>#buildBrowserToolbar:",				"CmdMenuGroup>>#findGroupLike:ifExists:",				"CmdMenuGroup>>#synchronizeContentWith:",				"CmdMenuGroup>>#buildContextSubMenuIn:",				"CmdMenuGroup>>#registerContextMenuItemsWithBuilder:",				"CmdMenuGroup>>#allItemsWhich:",				"CmdMenuGroup>>#addToMenuPresenter:",				"CmdShortcutActivation class>>#buildSettingsFor:on:",				"CoBenchmarkPackage>>#methodsDo:",				"CoClassVariableFetcher>>#entriesDo:",				"CoCollectionFetcher>>#entriesDo:",				"CoFetcherSequence>>#reset",				"CoFetcherSequence>>#filter:",				"CoFetcherSequence>>#entriesDo:",				"CoFetcherSequence>>#context:",				"CoInitializeInferencedMessageHeuristic>>#buildFetcherFor:inContext:",				"CoInstanceVariableFetcher>>#entriesDo:",				"CoMethodVariableFetcher>>#methodVariableNamesDo:",				"CoMockClass>>#selectorsDo:",				"CoMockClass>>#selectors:",				"CoMockSystemNavigation>>#allClassNamesStartingWith:do:",				"CoNarrowHistoryFetcher>>#entriesDo:",				"CoSharedPoolVariableFetcher>>#entriesDo:",				"CoStaticBenchmarks>>#gtResultsTableIn:",				"CoStatistics>>#averageTypedCharacters",				"CoTypeInferencer>>#visitBlockNode:",				"CoTypeInferencer>>#inferFrom:typeGetters:",				"CoTypeInferencer>>#visitCascadeNode:",				"CoTypeInferencer>>#visitMethodNode:",				"CoTypeInferencer>>#inferMethod:",				"CodeImporter>>#evaluate",				"Collection>>#removeAllFoundIn:",				"Collection>>#removeFromMetacelloPackages:",				"Collection>>#includesSubstringAnywhere:",				"Collection>>#inject:into:",				"Collection>>#fillFrom:with:",				"Collection>>#collect:thenDo:",				"Collection>>#groupedBy:",				"Collection>>#asByteArray",				"Collection>>#reject:thenDo:",				"Collection>>#associationsDo:",				"Collection>>#allSatisfy:",				"Collection>>#addAll:",				"Collection>>#removeAll:",				"Collection>>#do:displayingProgress:every:",				"Collection>>#detectMin:",				"Collection>>#asArray",				"Collection>>#detect:ifFound:ifNone:",				"Collection>>#identityIncludes:",				"Collection>>#addToMetacelloPackages:",				"Collection>>#noneSatisfy:",				"Collection>>#removeFromMetacelloRepositories:",				"Collection>>#includesAll:",				"Collection>>#doª:",				"Collection>>#collect:",				"Collection>>#withIntegersCollectionDo:",				"Collection>>#hash",				"Collection>>#removeAll",				"Collection>>#size",				"Collection>>#mergeIntoMetacelloRepositories:",				"Collection>>#withIndexDo:",				"Collection>>#occurrencesOf:",				"Collection>>#detectMax:",				"Collection>>#flattenOn:",				"Collection>>#storeOn:",				"Collection>>#collectAll:",				"Collection>>#flatCollect:as:",				"Collection>>#do:without:",				"Collection>>#anySatisfy:",				"Collection>>#select:thenDo:",				"Collection>>#mergeIntoMetacelloPackages:",				"Collection>>#removeAllSuchThat:",				"Collection>>#select:",				"Collection>>#do:separatedBy:",				"Collection>>#includesAny:",				"Collection>>#asKeyCombination",				"Collection>>#addToMetacelloRepositories:",				"Collection>>#anyOne",				"Collection>>#count:",				"CollectionCombinator>>#combineFromIdx:",				"CollectionRootTest>>#testDoWithout",				"CollectionRootTest>>#testDo2",				"CollectionRootTest>>#testBasicCollect",				"CollectionRootTest>>#testDoSeparatedBy",				"CollectionRootTest>>#testSize",				"CollectionRootTest class>>#removeFromSystem:",				"CollectionRootTest class>>#traitComposition:",				"CollectionRootTest class>>#fileOutLocalMethodsInCategory:on:",				"CollectionRootTest class>>#recategorizeSelector:from:to:",				"CollectionRootTest class>>#doRebuildMethodDictionary",				"Color>>#stonOn:",				"ColorChooserMorph class>>#removeFromSystem:",				"ColorChooserMorph class>>#traitComposition:",				"ColorChooserMorph class>>#fileOutLocalMethodsInCategory:on:",				"ColorChooserMorph class>>#recategorizeSelector:from:to:",				"ColorChooserMorph class>>#doRebuildMethodDictionary",				"ColorForm>>#storeOn:",				"ColorTest>>#testAsHexString",				"CommandLineUIManager>>#quitFrom:withMessage:",				"CompiledCode>>#primitiveErrorVariableName",				"CompiledCode>>#withAllNestedLiteralsDo:",				"CompiledCodeTest>>#method1",				"CompiledCodeTest>>#testHasSelectorSpecialSelectorIndex",				"CompiledMethod>>#postCopy",				"CompiledMethod>>#cachePragmas",				"CompiledMethod class>>#cleanUpSourceInTrailers",				"CompiledMethodTest>>#testComparison",				"CompiledMethodTest>>#testCopyWithTrailerBytes",				"CompiledMethodTest>>#testCopy",				"CompiledMethodTrailer>>#qCompress:",				"CompletionEngine>>#smartNeedExtraRemovePairedIn:for:opposite:at:",				"CompletionEngineTest>>#testSmartCharactersOppositeOf",				"CompletionEngineTest>>#testSmartBackspace",				"CompletionEngineTest>>#testSmartCharacterPairForIfAbsent",				"ComplexTest>>#testArcCosh",				"ComplexTest>>#testArcTanh",				"ComplexTest>>#testArcSinh",				"ComplexTest>>#testArcSin",				"ComplexTest>>#testArcTan",				"ComplexTest>>#testArcCosPlusArcSin",				"ComplexTest>>#testArcCos",				"ComplexTest>>#testCos2PlusSin2",				"ComplexTest>>#testCosh2MinusSinh2",				"ComplexUnit>>#calculateBaseUnits",				"ComposableMorph class>>#removeFromSystem:",				"ComposableMorph class>>#traitComposition:",				"ComposableMorph class>>#fileOutLocalMethodsInCategory:on:",				"ComposableMorph class>>#recategorizeSelector:from:to:",				"ComposableMorph class>>#doRebuildMethodDictionary",				"ComposablePresenter>>#instantiatePresenters:",				"ComposablePresenter>>#neglectMenuModel:",				"ComposablePresenter>>#registerKeyStrokesForNextFor:",				"ComposablePresenter>>#applyMenuModel:",				"ComposablePresenter>>#registerKeyStrokesForPreviousFor:",				"CompositeAnnotationContext>>#printOn:",				"CompositeBorderStyle>>#frameRectangle:on:",				"CompositeFillStyle>>#fillRectangle:on:",				"CompoundUnit>>#negativeExponentsCount",				"CompoundUnit>>#positiveExponentsCount",				"CompressedBoundaryShape>>#bounds",				"ConfigurationCommandLineHandler>>#printConfigurations:",				"ConfigurationCommandLineHandler>>#printMetacelloProjectDetails:",				"ConfigurationOf class>>#unloadMetacello",				"ConfigurationOf class>>#bootstrapMetacelloFrom:",				"ConfigurationOf class>>#ensureMetacello:",				"ConnectionQueue>>#destroy",				"ConnectionQueue>>#pruneStaleConnections",				"Context>>#exceptionsToCaptureWhenStepping",				"Context>>#shortStack",				"Context>>#longStack",				"Context>>#debugStack:on:",				"Context class>>#allInstancesDo:",				"ContextTest>>#testJump",				"ContinuationTest>>#testBlockTemps",				"ContinuationTest>>#testBlockVars",				"CornerRounder>>#saveBitsUnderCornersOf:on:in:corners:",				"CornerRounder>>#tweakCornersOf:on:in:borderWidth:corners:",				"CornerRounder>>#tweakShadowCornersOf:on:in:borderWidth:corners:",				"CoverageDemo>>#removeMetalink",				"CoverageDemo>>#installMetalink",				"CoverageDemo>>#updateRubricStyle",				"CoverageDemo>>#addCards",				"CriticBrowser>>#addRuleToFalsePositive",				"CriticBrowser>>#reapplyRule:",				"CriticBrowser>>#classAdded:",				"CriticBrowser>>#reapplyThisRule",				"CriticBrowser>>#methodAdded:",				"CriticBrowser>>#applyRules",				"CriticBrowser>>#removeRuleToFalsePositive",				"CriticBrowserRulesGroup>>#do:",				"CriticsCache>>#removeRule:",				"CriticsCache>>#itemRemoved:",				"CriticsCache>>#addFalsePositiveClass:",				"CriticsCache>>#logFalsePositiveRulesInManifest",				"CriticsCache>>#logFalsePositiveClassInManifest",				"CriticsCache>>#removeFalsePositiveClass:",				"CriticsCache>>#initCache",				"CriticsCache>>#removeFalsePositiveRule:forPackage:",				"CriticsCache>>#addFalsePositiveRule:forPackage:",				"CursorWithMask class>>#derivedFrom:",				"CustomHelpHelpBuilder>>#createTopicFrom:",				"DADependenciesHTMLPublisher>>#publishWarnings",				"DADependencyChecker>>#computeTransitiveDependenciesOf:visitedPackages:",				"DADependencyChecker>>#computeImageDependencies",				"DADependencyChecker>>#shortestPathToPackageIntroducingDependency:startingFrom:",				"DAMessageSendAnalyzer>>#missingMethodsWithPotentialMatch",				"DAMessageSendAnalyzer>>#missingMethodsWithPotentialMatchAfterManuallyResolvedDependenciesAddition",				"DAMessageSendDependencyNode>>#label",				"DAPackage>>#dependenciesFrom:",				"DAPackageAnalyzerTreePresenter>>#actionOnRemovePackage",				"DAPackageAnalyzerWindow>>#panelMorphFrom:",				"DAPackageCycle>>#removeOutgoingDependencies",				"DAPackageCycle>>#removeOutgoingDependencies:",				"DAPackageCycle>>#addAllPackages:",				"DAPackageCycleDetector>>#findCycles:",				"DAPackageCycleDetector>>#startBfsFrom:For:",				"DAPackageCycleGenerator>>#buildEdges",				"DAPackageDependenciesWelcome>>#actionOnRemovePackage",				"DAPackageRelationGraph>>#addExtensionDependencies:",				"DAPackageRelationGraph>>#initializeWithPackages:",				"DAPackageRelationGraph>>#clearAllDependencies",				"DAPackageRelationGraph>>#removeOutgoingDependencies:",				"DAPackageRelationGraph>>#combineDependencies:",				"DAPackageRelationGraph>>#usersOf:",				"DAPackageRelationGraph>>#package:classesDo:",				"DAPackageRelationGraph>>#addPackages:",				"DAPackageRelationGraph>>#allExtensionDependencies",				"DAPackageRelationGraph>>#computeStaticDependencies",				"DAPackageRelationGraph>>#findReferencesIn:for:",				"DAPackageRelationGraph>>#allReferenceDependencies",				"DAPackageRelationGraph>>#addMessageSendDependencies:",				"DAPackageRelationGraph>>#outgoing",				"DAPackageRelationGraph>>#refreshGraph",				"DAPackageRelationGraph>>#predecessors:",				"DAPackageRelationGraph>>#addTraitDependencies:",				"DAPackageRelationGraph>>#addReferenceDependencies:",				"DAPackageRelationGraph>>#allDependentPackagesFromSeenPackages",				"DAPackageRelationGraph>>#successors:",				"DAPackageRelationGraphDiff>>#lookUpForNewPackages",				"DAPackageRelationGraphDiff>>#lookUpForUndeterminatePackages",				"DAPackageRelationGraphDiff>>#lookUpForNewDependentPackages:with:from:",				"DAPackageRelationGraphDiff>>#makeDependentPackagesDiff",				"DAPackageRelationGraphDiff>>#lookUpForRemovedDependentPackages:with:from:",				"DAPackageRelationGraphDiff>>#lookUpForUndeterminateDependentPackagesFrom:",				"DAPackageRelationGraphDiff>>#lookUpForRemovedPackages",				"DAPackageRelationGraphGenerator>>#buildEdges",				"DAPackageRelationGraphTest>>#testSuccessors",				"DAPackageRelationGraphTest>>#testRemoveInternalDependencies",				"DAPackageRelationGraphTest>>#testPredecessors",				"DAPackageRelationGraphTest>>#testIncludedPackages",				"DAPackageRelationGraphTest>>#testPackages",				"DAPackageRelationGraphTest>>#testCombineDependencies",				"DAPackageRelationGraphTest>>#testRemoveOutgoingDependencies",				"DAPackageRelationGraphTest>>#testDependenciesFrom",				"DATarjanAlgorithm>>#traverseChildrenOf:",				"DTCommentTestConfiguration>>#asTestSuite",				"DTDefaultPluginPresenter class>>#buildPackageGroupWith:",				"DTTestCoveragePlugin>>#runForConfiguration:",				"DTTestCoveragePlugin>>#suiteFor:",				"DTTestsRunnerPlugin>>#joinTestResult:with:",				"DTTestsRunnerPlugin>>#removeTests:from:",				"DamageRecorder>>#recordInvalidRect:",				"DateAndTimeTest>>#testAsDateAndTime",				"DateTest>>#testNameOfDay",				"DebuggerSettings class>>#debuggerRankSettingsOn:",				"DeepCopier>>#checkDeep",				"DeepCopier>>#fixDependents",				"DeflateStream>>#next:putAll:startingAt:",				"DelayBenchmark>>#trialConcurrent:priority:maxDuration:fromSeed:",				"DelayBenchmark>>#bench",				"DelayBenchmark class>>#runAll",				"DependentsArray>>#copyWith:",				"DependentsArray>>#first",				"DialogWindowMorph>>#acceptTextMorphs",				"DialogWindowMorph>>#newButtonRow",				"Dictionary>>#associationsDo:",				"Dictionary>>#includesIdentity:",				"Dictionary>>#removeUnreferencedKeys",				"Dictionary>>#printElementsOn:",				"Dictionary>>#keysAndValuesRemove:",				"Dictionary>>#includes:",				"DictionaryTest>>#testSelect",				"DictionaryTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"DictionaryTest>>#testValuesDo",				"DictionaryTest>>#assertNoDuplicates:whenConvertedTo:",				"DictionaryTest>>#testAsStringOnDelimiterOne",				"DictionaryTest>>#testCopyNonEmptyWith",				"DictionaryTest>>#test0FixtureOccurrencesForMultiplinessTest",				"DictionaryTest>>#testAssociations",				"DictionaryTest>>#test0FixtureDictionaryIncludesIdentity",				"DictionaryTest>>#testAsStringOnDelimiterMore",				"DictionaryTest>>#testPrintOnDelimiterLast",				"DictionaryTest>>#testKeys",				"DictionaryTest>>#testNewFromPairs",				"DictionaryTest>>#testAsCommaStringMore",				"DictionaryTest>>#testDifferenceWithNonNullIntersection",				"DictionaryTest>>#testKeysSortedSafely",				"DictionaryTest>>#test0FixtureOccurrencesTest",				"DictionaryTest>>#testDo",				"DictionaryTest>>#testAssociationsSelect",				"DictionaryTest>>#testPrintOn",				"DictionaryTest>>#testValues",				"DictionaryTest>>#testOtherDictionaryEquality",				"DictionaryTest>>#testAsStringOnDelimiterLastOne",				"DictionaryTest>>#testPrintOnDelimiter",				"DictionaryTest>>#testDictionaryPublicProtocolCompatibility",				"DictionaryTest>>#testPrintElementsOn",				"DictionaryTest>>#testAsSortedCollection",				"DictionaryTest>>#testAsByteArray",				"DictionaryTest>>#testCopyNonEmptyWithoutAll",				"DictionaryTest>>#testAssociationsDo",				"DictionaryTest>>#testAsCommaStringOne",				"DictionaryTest>>#testAsStringOnDelimiterLastMore",				"DictionaryTest>>#testIntersectionItself",				"DictionaryTest>>#testCopyEmptyWithoutAll",				"DictionaryTest>>#testDictionaryConcatenationWithCommonKeysDifferentValues",				"DictionaryTest>>#test0CopyTest",				"DictionaryTest>>#testDifference",				"DictionaryTest>>#testKeysAndValuesDo",				"DictionaryTest>>#testCopyNonEmpty",				"DictionaryTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"DictionaryTest>>#testCollect",				"DictionaryTest>>#testDifferenceWithSeparateCollection",				"DictionaryTest>>#testKeysDo",				"DictionaryTest>>#testAsSortedCollectionWithSortBlock",				"DiffBuilder>>#applyDiff:origin:dest:",				"DiffJoinMorph>>#compositeText",				"DiffJoinMorph>>#dstOffset:",				"DiffJoinMorph>>#drawOn:",				"DiffJoinMorph>>#drawOnAthensCanvas:",				"DiffJoinMorph>>#srcOffset:",				"DiffJoinMorph>>#updateMappings",				"DiffMapMorph>>#drawOnAthensCanvas:",				"DiffMapMorph>>#drawOn:",				"DiffMorph>>#calculatedJoinMappings",				"DiffVisitor>>#visitPatch:",				"DigitalSignatureAlgorithm class>>#timeDecode:",				"DisabledBreakpointIconStyler>>#iconBlock:",				"DiskFileAttributesTest>>#attributesCollectionDo:",				"DisplayMedium>>#border:margins:rule:fillColor:",				"DisplayScreen>>#flashAll:andWait:",				"DocCommentsReleaseTest class>>#buildSuite",				"DockingBarMorph>>#moveSelectionRight:event:",				"DockingBarMorph>>#noteNewOwner:",				"DoubleLinkedList>>#collect:",				"DoubleLinkedList>>#asArray",				"DoubleLinkedList>>#stNoneSatisfy:",				"DoubleLinkedList>>#addAll:",				"DoubleLinkedList>>#includes:",				"DoubleLinkedList>>#select:",				"DoubleLinkedList>>#reject:",				"DoubleLinkedListTest>>#testEmpty",				"DoubleLinkedListTest>>#testDo",				"DropListMorph class>>#removeFromSystem:",				"DropListMorph class>>#traitComposition:",				"DropListMorph class>>#fileOutLocalMethodsInCategory:on:",				"DropListMorph class>>#recategorizeSelector:from:to:",				"DropListMorph class>>#doRebuildMethodDictionary",				"Duration>>#printHumanReadableOn:",				"DurationTest>>#testMilliSeconds",				"DurationTest>>#testReadFromNoException",				"DynamicComposablePresenter>>#widgetsDo:",				"DynamicLeftToRightColumnsLayout>>#buildLayoutFor:",				"DynamicLeftToRightRowsLayout>>#instVarNamesFrom:",				"DynamicPresentersListBuilder>>#instVarToModelObjectDo:",				"DynamicTopToBottomColumnsLayout>>#instVarNamesFrom:",				"DynamicTopToBottomRowsLayout>>#buildLayoutFor:",				"EDDebuggingAPI class>>#terminateProcesses:",				"EDDebuggingAPITest>>#testTerminateProcesses",				"EDDebuggingAPITest>>#testAllRunningProcesses",				"EDEmergencyDebugger class>>#removeFromSystem:",				"EDEmergencyDebugger class>>#traitComposition:",				"EDEmergencyDebugger class>>#fileOutLocalMethodsInCategory:on:",				"EDEmergencyDebugger class>>#recategorizeSelector:from:to:",				"EDEmergencyDebugger class>>#doRebuildMethodDictionary",				"EFFormatter>>#visitEnglobingErrorNode:",				"EFFormatter>>#formatBlockArgumentsFor:",				"EFFormatter>>#formatPragmasFor:",				"EFFormatter>>#formatStatementCommentsFor:",				"EFFormatter>>#formatTemporariesFor:",				"EFFormatter>>#resizeStringDependingOnWindowSizeFor:",				"EFFormatter>>#formatBlockCommentFor:",				"EFFormatter>>#formatCommentsFor:",				"EFFormatter>>#formatMethodCommentFor:",				"EllipseMorph class>>#removeFromSystem:",				"EllipseMorph class>>#traitComposition:",				"EllipseMorph class>>#fileOutLocalMethodsInCategory:on:",				"EllipseMorph class>>#recategorizeSelector:from:to:",				"EllipseMorph class>>#doRebuildMethodDictionary",				"EmbeddedFreeTypeFontDescription class>>#installAllFontsIn:",				"EmbeddedFreeTypeFontInstaller>>#embedFilesInDirectory:",				"EmbeddedFreeTypeFontInstaller>>#installAllFontsIn:",				"EmbeddedMenuMorph>>#moveSelectionDown:event:",				"EmbeddedMenuMorph>>#selectPrefix:",				"EmbeddedMenuMorph>>#allSiblingItems",				"EmbeddedMenuMorph>>#selectItem:event:",				"EmbeddedMenuMorph>>#selectMatch:",				"EpApplyPreviewer class>>#removeFromSystem:",				"EpApplyPreviewer class>>#traitComposition:",				"EpApplyPreviewer class>>#fileOutLocalMethodsInCategory:on:",				"EpApplyPreviewer class>>#recategorizeSelector:from:to:",				"EpApplyPreviewer class>>#doRebuildMethodDictionary",				"EpApplyVisitor class>>#removeFromSystem:",				"EpApplyVisitor class>>#traitComposition:",				"EpApplyVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpApplyVisitor class>>#recategorizeSelector:from:to:",				"EpApplyVisitor class>>#doRebuildMethodDictionary",				"EpAsEpiceaRingDefinitionTest>>#testPackageIsString",				"EpBrowseVisitor class>>#removeFromSystem:",				"EpBrowseVisitor class>>#traitComposition:",				"EpBrowseVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpBrowseVisitor class>>#recategorizeSelector:from:to:",				"EpBrowseVisitor class>>#doRebuildMethodDictionary",				"EpEntryContentVisitor class>>#removeFromSystem:",				"EpEntryContentVisitor class>>#traitComposition:",				"EpEntryContentVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpEntryContentVisitor class>>#recategorizeSelector:from:to:",				"EpEntryContentVisitor class>>#doRebuildMethodDictionary",				"EpHasImpactVisitor class>>#removeFromSystem:",				"EpHasImpactVisitor class>>#traitComposition:",				"EpHasImpactVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpHasImpactVisitor class>>#recategorizeSelector:from:to:",				"EpHasImpactVisitor class>>#doRebuildMethodDictionary",				"EpInverseVisitor class>>#removeFromSystem:",				"EpInverseVisitor class>>#traitComposition:",				"EpInverseVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpInverseVisitor class>>#recategorizeSelector:from:to:",				"EpInverseVisitor class>>#doRebuildMethodDictionary",				"EpLog>>#cacheEntry:",				"EpLogBrowserOperationFactory>>#revertCodeChangesInPreviewMode",				"EpLogBrowserOperationFactory>>#applyCodeChanges",				"EpLogBrowserPresenter>>#addMenuItemsForSelectedItemsIn:",				"EpLogBrowserPresenter>>#inspectSelection",				"EpLogBrowserPresenter>>#filtersSubMenu",				"EpLogNode>>#populateReferencedNodesWith:",				"EpLostChangesDetectorTest>>#testDetectThreeChanges",				"EpMonitor>>#disable",				"EpMonitor>>#subscribeToSystemAnnouncer",				"EpMonitor>>#subscribeToJobAnnouncer",				"EpMonitor>>#behaviorRemoved:",				"EpOmbuExporter>>#fileOut:",				"EpReferenceFixerVisitor class>>#removeFromSystem:",				"EpReferenceFixerVisitor class>>#traitComposition:",				"EpReferenceFixerVisitor class>>#fileOutLocalMethodsInCategory:on:",				"EpReferenceFixerVisitor class>>#recategorizeSelector:from:to:",				"EpReferenceFixerVisitor class>>#doRebuildMethodDictionary",				"EpTCodeChangeVisitor classTrait>>#traitComposition:",				"EpTCodeChangeVisitor classTrait>>#fileOutLocalMethodsInCategory:on:",				"EpTCodeChangeVisitor classTrait>>#recategorizeSelector:from:to:",				"EpTCodeChangeVisitor classTrait>>#doRebuildMethodDictionary",				"EpTEventVisitor classTrait>>#traitComposition:",				"EpTEventVisitor classTrait>>#fileOutLocalMethodsInCategory:on:",				"EpTEventVisitor classTrait>>#recategorizeSelector:from:to:",				"EpTEventVisitor classTrait>>#doRebuildMethodDictionary",				"EpTriggeringIntegrationTest>>#testNoTrigger",				"ErrorNodeStyler>>#visitEnglobingErrorNode:",				"EssentialsObjectTest class>>#removeFromSystem:",				"EssentialsObjectTest class>>#recategorizeSelector:from:to:",				"EssentialsObjectTest class>>#traitComposition:",				"EssentialsObjectTest class>>#fileOutLocalMethodsInCategory:on:",				"EssentialsObjectTest class>>#doRebuildMethodDictionary",				"ExampleBuilderMorph class>>#removeFromSystem:",				"ExampleBuilderMorph class>>#traitComposition:",				"ExampleBuilderMorph class>>#fileOutLocalMethodsInCategory:on:",				"ExampleBuilderMorph class>>#recategorizeSelector:from:to:",				"ExampleBuilderMorph class>>#doRebuildMethodDictionary",				"ExceptionTester>>#runBasicTests",				"ExceptionTester>>#runBasicANSISignaledExceptionTests",				"ExecutionCounter class>>#removeAll",				"ExecutionCounter class>>#handleClassRemoved:",				"ExecutionCounter class>>#resetAll",				"ExecutionCounter class>>#removeFromMethod:",				"ExpanderMorph>>#showMorphs:",				"ExternalBrowserTest>>#tearDown",				"ExternalChangesBrowser>>#fileIn:",				"ExternalDropHandler class>>#lookupExternalDropHandler:",				"ExternalStructure>>#longPrintOn:",				"ExternalStructure class>>#compileFields:withAccessors:",				"ExternalStructure class>>#recompileStructures",				"ExternalType class>>#initializeAtomicTypes",				"ExternalUnion class>>#compileFields:withAccessors:",				"FBDDecompiler>>#initializeStackNumArgs:copied:numTemps:",				"FBDDecompiler>>#decompileThenRecompileClass:",				"FBDOptimizedMessagesRewriter>>#rewriteStatements:in:",				"FBDOptimizedMessagesRewriter>>#analyseSeq:",				"FFICallbackArgumentReader>>#extractArguments",				"FFICalloutAPITest>>#resetFFIMethods",				"FFICalloutMethodBuilder>>#generateFFICallout:spec:ffiLibrary:",				"FFICompilerPlugin class>>#recompileSenders",				"FFIExternalArrayTest>>#testReadArrayOfUntil",				"FFIExternalStructureFieldParser>>#parseFields:structure:",				"FFIExternalStructureFlatLayout>>#reduce:inGroupsOfSize:with:",				"FFIExternalStructureFlatLayout>>#countRegisters",				"FFIFunctionParser>>#parseCastedType",				"FFIFunctionParserTest>>#testParseAnonymousFunction",				"FFIFunctionParserTest>>#testParseAnonymousFunctionNoArguments",				"FFIFunctionParserTest>>#testParseFunctionNoArguments",				"FFIFunctionParserTest>>#testParseFunction2",				"FFIFunctionParserTest>>#testParseFunction",				"FFIFunctionSpec>>#asMethodSelectorAndArguments",				"FFIFunctionSpec>>#resolveUsing:",				"FFILibraryFinder>>#findAnyLibrary:",				"FFILibraryFinder>>#findLibrary:",				"FFIMethodRegistry>>#reset",				"FFIStructure class>>#resetStructureIfNotIn:",				"FFIStructure class>>#removeAllMethodsInProtocol:",				"FFITypesTest>>#testUnsigned2ByteIntegers",				"FFITypesTest>>#testSignedLong",				"FFITypesTest>>#testSigned1ByteIntegers",				"FFITypesTest>>#testSigned2ByteIntegers",				"FFITypesTest>>#testUnsignedByteAtPutIntegers",				"FFITypesTest>>#testSignedByteAtPutIntegers",				"FFITypesTest>>#testSigned4ByteIntegers",				"FFITypesTest>>#testUnsigned1ByteIntegers",				"FFITypesTest>>#testSignedLongLong",				"FFITypesTest>>#testUnsignedLongLong",				"FFITypesTest>>#testUnsigned4ByteIntegers",				"FFITypesTest>>#testUnsignedLong",				"FFITypesTest>>#testSignedShortAtPutIntegers",				"FFITypesTest>>#testUnsignedShortAtPutIntegers",				"FIFOQueueTest>>#runValidationTest",				"FIFOQueueTest>>#testFlushAllSuchThat",				"FIFOQueueTest>>#testHeavyContention",				"FIFOQueueTest>>#testSuchThat",				"FIFOQueueTest>>#testHeavyContention2",				"FIFOQueueTest>>#testSize",				"FIFOQueueTest>>#testFlush",				"FLAbstractCollectionCluster>>#serializeReferencesStepWith:",				"FLAbstractCollectionCluster>>#afterMaterializationStepWith:",				"FLAbstractCollectionCluster>>#materializeReferencesStepWith:",				"FLBasicSerializationTest>>#testFloat",				"FLCompiledCodeCluster>>#serializeReferencesStepWith:",				"FLCompiledCodeCluster>>#materializeReferencesStepWith:",				"FLCompiledMethodCluster>>#prepareObjectsStep",				"FLFuelCommandLineHandler>>#manageFiles",				"FLGlobalClassSerializationTest class>>#removeFromSystem:",				"FLGlobalClassSerializationTest class>>#traitComposition:",				"FLGlobalClassSerializationTest class>>#fileOutLocalMethodsInCategory:on:",				"FLGlobalClassSerializationTest class>>#recategorizeSelector:from:to:",				"FLGlobalClassSerializationTest class>>#doRebuildMethodDictionary",				"FLGlobalTraitSerializationTest class>>#removeFromSystem:",				"FLGlobalTraitSerializationTest class>>#traitComposition:",				"FLGlobalTraitSerializationTest class>>#fileOutLocalMethodsInCategory:on:",				"FLGlobalTraitSerializationTest class>>#recategorizeSelector:from:to:",				"FLGlobalTraitSerializationTest class>>#doRebuildMethodDictionary",				"FLHeader>>#executePostMaterializationActions",				"FLHeader>>#executePreMaterializationActions",				"FLIndexStreamTest>>#testNextIndex",				"FLIteratingCluster>>#addReferencesFrom:to:",				"FLIteratingCluster>>#serializeInstancesStepWith:",				"FLIteratingCluster>>#registerIndexesOn:",				"FLLightGlobalMapper class>>#valuesFor:in:",				"FLMaterialization>>#referencesStep",				"FLMaterialization>>#afterMaterializationStep",				"FLMigration>>#applyTo:",				"FLOptimizedObjectCluster>>#serializeReferencesStepWith:",				"FLOptimizedObjectCluster>>#serializeReferencesOf:with:",				"FLOptimizedObjectCluster>>#materializeReferencesStepWith:",				"FLPlatform class>>#extensionPragmas",				"FLPlatform class>>#addExtensions",				"FLPlatform class>>#detectPlatform",				"FLPlatform class>>#removeModifications",				"FLPointerObjectCluster>>#serializeReferencesStepWith:",				"FLPointerObjectCluster>>#afterMaterializationStepWith:",				"FLPointerObjectCluster>>#materializeReferencesStepWith:",				"FLSerialization>>#prepareObjectsStep",				"FLSerialization>>#referencesStep",				"FLSerialization>>#instancesStep",				"FLSimpleCollectionCluster>>#referencesOf:do:",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#traitComposition:",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#recategorizeSelector:from:to:",				"FLTGlobalClassOrTraitSerializationTest classTrait>>#doRebuildMethodDictionary",				"FLUserGuidesTest>>#tearDown",				"FLVariableObjectCluster>>#serializeReferencesVariablePartOf:with:",				"FLVariablesMapping>>#referencesOf:do:",				"FLVariablesMapping>>#serializeReferencesOf:with:",				"FLVariablesMapping>>#materializeReferencesOf:with:",				"FLVariablesMapping>>#serializeOn:",				"FTBasicItem>>#expandAllTo:",				"FTBasicItem>>#collapseAll",				"FTBasicItem>>#expandAll",				"FTBasicTreeListDataSource>>#expand:",				"FTBasicTreeListDataSource>>#elementAt:",				"FTBasicTreeListItem>>#expandToDepth:",				"FTColumn>>#sortDataSource:",				"FTExampleMethodListGeneratorDataSource>>#initializeClass:",				"FTOutlineDataSource>>#searchText:",				"FTOutlineDataSource>>#needSeparatorBefore:",				"FTOutlineDataSource>>#numberOfRows",				"FTOutlineDataSource>>#elementAt:",				"FTPluggableIconListMorphAdaptor>>#selectionChangedUpdateStatus:",				"FTRootItem>>#dataSource:",				"FTRootItem>>#expandAllTo:",				"FTRootItem>>#updateData",				"FTRootItem>>#expandAll",				"FTRootItem>>#collapseAll",				"FTRootItemsStrategy>>#realSearch",				"FTStaticBasicItem>>#dataSource:",				"FTTableContainerMorph>>#updateHeaderRow",				"FTTableContainerMorph>>#updateExposedRows",				"FTTableContainerMorph>>#drawRowsOn:",				"FTTableContainerMorph>>#calculateColumnWidths",				"FTTreeDataSource>>#expandRoots",				"FTTreeItem>>#childAt:",				"FTVisibleItemsStrategy>>#realSearch",				"FileList>>#fileSelectedMenu:",				"FileList>>#defaultContents",				"FileList>>#morphicViewFolderSelector:",				"FileList>>#addFullPanesTo:from:",				"FileList>>#updateButtonRow",				"FileList class>>#addFullPanesTo:from:",				"FileLocator class>>#fromPath:ifNone:",				"FileReferenceTest>>#testChildFiles",				"FileReferenceTest>>#testAllChildren",				"FileReferenceTest>>#testChildDirectories",				"FileReferenceTest>>#testAllEntries",				"FileReferenceTest>>#testChildren",				"FileReferenceTest>>#testEntries",				"FileReferenceTest>>#testAllDirectories",				"FileServices class>>#itemsForDirectory:",				"FileServices class>>#itemsForFile:",				"FileSystemGuide>>#pushAll:",				"FileSystemTest>>#testChildrenAt",				"FileSystemTest>>#testFileNames",				"FileSystemTest>>#testEntriesAt",				"FillBorderStyle>>#frameRectangle:on:",				"FindReplaceService>>#convertedFindString",				"Finder>>#constructDictionaryWithPragmaSearch:",				"Finder>>#constructClassNamesDictionary",				"Finder>>#constructSourceDictionary",				"Finder>>#pragmaSearch:",				"Finder>>#constructDictionaryWithMessagesNameSearch:",				"FinderUI>>#buildRegExChooser",				"FloatArrayTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"FloatArrayTest>>#assertNoDuplicates:whenConvertedTo:",				"FloatArrayTest>>#testAsStringOnDelimiterOne",				"FloatArrayTest>>#testCopyNonEmptyWith",				"FloatArrayTest>>#testSort",				"FloatArrayTest>>#testAsStringOnDelimiterMore",				"FloatArrayTest>>#testAsCommaStringMore",				"FloatArrayTest>>#testShuffled",				"FloatArrayTest>>#testCopyReplaceAllWithManyOccurrence",				"FloatArrayTest>>#test0FixturePutOneOrMoreElementsTest",				"FloatArrayTest>>#testDifferenceWithNonNullIntersection",				"FloatArrayTest>>#testAtAllPut",				"FloatArrayTest>>#testAsSetWithEqualsElements",				"FloatArrayTest>>#test0SortingArrayedTest",				"FloatArrayTest>>#testCopyNonEmptyWithout",				"FloatArrayTest>>#testAsStringOnDelimiterLastOne",				"FloatArrayTest>>#testPairsCollect",				"FloatArrayTest>>#testSortedUsingBlock",				"FloatArrayTest>>#testFloatArrayPluginPrimitiveAt",				"FloatArrayTest>>#testAsSortedCollection",				"FloatArrayTest>>#testCopyNonEmptyWithoutAll",				"FloatArrayTest>>#testCopyNonEmptyWithoutNotIncluded",				"FloatArrayTest>>#testSorted",				"FloatArrayTest>>#testIntersectionItself",				"FloatArrayTest>>#test0FixtureCopyPartOfSequenceableTest",				"FloatArrayTest>>#testWithAll",				"FloatArrayTest>>#testAtAllIndexesPut",				"FloatArrayTest>>#testCopyEmptyWithoutAll",				"FloatArrayTest>>#testFloatArrayPluginPrimitiveAtPut",				"FloatArrayTest>>#testSortUsingSortBlock",				"FloatArrayTest>>#testConcatenation",				"FloatArrayTest>>#testDifference",				"FloatArrayTest>>#test0CopyTest",				"FloatArrayTest>>#testKeysAndValuesDo",				"FloatArrayTest>>#testCopyNonEmpty",				"FloatArrayTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"FloatArrayTest>>#testDifferenceWithSeparateCollection",				"FloatArrayTest>>#testAsSortedCollectionWithSortBlock",				"FloatTest>>#testFractionAsFloat",				"FloatTest>>#testSign",				"FloatTest>>#testCopySignTo",				"FloatTest>>#test32bitConversion",				"FloatTest>>#testNaNCompare",				"Form>>#fadeImageFine:at:",				"Form>>#mapColors:to:",				"Form>>#colorReduced",				"Form>>#storeBitsOn:base:",				"Form>>#wipeImage:at:clippingBox:rectForIndex:",				"Form>>#store15To24HexBitsOn:",				"Form>>#fadeImageCoarse:at:",				"Form>>#convexShapeFill:",				"Form class>>#services",				"FormCanvas>>#showAt:invalidRects:",				"FormCanvas class>>#defaultTranslucentPatterns",				"FormTest>>#testIsAllWhite",				"FreeTypeCache>>#removeAllForFont:",				"FreeTypeCache>>#removeAllForType:",				"FreeTypeCacheTest>>#validateSizes:",				"FreeTypeFont>>#hasGlyphsForAll:",				"FreeTypeFont>>#hasDistinctGlyphsForAll:",				"FreeTypeFontFamily>>#addSimulatedMembers",				"FreeTypeFontFamily>>#addMembersFromFileInfos:",				"FreeTypeFontProvider>>#buildFamilies",				"FreeTypeFontProvider>>#updateFromSystem",				"FreeTypeFontProvider>>#updateEmbeddedFreeTypeFonts",				"FreeTypeFontProvider>>#guessWindowsFontFolderPath",				"FreeTypeFontProvider>>#winFontDirectories",				"FreeTypeFontProvider>>#updateFileCacheInfo",				"FreeTypeFontProvider>>#fileInfosByFamilyAndGroup",				"FreeTypeFontProvider>>#updateFromDirectory:done:",				"FreeTypeNameParser>>#splitBadTokensIn:",				"FreeTypeNameParser>>#initialize",				"FreeTypeNameParser>>#tokenize:",				"FreeTypeSettings>>#hintingSymbol:",				"FuzzyMatcher class>>#allSortedByScoreMatching:in:by:",				"FuzzyMatcherExample>>#match:for:",				"GIFReadWriter>>#writeHeader",				"GIFReadWriterTest>>#testAnimatedColorsOutIn",				"GIFReadWriterTest>>#animatedColorFrames",				"GPoint class>>#removeFromSystem:",				"GPoint class>>#traitComposition:",				"GPoint class>>#fileOutLocalMethodsInCategory:on:",				"GPoint class>>#recategorizeSelector:from:to:",				"GPoint class>>#doRebuildMethodDictionary",				"GPolygon class>>#convexHullOn:",				"GVector class>>#removeFromSystem:",				"GVector class>>#traitComposition:",				"GVector class>>#fileOutLocalMethodsInCategory:on:",				"GVector class>>#recategorizeSelector:from:to:",				"GVector class>>#doRebuildMethodDictionary",				"GlobalIdentifierMerger>>#mergeSameComputer",				"Gofer>>#allResolved",				"GoferCleanup>>#execute",				"GoferCleanup>>#cleanupProtocols:",				"GoferCleanup>>#cleanupCategories:",				"GoferCommit>>#execute:",				"GoferCommit>>#execute",				"GoferFetch>>#initializeOn:",				"GoferLoad>>#updateRepositories",				"GoferLoad>>#addResolved:",				"GoferLoad>>#updateCategories",				"GoferPush>>#initializeOn:",				"GoferRecompile>>#execute:",				"GoferRecompile>>#execute",				"GoferReinitialize>>#execute:",				"GoferReinitialize>>#execute",				"GoferResource>>#setUpMonticelloRepository",				"GoferRevert>>#execute",				"GoferUnload>>#unregisterRepositories:",				"GoferUnload>>#execute",				"GoferUnload>>#unloadClasses:",				"GoferWorking>>#addReference:",				"GoferWorking>>#initializeOn:",				"GradientFillStyle>>#computePixelRampOfSize:",				"GrafPort>>#frameRect:borderWidth:",				"GreatestCommonDivisor>>#asShapeDiophantineEquation",				"GroupWindowMorph class>>#removeFromSystem:",				"GroupWindowMorph class>>#traitComposition:",				"GroupWindowMorph class>>#fileOutLocalMethodsInCategory:on:",				"GroupWindowMorph class>>#recategorizeSelector:from:to:",				"GroupWindowMorph class>>#doRebuildMethodDictionary",				"HDChangeReport>>#initializeOn:",				"HDChangeReport>>#generateOn:",				"HDCoverageReport>>#generateDataOn:",				"HDCoverageReport>>#addTestsIn:to:",				"HDCoverageReport>>#generatePackage:on:",				"HDCoverageReport>>#generatePackage:class:on:",				"HDCoverageReport>>#setUp",				"HDCoverageReport>>#tearDown",				"HDLintReport>>#generateClass:source:on:",				"HDLintReport>>#generateViolations:source:offset:on:",				"HDLintReport>>#generateOn:",				"HDReport class>>#runCategories:",				"HDTestReport>>#setUp",				"HDTestReport>>#tearDown",				"HDTestReport>>#runAll",				"HDTestReport class>>#runClasses:named:",				"HEInstaller>>#doInstallPackage:",				"HEInstaller>>#installMethods:into:",				"HEInstaller>>#installPackage:",				"HaloMorph>>#changed",				"HaloMorph>>#removeAllHandlesBut:",				"HaloMorph class>>#haloSpecFromArray:",				"Halt class>>#resetHaltOnCount",				"Halt class>>#resetOnce",				"HandMorph>>#sendListenEvent:to:",				"HandMorph>>#fullDrawOn:",				"HandMorph>>#updateCacheCanvas:",				"HashAndEqualsTestCase>>#testEquality",				"HashAndEqualsTestCase>>#testHash",				"HashedCollection>>#grow",				"HashedCollection class>>#compactAllInstances",				"HashedCollection class>>#rehashAllInstances",				"HeapTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"HeapTest>>#testOccurrencesOf",				"HeapTest>>#testCopyNonEmptyWithout",				"HeapTest>>#assertNoDuplicates:whenConvertedTo:",				"HeapTest>>#testCopyNonEmptyWith",				"HeapTest>>#test0FixtureOccurrencesForMultiplinessTest",				"HeapTest>>#test1",				"HeapTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"HeapTest>>#testAsSortedCollection",				"HeapTest>>#testRemoveAllFoundIn",				"HeapTest>>#testAsByteArray",				"HeapTest>>#testCopyNonEmptyWithoutAll",				"HeapTest>>#testCopyNonEmptyWithoutNotIncluded",				"HeapTest>>#testIntersectionItself",				"HeapTest>>#testRemoveAll",				"HeapTest>>#testWithAll",				"HeapTest>>#testAsIdentitySetWithEqualsElements",				"HeapTest>>#testCopyEmptyWithoutAll",				"HeapTest>>#testDifferenceWithNonNullIntersection",				"HeapTest>>#testRemoveAllSuchThat",				"HeapTest>>#test0CopyTest",				"HeapTest>>#testDifference",				"HeapTest>>#setUp",				"HeapTest>>#test0FixtureOccurrencesTest",				"HeapTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"HeapTest>>#testDo",				"HeapTest>>#testAsSetWithEqualsElements",				"HeapTest>>#testDifferenceWithSeparateCollection",				"HeapTest>>#testAsSortedCollectionWithSortBlock",				"HeapTest>>#testAsIdentitySetWithIdentityEqualsElements",				"HelpExporter>>#writeAllTopics",				"HelpExporter>>#writeTopic:level:toStream:",				"HelpTopic>>#pathToTopicSatisfying:",				"HelpTopic>>#subtopics:",				"HermesCommandLineHandler>>#processFiles",				"HiBranchMapping>>#buildBranchByLink",				"HiRuler>>#addLinkFrom:to:",				"HiRulerBuilder>>#build",				"HiSimpleRenderer>>#renderNodes:on:",				"HiSimpleRenderer>>#renderLinks:on:",				"HiSimpleRenderer>>#athensPathForDescendingLink:on:",				"HookGenerator>>#entity:node:links:",				"HookGenerator>>#postamble",				"HookGenerator>>#preamble",				"HowToMakeYourOwnTutorialTest>>#testEachSelectorExists",				"HowToMakeYourOwnTutorialTest>>#testEachSelectorReturnsALesson",				"HowToMakeYourOwnTutorialTest class>>#removeFromSystem:",				"HowToMakeYourOwnTutorialTest class>>#traitComposition:",				"HowToMakeYourOwnTutorialTest class>>#fileOutLocalMethodsInCategory:on:",				"HowToMakeYourOwnTutorialTest class>>#recategorizeSelector:from:to:",				"HowToMakeYourOwnTutorialTest class>>#doRebuildMethodDictionary",				"IRBuilder>>#addTemps:",				"IRBytecodeDecompiler>>#popScope",				"IRBytecodeGenerator>>#addProperties:",				"IRBytecodeGenerator>>#bytecodes",				"IRBytecodeGenerator>>#updateLiterals:",				"IRBytecodeGenerator>>#pragmas:",				"IRBytecodeScope>>#temps",				"IRFix>>#visitSequence:",				"IRMethod>>#predecessorsOf:",				"IRMethod>>#allInstructionsMatching:",				"IRMethod>>#allInstructions",				"IRMethod>>#firstInstructionMatching:",				"IRReconstructor>>#remapTemp:toRemote:",				"IRReconstructor>>#fixPushNilsForTemps",				"IRSequence>>#addInstructions:",				"IRSequence>>#absorbJumpToSingleInstr:",				"IRSequence>>#withAllSuccessorsDo:alreadySeen:",				"IRSequence>>#splitAfter:",				"IRSequence>>#addInstructions:before:",				"IRSequence>>#withNonBodySuccessorsDo:alreadySeen:",				"IRSequence>>#instructionsDo:",				"IRSequence>>#do:",				"IRSequence>>#instructionsForDecompiling",				"IRTranslator>>#visitPushFullClosure:",				"IRVisitor>>#visitNodes:",				"IRVisitor>>#visitSequence:",				"ISOLanguageDefinition class>>#iso2LanguageTable",				"ISOLanguageDefinition class>>#initISOCountries",				"IceAbstractCommitWalk>>#uptoBranches:",				"IceAbstractCommitWalk>>#uptoCommits:",				"IceAbstractNode>>#childrenDo:",				"IceCherrypicker>>#addTransitiveDependencies",				"IceCherrypickerDiffPruner>>#applyTo:",				"IceConvertFormatAction>>#migrateSources",				"IceConvertFormatAction>>#removeFiletreeRemnants",				"IceCritiquesVisitor>>#visitExtensionDefinition:",				"IceDefinedDependency>>#addTransitiveDependenciesFrom:to:",				"IceDiff>>#buildForChanges:",				"IceGitHubNewBranchFromIssuePanel>>#sanitizeTitle:",				"IceGitHubRemoveBranchesAction>>#cacheAllBranches",				"IceGitHubRemoveBranchesAction>>#removeBranches:",				"IceGitLocalBranch>>#pushTagsToRemote:gitRemote:progress:",				"IceLibgitFiletreeReader class>>#removeFromSystem:",				"IceLibgitFiletreeReader class>>#traitComposition:",				"IceLibgitFiletreeReader class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitFiletreeReader class>>#recategorizeSelector:from:to:",				"IceLibgitFiletreeReader class>>#doRebuildMethodDictionary",				"IceLibgitFiletreeWriter>>#writeVersion:",				"IceLibgitFiletreeWriter class>>#removeFromSystem:",				"IceLibgitFiletreeWriter class>>#traitComposition:",				"IceLibgitFiletreeWriter class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitFiletreeWriter class>>#recategorizeSelector:from:to:",				"IceLibgitFiletreeWriter class>>#doRebuildMethodDictionary",				"IceLibgitRepository>>#asShapeCommitsGraph",				"IceLibgitTonelReader class>>#removeFromSystem:",				"IceLibgitTonelReader class>>#traitComposition:",				"IceLibgitTonelReader class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitTonelReader class>>#recategorizeSelector:from:to:",				"IceLibgitTonelReader class>>#doRebuildMethodDictionary",				"IceLibgitTonelWriter class>>#removeFromSystem:",				"IceLibgitTonelWriter class>>#traitComposition:",				"IceLibgitTonelWriter class>>#fileOutLocalMethodsInCategory:on:",				"IceLibgitTonelWriter class>>#recategorizeSelector:from:to:",				"IceLibgitTonelWriter class>>#doRebuildMethodDictionary",				"IceLog>>#collectCommitsFor:path:",				"IceMCPackageImporter>>#importOn:",				"IceMerge>>#conflictsDo:",				"IceMetadatalessFileTreeWriter>>#writeVersion:",				"IceMetadatalessStCypressWriter>>#writeDefinitions:",				"IceMethodDependency>>#addTransitiveDependenciesFrom:to:",				"IceNode>>#select:",				"IceNode>>#nextNodeSuchThat:ifFound:",				"IceNode>>#nextNodeSuchThat:ifNone:",				"IceNode>>#do:",				"IceNodeQuery>>#ifFound:",				"IcePackageDefinition>>#contents",				"IcePharoPlugin class>>#addProjectNamed:commit:baselines:",				"IcePluginManager>>#repositoryWasCreated:",				"IcePluginManager>>#checkoutBranchPanelsOnModel:",				"IcePluginManager>>#repositoryWillBeCreated:",				"IceSystemEventListener class>>#handlePackagesChange:",				"IceSystemEventListener class>>#handleVersionLoaded:",				"IceTipCheckoutBranchDialog>>#createCheckoutBranchTypes",				"IceTipCleanCommandGroupVisitor>>#visitCommandGroup:",				"IceTipCommitBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipCommitModel class>>#removeFromSystem:",				"IceTipCommitModel class>>#traitComposition:",				"IceTipCommitModel class>>#fileOutLocalMethodsInCategory:on:",				"IceTipCommitModel class>>#recategorizeSelector:from:to:",				"IceTipCommitModel class>>#doRebuildMethodDictionary",				"IceTipCredentialsStoreBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceTipCredentialsStoreBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipDiffSelectingPanel>>#initialize",				"IceTipDiffSelectingPanel>>#refresh",				"IceTipEditProjectDialog>>#expandAndSelect:",				"IceTipGitHubPullRequestListBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipHiedraHistoryBrowser>>#initializeHiedraColumn",				"IceTipHiedraHistoryBrowser>>#refreshHiedraColumn",				"IceTipHistoryBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipMergeBranchDialog>>#model:",				"IceTipMergeBranchDialog>>#createMergeBranchTypes",				"IceTipMergeBranchDialog>>#beSwitchAndMerge",				"IceTipMergePatchMorph>>#keepAllCurrentVersion",				"IceTipMergePatchMorph>>#useAllIncomingVersion",				"IceTipMergePatchMorph>>#markAllAsConflict",				"IceTipMergeSelectingPanel>>#initialize",				"IceTipMergeSelectingPanel>>#refresh",				"IceTipMetacelloInstallCommandBuilder>>#addCommandsFor:intoGroup:",				"IceTipRemoteModel>>#delete",				"IceTipRemoteModel>>#fetch",				"IceTipRemoteModel class>>#removeFromSystem:",				"IceTipRemoteModel class>>#traitComposition:",				"IceTipRemoteModel class>>#fileOutLocalMethodsInCategory:on:",				"IceTipRemoteModel class>>#recategorizeSelector:from:to:",				"IceTipRemoteModel class>>#doRebuildMethodDictionary",				"IceTipRepositoriesBrowser class>>#githubRemoteCommands:forRootGroup:",				"IceTipRepositoriesBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipRepositoriesBrowser class>>#githubCommandsWith:forRootGroup:",				"IceTipRepositoriesBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceTipRepositoriesBrowser class>>#buildSelectionExtraCommandGroupWith:for:",				"IceTipRepositoryBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipRepositoryBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceTipRepositoryModel>>#addPackages:",				"IceTipRepositoryModel class>>#removeFromSystem:",				"IceTipRepositoryModel class>>#traitComposition:",				"IceTipRepositoryModel class>>#fileOutLocalMethodsInCategory:on:",				"IceTipRepositoryModel class>>#recategorizeSelector:from:to:",				"IceTipRepositoryModel class>>#doRebuildMethodDictionary",				"IceTipTagModel>>#delete",				"IceTipTreeGroup>>#traversingDo:parents:",				"IceTipTreeGroup>>#children:",				"IceTipVersionHistoryBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipWorkingCopyBrowser class>>#metacelloCommandsWith:forRootGroup:",				"IceTipWorkingCopyBrowser class>>#buildSelectionCommandGroupWith:for:",				"IceTipWorkingCopyBrowser class>>#buildGeneralCommandGroupWith:for:",				"IceWorkingCopy>>#forceCalculateDirtyPackages",				"IceWorkingCopy>>#refreshPackages",				"IceWorkingCopy>>#markAsCleanPackagesThat:",				"IceWorkingCopy>>#unload",				"IceWorkingCopy>>#loadPackagesNamed:fromCommit:",				"Iceberg class>>#bootstrapWithCommitId:packageList:",				"Iceberg class>>#update",				"Iceberg class>>#repositoryForPackage:",				"IconStyler>>#styleText:withAst:",				"IconStyler>>#visitEnglobingErrorNode:",				"IconStyler>>#styleAst:",				"IconicListItemMorph>>#enabled:",				"IconicListItemMorph class>>#removeFromSystem:",				"IconicListItemMorph class>>#traitComposition:",				"IconicListItemMorph class>>#fileOutLocalMethodsInCategory:on:",				"IconicListItemMorph class>>#recategorizeSelector:from:to:",				"IconicListItemMorph class>>#doRebuildMethodDictionary",				"IdentifierChooserMorph>>#newMenuWith:",				"IdentifierChooserMorph>>#selectPreviousItem",				"IdentifierChooserMorph>>#selectNextItem",				"IdentifierChooserMorph>>#processEnter:",				"IdentifierChooserMorph>>#choiceMenuItems",				"IdentifierChooserMorph>>#switchToOtherColumn:",				"IdentifierChooserMorph>>#setColor:",				"IdentityBagTest>>#testAsSetWithEqualsElements",				"ImageCleaner>>#cleanUpMethods",				"ImageCleaner>>#literalsDo:",				"ImageCleaner>>#cleanUpProcesses",				"ImageCleaner>>#removeEmptyPackages",				"ImageCleaner>>#cleanUpForProduction",				"ImageCleaner>>#createLiteralTable",				"ImageMorph class>>#removeFromSystem:",				"ImageMorph class>>#traitComposition:",				"ImageMorph class>>#fileOutLocalMethodsInCategory:on:",				"ImageMorph class>>#recategorizeSelector:from:to:",				"ImageMorph class>>#doRebuildMethodDictionary",				"IndentingListItemMorph>>#drawOn:",				"InflateStream>>#huffmanTableFrom:mappedBy:",				"InstVarRefLocatorTest>>#testInstructions",				"InstanceVariableSlot class>>#resetIvarSlots",				"InstructionClientTest>>#testInstructions",				"Integer>>#asStringAZaz",				"Integer>>#asStringSkew",				"Integer>>#asShapeSkewDots",				"Integer>>#isProbablyPrime",				"Integer>>#asStringaz",				"IntegerDigitLogicTest>>#testLargeShift",				"IntegerTest>>#testHighBitOfMagnitude",				"IntegerTest>>#testBitAt",				"IntegerTest>>#testIsProbablyPrime",				"IntegerTest>>#testExactSqrt",				"IntegerTest>>#testIsPrime2",				"IntegerTest>>#testExactRaisedTo",				"IntegerTest>>#testSqrtFloor",				"IntegerTest>>#testHighBit",				"IntegerTest>>#testLowBit",				"InterpolatedGradientFillStyle>>#computePixelRampOfSize:",				"IntervalTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"IntervalTest>>#testOccurrencesOf",				"IntervalTest>>#assertNoDuplicates:whenConvertedTo:",				"IntervalTest>>#testAsStringOnDelimiterOne",				"IntervalTest>>#testCopyNonEmptyWith",				"IntervalTest>>#testInfiniteLoopBug6456",				"IntervalTest>>#testUnevenDo",				"IntervalTest>>#testAsStringOnDelimiterMore",				"IntervalTest>>#testAsCommaStringMore",				"IntervalTest>>#testDo",				"IntervalTest>>#test0FixtureOccurrencesTest",				"IntervalTest>>#test0IndexAccessingTest",				"IntervalTest>>#test0SortingArrayedTest",				"IntervalTest>>#testCopyNonEmptyWithout",				"IntervalTest>>#testAsStringOnDelimiterLastOne",				"IntervalTest>>#testPairsCollect",				"IntervalTest>>#testSortedUsingBlock",				"IntervalTest>>#testAsSortedCollection",				"IntervalTest>>#testAsByteArray",				"IntervalTest>>#testCopyNonEmptyWithoutAll",				"IntervalTest>>#testCopyNonEmptyWithoutNotIncluded",				"IntervalTest>>#testSorted",				"IntervalTest>>#test0FixtureCopyPartOfSequenceableTest",				"IntervalTest>>#testCopyEmptyWithoutAll",				"IntervalTest>>#test0CopyTest",				"IntervalTest>>#testConcatenation",				"IntervalTest>>#testKeysAndValuesDo",				"IntervalTest>>#testCopyNonEmpty",				"IntervalTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"IntervalTest>>#testAsSortedCollectionWithSortBlock",				"JPEGHuffmanTable>>#makeDerivedTables",				"JPEGReadWriter>>#idctBlockFloat:component:",				"JPEGReadWriter>>#processRestart",				"JPEGReadWriter>>#initialSOSSetup",				"JobTest>>#tearDown",				"JoinSection>>#createHighlightsFrom:to:",				"KMCategory>>#onMatchWith:notify:andDo:",				"KMComposedModifier>>#symbol",				"KMComposedModifier>>#updateIdentifier",				"KMDispatchChain>>#dispatch:",				"KMDispatchChainTest>>#testTargetDoesNotIterateTheNil",				"KMDispatchChainTest>>#testGlobalIsFirst",				"KMDispatchChainTest>>#testPassesOnTheTarget",				"KMDispatcher>>#dispatch:",				"KMDispatcher>>#dispatch:inCategories:",				"KMDispatcher>>#removeKeyCombination:",				"KMDispatcherTest>>#testNoMultiTrigger",				"KMDispatcherTest>>#testNoStaggeredTrigger",				"KMKeyCombinationChoice>>#platformCharacter",				"KMKeyCombinationChoice>>#platformModifier",				"KMKeyCombinationChoice>>#combinationsDo:",				"KMKeyCombinationSequence>>#platformModifier",				"KMKeymap>>#notifyPartialMatchTo:",				"KMKeymap>>#notifyCompleteMatchTo:buffer:",				"KMKeymapBuilderTest>>#testAttachKeymapAndExecuteExecutes",				"KMKeymapTest>>#testExecute",				"KMNamedCharKeyCombination class>>#newSpecialKeys",				"KMPerInstanceTest>>#testAddMoreThanOneHandler",				"KMPragmaKeymapBuilder>>#interpretRegistration:",				"KMPragmaKeymapBuilder>>#collectRegistrations",				"KMStorage>>#addAll:",				"KMUntypeableSingleKeyCombination class>>#newSpecialKeys",				"KeyboardKey class>>#initializeUnixVirtualKeyTable",				"KeyedTree>>#allKeys",				"KeyedTree>>#putFormattedTextOn:level:indentString:",				"KeyedTree>>#putFormattedTextOn:withDescriptions:level:indentString:",				"KeyedTree>>#atPath:ifAbsent:",				"LGitCommitStore>>#basicEntry:path:nodesDo:",				"LGitExternalObject class>>#removeFromSystem:",				"LGitExternalObject class>>#traitComposition:",				"LGitExternalObject class>>#fileOutLocalMethodsInCategory:on:",				"LGitExternalObject class>>#recategorizeSelector:from:to:",				"LGitExternalObject class>>#doRebuildMethodDictionary",				"LGitExternalStructure class>>#removeFromSystem:",				"LGitExternalStructure class>>#traitComposition:",				"LGitExternalStructure class>>#fileOutLocalMethodsInCategory:on:",				"LGitExternalStructure class>>#recategorizeSelector:from:to:",				"LGitExternalStructure class>>#doRebuildMethodDictionary",				"LGitRevwalk>>#select:thenDo:",				"LIFOQueueTest>>#testHeavyContention",				"LRUCache>>#keysAndValuesDo:",				"LRUCacheTest>>#testFactory",				"LRUCacheTest>>#testPrimeFactors",				"LRUCacheTest>>#testRandomAccess",				"LRUCacheTest>>#testFactoryStyle",				"LRUCacheTest>>#test5kClasses",				"LRUCacheTest>>#testFixedAccess",				"LargeNegativeIntegerTest>>#testMinimumNegativeIntegerArithmetic",				"LargeNegativeIntegerTest>>#testReplaceFromToWithStartingAt",				"LargePositiveIntegerTest>>#testReplaceFromToWithStartingAt",				"LargePositiveIntegerTest>>#assertSqrtCorrectlyRoundedForExponent:",				"LayoutCell>>#do:",				"LayoutCell>>#inject:into:",				"LayoutClassScope>>#allSlotsDo:",				"LayoutClassScope>>#allVisibleSlots",				"LayoutClassScope>>#slots",				"LayoutClassScope>>#hasFields",				"LayoutClassScope>>#ownFieldSize",				"LayoutClassScope>>#visibleSlots",				"LayoutFrame>>#fromArray:",				"LazyMorphListMorph>>#listChanged",				"LazyMorphListMorph>>#hUnadjustedScrollRange",				"LimitedWriteStreamTest>>#testWithFromTo",				"LimitedWriteStreamTest>>#testWith",				"LimitedWriteStreamTest>>#testNextPut",				"LinkedList>>#select:thenDo:",				"LinkedList>>#removeAllSuchThat:",				"LinkedList>>#select:thenCollect:",				"LinkedList>>#collect:thenSelect:",				"LinkedList>>#size",				"LinkedList>>#select:",				"LinkedList>>#reject:",				"LinkedList>>#reject:thenCollect:",				"LinkedList>>#copyWithout:",				"LinkedList>>#collect:thenReject:",				"LinkedListTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"LinkedListTest>>#testOccurrencesOf",				"LinkedListTest>>#testDo2",				"LinkedListTest>>#assertNoDuplicates:whenConvertedTo:",				"LinkedListTest>>#testAsStringOnDelimiterOne",				"LinkedListTest>>#testCopyNonEmptyWith",				"LinkedListTest>>#testDoSeparatedBy",				"LinkedListTest>>#testAsStringOnDelimiterMore",				"LinkedListTest>>#testPrintOnDelimiterLast",				"LinkedListTest>>#testAsCommaStringMore",				"LinkedListTest>>#testShuffled",				"LinkedListTest>>#testDifferenceWithNonNullIntersection",				"LinkedListTest>>#testRemoveAllSuchThat",				"LinkedListTest>>#test0FixtureOccurrencesTest",				"LinkedListTest>>#testPrintOn",				"LinkedListTest>>#testDoWithout",				"LinkedListTest>>#test0SortingArrayedTest",				"LinkedListTest>>#testCopyNonEmptyWithout",				"LinkedListTest>>#testAsStringOnDelimiterLastOne",				"LinkedListTest>>#testPairsCollect",				"LinkedListTest>>#testPrintOnDelimiter",				"LinkedListTest>>#testSortedUsingBlock",				"LinkedListTest>>#testPrintElementsOn",				"LinkedListTest>>#testRemoveAllFoundIn",				"LinkedListTest>>#testCopyNonEmptyWithoutAll",				"LinkedListTest>>#testCopyNonEmptyWithoutNotIncluded",				"LinkedListTest>>#testSorted",				"LinkedListTest>>#testIntersectionItself",				"LinkedListTest>>#test0FixtureCopyPartOfSequenceableTest",				"LinkedListTest>>#testCopyEmptyWithoutAll",				"LinkedListTest>>#testBasicCollect",				"LinkedListTest>>#test0CopyTest",				"LinkedListTest>>#testDifference",				"LinkedListTest>>#testSortUsingSortBlock",				"LinkedListTest>>#testKeysAndValuesDo",				"LinkedListTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"LinkedListTest>>#testDifferenceWithSeparateCollection",				"LinkedListTest class>>#removeFromSystem:",				"LinkedListTest class>>#traitComposition:",				"LinkedListTest class>>#fileOutLocalMethodsInCategory:on:",				"LinkedListTest class>>#recategorizeSelector:from:to:",				"LinkedListTest class>>#doRebuildMethodDictionary",				"Locale class>>#initKnownLocales",				"LogicalFont>>#derivativeFont:",				"LogicalFont class>>#shutDown:",				"LogicalFontManager>>#bestFontFor:whenFindingAlternativeIgnoreAll:",				"LogicalFontManager>>#allFamilies",				"LzwGifDecoder>>#handleCode:withPreviousCode:on:",				"MCAncestry>>#breadthFirstAncestorsDo:",				"MCAncestry>>#ancestorsDoWhileTrue:",				"MCAncestry>>#allAncestorsDo:",				"MCAncestryTest>>#versionForName:in:",				"MCCacheRepository>>#versionWithInfo:ifAbsent:",				"MCCacheRepository class>>#defaultDirectory",				"MCClassDefinition>>#hash",				"MCClassDefinition>>#ensureRingDefinitionIn:",				"MCClassDefinitionTest>>#testKindOfSubclass",				"MCCodeTool>>#fileOutMessage",				"MCConfiguration>>#logUpdate:with:",				"MCConfiguration>>#summary",				"MCConfiguration>>#updateFromRepositories",				"MCConfiguration>>#loadVersions:",				"MCConfiguration>>#depsSatisfying:versionDo:displayingProgress:",				"MCConfiguration>>#mergeVersions:",				"MCConfiguration class>>#whatChangedFrom:to:on:",				"MCConfigurationBrowser>>#checkModified",				"MCConfigurationBrowser>>#checkRepositoryTemplates",				"MCConfigurationBrowser>>#migrate",				"MCConfigurationBrowser>>#addDependency",				"MCConfigurationBrowser>>#checkMissing",				"MCConfigurationBrowser>>#add",				"MCConfigurationBrowser>>#showChangeLog",				"MCConfigurationBrowser>>#checkRepositories",				"MCDataStream>>#writeStringOld:",				"MCDataStream>>#nextPutAll:",				"MCDefinition>>#traitCompositionFrom:parent:",				"MCDefinitionIndex>>#addAll:",				"MCDependencySorter>>#addToOrder:",				"MCDependencySorter>>#addAll:",				"MCDependencySorter>>#addRequirements:for:",				"MCDependencySorter>>#itemsWithMissingRequirements",				"MCDependencySorter>>#addExternalProvisions:",				"MCDependencySorter class>>#sortItems:",				"MCDictionaryRepository>>#sortedVersionInfos",				"MCFileBasedRepository>>#versionWithInfo:ifAbsent:",				"MCFileBasedRepository>>#versionsWithPackageNames",				"MCFileBasedRepository>>#notCachedVersionWithInfo:",				"MCFileBasedRepository>>#possiblyNewerVersionsOfAnyOf:",				"MCFileRepositoryInspector>>#packageListUpdate",				"MCFileRepositoryInspector>>#refresh",				"MCFileTreeAbstractReader>>#addClassAndMethodDefinitionsFromDirectoryEntries:",				"MCFileTreeAbstractReader>>#loadDependencies",				"MCFileTreeAbstractStWriter>>#visitOrganizationDefinition:",				"MCFileTreePackageStructureStWriter>>#writeAbsentInitializers",				"MCFileTreePackageStructureStWriter>>#writePresentInitializers",				"MCFileTreeStCypressReader>>#addMethodDefinitionsForClass:methodProperties:in:extensionMethod:",				"MCFileTreeStCypressReader>>#addClassAndMethodDefinitionsFromDirectory:",				"MCFileTreeStCypressWriter>>#fileNameMapFor:",				"MCFileTreeStCypressWriter>>#writeMethodProperties:",				"MCFileTreeStCypressWriter>>#writeDefinitions:",				"MCFileTreeStCypressWriter class>>#initializeSpecials",				"MCFileTreeStSnapshotReader>>#addClassAndMethodDefinitionsFromDirectory:",				"MCFileTreeStSnapshotWriter>>#writeDefinitions:",				"MCFileTreeStSnapshotWriter>>#writeMethodHolderDefinitions:extension:to:do:",				"MCFileTreeVersionInfoWriter>>#writeVersionInfo:",				"MCFileTreeWriter>>#initializePackageFileDirectoryCache",				"MCFrontier>>#removeAll:",				"MCFrontier>>#remove:",				"MCFrontier class>>#frontierOnAll:",				"MCGitHubRepository>>#normalizeTagsData:",				"MCMcdReader>>#loadPatch",				"MCMcdWriter>>#writePatch:",				"MCMcmWriter>>#writeConfiguration:",				"MCMczInstallerTest>>#assertDict:matchesInfo:",				"MCMczReader>>#loadDefinitions",				"MCMczWriter>>#writeVersion:",				"MCMergeBrowser>>#chooseAllNewerConflicts",				"MCMergeBrowser>>#chooseAllOlderConflicts",				"MCMergeBrowser>>#chooseAllUnchosenRemote",				"MCMergeBrowser>>#chooseAllUnchosenLocal",				"MCMergeOrLoadWarning>>#messageText",				"MCMerger>>#applyTo:",				"MCMergingTest>>#testMultiPackageMerge",				"MCMergingTest>>#testMultiPackageMerge3",				"MCMergingTest>>#testMultiPackageMerge2",				"MCMergingTest>>#assertMerge:with:base:gives:conflicts:",				"MCOrganizationDefinition>>#unload",				"MCOrganizationDefinition>>#basicCommonPrefix",				"MCOrganizationDefinition>>#fullDescription",				"MCPackage>>#basicSnapshot",				"MCPackageLoader>>#basicLoadDefinitions",				"MCPackageLoader>>#errorDefinitionWarning",				"MCPackageLoader>>#updatePackage:withSnapshot:",				"MCPackageLoader>>#dependencyWarning",				"MCPackageManager class>>#classRemoved:",				"MCPackageManager class>>#bestMatchingManagerForCategory:do:",				"MCPackageManager class>>#managersForPackage:do:",				"MCPackageManager class>>#classRenamed:",				"MCPackageManager class>>#managersForClass:do:",				"MCPatch>>#applyTo:",				"MCPatch>>#initializeWithBase:target:",				"MCRepositoryGroup>>#repositoriesDo:",				"MCRepositoryGroup class>>#withRepositories:",				"MCSnapshot>>#initializeWithDefinitions:",				"MCSnapshot>>#importInto:asPackageNamed:",				"MCSnapshotBrowser>>#loadProtocolSelection",				"MCSnapshotBrowser>>#loadCategorySelection",				"MCSnapshotBrowser>>#loadClassSelection",				"MCStReader>>#typeOfSubclass:",				"MCStReader>>#loadDefinitions",				"MCStWriter>>#visitOrganizationDefinition:",				"MCStWriter>>#writeDefinitions:",				"MCSubDirectoryRepository>>#findFullNameForWriting:",				"MCSubDirectoryRepository>>#loadAllFileNames",				"MCThreeWayMerger>>#addBaseSnapshot:",				"MCTool>>#buttonRow:",				"MCTool>>#buildWindow",				"MCTool>>#fillMenu:fromSpecs:",				"MCVersion>>#allDependenciesNotIn:do:ifUnresolved:",				"MCVersion>>#allAvailableDependenciesDo:",				"MCVersionHistoryBrowser>>#getMenu:",				"MCVersionInfo>>#allAncestorsTo:",				"MCVersionInfoWriter>>#writeVersionInfo:",				"MCVersionInspector>>#save",				"MCVersionLoader>>#basicLoadWithNameLike:",				"MCVersionLoader>>#addVersion:",				"MCVersionMerger>>#mergeWithNameLike:",				"MCVersionMerger>>#gatherChanges",				"MCVersionMerger>>#addVersions:",				"MCVersionMerger>>#merge",				"MCVersionSorter>>#sortedVersionInfos",				"MCVersionSorter>>#addAllAncestorsOf:to:",				"MCVersionSorter>>#registerStepChildrenOf:seen:",				"MCVersionSorter>>#addAllVersionInfos:",				"MCVersionSorter>>#processVersionInfo:",				"MCWorkingCopy>>#merged:",				"MCWorkingCopy>>#loadedVersion",				"MCWorkingCopy>>#possiblyNewerVersions",				"MCWorkingCopy>>#requiredPackagesParallelCollect:withMessage:",				"MCWorkingCopy>>#merge:",				"MCWorkingCopyBrowser>>#addRequiredDirtyPackage",				"MCWorkingCopyTest>>#clearPackageCache",				"MIMEHeaderValue class>>#fromMIMEHeader:",				"MOPTestClassA class>>#removeFromSystem:",				"MOPTestClassA class>>#traitComposition:",				"MOPTestClassA class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassA class>>#recategorizeSelector:from:to:",				"MOPTestClassA class>>#doRebuildMethodDictionary",				"MOPTestClassB class>>#removeFromSystem:",				"MOPTestClassB class>>#traitComposition:",				"MOPTestClassB class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassB class>>#recategorizeSelector:from:to:",				"MOPTestClassB class>>#doRebuildMethodDictionary",				"MOPTestClassC class>>#removeFromSystem:",				"MOPTestClassC class>>#traitComposition:",				"MOPTestClassC class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassC class>>#recategorizeSelector:from:to:",				"MOPTestClassC class>>#doRebuildMethodDictionary",				"MOPTestClassD class>>#removeFromSystem:",				"MOPTestClassD class>>#traitComposition:",				"MOPTestClassD class>>#fileOutLocalMethodsInCategory:on:",				"MOPTestClassD class>>#recategorizeSelector:from:to:",				"MOPTestClassD class>>#doRebuildMethodDictionary",				"MTHandlerTest>>#testCountAdd",				"MTHandlerTest>>#testCountIfTrue",				"MTHandlerTest>>#exampleOpalCompiler",				"MTHandlerTest>>#testAddWithinDoObjectCentric",				"MTHandlerTest>>#compiledMethods:wrapping:then:",				"MTHandlerTest>>#testCountIfTrueDuringSlowFactorial",				"MTHandlerTest>>#testProfileSlowFibonacciMemoing",				"MTHandlerTest>>#testSelfSendBeforeRising",				"MTHandlerTest class>>#removeFromSystem:",				"MTHandlerTest class>>#recategorizeSelector:from:to:",				"MTHandlerTest class>>#traitComposition:",				"MTHandlerTest class>>#fileOutLocalMethodsInCategory:on:",				"MTHandlerTest class>>#doRebuildMethodDictionary",				"MTOverviewSpPresenter>>#initializePresenters",				"MTOverviewSpPresenter>>#initializeWindow:",				"MTSession>>#value:",				"MTSession class>>#compiledMethods:thenSelect:",				"MTTProfilingCopying>>#compiledMethods:wrapping:then:",				"MTTProfilingCopying classTrait>>#recategorizeSelector:from:to:",				"MTTProfilingCopying classTrait>>#traitComposition:",				"MTTProfilingCopying classTrait>>#fileOutLocalMethodsInCategory:on:",				"MTTProfilingCopying classTrait>>#doRebuildMethodDictionary",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#recategorizeSelector:from:to:",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#traitComposition:",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#fileOutLocalMethodsInCategory:on:",				"MTTUmlSequenceDiagramBuilderWithOutliners classTrait>>#doRebuildMethodDictionary",				"MTTemperaturePresenter>>#toolbarActions",				"MTTemperaturePresenter>>#resortWrappers",				"MTTemperaturePresenter>>#runInstallMethodTemperatureWrappersStCommand:",				"MTTemperaturePresenter>>#xLabels:yLabels:matrix:",				"MTTemperaturePresenter>>#windowIsClosing",				"MTTemperaturePresenter>>#methodTemperatureWrappersDo:",				"MTTracker class>>#reset",				"MTVisualizationsTest>>#testSequenceableCollectionMergeSortPlugging",				"MTVisualizationsTest>>#testInspectProductToPropagating",				"MTVisualizationsTest>>#compiledMethods:wrapping:then:",				"MTVisualizationsTest>>#testSequenceableCollectionMergeSortWithoutCopying",				"MTVisualizationsTest class>>#removeFromSystem:",				"MTVisualizationsTest class>>#recategorizeSelector:from:to:",				"MTVisualizationsTest class>>#traitComposition:",				"MTVisualizationsTest class>>#fileOutLocalMethodsInCategory:on:",				"MTVisualizationsTest class>>#doRebuildMethodDictionary",				"MailAddressParser>>#finishAddress",				"MailAddressParser>>#grabBasicAddress",				"MailComposition>>#breakLinesInMessage:",				"MailMessage>>#bodyTextFormatted",				"MailMessage>>#regenerateBodyFromParts",				"MailMessage>>#cleanedHeader",				"MailMessage>>#regenerateText",				"MalBfsNode class>>#removeFromSystem:",				"MalBfsNode class>>#traitComposition:",				"MalBfsNode class>>#fileOutLocalMethodsInCategory:on:",				"MalBfsNode class>>#recategorizeSelector:from:to:",				"MalBfsNode class>>#doRebuildMethodDictionary",				"MalCircuitSpanningEdges>>#doUnvisitedEdges:",				"MalCyclesCoverage>>#run",				"MalCyclesCoverage>>#retrieveCircuitsFromSccExtractor:",				"MalCyclesCoverage class>>#removeFromSystem:",				"MalCyclesCoverage class>>#traitComposition:",				"MalCyclesCoverage class>>#fileOutLocalMethodsInCategory:on:",				"MalCyclesCoverage class>>#recategorizeSelector:from:to:",				"MalCyclesCoverage class>>#doRebuildMethodDictionary",				"MalCyclesCoverageTest>>#testAseCircuitWithCse",				"MalCyclesCoverageTest>>#testAseSccWithSed",				"MalCyclesCoverageTest>>#testAseCircuitWithSed",				"MalCyclesCoverageTest>>#testAseCircuitWithSnd",				"MalCyclesCoverageTest>>#testAseSccWithSnd",				"MalDijkstra>>#reset",				"MalDijkstra>>#traverse:",				"MalDijkstraNode class>>#removeFromSystem:",				"MalDijkstraNode class>>#traitComposition:",				"MalDijkstraNode class>>#fileOutLocalMethodsInCategory:on:",				"MalDijkstraNode class>>#recategorizeSelector:from:to:",				"MalDijkstraNode class>>#doRebuildMethodDictionary",				"MalDisjointSets>>#run",				"MalDominance>>#run",				"MalDominanceTest>>#testSimple",				"MalDominanceTest>>#testCycle",				"MalGraphAlgorithm>>#nodes:",				"MalGraphAlgorithm>>#addNodesFrom:childrenBlock:",				"MalGraphAlgorithm>>#edges:from:to:weight:",				"MalGraphAlgorithm>>#edges:from:to:",				"MalGraphAlgorithm>>#edges:from:toAll:",				"MalGraphReducer>>#mergeNodesInCircuits",				"MalGraphReducer>>#updateNextNodesOf:replacing:by:",				"MalGraphReducer>>#updateReferencesTo:by:",				"MalGraphReducer>>#removeReferencesToMergedNodes",				"MalGraphReducer>>#updatePreviousNodesOf:replacing:by:",				"MalGraphReducerTest>>#testNoCycle",				"MalHal>>#mainLoop",				"MalHal>>#hierarchyLevels",				"MalHal>>#showLevels",				"MalHal>>#initializeHal",				"MalHalNode>>#markCycleWith:",				"MalHits>>#normalize:",				"MalHits>>#run",				"MalHits>>#initializeNodes",				"MalKruskal>>#run",				"MalKruskalTest>>#testUnionFind",				"MalKruskalTest>>#testMinSpanningTree",				"MalKruskalTest>>#testMaxSpanningTree2",				"MalKruskalTest>>#testMaxSpanningTree",				"MalKruskalTest>>#testMinSpanningTree1",				"MalLongestPath>>#setRanks:at:",				"MalSccEdgeDecomposition>>#run",				"MalSccEdgeDecomposition class>>#removeFromSystem:",				"MalSccEdgeDecomposition class>>#traitComposition:",				"MalSccEdgeDecomposition class>>#fileOutLocalMethodsInCategory:on:",				"MalSccEdgeDecomposition class>>#recategorizeSelector:from:to:",				"MalSccEdgeDecomposition class>>#doRebuildMethodDictionary",				"MalSccNodeDecomposition>>#run",				"MalSccNodeDecomposition>>#run:",				"MalSccNodeDecomposition class>>#removeFromSystem:",				"MalSccNodeDecomposition class>>#traitComposition:",				"MalSccNodeDecomposition class>>#fileOutLocalMethodsInCategory:on:",				"MalSccNodeDecomposition class>>#recategorizeSelector:from:to:",				"MalSccNodeDecomposition class>>#doRebuildMethodDictionary",				"MalTEdgeNode classTrait>>#traitComposition:",				"MalTEdgeNode classTrait>>#fileOutLocalMethodsInCategory:on:",				"MalTEdgeNode classTrait>>#recategorizeSelector:from:to:",				"MalTEdgeNode classTrait>>#doRebuildMethodDictionary",				"MalTNormalize classTrait>>#traitComposition:",				"MalTNormalize classTrait>>#fileOutLocalMethodsInCategory:on:",				"MalTNormalize classTrait>>#recategorizeSelector:from:to:",				"MalTNormalize classTrait>>#doRebuildMethodDictionary",				"MalTarjan>>#run",				"MalTarjan>>#popStackAndUpdateCurrentScc:until:",				"MalTarjan>>#nodes:",				"MalTarjan>>#nodesAndNextFrom:",				"MalTarjan>>#traverseChildrenOf:",				"MalTarjanTest>>#testComplexCycle2",				"MalTarjanTest>>#testNestedCycle",				"MalTarjanTest>>#testNoCycle",				"MalTopologicalSorting>>#removeEdgesOf:",				"MalWeightedHitsNode class>>#removeFromSystem:",				"MalWeightedHitsNode class>>#traitComposition:",				"MalWeightedHitsNode class>>#fileOutLocalMethodsInCategory:on:",				"MalWeightedHitsNode class>>#recategorizeSelector:from:to:",				"MalWeightedHitsNode class>>#doRebuildMethodDictionary",				"ManyTestResourceTestCase>>#testTearDownOrder",				"MczInstaller>>#checkDependencies",				"MczInstaller>>#install",				"MemoryFileSystemDirectory>>#fileEntriesDo:",				"MemoryStore>>#nodeAt:ifPresent:ifAbsent:",				"MemoryStore>>#nodeAt:",				"MenuGroupPresenter>>#initialize",				"MenuItemMorph>>#withAllLeafItemsDo:",				"MenuMorph>>#setInvokingView:",				"MenuMorph>>#moveSelectionDown:event:",				"MenuMorph>>#addList:",				"MenuMorph>>#withAllLeafItemsDo:",				"MenuMorph>>#layoutItems",				"MenuMorph>>#updateItemsWithTarget:orWithHand:",				"MenuMorph>>#toggleStayUp:",				"MenuMorph>>#itemWithWording:",				"MenuPresenter>>#initialize",				"MenuRegistration>>#sort:",				"MenuRegistration>>#buildMenuSpec:",				"MenuRegistration>>#reset",				"MenuRegistration>>#assignOrderWithBlock:",				"MenuRegistration>>#collectMisplacedItemsIn:",				"MenuRegistrationExample class>>#pharoItemsOn:",				"MenubarMorph>>#open",				"MergeDiffMorph>>#calculatedJoinMappings",				"MergeDiffMorph>>#indicateSrc",				"MergeDiffMorph>>#indicateDst",				"MessageList>>#buildHierarchyForMessages:",				"MessageTally>>#printOn:total:totalTime:tallyExact:",				"MessageTally>>#rootPrintOn:total:totalTime:threshold:",				"MessageTally>>#leavesPrintExactOn:",				"MessageTally>>#leavesInto:fromSender:",				"MessageTally>>#tallyPath:in:by:",				"MessageTally>>#leavesPrintOn:threshold:",				"MessageTally>>#treePrintOn:tabs:thisTab:total:totalTime:tallyExact:orThreshold:",				"MessageTally>>#tallyPath:by:",				"MessageTally>>#printSenderCountsOn:",				"MetaLink>>#checkForCompatibilityWith:",				"MetaLink>>#invalidate",				"MetaLink>>#condition:",				"MetaLink>>#metaObject:",				"MetaLink>>#uninstall",				"MetaLink class>>#uninstallAll",				"MetaLinkAnonymousClassBuilder>>#compileClassAccessorForAnonymousClass:",				"MetaLinkInstaller>>#removeSuperJumpsFor:",				"MetaLinkInstaller>>#propagateLinkRemoval:forNode:",				"MetaLinkInstaller>>#installSuperJumpLinksInMethodNode:",				"MetaLinkInstaller>>#reinstallPermaLinksForMethod:",				"MetaLinkInstaller>>#recursiveRemoveMethodNode:fromPermaLinks:",				"MetaLinkInstaller>>#propagateLinkAddition:forNode:",				"MetaLinkInstaller>>#linkAllFromNode:into:",				"MetaLinkInstaller>>#uninstallSuperJumpLinks",				"MetaLinkInstaller>>#uninstallFromAllAnonymousNodes:",				"MetaLinkInstaller>>#removeAllAnonymousNodesIn:fromAnonSubclassesOf:",				"MetaLinkInstaller>>#reinstallPermaLink:onNode:",				"MetaLinkInstaller>>#removePermaLinksNodesReferencesFor:",				"MetaLinkRegistry>>#removePermalinkSlotOrVarFromClassRegistry:",				"MetaLinkRegistry>>#unregisterPermaLinksFor:",				"MetacelloAbstractConstructor>>#extractPragmas:for:into:",				"MetacelloAbstractPackageSpec>>#specs:forPackageOrdering:",				"MetacelloAbstractPackageSpec>>#configMethodBodyOn:hasName:cascading:indent:",				"MetacelloAbstractPackageSpec>>#resolveToAllPackagesIn:into:visited:",				"MetacelloAbstractVersionConstructor>>#setFor:version:",				"MetacelloAbstractVersionConstructor>>#setFor:do:",				"MetacelloAlternateResource>>#setUpMonticelloRepository",				"MetacelloAtomicLoadDirective>>#loadAtomicLoadDirective:gofer:",				"MetacelloAtomicLoadDirective>>#prepostLoadDirectivesDo:",				"MetacelloAtomicLoadDirective>>#directivesDo:",				"MetacelloAtomicLoadDirective>>#finalizeLoad:",				"MetacelloAtomicLoadDirective>>#prepostLoadsDo:",				"MetacelloAtomicMonticelloResource>>#setUpMonticelloRepository",				"MetacelloBaselineConstructor>>#calculate:project:",				"MetacelloCommonMCSpecLoader>>#loadPackageDirectives:gofer:",				"MetacelloCommonMCSpecLoader>>#resolvePackageSpec:gofer:",				"MetacelloCommonMCSpecLoader>>#linearLoadPackageSpecs:repositories:",				"MetacelloCommonMCSpecLoader>>#resolvePackageSpecReferences:gofer:",				"MetacelloCommonMCSpecLoader>>#repositoriesFrom:ignoreOverrides:",				"MetacelloCoreVersionQueryTestCase>>#testBaseline10Projects",				"MetacelloCoreVersionQueryTestCase>>#testBaseline10Groups",				"MetacelloCoreVersionQueryTestCase>>#testBaseline10ResolveToLoadableSpecs01",				"MetacelloDictionaryRepositoryTest>>#tearDown",				"MetacelloFetchingMCSpecLoader>>#resolveDependencies:nearest:into:",				"MetacelloFetchingMCSpecLoader>>#linearLoadPackageSpec:gofer:",				"MetacelloGoferCommit>>#execute:",				"MetacelloGroupSpec>>#requiresSpecsForPackageOrdering:",				"MetacelloGroupSpec>>#configMethodCascadeOn:member:last:indent:",				"MetacelloGroupSpec>>#resolveSpecsForPackageOrdering:",				"MetacelloGroupSpec>>#resolveToPackagesIn:andProjects:into:visited:",				"MetacelloIssue108Resource>>#setUpMonticelloRepository",				"MetacelloIssueTestCase>>#tearDown",				"MetacelloLoadData>>#addVersion:versionInfo:resolvedReference:packageSpec:",				"MetacelloLoadingMCSpecLoader>>#copySpec:from:to:",				"MetacelloLoadingMCSpecLoader>>#goferCommitPackageUsing:commitMessage:",				"MetacelloLoadingMCSpecLoader>>#goferCommitBranchPackage:using:commitMessage:",				"MetacelloLoadingMCSpecLoader>>#latestPackage:fromRepository:",				"MetacelloLoadingMCSpecLoader>>#resolveSpec:from:",				"MetacelloMCBaselineOfProjectSpec>>#repositoryVersionString",				"MetacelloMCBaselineOfProjectSpec>>#repositoryBranchName",				"MetacelloMCBaselineProject>>#setBaselineRepositoryDescription:",				"MetacelloMCPartiallyLoadedStatus>>#evaluateStatus:",				"MetacelloMCProject>>#updateProject:",				"MetacelloMCProject>>#updatePackageRepositoriesFor:",				"MetacelloMCProject>>#fetchProject:",				"MetacelloMCProjectSpec>>#allPackagesLoaded:",				"MetacelloMCProjectSpec>>#loadedPackageNames:",				"MetacelloMCProjectSpec>>#loadPackageList",				"MetacelloMCProjectSpec>>#isPossibleBaseline",				"MetacelloMCProjectSpec>>#isPartiallyLoaded:",				"MetacelloMCVersion>>#allPackagesForSpecs:visited:",				"MetacelloMCVersion>>#packageAndProjectNamesToLoad:loader:",				"MetacelloMCVersionSpec>>#currentlyLoadedExtensionClassesInVersion",				"MetacelloMCVersionSpec>>#isPartiallyCurrentAgainst:",				"MetacelloMCVersionSpec>>#configMethodOn:last:indent:",				"MetacelloMCVersionSpec>>#specsNamed:projectDo:packageDo:groupDo:",				"MetacelloMCVersionSpec>>#packageSpecsInLoadOrderForMap:",				"MetacelloMCVersionSpecLoader>>#load",				"MetacelloMCVersionValidator>>#validateVersionTests:",				"MetacelloMCVersionValidator>>#validateProjectLoad",				"MetacelloMemberListSpec>>#collect:",				"MetacelloMemberListSpec>>#detect:ifNone:",				"MetacelloMemberListSpec>>#mergeSpec:",				"MetacelloMemberListSpec>>#map",				"MetacelloMemberListSpec>>#do:",				"MetacelloMemberListSpec>>#specListDo:",				"MetacelloMemberListSpec>>#select:",				"MetacelloMethodSection>>#attributePrintString",				"MetacelloMonticelloResource>>#setUpMonticelloRepository",				"MetacelloPackageSpec>>#currentPackageLoaded:comparing:notLoaded:using:",				"MetacelloPackageSpecResolutionError>>#repositoryString",				"MetacelloPackagesSpec>>#applyIncludesTo:for:firstTime:for:",				"MetacelloPackagesSpec>>#packageSpecsInLoadOrderFor:",				"MetacelloPackagesSpec>>#sortPackageSpecs:packageSpec:groupLoops:for:",				"MetacelloPlatform>>#collection:do:displaying:",				"MetacelloPlatform>>#useStackCacheDuring:defaultDictionary:",				"MetacelloProject>>#currentVersionAgainst:",				"MetacelloProject>>#printOn:",				"MetacelloProjectReferenceSpec>>#resolveToAllPackagesIn:into:visited:",				"MetacelloProjectRegistration>>#printOn:",				"MetacelloProjectRegistration class>>#configurationClasses",				"MetacelloProjectRegistry>>#primeRegistryFromImage:baselineClasses:prioritizeConfiguration:",				"MetacelloProjectSpec>>#configMethodBodyOn:indent:fromShortCut:",				"MetacelloScriptApiExecutor>>#projectSpecsFromRepositoryArg",				"MetacelloScriptApiExecutor>>#executeString:do:",				"MetacelloScriptApiExecutor>>#executeBlock:do:",				"MetacelloScriptApiExecutor>>#executeCollection:do:",				"MetacelloScriptEngine>>#get",				"MetacelloScriptExecutor>>#executeString:do:",				"MetacelloScriptExecutor>>#executeBlock:do:",				"MetacelloScriptExecutor>>#executeCollection:do:",				"MetacelloScriptExecutor>>#execute:",				"MetacelloScriptingStdTstHarnessTestCase>>#tearDownPackages",				"MetacelloScriptingStdTstHarnessTestCase>>#validateProjects:",				"MetacelloScriptingStdTstHarnessTestCase>>#tearDown",				"MetacelloScriptingTestCase>>#setUpRepositoryContents:sourceRepo:targetRepo:",				"MetacelloSemanticVersionNumber>>#print:prefix:on:",				"MetacelloSemanticVersionNumber>>#do:separatedBy:",				"MetacelloSemanticVersionNumber class>>#isSemanticIdentifier:",				"MetacelloSemanticVersionNumber class>>#fromString:forPattern:",				"MetacelloSemanticVersionNumberTestCase>>#testEqualityComparison",				"MetacelloSemanticVersionNumberTestCase>>#testIssue392",				"MetacelloSemanticVersionNumberTestCase>>#testPrinting",				"MetacelloSymbolicVersionMethodSpec>>#methodSource",				"MetacelloTestsGoferUnload>>#execute",				"MetacelloToolBox>>#addSection:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#modifySection:sectionIndex:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#modifyBaselineOf",				"MetacelloToolBox>>#buildMapFrom:for:",				"MetacelloToolBox>>#editVersionSpecsForImport:projectAttributes:active:fullVersionSpec:updateProjects:updatePackages:visited:updated:",				"MetacelloToolBox>>#modifySymbolicVersionMethodFor:symbolicVersionSpecsDo:",				"MetacelloToolBox>>#addSectionsFrom:forBaseline:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox>>#addSymbolicSection:version:",				"MetacelloToolBox>>#importFrom:projectAttributes:inactiveAttributes:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox>>#addBaselineOfSection:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#updateVersionMethodForVersion:projectAttributes:updateProjects:updatePackages:versionSpecsDo:",				"MetacelloToolBox class>>#saveModifiedDevelopmentPackages:for:description:",				"MetacelloToolBox class>>#helpTopicFor:",				"MetacelloToolBox class>>#modifyDevelopmentVersionIn:imports:requiredProjects:packages:description:",				"MetacelloToolBoxBaselineConstructor>>#evaluateBaselineMethodSection:",				"MetacelloToolBoxBaselineConstructor>>#extractMethodSectionsForClass:",				"MetacelloToolBoxConstructor>>#methodSection:do:",				"MetacelloToolBoxConstructor>>#methodSectionsInEvaluationOrder:do:",				"MetacelloToolBoxConstructor>>#evaluateMethodSection:version:",				"MetacelloToolBoxConstructor>>#extractMethodSectionsFor:",				"MetacelloToolBoxConstructor>>#methodSection:inEvaluationOrder:do:",				"MetacelloVersionConstructor>>#specResolverBlock",				"MetacelloVersionConstructor>>#collectDefaultSymbolicVersionsFromVersionPragmasFrom:into:using:",				"MetacelloVersionConstructor>>#symbolicVersionResolverBlock",				"MetacelloVersionConstructor>>#collectAllSymbolicVersionsFromVersionPragmasInto:using:",				"MetacelloVersionConstructor>>#verifyVersionImportPragmas:definedIn:",				"MetacelloVersionConstructor>>#collectAllVersionsFromVersionPragmasInto:using:",				"MetacelloVersionConstructor>>#collectAllVersionsFromVersionImportPragmasInto:using:satisfiedPragmas:",				"MetacelloVersionLoadDirective>>#versionDirectivesDo:",				"MetacelloVersionLoadDirective>>#versionsDo:",				"MetacelloVersionLoadDirective>>#packagesDo:",				"MetacelloVersionLoadDirective>>#packageDirectivesDo:",				"MetacelloVersionLoadDirective>>#prepostLoadsDo:",				"MetacelloVersionLoadDirective>>#versionDirectivesDepthFirstDo:",				"MetacelloVersionLoadDirective>>#loadAtomicLoadDirective:gofer:",				"MetacelloVersionLoadDirective>>#prepostLoadDirectivesDo:",				"MetacelloVersionLoadDirective>>#directivesDo:",				"MetacelloVersionLoadDirective>>#printLoadDirectivesOn:indent:",				"MetacelloVersionLoadDirective>>#loadLinearLoadDirective:gofer:",				"MetacelloVersionMethodSpec>>#findMethodSection:sectionIndex:",				"MetacelloVersionMethodSpec>>#methodSelectorAndPragma:imports:versionString:on:",				"MetacelloVersionMethodSpec>>#addMethodSection:versionSpec:",				"MetacelloVersionNumber>>#do:separatedBy:",				"MetacelloVersionNumber>>#printOn:",				"MetacelloVersionNumber>>#collapseZeros",				"MetacelloVersionNumber class>>#fromString:",				"MetacelloVersionSpec>>#resolveToLoadableSpecs:forLoad:map:",				"MetacelloVersionSpec>>#configPackagesSpecMethodOn:indent:",				"MetacelloVersionSpec>>#projectDo:packageDo:groupDo:",				"MetacelloVersionSpec>>#configMethodOn:last:indent:",				"MetacelloVersionSpec>>#packageNamed:forLoad:forMap:ifAbsent:",				"MetacelloVersionValidator>>#validatePragmas",				"MetacelloVersionValidator>>#validateProject:",				"MetacelloVersionValidator>>#extractExcludedValidations",				"Metaclass>>#addInstVarNamed:",				"Metaclass>>#subclassesDo:",				"MetaclassForTraits>>#notifyOfRecategorizedSelector:from:to:",				"MetaclassForTraits>>#rebuildMethodDictionary",				"MethodClassifier>>#classifyAll:",				"MethodClassifier>>#protocolForKnownKeywordSuffixOfSelector:",				"MethodDictionary class>>#compactAllInstances",				"MethodDictionaryTest>>#testValues",				"MethodDictionaryTest>>#testKeys",				"MethodDictionaryTest>>#testKeysSortedSafely",				"MethodDictionaryTest>>#testAssociations",				"MethodDictionaryTest class>>#removeFromSystem:",				"MethodDictionaryTest class>>#traitComposition:",				"MethodDictionaryTest class>>#fileOutLocalMethodsInCategory:on:",				"MethodDictionaryTest class>>#recategorizeSelector:from:to:",				"MethodDictionaryTest class>>#doRebuildMethodDictionary",				"MethodPragmaTest>>#tearDown",				"MethodPragmaTest>>#pragma:selector:times:",				"MicAbstractBlock>>#text",				"MicAbstractMicrodownTextualBuilder>>#nextPutAll:",				"MicAnnotatedBlock>>#text",				"MicElement>>#inlineParse:",				"MicEnvironmentBlock>>#body",				"MicFormatBlock>>#text",				"MicHeaderBlock>>#header",				"MicInlineBlockWithUrl>>#caption",				"MicInlineParser>>#identifyMarkupFor:",				"MicInlineParser>>#resultProcess",				"MicListItemBlock>>#text",				"MicMicrodownTextualBuilder>>#figureURL:withCaption:withParameters:",				"MicMicrodownTextualBuilder>>#raw:",				"MicMicrodownTextualBuilderTest>>#testUnorderedList",				"MicMicrodownTextualBuilderTest>>#testOrderedList",				"MicRichTextCanvas>>#'<<'",				"MicRichTextComposer>>#visitOrderedList:",				"MicRichTextComposer>>#visitUnorderedList:",				"MicSameStartStopMarkupBlock>>#caption",				"MicroDownParser class>>#inlineMarkups",				"MicrodownStyleHelpBuilder>>#build",				"MicrodownVisitor>>#visitOrderedList:",				"MicrodownVisitor>>#visitFigure:",				"MicrodownVisitor>>#visitChildrenOf:",				"MicrodownVisitor>>#visitLink:",				"MicrodownVisitor>>#visitAnnotated:",				"MicrodownVisitor>>#visitHeader:",				"MicrodownVisitor>>#visitMath:",				"MicrodownVisitor>>#visitListItem:",				"MicrodownVisitor>>#visitCode:",				"MicrodownVisitor>>#visitAll:",				"MicrodownVisitor>>#visitEnvironment:",				"MicrodownVisitor>>#visitUnorderedList:",				"Model>>#changed:",				"Model>>#veryDeepFixupWith:",				"Model>>#changed:with:",				"ModelDependentDialogWindow>>#model:",				"MonticelloBootstrap>>#createWorkingCopies",				"MonticelloBootstrap>>#loadBootstrapPackages",				"MonticelloBootstrap>>#loadBootstrapPackagesNamed:",				"MonticelloBootstrap>>#loadPackagesNamed:",				"Morph>>#announceOpened",				"Morph>>#adhereToEdge",				"Morph>>#doLayoutIn:",				"Morph>>#clipText",				"Morph>>#privateAddAllMorphs:atIndex:",				"Morph>>#addToggleItemsToHaloMenu:",				"Morph>>#addTableLayoutMenuItems:hand:",				"Morph>>#privateFullMoveBy:",				"Morph>>#simulateKeyStrokes:",				"Morph>>#focusChanged",				"Morph>>#submorphsBehind:do:",				"Morph>>#boundingBoxOfSubmorphs",				"Morph>>#shiftSubmorphsOtherThan:by:",				"Morph>>#allMorphsDo:",				"Morph>>#simulateClickWith:position:",				"Morph>>#clearArea",				"Morph>>#allMorphsInto:",				"Morph>>#submorphsInFrontOf:do:",				"Morph>>#showActions",				"Morph>>#addMorphInFrontOfLayer:",				"Morph>>#submorphsDo:",				"Morph>>#submorphBounds",				"Morph>>#deleteDockingBars",				"Morph>>#simulateClickWith:",				"Morph>>#addMorphInLayer:",				"Morph>>#announceDeleted",				"Morph>>#addCellLayoutMenuItems:hand:",				"Morph>>#removeAllMorphsIn:",				"Morph>>#addWorldHandlesTo:box:",				"Morph>>#addHandlesTo:box:",				"Morph>>#removeAllMorphs",				"Morph>>#balloonHelpTextForHandle:",				"Morph class>>#morphsUnknownToTheirOwners",				"MorphExtension>>#veryDeepInner:",				"MorphExtension>>#veryDeepFixupWith:",				"MorphTreeColumn>>#contentWidth",				"MorphTreeListManager>>#addAllToSelection:",				"MorphTreeListManager>>#updateLastClickedMorph",				"MorphTreeListManager>>#noteRemovalOfAll:",				"MorphTreeListManager>>#nodeMorphsWithAllNodeItems:",				"MorphTreeListManager>>#mouseMove:on:",				"MorphTreeListManager>>#emptySelection",				"MorphTreeModel>>#deeplyDetect:",				"MorphTreeMorph>>#mouseUp:",				"MorphTreeMorph>>#buildTopHeader",				"MorphTreeMorph>>#release",				"MorphTreeMorph>>#expandRoots",				"MorphTreeMorph>>#childrenDo:",				"MorphTreeMorph>>#drawOn:",				"MorphTreeMorph>>#addSubmorphsFromNodeList:previouslyExpanded:",				"MorphTreeMorph>>#adjustSubmorphPositionsOf:startIdx:startPos:",				"MorphTreeMorph>>#removeColumnResizers",				"MorphTreeMorph>>#expandAllSuchThat:",				"MorphTreeMorph>>#updateColumnMorphsWidth",				"MorphTreeMorph>>#updateFromSelection:",				"MorphTreeMorph>>#toggleExpandedState:event:",				"MorphTreeMorph>>#updateColumnResizersHeight",				"MorphTreeMorph>>#expandAll:except:",				"MorphTreeMorph>>#addMorphsAfter:fromCollection:",				"MorphTreeMorph>>#expandAllTo:",				"MorphTreeMorph>>#columnResizersToFront",				"MorphTreeMorph>>#expand:to:",				"MorphTreeMorph>>#columns:",				"MorphTreeMorph>>#topHeaderHeight",				"MorphTreeMorph>>#noteRemovalOfAll:",				"MorphTreeMorphTest>>#testMaintainingSelectionsOnUpdate",				"MorphTreeMorphTest>>#testUpdatingSelectionsOnUpdateWithRemoval",				"MorphTreeMorphTest>>#testLeakingSelectionsOnUpdate",				"MorphTreeMorphTest>>#testUpdatingSelectionsOnUpdate",				"MorphTreeNodeModel>>#isPartialMatch",				"MorphTreeNodeMorph>>#buildRowMorph",				"MorphTreeTransformMorph>>#privateAddAllMorphs:atIndex:",				"MorphicEventHandler>>#methodRefList",				"MorphicEventHandler>>#notifyMorphsOfEvent:ofType:from:",				"MorphicMenuAdapter>>#buildWidgetPopup",				"MorphicTextAdapter class>>#removeFromSystem:",				"MorphicTextAdapter class>>#traitComposition:",				"MorphicTextAdapter class>>#fileOutLocalMethodsInCategory:on:",				"MorphicTextAdapter class>>#recategorizeSelector:from:to:",				"MorphicTextAdapter class>>#doRebuildMethodDictionary",				"MorphicTreeAdapter>>#filterWith:",				"MorphicTreeNodeAdapter>>#select",				"MorphicTreeNodeAdapter>>#deselect",				"MorphicTreeNodeAdapter>>#updateAccordingTo:",				"MorphicUIManager>>#deactivate",				"MorphicUIManager>>#activate",				"MorphicUIManager class>>#removeFromSystem:",				"MorphicUIManager class>>#traitComposition:",				"MorphicUIManager class>>#fileOutLocalMethodsInCategory:on:",				"MorphicUIManager class>>#recategorizeSelector:from:to:",				"MorphicUIManager class>>#doRebuildMethodDictionary",				"MorphicWindowAdapter>>#rebuildWithSpec:",				"MorphicWindowAdapter>>#rebuildWithSpecLayout:",				"MouseOverHandler>>#informMouseLeaveToLeftMorphsUsing:",				"MultistateButtonMorph>>#extent:",				"MultistateButtonMorph>>#fillStyles",				"MultistateButtonMorph>>#privateMoveBy:",				"MutexTest>>#tearDown",				"NECSymbolEntry>>#implementorsDescription:",				"NSOrdinalScale>>#domain:",				"NSScaleTest>>#testAccessorsColors",				"NativeArrayTest>>#testAtAllPut",				"NativeArrayTest>>#testAtAllPutFail",				"NativeArrayTest>>#testAtPutBiggerNumberThrowsException",				"NativeArrayTest>>#testAtPutExactSizeNumber",				"NativeArrayTest>>#testReplaceFromToWithStartingAt",				"NetNameResolver class>>#addressFromIPv6String:",				"NetworkSystemSettings class>>#manageHttpProxyExceptions:",				"NonInteractiveTranscript class>>#shutDown",				"NumberParserTest>>#testFloatPrintString",				"OCASTCheckerTest>>#testSemanticAnalysisOnNonMethodNode",				"OCASTClosureAnalyzer>>#visitBlockNode:",				"OCASTClosureAnalyzer>>#visitMethodNode:",				"OCASTDoubleBlockTranslatorTest>>#testComposedExample:withTemps:withFirstBlock:withSecondBlock:",				"OCASTSemanticAnalyzer>>#visitSequenceNode:",				"OCASTSemanticAnalyzer>>#visitBlockNode:",				"OCASTSemanticAnalyzer>>#visitMethodNode:",				"OCASTSemanticAnalyzer>>#visitInlinedBlockNode:",				"OCASTSingleBlockTranslatorTest>>#testComposedExample:withTemps:withBlock:withArguments:",				"OCASTTranslator>>#emitMessageNode:",				"OCASTTranslator>>#visitArrayNode:",				"OCASTTranslator>>#visitInlinedBlockNode:",				"OCASTTranslator>>#visitMethodNode:",				"OCASTTranslator>>#visitLargeArrayNode:",				"OCASTTranslatorForEffect>>#visitSequenceNode:",				"OCAbstractMethodScope>>#localTemps",				"OCAbstractMethodScope>>#allTemps",				"OCBytecodeDecompilerTest>>#testDecompileBytecodeDecompilerTestClass",				"OCBytecodeDecompilerTest>>#testDecompileIRBuilderTestClass",				"OCBytecodeDecompilerTest>>#testDecompilerOrderedCollectionDo",				"OCBytecodeDecompilerTest>>#testDecompileBytecodeGeneratorTest",				"OCBytecodeToASTCache>>#generateForNode:",				"OCBytecodeToASTCacheTest>>#testCacheInInterval:equalsNode:",				"OCClosureCompilerTest>>#doTestDebuggerTempAccessWith:with:",				"OCClosureCompilerTest>>#testInlineBlockCollectionLR2",				"OCClosureCompilerTest class>>#methodWithVariousTemps",				"OCCompilerTest>>#testReservedNameAsMethodArgumentShadowing",				"OCCompilerTest>>#testReservedNameAsBlockArgumentShadowing",				"OCScannerTest>>#testLiteralSymbols",				"OCSourceCode2BytecodeTest>>#testPrimDoWith",				"OCUndeclaredVariableWarning>>#defineClass:",				"OCUndeclaredVariableWarning>>#openMenuIn:",				"OSEnvironment>>#includes:",				"OSKeySymbols class>>#initialize",				"OSSDL2AthensRenderer>>#updateRectangles:",				"OSSDL2Driver>>#sendEventWithoutWindow:",				"OSSDL2FormRenderer>>#updateAreas:immediate:",				"OSSDLPasteEventFilter>>#flushEvents",				"OSSDLPasteEventFilter>>#changeEventsToIncludeModifier",				"OSTouchFingerTracker>>#totalDistanceTravelled",				"OSTouchGestureDetector>>#centerOfAllFingers",				"OSWindowFormRenderer>>#updateAreas:immediate:",				"OSWindowGestureHandler>>#updateGesturesActiveFingers",				"OSWindowGestureHandler>>#sendEventToGestures:",				"OSWindowJoystickExample>>#drawBullets",				"OSWindowJoystickExample>>#simulateBullets:",				"OSWindowRenderThread>>#performAnimationFrames",				"OSWindowRenderer>>#updateRectangles:",				"Object>>#changed:with:",				"Object>>#stSpotterProcessorsFor:",				"Object>>#changed:",				"Object>>#link:toNodes:",				"Object>>#recursivelySetIsReadOnlyObject:exceptObjectsIn:",				"Object>>#actionsDo:",				"Object class>>#reInitializeDependentsFields",				"ObjectFinalizerCollection>>#finalize",				"ObjectWithPrintingRaisingHaltTest>>#testInspectingObjectWithPrintOnWithHaltOpenInspector",				"ObservablePoint class>>#removeFromSystem:",				"ObservablePoint class>>#traitComposition:",				"ObservablePoint class>>#fileOutLocalMethodsInCategory:on:",				"ObservablePoint class>>#recategorizeSelector:from:to:",				"ObservablePoint class>>#doRebuildMethodDictionary",				"ObservableValueHolder>>#valueChanged:",				"OmFileStore>>#entryBufferDo:",				"OmMemoryStore>>#entriesDo:",				"OmMemoryStore class>>#withAllEntries:",				"OmSessionStore class>>#startUp",				"OpalCompiler>>#callPlugins",				"OpalCompiler class>>#overlayStep1CopyClasses",				"OpalCompiler class>>#overlayStep5UpdateInstances",				"OrderedCollection>>#addAllLast:",				"OrderedCollection class>>#compactAllInstances",				"OrderedCollectionTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"OrderedCollectionTest>>#testOccurrencesOf",				"OrderedCollectionTest>>#assertNoDuplicates:whenConvertedTo:",				"OrderedCollectionTest>>#testAsStringOnDelimiterOne",				"OrderedCollectionTest>>#testAddAfterIndex",				"OrderedCollectionTest>>#testCopyNonEmptyWith",				"OrderedCollectionTest>>#test0FixtureOccurrencesForMultiplinessTest",				"OrderedCollectionTest>>#testAsStringOnDelimiterMore",				"OrderedCollectionTest>>#testShuffled",				"OrderedCollectionTest>>#testAsCommaStringMore",				"OrderedCollectionTest>>#testCopyReplaceAllWithManyOccurrence",				"OrderedCollectionTest>>#test0FixturePutOneOrMoreElementsTest",				"OrderedCollectionTest>>#testDifferenceWithNonNullIntersection",				"OrderedCollectionTest>>#testAtAllPut",				"OrderedCollectionTest>>#test0FixtureTConvertAsSetForMultiplinessTest",				"OrderedCollectionTest>>#test0FixtureOccurrencesTest",				"OrderedCollectionTest>>#testAsSetWithEqualsElements",				"OrderedCollectionTest>>#test0SortingArrayedTest",				"OrderedCollectionTest>>#testCopyNonEmptyWithout",				"OrderedCollectionTest>>#testAsStringOnDelimiterLastOne",				"OrderedCollectionTest>>#testPairsCollect",				"OrderedCollectionTest>>#testSortedUsingBlock",				"OrderedCollectionTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"OrderedCollectionTest>>#testRemoveAllFoundIn",				"OrderedCollectionTest>>#testAsSortedCollection",				"OrderedCollectionTest>>#testAsByteArray",				"OrderedCollectionTest>>#testCopyNonEmptyWithoutAll",				"OrderedCollectionTest>>#testCopyNonEmptyWithoutNotIncluded",				"OrderedCollectionTest>>#testSorted",				"OrderedCollectionTest>>#testIntersectionItself",				"OrderedCollectionTest>>#test0FixtureCopyPartOfSequenceableTest",				"OrderedCollectionTest>>#testWithAll",				"OrderedCollectionTest>>#testAsIdentitySetWithEqualsElements",				"OrderedCollectionTest>>#testAtAllIndexesPut",				"OrderedCollectionTest>>#testCopyEmptyWithoutAll",				"OrderedCollectionTest>>#testSortUsingSortBlock",				"OrderedCollectionTest>>#testDifference",				"OrderedCollectionTest>>#test0CopyTest",				"OrderedCollectionTest>>#testKeysAndValuesDo",				"OrderedCollectionTest>>#testConcatenation",				"OrderedCollectionTest>>#testCopyNonEmpty",				"OrderedCollectionTest>>#testAddBeforeIndex",				"OrderedCollectionTest>>#testDifferenceWithSeparateCollection",				"OrderedCollectionTest>>#testAsSortedCollectionWithSortBlock",				"OrderedCollectionTest>>#testAsIdentitySetWithIdentityEqualsElements",				"OrderedDictionary>>#keysAndValuesRemove:",				"OrderedDictionary>>#removeKeys:",				"OrderedDictionaryTest>>#testSelect",				"OrderedDictionaryTest>>#testIncludesIdentity",				"OrderedDictionaryTest>>#testKeyAtValue",				"OrderedDictionaryTest>>#assertKey:wasRemovedfrom:",				"OrderedDictionaryTest>>#testAssociationAtIfAbsent",				"OrderedDictionaryTest>>#testKeyAtValueIfAbsent",				"OrderedDictionaryTest>>#testAssociationAt",				"OrderedDictionaryTest>>#testDictionaryPublicProtocolCompatibility",				"OrderedDictionaryTest>>#testDeclareFrom",				"OrderedDictionaryTest>>#assertIsDictionary:copiedFrom:withOrderedAssociations:",				"OrderedDictionaryTest>>#testAtIfPresent",				"OrderedDictionaryTest>>#testAssociationAtIfPresent",				"OrderedDictionaryTest>>#testKeyAtIdentityValueIfAbsent",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsent",				"OrderedDictionaryTest>>#testRemoveAll",				"OrderedDictionaryTest>>#testNewFromPairs",				"OrderedDictionaryTest>>#testIncludesKey",				"OrderedDictionaryTest>>#testRemoveKeys",				"OrderedDictionaryTest>>#testAtIfAbsent",				"OrderedDictionaryTest>>#testIncludesAssociation",				"OrderedDictionaryTest>>#assertIsDictionary:withUnorderedAssociations:",				"OrderedDictionaryTest>>#testKeyAtIdentityValue",				"OrderedDictionaryTest>>#testKeyForIdentity",				"OrderedDictionaryTest>>#testHash",				"OrderedDictionaryTest>>#testIncludes",				"OrderedDictionaryTest>>#testDo",				"OrderedDictionaryTest>>#testEqualsOtherOrderedDictionaries",				"OrderedDictionaryTest>>#testAddAll",				"OrderedDictionaryTest>>#testAssociationsSelect",				"OrderedDictionaryTest>>#testAt",				"OupsDebuggerSelectorTest>>#testNextDebugger",				"OupsDebuggerSelectorTest>>#tearDown",				"OupsDebuggerSystem>>#performPreDebugActionsIn:",				"OupsDebuggerSystem class>>#closeAllDebuggers",				"OupsSingleDebuggerSelectorTest>>#tearDown",				"OverflowRowMorph>>#adoptPaneColor:",				"PNGReadWriter>>#writePLTEChunkOn:",				"PNGReadWriter>>#understandsImageFormat",				"PNGReadWriter>>#writeTRNSChunkOn:",				"PNGReadWriter class>>#initialize",				"PNGReadWriterTest>>#decodeColors:depth:",				"PNGReadWriterTest>>#encodeColors:depth:",				"PSMCChangesGrouper>>#group",				"PSMCMergeMorph>>#model:",				"PSMCMergePatchMorph>>#keepAllCurrentVersion",				"PSMCMergePatchMorph>>#useAllIncomingVersion",				"PSMCMergePatchMorph>>#markAllAsConflict",				"PaSuiteTest>>#testMatrix3ExampleHasTheCorrectTests",				"PaSuiteTest>>#testMatrixExampleHasTheCorrectTests",				"PaSuiteTest>>#testCasesHasTheCorrectTests",				"PaSuiteTest>>#testCombinedHasTheCorrectTests",				"PackageAPIHelpBuilder>>#build",				"PackageAPIHelpBuilder class>>#buildPackageTopic:",				"PanelMorph>>#checkSplitters",				"PanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"PanelMorphWithSplitters>>#linkSplittersToSplitters",				"PanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"Paragraph>>#adjustLineIndicesBy:",				"Paragraph>>#adjustRightX",				"Paragraph>>#extraSelectionRects",				"Paragraph>>#moveBy:",				"Paragraph>>#displayExtraSelectionOn:",				"Paragraph>>#displayExtraSelectionOnAthensCanvas:",				"Paragraph>>#buildSelectionBlocksFrom:to:",				"Paragraph class>>#refreshAllCompositions",				"ParametrizedTestCase>>#setUp",				"ParametrizedTestCase class>>#buildSuite",				"ParametrizedTestMatrix>>#*",				"PasteUpMorph>>#addWorldToggleItemsToHaloMenu:",				"PasteUpMorph>>#contentsMenu:",				"PasteUpMorph>>#moveCollapsedWindowsToTaskbar",				"PasteUpMorph>>#initializeDesktopCommandKeySelectors",				"PasteUpMorph>>#removeTaskbar",				"PasteUpMorph>>#flashRects:color:",				"PasteUpMorph>>#windowsSatisfying:",				"PasteUpMorph>>#findWindow:",				"PasteUpMorph>>#cleanseOtherworldlySteppers",				"PasteUpMorph>>#bringWindowsFullOnscreen",				"PasteUpMorph>>#closeAllUnchangedWindows",				"PasteUpMorph>>#restoreMainDockingBarDisplay",				"PasteUpMorph>>#closeAllWindowsDiscardingChanges",				"Path>>#segments",				"Path>>#stonOn:",				"Path class>>#withAll:",				"Path class>>#canonicalizeElements:",				"PharoCommonTools>>#cleanUp",				"PharoSyntaxTutorialTest>>#testEachSelectorExists",				"PharoSyntaxTutorialTest>>#testEachSelectorReturnsALesson",				"PharoSyntaxTutorialTest class>>#removeFromSystem:",				"PharoSyntaxTutorialTest class>>#traitComposition:",				"PharoSyntaxTutorialTest class>>#fileOutLocalMethodsInCategory:on:",				"PharoSyntaxTutorialTest class>>#recategorizeSelector:from:to:",				"PharoSyntaxTutorialTest class>>#doRebuildMethodDictionary",				"PharoTutorialHelpTutorialBuilder>>#buildTutorialTopicFor:",				"PharoTutorialHelpTutorialBuilder>>#build",				"PluggableButtonMorph>>#mouseUp:",				"PluggableButtonMorph>>#mouseMove:",				"PluggableDictionaryTest>>#testHashBlock",				"PluggableIconListMorph>>#interactWithSelectedItem",				"PluggableListMorph>>#userString",				"PluggableMenuSpec>>#addList:",				"PluggableMenuSpec>>#asMenuMorphOfKind:",				"PluggableMenuSpec>>#addToMenuModel:",				"PointArray>>#bounds",				"PointArray class>>#removeFromSystem:",				"PointArray class>>#traitComposition:",				"PointArray class>>#fileOutLocalMethodsInCategory:on:",				"PointArray class>>#recategorizeSelector:from:to:",				"PointArray class>>#doRebuildMethodDictionary",				"PointerLayout>>#host:",				"PointerLayout>>#checkSlotNames",				"PolygonMorph>>#removeHandles",				"PolygonMorph>>#computeBounds",				"PolygonMorph>>#computeArrowFormAt:from:",				"PolygonMorph>>#borderForm",				"PolygonMorph>>#lineSegmentsDo:",				"PolygonMorph>>#privateMoveBy:",				"PolygonMorph>>#asAthensCurvedPathOn:",				"PolygonMorph>>#straightLineSegmentsDo:",				"PolygonMorph>>#containsPoint:",				"PolygonMorph>>#drawOnFormCanvas:",				"PolygonMorph>>#drawArrowOnAthensCanvas:at:from:",				"PolygonMorph class>>#removeFromSystem:",				"PolygonMorph class>>#traitComposition:",				"PolygonMorph class>>#fileOutLocalMethodsInCategory:on:",				"PolygonMorph class>>#recategorizeSelector:from:to:",				"PolygonMorph class>>#doRebuildMethodDictionary",				"PopupChoiceDialogWindow>>#processEnter:",				"PopupChoiceDialogWindow>>#selectLastEnabledItem",				"PopupChoiceDialogWindow>>#selectFirstEnabledItem",				"PopupChoiceDialogWindow>>#filter:",				"PopupChoiceOrRequestDialogWindow>>#filter:",				"PositionableStream>>#preservingPositionDo:",				"PragmaCollector>>#do:",				"PragmaCollector>>#classRemovedEventOccurs:",				"PragmaCollector>>#addedEventOccurs:",				"PragmaCollector>>#reset",				"PragmaMenuBuilder>>#interpretRegistration:",				"PragmaMenuBuilder>>#arrangeRegistrations",				"PragmaMenuBuilder>>#collectRegistrations",				"ProcessBrowser class>>#dumpTally:on:",				"ProcessBrowser class>>#dumpPigStackOn:",				"ProcessBrowser class>>#nameAndRulesFor:",				"ProcessList>>#removeAllSuchThat:",				"ProcessList>>#select:thenCollect:",				"ProcessList>>#collect:thenSelect:",				"ProcessList>>#select:",				"ProcessList>>#size",				"ProcessList>>#copyWithout:",				"ProcessMonitorTestService>>#terminateRunningProcesses",				"ProcessorScheduler>>#scanSchedule:startingAt:",				"ProgressBarMorph class>>#removeFromSystem:",				"ProgressBarMorph class>>#traitComposition:",				"ProgressBarMorph class>>#fileOutLocalMethodsInCategory:on:",				"ProgressBarMorph class>>#recategorizeSelector:from:to:",				"ProgressBarMorph class>>#doRebuildMethodDictionary",				"ProperMethodCategorizationTest>>#testNoLeadingOrTrailingSpacesInCategoryNames",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedIn:whenSubclassOf:",				"ProperMethodCategorizationTest>>#assureAll:areCategorizedInProtocols:whenSubclassOf:",				"ProperMethodCategorizationTest>>#testNoEmptyProtocols",				"ProperPackagesTest>>#testProperClassTagCasing",				"ProportionalSplitterMorph>>#showRightOrBottom",				"ProportionalSplitterMorph>>#hideLeftOrTop",				"ProportionalSplitterMorph>>#updateFromEvent:",				"ProportionalSplitterMorph>>#hideRightOrBottom",				"ProportionalSplitterMorph>>#showLeftOrTop",				"Protocol>>#addAllMethodsFrom:",				"ProtocolClient>>#logProgress:",				"ProtocolOrganizer>>#removeEmptyProtocols",				"ProtocolOrganizer>>#classify:inProtocolNamed:",				"ProtocolOrganizer>>#fromSpec:",				"ProtocolOrganizer>>#removeMethod:",				"ProtocolOrganizer>>#stringForFileOut",				"QSystemTally>>#leavesInto:fromSender:",				"QSystemTally>>#leavesPrintOn:tallyExact:orThreshold:time:",				"QSystemTally>>#printOn:total:totalTime:tallyExact:",				"QSystemTally>>#treePrintOn:tabs:thisTab:total:totalTime:tallyExact:orThreshold:",				"QueryAnnotationsFromClassTest>>#testReturnsInstancesFromAllAnnotatingMethods",				"QuoRemComplementary>>#asShapeDots",				"RBAbstractClass>>#whichSelectorsReferToClass:",				"RBAbstractClass>>#localSelectors",				"RBAbstractClass>>#whichSelectorsReferToSymbol:",				"RBAbstractClass>>#whichSelectorsReferToClassVariable:",				"RBAbstractClass>>#subclassesDo:",				"RBAbstractClass>>#whichSelectorsReferToInstanceVariable:",				"RBAbstractClass>>#firstSuperclassRedefines:",				"RBAbstractClass>>#selectors",				"RBAbstractRefactoringTest>>#extractMethodTestData",				"RBAbstractRefactoringTest>>#executeRefactorings:",				"RBAbstractRefactoringTest>>#abstractVariableTestData",				"RBAbstractRefactoringTest class>>#removeFromSystem:",				"RBAbstractRefactoringTest class>>#traitComposition:",				"RBAbstractRefactoringTest class>>#fileOutLocalMethodsInCategory:on:",				"RBAbstractRefactoringTest class>>#recategorizeSelector:from:to:",				"RBAbstractRefactoringTest class>>#doRebuildMethodDictionary",				"RBAbstractVariablesRefactoring>>#abstractClassVariables",				"RBAbstractVariablesRefactoring>>#abstractInstanceVariables",				"RBAccessorClassRefactoring>>#transform",				"RBAddParameterRefactoring>>#myConditions",				"RBAddParameterRefactoring>>#renameArgumentsIn:",				"RBAddParameterTransformation>>#myConditions",				"RBAddParameterTransformation>>#renameArgumentsIn:",				"RBArrayNode>>#addNodes:before:",				"RBArrayNode>>#addNodes:",				"RBArrayNode>>#statements:",				"RBArrayNode>>#addNodesFirst:",				"RBBasicDummyLintRuleTest class>>#addRemoveDependents",				"RBBasicDummyLintRuleTest class>>#returnsBooleanAndOther",				"RBBasicDummyLintRuleTest class>>#missingSubclassResponsibility",				"RBBasicDummyLintRuleTest class>>#variableAssignedLiteral",				"RBBasicDummyLintRuleTest class>>#tempsReadBeforeWritten",				"RBBasicDummyLintRuleTest class>>#onlyReadOrWritten",				"RBBasicDummyLintRuleTest class>>#sizeCheck",				"RBBasicDummyLintRuleTest class>>#unreferencedVariables",				"RBBasicDummyLintRuleTest class>>#instVarInSubclasses",				"RBBasicDummyLintRuleTest class>>#refersToClass",				"RBBasicDummyLintRuleTest class>>#subclassResponsibilityNotDefined",				"RBBasicDummyLintRuleTest class>>#variableReferencedOnce",				"RBBasicLintRule>>#filteredResult",				"RBBasicLintRuleTestData class>>#subclassResponsibilityNotDefined",				"RBBlockNode>>#equalTo:withMapping:",				"RBBlockNode>>#arguments:",				"RBBrowserEnvironment>>#pluginsDo:",				"RBBrowserEnvironment>>#forClasses:",				"RBBrowserEnvironment>>#handleSystemChange:",				"RBBrowserEnvironment>>#selectionParseTreeIntervalFor:",				"RBBrowserEnvironment>>#selectionIntervalFor:",				"RBBrowserEnvironmentTest>>#categoriesFor:",				"RBBrowserEnvironmentWrapper>>#descriptionBasis",				"RBCascadeNode>>#statementComments",				"RBCascadeNode>>#messages:",				"RBCategoryEnvironment>>#defaultLabel",				"RBChangeMethodNameRefactoring>>#renameImplementors",				"RBChangeMethodNameRefactoring>>#removeRenamedImplementors",				"RBChangeMethodNameRefactoring>>#renameArgumentsIn:",				"RBChangeMethodNameTransformation>>#convertAllReferencesTo:of:using:",				"RBChangeMethodNameTransformation>>#renameImplementors",				"RBChangeMethodNameTransformation>>#removeRenamedImplementors",				"RBChangeMethodNameTransformation>>#renameArgumentsIn:",				"RBChildrenToSiblingsRefactoring>>#pullUpInstanceVariables",				"RBChildrenToSiblingsRefactoring>>#computeSubclassSupersOf:",				"RBChildrenToSiblingsRefactoring>>#pullUpClassInstanceVariables",				"RBChildrenToSiblingsRefactoring>>#pullUpClassVariables",				"RBChildrenToSiblingsRefactoring>>#pullUpPoolVariables",				"RBChildrenToSiblingsRefactoring>>#pushUpMethodsFrom:",				"RBClass>>#definitionString",				"RBClassEnvironment>>#classesDo:",				"RBClassEnvironment>>#classes:",				"RBClassEnvironment>>#defaultLabel",				"RBClassEnvironment>>#printOn:",				"RBClassRegexRefactoring>>#copyFrom:to:",				"RBClassUsingSharedPoolForTestData class>>#removeFromSystem:",				"RBClassUsingSharedPoolForTestData class>>#traitComposition:",				"RBClassUsingSharedPoolForTestData class>>#fileOutLocalMethodsInCategory:on:",				"RBClassUsingSharedPoolForTestData class>>#recategorizeSelector:from:to:",				"RBClassUsingSharedPoolForTestData class>>#doRebuildMethodDictionary",				"RBCombinatorVisitor>>#visitSequenceNode:",				"RBCommentNodeVisitor>>#visitNode:",				"RBComposeParametrizedTest>>#shouldFail:",				"RBCompositeLintRule>>#checkClass:",				"RBCompositeLintRule>>#removeRule:",				"RBCompositeLintRule>>#resetResult",				"RBCompositeLintRule>>#checkMethod:",				"RBCompositeLintRule>>#sort:",				"RBCompositeLintRule>>#checkPackage:",				"RBCompositeLintRule class>>#rulesGroupedFor:",				"RBCompositeLintRule class>>#rulesClassifiedFor:",				"RBCompositeLintRuleTestData>>#checkClass:",				"RBCompositeLintRuleTestData>>#resetResult",				"RBCompositeLintRuleTestData>>#checkMethod:",				"RBCompositeLintRuleTestData>>#viewResults",				"RBCompositeTransformation>>#privateTransform",				"RBCondition class>>#methodDefiningTemporary:in:ignore:",				"RBCondition class>>#accessesClassVariable:in:showIn:",				"RBCopyClassRefactoring>>#copyVariables",				"RBCopyClassRefactoring>>#copyMethodsOf:in:",				"RBCopyPackageRefactoring>>#reparent:with:",				"RBCreateCascadeRefactoring>>#findStatementNodes",				"RBDeprecateClassRefactoring>>#convertDeprecatedToSubclass",				"RBDeprecateClassRefactoring>>#copyExtensionMethods",				"RBDeprecateClassRefactoring>>#removeExtensionMethods",				"RBDummy classTrait>>#traitComposition:",				"RBDummy classTrait>>#fileOutLocalMethodsInCategory:on:",				"RBDummy classTrait>>#recategorizeSelector:from:to:",				"RBDummy classTrait>>#doRebuildMethodDictionary",				"RBDummyCompositeLintRuleTest>>#checkClass:",				"RBDummyCompositeLintRuleTest>>#resetResult",				"RBDummyCompositeLintRuleTest>>#checkMethod:",				"RBDummyCompositeLintRuleTest>>#viewResults",				"RBDummyRefactoryTestDataApp>>#demoRenameMethod:PermuteArgs:",				"RBDummyRefactoryTestDataApp>>#stringConcatenation",				"RBDummyRefactoryTestDataApp>>#equalNotUsed",				"RBDummyRefactoryTestDataApp>>#collectionProtocol",				"RBDummyRefactoryTestDataApp>>#sizeCheck",				"RBDummyRefactoryTestDataApp>>#modifiesCollection",				"RBDummyRefactoryTestDataApp>>#detectContains",				"RBDumpVisitor>>#visitEnglobingErrorNode:",				"RBDumpVisitor>>#visitCascadeNode:",				"RBDumpVisitor>>#visitSequenceNode:",				"RBDumpVisitor>>#visitBlockNode:",				"RBDumpVisitor>>#visitMessageNode:",				"RBDumpVisitor>>#visitPragmaNode:",				"RBDumpVisitor>>#visitMethodNode:",				"RBDumpVisitor>>#visitArrayNode:",				"RBDumpVisitorTest>>#testDumpOnSelfClassMethods",				"RBEnglobingErrorNode>>#content:",				"RBEnvironmentVisitor>>#visitProtocolEnv:",				"RBEnvironmentVisitor>>#visitPackageEnv:",				"RBEnvironmentVisitor>>#visitClassEnv:",				"RBExpandReferencedPoolsRefactoring>>#movePoolVariables",				"RBExpandReferencedPoolsRefactoring>>#whichPoolDefines:",				"RBExpandReferencedPoolsTransformation>>#movePoolVariables",				"RBExtractMethodRefactoring>>#nameNewMethod:",				"RBExtractMethodRefactoring>>#updateTemporariesInExtractedMethodFor:",				"RBExtractMethodRefactoring>>#checkAssignments:",				"RBExtractMethodRefactoring>>#remainingTemporaries",				"RBExtractMethodRefactoring>>#renameAllParameters",				"RBExtractMethodTransformation>>#generateNewMethodWith:",				"RBExtractSetUpMethodRefactoring>>#checkAssignments:",				"RBExtractToTemporaryRefactoring>>#insertTemporary",				"RBExtractToTemporaryTransformation>>#insertTemporary",				"RBFindAndReplaceRefactoring>>#findOccurrencesIn:",				"RBFindAndReplaceRefactoring>>#transform",				"RBFormatterTest>>#formatClass:",				"RBFormatterTest>>#testCoreSystem",				"RBGenerateEqualHashRefactoring>>#compileHash",				"RBGenerateEqualHashRefactoring>>#compileEqual",				"RBGeneratePrintStringRefactoring>>#transform",				"RBInlineAllSendersRefactoring>>#inlineSelfSends",				"RBInlineMethodRefactoring>>#checkSuperMessages",				"RBInlineMethodRefactoring>>#renameConflictingTemporaries",				"RBInlineMethodTransformation>>#checkSuperMessages",				"RBInlineMethodTransformation>>#renameConflictingTemporaries",				"RBItemsSelectionPresenter>>#connectPresenters",				"RBLiteralArrayNode>>#contents:",				"RBMatchVisitor>>#visitBlockNode:",				"RBMatchVisitor>>#visitSequenceNode:",				"RBMatchVisitor>>#visitMethodNode:",				"RBMessageNode>>#replaceNode:withNode:",				"RBMessageNode>>#bestNodeFor:",				"RBMessageNode>>#arguments:",				"RBMessageNode>>#isInlineCase",				"RBMessageNode>>#isInlineIfNil",				"RBMethodNode>>#metaLinkOptionsFromClassAndMethod",				"RBMethodNode>>#rewriteTempsForContext:",				"RBMethodNode>>#arguments:",				"RBMethodNode>>#pragmas:",				"RBMethodNodeTest>>#testMethodClass",				"RBMethodNodeTest>>#testOffsetIsComment",				"RBMoveInstVarToClassRefactoring>>#collectSendersOfInstVar",				"RBMoveMethodRefactoring>>#checkTemporaryVariableNames",				"RBMoveMethodRefactoring>>#compileNewMethods",				"RBMoveMethodToClassSideRefactoring>>#removeInstVariableReferences",				"RBMoveMethodToClassSideTransformation>>#removeInstVariableReferences",				"RBMoveTemporaryVariableDefinitionTransformation>>#checkLocationsIn:",				"RBMoveVariableDefinitionRefactoring>>#checkNodes:",				"RBMoveVariableDefinitionRefactoring>>#transform",				"RBMultiEnvironment>>#asSelectorEnvironment",				"RBNamespace>>#allReferencesToClass:inPackages:do:",				"RBNamespace>>#renameClass:to:around:",				"RBNamespace>>#allClassesDo:",				"RBNamespace>>#allImplementorsOf:do:",				"RBNamespace>>#privateRootClasses",				"RBNamespace>>#privateReferencesTo:",				"RBNamespace>>#convertClasses:select:using:",				"RBNamespace>>#reparentClasses:to:",				"RBNamespace>>#allReferencesToClass:do:",				"RBNamespace>>#allClassesInPackages:do:",				"RBNamespace>>#removeClassNamed:",				"RBNamespace>>#privateReferencesTo:in:",				"RBNamespace>>#privateReferencesTo:inPackages:",				"RBNamespace>>#allReferencesTo:do:",				"RBNamespace>>#allReferencesTo:inPackages:do:",				"RBNamespaceTest>>#testReparentSuperclassChange",				"RBPackageEnvironment>>#classesDo:",				"RBPackageEnvironment>>#printOn:",				"RBPackageEnvironment>>#classesAndSelectorsDo:",				"RBParseTreeRewriter>>#visitCascadeNode:",				"RBParseTreeRewriterTest>>#testRewriteMethods",				"RBParseTreeRewriterTest>>#testRewrites",				"RBParseTreeSearcher>>#messages",				"RBParseTreeSearcher>>#addArgumentRules:",				"RBParseTreeSearcher>>#addSearches:",				"RBParseTreeSearcher>>#matchesAnyMethodOf:do:",				"RBParseTreeSearcher>>#matchesAnyArgumentOf:do:",				"RBParseTreeSearcher>>#addRules:",				"RBParseTreeSearcher>>#performSearches:on:",				"RBParseTreeSearcher>>#lookForMoreMatchesInContext:",				"RBParseTreeSearcher>>#matchesAnyOf:do:",				"RBParseTreeSearcher>>#matchesAnyTreeOf:do:",				"RBParser>>#addCommentsTo:",				"RBParserTest>>#testEqualToWithMapping",				"RBParserTest>>#testPragmas",				"RBParserTest>>#testNumberParsing",				"RBParserTest>>#testMatchInContext",				"RBParserTest>>#testCopyInContext",				"RBParserTest>>#testArrayNodesContainRightAmountOfStatementsAndPeriods",				"RBParserTest>>#testFaultyLiteralRaiseSyntaxError",				"RBParserTest>>#testIsA",				"RBParserTest>>#testParseMethodPatternGivesSelector",				"RBParserTest>>#testParserErrors",				"RBParserTest>>#testPrimitives",				"RBParserTest>>#testParseFaultyMethod",				"RBParserTest>>#testParsingPragmaRecogniseAndStorePragmas",				"RBParserTest>>#testEquivalentExceptRenaming",				"RBParserTest>>#testInvalidPragmaPosition",				"RBParserTest>>#testCopy",				"RBParserTest>>#testParsingPragmaRecogniseSelector",				"RBParserTest>>#testMethodPatterns",				"RBParserTest>>#testArray",				"RBParserTest>>#testParseExpressionGivesTheWriteAmountOfStatements",				"RBParserTest>>#testDelimitationsOfArrayNodesAreBrackets",				"RBParserTest>>#testParents",				"RBParserTest>>#testFormatter",				"RBParserTest>>#testIdentificationOfPrimitiveMethods",				"RBParserTest>>#testParentOfStatementsIsSequenceNode",				"RBParserTest>>#testParsingArrayGivesArrayNode",				"RBParserTest>>#testBinarySelectors",				"RBParserTest>>#testParsingPragmaRecogniseArguments",				"RBParserTest>>#testParseUnfinishedBlockWithFaultyBody",				"RBParserTest>>#testSymbolLiteral",				"RBParserTest>>#testComparingTrees",				"RBParserTest>>#testParserErrorsWithErrorBlock",				"RBParserTest>>#testStatements",				"RBPatternParserTest>>#testParseFaultyPatternBlock",				"RBPragmaEnvironment>>#defaultLabel",				"RBPragmaNode>>#arguments:",				"RBPrettyPrintCodeRefactoring>>#transform",				"RBProgramNode>>#statementComments",				"RBProgramNode>>#nodeForOffset:",				"RBProgramNode>>#copyList:inContext:",				"RBProgramNode>>#nodesDo:",				"RBProgramNode>>#copyCommentsFrom:",				"RBProgramNode>>#removeDeadCode",				"RBProgramNode>>#evaluatedFirst:",				"RBProgramNodeVisitor>>#visitEnglobingErrorNode:",				"RBProgramNodeVisitor>>#visitSequenceNode:",				"RBProgramNodeVisitor>>#visitArgumentNodes:",				"RBProgramNodeVisitor>>#visitArrayNode:",				"RBProgramNodeVisitor>>#visitTemporaryNodes:",				"RBProgramNodeVisitor>>#visitCascadeNode:",				"RBProgramNodeVisitor>>#visitMessageNode:",				"RBProgramNodeVisitor>>#visitPragmaNode:",				"RBProgramNodeVisitor>>#visitMethodNode:",				"RBProgramNodeVisitor>>#visitLiteralArrayNode:",				"RBProtectInstanceVariableRefactoring>>#getterSetterMethods",				"RBProtectInstanceVariableRefactoring>>#transform",				"RBProtocolEnvironment>>#defaultLabel",				"RBProtocolEnvironment>>#printOn:",				"RBProtocolRegexRefactoring>>#transform",				"RBPullUpInstanceVariableRefactoring>>#transform",				"RBPullUpMethodParametrizedTest>>#testPullUpWhenSuperClassDoesNotDirectlyImplement",				"RBPullUpMethodRefactoring>>#checkInstVars",				"RBPullUpMethodRefactoring>>#checkSuperSendsFromSiblings",				"RBPullUpMethodRefactoring>>#checkSuperSendsFromPushedUpMethods",				"RBPullUpMethodRefactoring>>#copyDownMethod:",				"RBPullUpMethodRefactoring>>#checkClassVars",				"RBPullUpMethodRefactoring>>#checkSuperclass",				"RBPullUpMethodRefactoring>>#copyDownMethods",				"RBPullUpMethodRefactoring>>#checkClassVarsFor:",				"RBPullUpMethodRefactoring>>#checkSiblingSuperSendsFrom:",				"RBPullUpMethodRefactoring>>#removeDuplicatesOf:",				"RBPullUpMethodRefactoring>>#checkBackReferencesTo:",				"RBPullUpMethodRefactoring>>#checkInstVarsFor:",				"RBPullUpMethodRefactoring>>#pullUpMethods",				"RBPullUpMethodRefactoring>>#removePulledUpMethods",				"RBPullUpMethodRefactoring>>#removeDuplicateMethods",				"RBPullUpMethodTransformation>>#checkInstVars",				"RBPullUpMethodTransformation>>#checkSuperSendsFromSiblings",				"RBPullUpMethodTransformation>>#checkSuperSendsFromPushedUpMethods",				"RBPullUpMethodTransformation>>#checkClassVars",				"RBPullUpMethodTransformation>>#checkSuperclass",				"RBPullUpMethodTransformation>>#checkClassVarsFor:",				"RBPullUpMethodTransformation>>#checkSiblingSuperSendsFrom:",				"RBPullUpMethodTransformation>>#checkBackReferencesTo:",				"RBPullUpMethodTransformation>>#checkInstVarsFor:",				"RBPushDownClassVariableParametrizedTest>>#testPushDownClassVariable",				"RBPushDownClassVariableRefactoring>>#findDestinationClass",				"RBPushDownInstanceVariableParametrizedTest>>#testPushDownInstanceVariable",				"RBPushDownInstanceVariableRefactoring>>#transform",				"RBPushDownMethodParametrizedTest>>#testPushDownMethod",				"RBPushDownMethodParametrizedTest>>#testPushDownMethodThatReferencesPoolDictionary",				"RBPushDownMethodRefactoring>>#transform",				"RBPushDownMethodRefactoring>>#pushDown:",				"RBReadBeforeWrittenTester>>#initializeVars:",				"RBReadBeforeWrittenTester>>#processStatementNode:",				"RBReadBeforeWrittenTester>>#visitMessageNode:",				"RBReadBeforeWrittenTesterTest>>#testReadBeforeWritten",				"RBRealizeClassRefactoring>>#transform:",				"RBRealizeClassTransformation>>#transform:",				"RBRefactoring>>#copyOptionsFrom:",				"RBRefactoring>>#convertClasses:select:using:",				"RBRefactoring>>#convertAllReferencesTo:of:using:",				"RBRefactoring>>#poolVariableNamesFor:",				"RBRefactoring class>>#removeFromSystem:",				"RBRefactoring class>>#traitComposition:",				"RBRefactoring class>>#fileOutLocalMethodsInCategory:on:",				"RBRefactoring class>>#recategorizeSelector:from:to:",				"RBRefactoring class>>#doRebuildMethodDictionary",				"RBRefactoringChangeTest>>#testAddClassPattern",				"RBRefactoringChangeTest>>#testAddClassTraitPattern",				"RBRefactoringChangeTest>>#testAddTraitPattern",				"RBRefactoringChangeTest>>#testAddMetaclassPattern",				"RBRefactoryDefinitionChange class>>#definition:for:",				"RBRefactoryTestDataApp>>#demoRenameMethod:PermuteArgs:",				"RBRefactoryTestDataApp>>#stringConcatenation",				"RBRefactoryTestDataApp>>#equalNotUsed",				"RBRefactoryTestDataApp>>#collectionProtocol",				"RBRefactoryTestDataApp>>#sizeCheck",				"RBRefactoryTestDataApp>>#modifiesCollection",				"RBRefactoryTestDataApp>>#detectContains",				"RBRefactoryTyper>>#processCollectionMessagesFor:in:",				"RBRefactoryTyper>>#processNode:",				"RBRefactoryTyper>>#computeMessagesSentToVariables",				"RBRefactoryTyper>>#refineTypes:with:",				"RBRefactoryTyper>>#computeEquivalenceClassesForMethodsAndVars",				"RBRefactoryTyper>>#executeSearch:",				"RBRefactoryTyper>>#implementorsOf:in:storeIn:",				"RBRefactoryTyper>>#implementorsOf:",				"RBRefactoryTyper>>#merge:",				"RBRefactoryTyper>>#printOn:",				"RBRemoveAllSendersRefactoring>>#removeSelfSenders",				"RBRemoveClassChange>>#asUndoOperation",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownInstVarsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#removeClasses",				"RBRemoveClassKeepingSubclassesRefactoring>>#transform",				"RBRemoveClassKeepingSubclassesRefactoring>>#pushDownClassVarsOf:",				"RBRemoveClassKeepingSubclassesRefactoring>>#initalizeRefactorings",				"RBRemoveClassRefactoring>>#reparentSubclasses",				"RBRemoveClassRefactoring>>#removeClasses",				"RBRemoveClassVariableRefactoring>>#preconditions",				"RBRemoveHierarchyMethodRefactoring>>#deleteSelectors",				"RBRemoveHierarchyMethodRefactoring>>#deleteSelectorInSubclasses",				"RBRemoveHierarchyMethodTransformation>>#deleteSelectors",				"RBRemoveMessageSendTransformation>>#privateTransform",				"RBRemoveMethodParametrizedTest>>#testRemoveMethod",				"RBRemoveMethodRefactoring>>#checkBrowseAllOccurrences:",				"RBRemoveMethodRefactoring>>#checkReferencesToAnyOf:",				"RBRemoveMethodRefactoring>>#checkSuperMethods",				"RBRemoveMethodRefactoring>>#transform",				"RBRemoveMethodTransformation>>#checkBrowseAllOccurrences:",				"RBRemoveParameterRefactoring>>#computeNewSelector",				"RBRemoveParameterTransformation>>#computeNewSelector",				"RBRemovePragmaTransformation>>#privateTransform",				"RBRemoveReturnStatementTransformation>>#privateTransform",				"RBRenameClassChange>>#oldVersionTextToDisplay",				"RBRenameClassChange>>#textToDisplay",				"RBRenameClassVariableRefactoring>>#renameReferences",				"RBRenameInstanceVariableChange>>#copyOldValuesToNewVariable",				"RBRenameInstanceVariableRefactoring>>#renameAccessorsReferences",				"RBRenameInstanceVariableRefactoring>>#removeOldAccessors",				"RBReplacePreview>>#accept:",				"RBScanner class>>#initializeChars:to:",				"RBSearchTest>>#testAllSearches",				"RBSelectorEnvironment>>#selectorsForClass:do:",				"RBSelectorEnvironment>>#packages",				"RBSelectorEnvironment>>#classes:metaClasses:",				"RBSelectorEnvironment>>#smallLintCritics",				"RBSelectorEnvironment>>#storeOn:",				"RBSelectorEnvironment class>>#onMethods:forClass:in:",				"RBSequenceNode>>#equalTo:withMapping:",				"RBSequenceNode>>#replaceNode:withNodes:",				"RBSequenceNode>>#statements:",				"RBSequenceNode>>#addNodesFirst:",				"RBSequenceNode>>#addNodes:before:",				"RBSequenceNode>>#addNodes:",				"RBSequenceNode>>#temporaries:",				"RBSimpleFormatter>>#formatBlockArgumentsFor:",				"RBSimpleFormatter>>#formatTemporariesFor:",				"RBSimpleFormatter>>#formatPragmasFor:",				"RBSimpleFormatter>>#formatStatementCommentsFor:",				"RBSimpleFormatter>>#formatCommentsFor:",				"RBSimpleFormatter>>#formatMethodCommentFor:",				"RBSlotInitializationNode>>#selectorString",				"RBSmalllintContext>>#specialSelectors",				"RBSmalllintContext>>#computeLiteralsForClass:",				"RBSmalllintContext>>#checkLiteral:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#removeFromSystem:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#traitComposition:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#fileOutLocalMethodsInCategory:on:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#recategorizeSelector:from:to:",				"RBSmalllintTestLocalMethodsSameThanTraitObject class>>#doRebuildMethodDictionary",				"RBSmalllintTestObject>>#stringConcatenation",				"RBSmalllintTestObject>>#equalNotUsed",				"RBSmalllintTestObject>>#collectionProtocol",				"RBSmalllintTestObject>>#sizeCheck",				"RBSmalllintTestObject>>#modifiesCollection",				"RBSmalllintTestObject>>#detectContains",				"RBSourceRegexRefactoring>>#transform",				"RBSplitCascadeRefactoring>>#extractReceiver",				"RBSplitClassRefactoring>>#addInstanceVariables",				"RBSplitClassRefactoring>>#abstractVariableReferences",				"RBSplitClassTransformation>>#abstractVariableReferences",				"RBSwapMethodRefactoring>>#checkInstVars",				"RBTRefactoringBuilder classTrait>>#traitComposition:",				"RBTRefactoringBuilder classTrait>>#fileOutLocalMethodsInCategory:on:",				"RBTRefactoringBuilder classTrait>>#recategorizeSelector:from:to:",				"RBTRefactoringBuilder classTrait>>#doRebuildMethodDictionary",				"RBTemporaryToInstanceVariableRefactoring>>#removeTemporaryOfClass:",				"RBTemporaryToInstanceVariableRefactoring>>#transform",				"RBTemporaryToInstanceVariableTransformation>>#privateTransform",				"RBTemporaryToInstanceVariableTransformation>>#removeTemporaryOfClass:",				"RBTransformation>>#poolVariableNamesFor:",				"RBTransformation class>>#removeFromSystem:",				"RBTransformation class>>#traitComposition:",				"RBTransformation class>>#fileOutLocalMethodsInCategory:on:",				"RBTransformation class>>#recategorizeSelector:from:to:",				"RBTransformation class>>#doRebuildMethodDictionary",				"RBTransformationDummyRuleTest class>>#rewrite:methods:name:",				"RBTransformationRule>>#result",				"RBTransformationRuleTestData class>>#rewrite:methods:name:",				"RBTransformationTest>>#abstractVariableTestData",				"RBTransformationsTest>>#testPushDownVariableTransform",				"RBVariableEnvironment>>#instanceVariableSelectorsFor:",				"RBVariableEnvironment>>#environmentForClassVariable:in:",				"RBVariableEnvironment>>#allClassesDo:",				"RBVariableEnvironment>>#classVariableSelectorsFor:",				"RBVariableEnvironment>>#environmentForInstanceVariable:in:",				"RBVariableEnvironment>>#flushCachesFor:",				"RBVariableEnvironment>>#storeOn:",				"RFASTClosureAnalyzer>>#visitNode:",				"RFASTTranslator>>#emitMetaLinkAfterNoEnsure:",				"RFASTTranslator>>#emitMetaLinkBefore:",				"RFASTTranslator>>#emitPreamble:",				"RFASTTranslator>>#visitMethodNode:",				"RFASTTranslator>>#emitMessageNode:",				"RFASTTranslator>>#emitMetaLinkAfterEnsure:",				"RFASTTranslator>>#visitArrayNode:",				"RFASTTranslator>>#visitSequenceWithAfter:",				"RFASTTranslator>>#visitInlinedBlockNode:",				"RFASTTranslatorForEffect>>#visitSequenceNode:",				"RFC2047MimeConverter>>#encodeWord:",				"RFSemanticAnalyzer>>#analyseForLinks:generator:",				"RFSemanticAnalyzer>>#visitMethodNode:",				"RGAbstractContainer>>#elementNamed:",				"RGAbstractContainer>>#elementsDo:",				"RGBehavior>>#pvtLocalMethodsDo:",				"RGBehavior>>#cleanLocalMethods",				"RGBehavior>>#allSuperclassesDo:",				"RGBehavior>>#methods",				"RGBehavior>>#unresolveName",				"RGBehavior>>#pvtAddLocalMethod:",				"RGBehavior>>#pvtTagsDo:",				"RGBehavior>>#subclassesDo:",				"RGBehavior>>#pvtTagsForMethodsDo:",				"RGBehavior>>#methodNamed:",				"RGBehavior>>#name:",				"RGBehaviorTest>>#testBehaviorWithMethodTags",				"RGBehaviorTest>>#testBehaviorWithProtocols",				"RGChunkImporter>>#fileInFrom:",				"RGChunkImporter>>#createBehavior:superclassName:instanceVariableNames:classVariableNames:categoryName:packageName:poolDictionariesNames:layoutClass:layoutDefinition:slotsDefinition:traits:isTrait:hasNilSuperclass:",				"RGClassDefinition>>#addClassVariables:",				"RGClassDefinition>>#addSharedPools:",				"RGClassDescriptionDefinition>>#addInstanceVariables:",				"RGClassDescriptionStrategy>>#instanceVariables:",				"RGClassStrategy>>#pvtSharedPoolsDo:",				"RGClassStrategy>>#classVariables:",				"RGClassStrategy>>#copyForBehaviorDefinitionPostCopy",				"RGClassStrategy>>#sharedPools:",				"RGClassStrategy>>#pvtClassVariablesDo:",				"RGClassTest>>#testBehaviorWithProtocols",				"RGClassTest>>#testBehaviorWithMethods",				"RGClassTest class>>#removeFromSystem:",				"RGClassTest class>>#traitComposition:",				"RGClassTest class>>#fileOutLocalMethodsInCategory:on:",				"RGClassTest class>>#recategorizeSelector:from:to:",				"RGClassTest class>>#doRebuildMethodDictionary",				"RGContainer>>#classesDo:",				"RGContainer>>#loadPackagesFromImage",				"RGContainer>>#methodsDo:",				"RGContainer>>#allClassesDo:",				"RGContainer>>#loadTraitUsers",				"RGContainer>>#definedClassesDo:",				"RGContainer>>#cleanEmptyPackages",				"RGContainer>>#traitsDo:",				"RGContainer>>#allTraitsDo:",				"RGEnvironment>>#associationsDo:",				"RGEnvironment>>#cleanBehaviors",				"RGEnvironment>>#unifyTrait",				"RGEnvironment>>#writeIntoTonel:",				"RGEnvironment>>#addGlobalsNamed:",				"RGEnvironment>>#createDefaultEnvironment",				"RGEnvironment>>#pvtGlobalVariablesDo:",				"RGEnvironment>>#removeUnusedPackages",				"RGEnvironment>>#removeBehavior:",				"RGEnvironment>>#writeIntoFileTree:",				"RGEnvironment>>#cleanUnusedUnreferencedBehaviors",				"RGEnvironment>>#pvtBehaviorsDo:",				"RGEnvironment>>#cleanUnusedUnreferencedPackages",				"RGEnvironment>>#pvtPackagesDo:",				"RGEnvironment>>#adoptForBrowser",				"RGEnvironmentBackendTest>>#testReadOnlyErrors",				"RGEnvironmentBackendTest class>>#removeFromSystem:",				"RGEnvironmentBackendTest class>>#traitComposition:",				"RGEnvironmentBackendTest class>>#fileOutLocalMethodsInCategory:on:",				"RGEnvironmentBackendTest class>>#recategorizeSelector:from:to:",				"RGEnvironmentBackendTest class>>#doRebuildMethodDictionary",				"RGLayoutDefinitionTest>>#testImplicitEnvironment",				"RGLayoutDefinitionTest>>#testNewLayouts",				"RGLayoutDefinitionTest>>#testIsEmptyLayout",				"RGMCClassTest>>#testNormalKernelClasses",				"RGMCClassTest>>#testSpecialClasses",				"RGMetaclassTraitTest>>#testBehaviorWithProtocols",				"RGMetaclassTraitTest>>#testBehaviorWithMethods",				"RGMetaclassTraitTest class>>#removeFromSystem:",				"RGMetaclassTraitTest class>>#traitComposition:",				"RGMetaclassTraitTest class>>#fileOutLocalMethodsInCategory:on:",				"RGMetaclassTraitTest class>>#recategorizeSelector:from:to:",				"RGMetaclassTraitTest class>>#doRebuildMethodDictionary",				"RGMethod>>#pvtTagsDo:",				"RGObjectTest>>#testResolveability",				"RGPackage>>#pvtExtensionMethodsDo:",				"RGPackage>>#pvtTagsForClassesDo:",				"RGPackage>>#pvtDefinedBehaviorsDo:",				"RGPackage>>#importClasses:",				"RGPackageDefinition>>#extendedClasses",				"RGPackageDefinition>>#lookupClassNamed:",				"RGPointerLayout>>#pvtSlotsDo:",				"RGPointerLayout>>#resolveSlot:ifFound:ifNone:",				"RGReadOnlyBackendTest>>#testReadOnlyErrors",				"RGReadOnlyBackendTest class>>#removeFromSystem:",				"RGReadOnlyBackendTest class>>#traitComposition:",				"RGReadOnlyBackendTest class>>#fileOutLocalMethodsInCategory:on:",				"RGReadOnlyBackendTest class>>#recategorizeSelector:from:to:",				"RGReadOnlyBackendTest class>>#doRebuildMethodDictionary",				"RGReadOnlyImageBackend>>#behaviorsFor:do:",				"RGReadOnlyImageBackend>>#tagsForMethodsFor:do:",				"RGReadOnlyImageBackend>>#aliasesFor:do:",				"RGReadOnlyImageBackend>>#tagsForMethod:do:",				"RGReadOnlyImageBackend>>#tagsForClass:do:",				"RGReadOnlyImageBackend>>#localMethodsFor:do:",				"RGReadOnlyImageBackend>>#classVariablesFor:do:",				"RGReadOnlyImageBackend>>#exclusionsFor:do:",				"RGReadOnlyImageBackend>>#slotsFor:do:",				"RGReadOnlyImageBackend>>#extensionMethodsFor:do:",				"RGReadOnlyImageBackend>>#globalVariablesFor:do:",				"RGReadOnlyImageBackend>>#transformationsFor:do:",				"RGReadOnlyImageBackendTest>>#testReadOnlyErrors",				"RGReadOnlyImageBackendTest class>>#removeFromSystem:",				"RGReadOnlyImageBackendTest class>>#traitComposition:",				"RGReadOnlyImageBackendTest class>>#fileOutLocalMethodsInCategory:on:",				"RGReadOnlyImageBackendTest class>>#recategorizeSelector:from:to:",				"RGReadOnlyImageBackendTest class>>#doRebuildMethodDictionary",				"RGTestClass class>>#removeFromSystem:",				"RGTestClass class>>#traitComposition:",				"RGTestClass class>>#fileOutLocalMethodsInCategory:on:",				"RGTestClass class>>#recategorizeSelector:from:to:",				"RGTestClass class>>#doRebuildMethodDictionary",				"RGTestTrait classTrait>>#traitComposition:",				"RGTestTrait classTrait>>#fileOutLocalMethodsInCategory:on:",				"RGTestTrait classTrait>>#recategorizeSelector:from:to:",				"RGTestTrait classTrait>>#doRebuildMethodDictionary",				"RGTraitAlias>>#pvtAliasesDo:",				"RGTraitComposition>>#pvtTransformationsDo:",				"RGTraitCompositionVisitor>>#visitMessageNode:",				"RGTraitDescriptionStrategy>>#name:",				"RGTraitExclusion>>#pvtExclusionsDo:",				"RGTraitTest>>#testBehaviorWithProtocols",				"RGTraitTest>>#testBehaviorWithMethods",				"RGTraitTest class>>#removeFromSystem:",				"RGTraitTest class>>#traitComposition:",				"RGTraitTest class>>#fileOutLocalMethodsInCategory:on:",				"RGTraitTest class>>#recategorizeSelector:from:to:",				"RGTraitTest class>>#doRebuildMethodDictionary",				"RGTraitV2DescriptionStrategy>>#instanceVariables:",				"RGTraitV2Strategy>>#pvtSharedPoolsDo:",				"RGTraitV2Strategy>>#classVariables:",				"RGTraitV2Strategy>>#copyForBehaviorDefinitionPostCopy",				"RGTraitV2Strategy>>#sharedPools:",				"RGTraitV2Strategy>>#pvtClassVariablesDo:",				"RPackage>>#renameExtensionsPrefixedWith:to:",				"RPackage>>#removeClass:",				"RPackage>>#importPackage:",				"RPackage>>#updateDefinedClassNamed:withNewName:",				"RPackage>>#methods",				"RPackage>>#importProtocol:forClass:",				"RPackage>>#renameTo:",				"RPackage>>#removeMethods:",				"RPackage>>#removeClassDefinitionName:",				"RPackage>>#classNamesAndExtensionSelectorsDo:",				"RPackage>>#basicImportClass:",				"RPackage>>#extensionMethods",				"RPackage>>#demoteToTagInPackageNamed:",				"RPackage>>#removeFromSystem",				"RPackage>>#renameTagsPrefixedWith:to:",				"RPackage>>#fileOut",				"RPackage>>#removeClassTagsForClassNamed:",				"RPackage>>#definedClasses",				"RPackage>>#removeClassesMatchingTag:",				"RPackage>>#importClasses:",				"RPackageIncrementalTest>>#tearDown",				"RPackageIncrementalTest>>#testPackageOfClassForClassesNotDefinedInPackageButJustExtendingIt",				"RPackageOrganizer>>#fullyRemoveClassNamed:",				"RPackageOrganizer>>#initializeExtensionsFor:protocol:",				"RPackageOrganizer>>#registerPackage:",				"RPackageOrganizer>>#packageNamesDo:",				"RPackageOrganizer>>#initializeMethodsFor:",				"RPackageOrganizer>>#ensureExistAndRegisterPackageNamed:",				"RPackageOrganizer>>#unregisterPackage:",				"RPackageOrganizer>>#systemClassRenamedActionFrom:",				"RPackageOrganizer>>#basicInitializeFromPackagesList:",				"RPackageOrganizer>>#renamePackage:from:to:",				"RPackageOrganizer>>#systemClassReorganizedActionFrom:",				"RPackageOrganizerTest>>#testTestPackages",				"RPackageOrganizerTest>>#tearDown",				"RPackageOrganizerTest>>#testRegisteredIsThere",				"RPackageOrganizerTest>>#testRegisteredIsIncludedInPackageNames",				"RPackageOrganizerTest>>#testTestPackageNames",				"RPackageOrganizerTest>>#testUnregisterBasedOnNames",				"RPackageReadOnlyCompleteSetupTest>>#testClassesAndExtensionMethodsDo",				"RPackageReadOnlyCompleteSetupTest>>#testClassNamesAndExtensionSelectorsDo",				"RPackageSet>>#unregister",				"RPackageTag>>#asRPackage",				"RPackageTag>>#renameTo:category:",				"RPackageTag>>#renameTo:",				"RPackageTag>>#promoteAsRPackage",				"RPackageTagTest>>#tearDown",				"RPackageTest>>#testHierarchyRoots",				"RPackageTest>>#testRoots",				"RPackageTest>>#tearDown",				"RPackageTestCase>>#runCase",				"RPackageWithDoTest>>#testDo",				"RPackageWithDoTest>>#testDo2",				"RSAbstractAnimation>>#release",				"RSAbstractAnimation>>#removeInteractionIfPresent:",				"RSAbstractAnimation class>>#removeFromSystem:",				"RSAbstractAnimation class>>#traitComposition:",				"RSAbstractAnimation class>>#fileOutLocalMethodsInCategory:on:",				"RSAbstractAnimation class>>#recategorizeSelector:from:to:",				"RSAbstractAnimation class>>#doRebuildMethodDictionary",				"RSAbstractCompactTreeLayout>>#initialize:whoseFatherIs:",				"RSAbstractConnection>>#deleteAllWindows",				"RSAbstractContextInteraction>>#onShape:",				"RSAbstractFlowLayout>>#doExecute:",				"RSAbstractGraphLayout>>#shiftTree:by:",				"RSAbstractGraphLayout>>#validateCycleFor:path:",				"RSAbstractHorizontalTreeLayout>>#rearrangeByLayers:",				"RSAbstractHorizontalTreeLayout>>#layout:atPoint:atLayer:",				"RSAbstractLine>>#markersDo:",				"RSAbstractLineLayout>>#doExecute:",				"RSAbstractMarkerDecoration>>#renderIn:",				"RSAbstractPopupInteraction>>#registerRemoveEventsOn:",				"RSAbstractRegularTreeLayout>>#horizontallyReverse:",				"RSAbstractRegularTreeLayout>>#verticallyReverse:",				"RSAbstractSunburstLayout>>#doExecute:",				"RSAbstractUMLClassRenderer>>#groupFor:",				"RSAbstractVerticalTreeLayout>>#rearrangeByLayers:",				"RSAbstractVerticalTreeLayout>>#translate:by:",				"RSAbstractVerticalTreeLayout>>#layout:atPoint:atLayer:",				"RSAbstractWeightedCircleLayout>>#weightSum:",				"RSAlgoritmia>>#step",				"RSAlignment>>#alignFromLeftUsing:",				"RSAlignment>>#alignFromTopUsing:",				"RSAlignment>>#alignFromCenterUsing:",				"RSAlignment>>#alignFromMiddleUsing:",				"RSAlignment>>#alignFromBottomUsing:",				"RSAlignment>>#alignFromLabelUsing:",				"RSAlignment>>#alignFromRightUsing:",				"RSAlignmentTest>>#testFromLeftWithFixedShape",				"RSAlpharo>>#removeJar",				"RSAlpharo>>#updateRedLine",				"RSAlpharo>>#setAnimationsIn:",				"RSAlpharo>>#setupLayoutIn:",				"RSAnimationExamples>>#example46Lines",				"RSAnimationExamples>>#example04Phyco",				"RSAnimationExamples>>#example02BoxesLineCircles",				"RSAnimationExamples>>#example05ElasticEllipses",				"RSAnimationExamples>>#example23PerlinNoise",				"RSAnimationExamples>>#example43Waves",				"RSAnimationExamples>>#example13ArcNoise",				"RSAnimationExamples>>#example45Beziers",				"RSAnimationExamples>>#example18Rainbow",				"RSAnimationExamples>>#example26Bezier",				"RSAnimationExamples>>#example11C",				"RSAnimationExamples>>#example15SpaceDandy",				"RSAnimationExamples>>#example28AlteredWorld",				"RSAnimationExamples>>#example10Arcs",				"RSAnimationExamples>>#example12Sky",				"RSAnimationExamples>>#example17Flor",				"RSAnimationExamples>>#example09PerlinParticles",				"RSAnimationExamples>>#example30Perlin",				"RSAnimationExamples>>#example19Stars",				"RSAnimationExamples>>#example09b",				"RSAnimationExamples>>#example21Lines",				"RSAnimationExamples>>#example08ArcTree",				"RSAnimationExamples>>#example25AnimationCircle",				"RSAnimationExamples>>#example07CircleParty",				"RSAnimationExamples>>#example24RoassalPerlinNoise",				"RSAnimationExamples>>#example40Circles",				"RSAnimationExamples>>#example22Lines",				"RSAnimationExamples>>#example38PerlinRose",				"RSAnimationExamples>>#example01BoxWindmill",				"RSAnimationExamples>>#example39Duna",				"RSAnimationExamples>>#example41River",				"RSAnimationExamples>>#example06LinePatterns",				"RSAthensMorph>>#release",				"RSAthensMorph>>#drawShapes",				"RSAthensMorph>>#showRectanglesIfNecessary:",				"RSAthensMorph>>#checkSession",				"RSAthensRenderer>>#buildPolylinePath:",				"RSAthensRenderer>>#visitChildrenIfNecessary:",				"RSAthensRenderer>>#buildSVGLinePath:",				"RSAthensRenderer>>#buildSVGPath:",				"RSAthensRenderer>>#buildPolygonPath:",				"RSBarChartExample>>#example01TwoBars",				"RSBaselineCalypso>>#setLevels:in:level:",				"RSBaselineCalypso>>#layoutMenu:",				"RSBaselineCalypso>>#applyTheme:",				"RSBaselineCalypso>>#resizeNodes:key:",				"RSBaselineCalypso>>#showHideNames:",				"RSBasicAnimationExamples>>#example03Ramp",				"RSBasicAnimationExamples>>#example06Parallel",				"RSBasicAnimationExamples>>#example02Sequential",				"RSBasicAnimationExamples>>#example01Basic",				"RSBasicShapeExamples>>#example12BasicLine",				"RSBasicShapeExamples>>#example34PaletteVisualization",				"RSBasicShapeExamples>>#example11ScaleMouseDistance",				"RSBasicShapeExamples>>#example10EllipseMouseMove",				"RSBoundingShape>>#removeConnectedEdges",				"RSBoundingShape>>#updateConnectedEdges",				"RSBoundingShape>>#updateConnectedLines",				"RSBoundingShape>>#removeConnectedLines",				"RSBoundingShape>>#allRecursiveConnectedShapesIn:",				"RSCamera class>>#removeFromSystem:",				"RSCamera class>>#traitComposition:",				"RSCamera class>>#fileOutLocalMethodsInCategory:on:",				"RSCamera class>>#recategorizeSelector:from:to:",				"RSCamera class>>#doRebuildMethodDictionary",				"RSCanvas>>#pushBackEdges",				"RSCanvas>>#playAnimations",				"RSCanvas>>#deepShapeFromModel:result:",				"RSCanvas>>#asShape",				"RSCanvas>>#deepShapesFromModel:result:",				"RSCanvas>>#addAll:",				"RSCanvas>>#deepNodes",				"RSCanvas>>#addAllShapes:",				"RSCanvas>>#deepShapesFromModels:result:",				"RSCanvasController>>#configuration:",				"RSCanvasController>>#onShape:",				"RSCanvasController>>#renderLegendOn:",				"RSCanvasController>>#interactions:",				"RSCat>>#addStars",				"RSCat>>#newStar",				"RSCellLayout>>#doExecute:",				"RSChannel>>#doUnmark",				"RSChannel>>#doMark",				"RSChart>>#yScale:",				"RSChart>>#renderIn:",				"RSChart>>#xScale:",				"RSChart>>#renderDecorationIn:",				"RSChart>>#renderPlotsIn:",				"RSChartExample>>#example18Animation",				"RSChartExample>>#example09LinearSqrtSymlog",				"RSChartPopupDecoration>>#updatePopup:event:",				"RSChessBackgroundInteraction>>#onShape:",				"RSCircleLayout>>#doExecute:",				"RSClusterLayout>>#initializeNode:",				"RSClusterLayout>>#computePosition:",				"RSClusterLayout>>#doExecute:",				"RSClusterLayout>>#draw:",				"RSClusteringLayout>>#doExecute:",				"RSClusteringLayout>>#getClusterFor:",				"RSColorPaletteChooser>>#release",				"RSColoredTreePalette>>#shapes:",				"RSColoredTreePalette>>#allLeavesAccessibleFrom:in:",				"RSColoredTreePalette>>#assignColor",				"RSColoredTreePaletteTest>>#testPalettes",				"RSComposite>>#deepShapesFromModel:result:",				"RSComposite>>#pushBackEdges",				"RSComposite>>#sessionChanged",				"RSComposite>>#addAll:",				"RSComposite>>#addAllShapes:",				"RSComposite>>#children:",				"RSComposite>>#updateConnectedEdges",				"RSComposite>>#addRecursivelyIn:",				"RSComposite>>#updateConnectedLines",				"RSComposite>>#deepShapeFromModel:result:",				"RSComposite>>#padding:",				"RSComposite>>#deepShapesFromModels:result:",				"RSComposite>>#adjustToChildren",				"RSDelaunay class>>#supertriangle:",				"RSDelaunayExample>>#step",				"RSEasel>>#release",				"RSElasticBoxInteraction>>#removeInteractionIfPresent:",				"RSElasticBoxInteraction class>>#removeFromSystem:",				"RSElasticBoxInteraction class>>#traitComposition:",				"RSElasticBoxInteraction class>>#fileOutLocalMethodsInCategory:on:",				"RSElasticBoxInteraction class>>#recategorizeSelector:from:to:",				"RSElasticBoxInteraction class>>#doRebuildMethodDictionary",				"RSEquidistantCircleLayout>>#doExecute:",				"RSExpandingBoxes>>#scale:at:",				"RSExpandingBoxes>>#relayout:",				"RSExpandingBoxes>>#saveCurrent:",				"RSExpandingBoxes>>#close:",				"RSExporterTest class>>#testParameters",				"RSFlowCanvas>>#updateBreadcrumbs",				"RSFlowCanvas>>#clickOnModel:",				"RSForceBasedLayout>>#stepGravityForce",				"RSForceBasedLayout>>#calculateAutoRepulse",				"RSForceBasedLayout>>#stepEdgeForces",				"RSForceBasedLayout>>#stepFriction",				"RSForceBasedLayout>>#step",				"RSForceBasedLayout>>#doExecute:",				"RSForceBasedLayout>>#stepNodeRepulsion",				"RSForceBuilder>>#update:",				"RSForceBuilder>>#reset",				"RSForceLayoutInSpacesBuilder>>#fill:with:",				"RSForceLayoutInSpacesBuilder>>#addEdgesOf:to:",				"RSForceLayoutInSpacesBuilder>>#renderIn:",				"RSForceLayoutInSpacesBuilder>>#abandonLayout:",				"RSForceLayoutInSpacesBuilder>>#dragEnd:",				"RSForceLayoutSteppingInteraction>>#onShape:",				"RSGridLayout>>#doExecute:",				"RSGroup>>#pushFront",				"RSGroup>>#color:",				"RSGroup>>#size:",				"RSGroup>>#when:send:to:",				"RSGroup>>#shapesFromModels:",				"RSGroup>>#pushBack",				"RSGroup>>#@",				"RSGroup>>#addInteraction:",				"RSGroup>>#translucent",				"RSGroup>>#withBorder",				"RSGroup>>#translateBy:",				"RSGroup>>#when:do:",				"RSHierarchyPackerInteraction>>#fill:with:",				"RSHighlightable>>#doHighlightShapes:",				"RSHighlightable>>#doHighlight:",				"RSHighlightable>>#removeInteractionIfPresent:",				"RSHighlightable>>#unhighlightRecordedShapes:",				"RSHighlightable class>>#showEdges:using:from:",				"RSHighlightable class>>#withAntAnimation",				"RSHighlightable class>>#removeFromSystem:",				"RSHighlightable class>>#traitComposition:",				"RSHighlightable class>>#fileOutLocalMethodsInCategory:on:",				"RSHighlightable class>>#recategorizeSelector:from:to:",				"RSHighlightable class>>#doRebuildMethodDictionary",				"RSHighlightableExamples>>#example02ElementEdges",				"RSHighlightableExamples>>#example06IterateNext",				"RSHighlightableExamples>>#example03Interactive",				"RSHighlightableExamples>>#example08DependendMethods",				"RSHighlightableExamples>>#example01Basic",				"RSHighlightableTest>>#testWithEdges2",				"RSHighlightableTest>>#testWithEdges",				"RSHistogramExample>>#example06Animations",				"RSHorizontalVanDerPloegTreeLayout>>#initialize:associations:",				"RSHorizontalVanDerPloegTreeLayout>>#secondWalk:depth:breadth:",				"RSHorizontalVanDerPloegTreeLayout class>>#removeFromSystem:",				"RSHorizontalVanDerPloegTreeLayout class>>#traitComposition:",				"RSHorizontalVanDerPloegTreeLayout class>>#fileOutLocalMethodsInCategory:on:",				"RSHorizontalVanDerPloegTreeLayout class>>#recategorizeSelector:from:to:",				"RSHorizontalVanDerPloegTreeLayout class>>#doRebuildMethodDictionary",				"RSInspectableExample>>#example02Inspect",				"RSLabelGenerator>>#searchMin:max:desired:",				"RSLayoutExamples>>#example20FlowLayout",				"RSLayoutExamples>>#example23Roassal3CommitsWithTimeGaps",				"RSLayoutExamples>>#example13VisualizeQuatree",				"RSLayoutExamples>>#example17ForceBasedLayout",				"RSLayoutExamples>>#example01LayoutBasic",				"RSLayoutExamples>>#example21TreeLayoutEllipses",				"RSLayoutExamples>>#example06TreeLayout",				"RSLayoutExamples>>#example19AutomaticLayoutWhenWindowIsResized",				"RSLayoutExamples>>#example22ClassHierarchies",				"RSLegendExamples>>#example09Lines",				"RSLegendExamples>>#example12OnPopup",				"RSLegendExamples>>#example08Polygons",				"RSLineBuilder>>#useElementAssociations:",				"RSLineBuilder>>#connectFromAll:to:",				"RSLineBuilder>>#connectFrom:to:",				"RSLineBuilder>>#connectFrom:toAll:",				"RSLineBuilder>>#useAssociations:",				"RSLineBuilder>>#connectToAll:",				"RSLineBuilder class>>#removeFromSystem:",				"RSLineBuilder class>>#traitComposition:",				"RSLineBuilder class>>#fileOutLocalMethodsInCategory:on:",				"RSLineBuilder class>>#recategorizeSelector:from:to:",				"RSLineBuilder class>>#doRebuildMethodDictionary",				"RSLineDrivenLayout>>#executeOnElements:",				"RSLineDrivenLayout>>#edgesDo:",				"RSLinePlot>>#renderIn:",				"RSLinePlot class>>#removeFromSystem:",				"RSLinePlot class>>#traitComposition:",				"RSLinePlot class>>#fileOutLocalMethodsInCategory:on:",				"RSLinePlot class>>#recategorizeSelector:from:to:",				"RSLinePlot class>>#doRebuildMethodDictionary",				"RSLissajous>>#build",				"RSMondrian>>#nodes:forEach:",				"RSMondrian>>#ordinalColor:",				"RSMondrian>>#translucentShapes",				"RSMonitorEvents>>#onNewEventDo:",				"RSMultiBezierEdgeBuilder>>#commonShapes:with:",				"RSNiceStepSizeGenerator>>#offsets:q:",				"RSNodeOnTopWhenPositionChanged>>#moveToTop:",				"RSNormalizer>>#normalize:",				"RSNormalizer>>#minAndMaxFor:",				"RSObjectWithProperty>>#release",				"RSObjectWithProperty>>#removeInteractionIfPresent:",				"RSObjectWithProperty class>>#removeFromSystem:",				"RSObjectWithProperty class>>#traitComposition:",				"RSObjectWithProperty class>>#fileOutLocalMethodsInCategory:on:",				"RSObjectWithProperty class>>#recategorizeSelector:from:to:",				"RSObjectWithProperty class>>#doRebuildMethodDictionary",				"RSPAnimationTest class>>#testParameters",				"RSPBoundingTest class>>#testParameters",				"RSPLinesTest class>>#testParameters",				"RSParallelAnimation>>#start",				"RSParallelAnimation>>#step",				"RSParallelAnimation>>#pause",				"RSParallelAnimation>>#continue",				"RSPieChartExample>>#initializePresenters",				"RSPieExamples>>#example07Dendi",				"RSPieExamples>>#example11OpenningAnimation",				"RSPieExamples>>#example19Buttons",				"RSPieExamples>>#example12RainbowPie",				"RSPieExamples>>#example18ManyPies",				"RSPieExamples>>#example24ManyPies",				"RSPieExamples>>#example23RotatedAnimation",				"RSPieExamples>>#example09TickAnimation",				"RSPieExamples>>#example20AddingRemoving",				"RSPieExamples>>#example15Clockwise",				"RSPieExamples>>#esportPrizepool",				"RSPieExamples>>#example04SegmentSpacingAnimation",				"RSPieExamples>>#example14Pyramid",				"RSPieExamples>>#example22RotatedAnimation",				"RSPieExamples>>#example10CornerRadiiAnimation",				"RSPolygon>>#extent:",				"RSPolygon>>#writeSVG2On:",				"RSPolygon class>>#fitPolygonToSquare:",				"RSPolyline>>#writeSVG2On:",				"RSQuadTreeF class>>#withAll:rectangle:",				"RSRadialTreeLayout>>#moveAllElementsToTopLeft:",				"RSRadialTreeLayout>>#doExecute:",				"RSRadialTreeLayout>>#layoutLayer:radius:from:to:",				"RSRadialTreeLayout>>#radialDraw:",				"RSRadialTreeLayout>>#computePosition:",				"RSRadialTreeLayout>>#toRadialTree:withMod:",				"RSRadialTreeLayout>>#rotateSubtreeFrom:by:",				"RSRectangleForceLayout>>#stepRectangleForces",				"RSRectanglePackLayout>>#doExecute:",				"RSResize>>#sameWidth",				"RSResize>>#sameSize",				"RSResize>>#sameHeight",				"RSResizeParentWhenChildMoves>>#onShape:",				"RSRoassal3Test>>#testsRsValue",				"RSRoassal3Test>>#testSubscriberClass",				"RSSVGAnimationExamples>>#example02Miku",				"RSSVGAnimationExamples>>#example01SVGIcons",				"RSSVGAnimationExamples>>#example05Corona",				"RSSVGExporter>>#visitChildrenIfNecessary:",				"RSSVGExporter>>#writeLabelDefinitionsIfNecessary:",				"RSSVGExporter>>#visitCanvas:",				"RSSVGPath>>#centerSegments",				"RSSVGPath>>#extent:",				"RSSVGPath>>#computePolygons",				"RSSVGShapeExamples>>#example02SpockLizard",				"RSSankey>>#resolveCollisions:",				"RSSankey>>#relaxRightToLeft:boxes:",				"RSSankey>>#computeLinesDepths",				"RSSankey>>#computeBoxesDepths",				"RSSankey>>#relaxLeftToRight:boxes:",				"RSSankey>>#computeBoxesBreadths",				"RSSankey>>#setupBoxesDepth:",				"RSSankey>>#computeBoxesValues",				"RSSankey>>#updateBoxes",				"RSSankeyBox>>#computeLinesDepths",				"RSSankeyExamples>>#example05Animation",				"RSSankeyExamples>>#example06Gradient",				"RSSearchInCanvasInteraction>>#doHighlightShapes:",				"RSSearchInCanvasInteraction>>#doUnhighlightShapes",				"RSSearchInCanvasInteraction>>#cleanAndResetFixedshapes",				"RSSearchInCanvasInteraction>>#unhighlightShapes:",				"RSSegmentsVisitor>>#visitBoundingShape:",				"RSShape>>#addPendingAnimationsIn:",				"RSShapeExamples>>#example05CapStyles",				"RSShapeExamples>>#example38Transformable",				"RSShapeExamples>>#example45CompositeDragResize",				"RSShapeExamples>>#example12Polygons",				"RSSimpleForceBasedLayout>>#doExecute:",				"RSSpecExamplesTest>>#testRunExamples",				"RSSugiyamaLayout>>#cl:u:v:",				"RSSugiyamaLayout>>#layoutAt:",				"RSSugiyamaLayout>>#assignLabels:",				"RSSunburstBuilder>>#from:nesting:leaves:",				"RSSunburstBuilder>>#from:using:",				"RSSunburstExamples>>#example08SunburstExplorer",				"RSTAnnounceable>>#removeInteractionIfPresent:",				"RSTAnnounceable classTrait>>#traitComposition:",				"RSTAnnounceable classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTAnnounceable classTrait>>#recategorizeSelector:from:to:",				"RSTAnnounceable classTrait>>#doRebuildMethodDictionary",				"RSTContainer>>#deepShapesFromModel:result:",				"RSTContainer>>#pushBackEdges",				"RSTContainer>>#deepShapeFromModel:result:",				"RSTContainer>>#addAll:",				"RSTContainer>>#deepShapesFromModels:result:",				"RSTContainer>>#addAllShapes:",				"RSTContainer classTrait>>#traitComposition:",				"RSTContainer classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTContainer classTrait>>#recategorizeSelector:from:to:",				"RSTContainer classTrait>>#doRebuildMethodDictionary",				"RSTEdge classTrait>>#traitComposition:",				"RSTEdge classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTEdge classTrait>>#recategorizeSelector:from:to:",				"RSTEdge classTrait>>#doRebuildMethodDictionary",				"RSTGapsHolder classTrait>>#traitComposition:",				"RSTGapsHolder classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTGapsHolder classTrait>>#recategorizeSelector:from:to:",				"RSTGapsHolder classTrait>>#doRebuildMethodDictionary",				"RSTMarkeable>>#markersDo:",				"RSTMarkeable classTrait>>#traitComposition:",				"RSTMarkeable classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTMarkeable classTrait>>#recategorizeSelector:from:to:",				"RSTMarkeable classTrait>>#doRebuildMethodDictionary",				"RSTPositionable classTrait>>#traitComposition:",				"RSTPositionable classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTPositionable classTrait>>#recategorizeSelector:from:to:",				"RSTPositionable classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#traitComposition:",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularHorizontalTreeLayout classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeLayout>>#initialize:associations:",				"RSTWalkBasedRegularTreeLayout>>#secondWalk:depth:breadth:",				"RSTWalkBasedRegularTreeLayout classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeLayout classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeLayout classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeLayout classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeLayoutOnShapeProperties classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeLayoutRandomizedGaps classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeLayoutRandomizedGaps classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeLayoutRandomizedGaps classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeLayoutRandomizedGaps classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularTreeLayoutRandomizedPositioning classTrait>>#traitComposition:",				"RSTWalkBasedRegularTreeLayoutRandomizedPositioning classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularTreeLayoutRandomizedPositioning classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularTreeLayoutRandomizedPositioning classTrait>>#doRebuildMethodDictionary",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#traitComposition:",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#fileOutLocalMethodsInCategory:on:",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#recategorizeSelector:from:to:",				"RSTWalkBasedRegularVerticalTreeLayout classTrait>>#doRebuildMethodDictionary",				"RSTransformable>>#removeHandles:",				"RSUMLExamples>>#example04Nolines",				"RSUMLSequenceBuilder>>#lifeLines:",				"RSUMLSequenceDescriptor>>#currentIndentOfLink:",				"RSUMLSequenceDescriptor>>#createCircles",				"RSUMLSequenceDescriptor>>#cumulateWidths",				"RSVanDerPloegTreeLayout>>#initialize:associations:",				"RSVanDerPloegTreeLayout>>#secondWalk:depth:breadth:",				"RSVanDerPloegTreeLayout class>>#removeFromSystem:",				"RSVanDerPloegTreeLayout class>>#traitComposition:",				"RSVanDerPloegTreeLayout class>>#fileOutLocalMethodsInCategory:on:",				"RSVanDerPloegTreeLayout class>>#recategorizeSelector:from:to:",				"RSVanDerPloegTreeLayout class>>#doRebuildMethodDictionary",				"RSVerticalGridLayout>>#doExecute:",				"RSWeightedCircleLayout>>#doExecute:",				"RSXmasExample>>#myIcon",				"RSXmasExample>>#background",				"RSXmasTree>>#swing",				"RSXmasTree>>#renderIn:",				"RadioButtonGroup>>#initialize",				"RadioButtonGroup>>#addRadioButton:",				"RadioButtonGroupPresenter>>#linkRadioButton:",				"RadioButtonGroupPresenter>>#initializePresenter",				"RandomTestDistributions class>>#removeFromSystem:",				"RandomTestDistributions class>>#recategorizeSelector:from:to:",				"RandomTestDistributions class>>#traitComposition:",				"RandomTestDistributions class>>#fileOutLocalMethodsInCategory:on:",				"RandomTestDistributions class>>#doRebuildMethodDictionary",				"ReAddRemoveDependentsRule>>#basicCheck:",				"ReAsOrderedCollectionNotNeededRule>>#initialize",				"ReAssertEqualSignIntoAssertEqualsRule class>>#removeFromSystem:",				"ReAssertEqualSignIntoAssertEqualsRule class>>#traitComposition:",				"ReAssertEqualSignIntoAssertEqualsRule class>>#fileOutLocalMethodsInCategory:on:",				"ReAssertEqualSignIntoAssertEqualsRule class>>#recategorizeSelector:from:to:",				"ReAssertEqualSignIntoAssertEqualsRule class>>#doRebuildMethodDictionary",				"ReCodeBasedTestCase>>#tearDown",				"ReCodeCruftLeftInMethodsRule>>#initialize",				"ReCriticEngine>>#nodeCritiquesOf:",				"ReImplementedNotSentRule class>>#allMessages",				"ReMethodSourceContainsLinefeedsRule>>#check:forCritiquesDo:",				"ReMissingSubclassResponsibilityRule>>#check:forCritiquesDo:",				"ReModifiesCollectionRule>>#modifiesCollection:inAnyStatement:",				"ReNoNilAssignationInInitializeRule>>#check:forCritiquesDo:",				"ReNoPrintStringInPrintOnRule>>#check:forCritiquesDo:",				"ReNodeMatchRule>>#check:forCritiquesDo:",				"ReNodeMatchRule>>#matchesAny:",				"ReRefersToClassRule>>#check:forCritiquesDo:",				"ReRuleManager class>>#ruleToggleSettingsOn:",				"ReRuleManager class>>#setBeginnerProfile",				"ReRuleManager class>>#newManagerForPackage:",				"ReRuleManager class>>#setDefaultProfile",				"ReSelfSentNotImplementedRule>>#check:forCritiquesDo:",				"ReSentNotImplementedRule>>#check:forCritiquesDo:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#removeFromSystem:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#traitComposition:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#fileOutLocalMethodsInCategory:on:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#recategorizeSelector:from:to:",				"ReShouldSendSuperSetUpAsFirstMessage class>>#doRebuildMethodDictionary",				"ReShouldSendSuperTearDownAsLastMessage class>>#removeFromSystem:",				"ReShouldSendSuperTearDownAsLastMessage class>>#traitComposition:",				"ReShouldSendSuperTearDownAsLastMessage class>>#fileOutLocalMethodsInCategory:on:",				"ReShouldSendSuperTearDownAsLastMessage class>>#recategorizeSelector:from:to:",				"ReShouldSendSuperTearDownAsLastMessage class>>#doRebuildMethodDictionary",				"ReShouldTransformedIntoAssertRule class>>#removeFromSystem:",				"ReShouldTransformedIntoAssertRule class>>#traitComposition:",				"ReShouldTransformedIntoAssertRule class>>#fileOutLocalMethodsInCategory:on:",				"ReShouldTransformedIntoAssertRule class>>#recategorizeSelector:from:to:",				"ReShouldTransformedIntoAssertRule class>>#doRebuildMethodDictionary",				"ReSizeCheckRule>>#selectors",				"ReSmalllintChecker>>#getCritiquesAbout:by:",				"ReSmalllintChecker>>#checkMethodsForClass:",				"ReSmalllintChecker>>#reParseRule",				"ReSmalllintTest>>#assertEnvironment:hasAllMethodsOfTheResult:",				"ReSmalllintTest>>#ruleFor:plusSelectors:",				"ReSmalllintTest>>#classEnvironmentWithAll:",				"ReSmalllintTest>>#testUniqueIdentifierName",				"ReSmalllintTest>>#classAndMetaClassRuleFor:plusClasses:",				"ReSmalllintTest>>#assertEnvironment:hasAllClassesOfTheResult:",				"ReSubclassResponsibilityNotDefinedRule>>#check:forCritiquesDo:",				"ReTSUnitGroupedRule classTrait>>#traitComposition:",				"ReTSUnitGroupedRule classTrait>>#fileOutLocalMethodsInCategory:on:",				"ReTSUnitGroupedRule classTrait>>#recategorizeSelector:from:to:",				"ReTSUnitGroupedRule classTrait>>#doRebuildMethodDictionary",				"ReTempVarOverridesInstVarRule>>#check:forCritiquesDo:",				"ReTestClassNameShouldEndWithTestRule class>>#removeFromSystem:",				"ReTestClassNameShouldEndWithTestRule class>>#traitComposition:",				"ReTestClassNameShouldEndWithTestRule class>>#fileOutLocalMethodsInCategory:on:",				"ReTestClassNameShouldEndWithTestRule class>>#recategorizeSelector:from:to:",				"ReTestClassNameShouldEndWithTestRule class>>#doRebuildMethodDictionary",				"ReTestClassNameShouldNotEndWithTests class>>#removeFromSystem:",				"ReTestClassNameShouldNotEndWithTests class>>#traitComposition:",				"ReTestClassNameShouldNotEndWithTests class>>#fileOutLocalMethodsInCategory:on:",				"ReTestClassNameShouldNotEndWithTests class>>#recategorizeSelector:from:to:",				"ReTestClassNameShouldNotEndWithTests class>>#doRebuildMethodDictionary",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#removeFromSystem:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#traitComposition:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#fileOutLocalMethodsInCategory:on:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#recategorizeSelector:from:to:",				"ReTestClassNotInPackageWithTestEndingNameRule class>>#doRebuildMethodDictionary",				"ReThemeAccessRule>>#check:forCritiquesDo:",				"ReToDoRule>>#sendsAtWith:inAnyOf:",				"ReUncommonMessageSendRule>>#check:forCritiquesDo:",				"ReUsesTrueRule>>#check:forCritiquesDo:",				"ReVariableAssignedLiteralRule>>#check:forCritiquesDo:",				"ReVariableReferencedOnceRule>>#check:forCritiquesDo:",				"RealEstateAgent class>>#strictlyStaggeredInitialFrameFor:initialExtent:world:",				"RealEstateAgent class>>#standardFor:initialExtent:world:",				"RealEstateAgent class>>#assignCollapsePointFor:",				"Rectangle class>>#merging:",				"RectangleTest>>#testAreasOutside2",				"RectangleTest>>#testAreasOutside1",				"ReduceTest>>#testReduceCollection3Arguments",				"ReduceTest>>#testReduceRight2Arguments",				"ReduceTest>>#testReduceRight3Arguments",				"ReduceTest>>#testReduceLeft2Arguments",				"ReduceTest>>#testReduceCollection2Arguments",				"ReduceTest>>#testReduceLeft3Arguments",				"ReferenceFinder>>#searchForObject",				"ReferenceFinder>>#backlinkFor:",				"ReflectivityControlTest>>#testFailingDoubleRWInstead",				"ReflectivityControlTest>>#testInsteadSendMultipleSites",				"ReflectivityDemos>>#demoSelfSendLogging",				"RelationSet>>#do:",				"ReleaseTest>>#testShouldWorldMorphBeAfterFontClassesInStartupList",				"ReleaseTest>>#testAllClassPoolBindingAreClassVariables",				"ReleaseTest>>#testManifestNamesAccordingToPackageNames",				"ReleaseTest>>#testUndeclared",				"ReleaseTest>>#testKeyClassesArePresentInStartupList",				"ReleaseTest>>#testAllClassPoolBindingHaveDefiningClass",				"RewriteRuleChangesBrowser>>#accept",				"RewriteRuleChangesBrowser>>#updateChanges",				"RingChunkImporter>>#fileInFrom:",				"RubAbstractTextArea>>#markBackgroundColors",				"RubAbstractTextArea>>#withDecoratorsNamed:",				"RubAbstractTextArea>>#withoutDecoratorsNamed:",				"RubAnnotationDisplayer class>>#removeFromSystem:",				"RubAnnotationDisplayer class>>#tabWidthMenuOn:",				"RubAnnotationDisplayer class>>#traitComposition:",				"RubAnnotationDisplayer class>>#fileOutLocalMethodsInCategory:on:",				"RubAnnotationDisplayer class>>#recategorizeSelector:from:to:",				"RubAnnotationDisplayer class>>#doRebuildMethodDictionary",				"RubCharacterScanner>>#setFont",				"RubCodeSizeFeedback>>#textSize",				"RubExtraSelectionDecorator>>#computeFindReplaceShapesFrom:to:",				"RubExtraSelectionDecorator>>#drawAllSelectionShapesOnAthensCanvas:",				"RubExtraSelectionDecorator>>#drawAllSelectionShapesOn:",				"RubExtraSelectionDecorator>>#computeSecondarySelectionShapesFrom:to:",				"RubParagraph>>#adjustRightX",				"RubScrolledTextModel class>>#removeFromSystem:",				"RubScrolledTextModel class>>#traitComposition:",				"RubScrolledTextModel class>>#fileOutLocalMethodsInCategory:on:",				"RubScrolledTextModel class>>#recategorizeSelector:from:to:",				"RubScrolledTextModel class>>#doRebuildMethodDictionary",				"RubScrolledTextMorph>>#manageLayoutInBounds:",				"RubScrolledTextMorph>>#textChanged",				"RubScrolledTextMorph>>#selectionChanged",				"RubScrolledTextMorph>>#withoutRulersNamed:",				"RubScrolledTextMorph>>#drawHighlightsOn:",				"RubScrolledTextMorph>>#withRulersNamed:",				"RubScrolledTextMorph>>#withRuler:",				"RubScrolledTextMorph>>#acceptContents",				"RubScrolledTextMorph>>#scrollerOffsetChanged",				"RubSegmentMorph>>#lineSegmentsDo:",				"RubSmalltalkEditor>>#findNextKeywordIn:selection:searchingForward:ifFound:",				"RubTextAreaExamples class>>#nicolaiAttributeFix",				"RubTextComposer>>#moveBy:",				"RubTextComposer>>#completeComposition",				"RubTextComposer>>#addNullLineWithIndex:andRectangle:",				"RubTextEditor>>#changeEmphasis:",				"RubTextEditor>>#saveContentsInFile",				"RubTextEditor>>#defaultCommandKeymapping",				"RubTextSegmentIconDisplayer>>#invokeIconMenuOfSegments:event:",				"RubUnderlinedSegmentMorph>>#drawUnderlineOn:",				"RubUnderlinedSegmentMorph>>#drawUnderlineOnAthensCanvas:",				"RubWorkspaceBarRuler class>>#removeFromSystem:",				"RubWorkspaceBarRuler class>>#traitComposition:",				"RubWorkspaceBarRuler class>>#fileOutLocalMethodsInCategory:on:",				"RubWorkspaceBarRuler class>>#recategorizeSelector:from:to:",				"RubWorkspaceBarRuler class>>#doRebuildMethodDictionary",				"RunArray>>#fillFrom:with:",				"RunArray>>#,",				"RunArray class>>#newFrom:",				"RuntimeTyperTest>>#testPlus",				"RxMatchOptimizer>>#determineTestMethod",				"RxMatcherTest>>#testSubexpressionCount",				"RxMatcherTest>>#testMatchingRangesIn",				"RxsCharSet>>#enumerableSetIgnoringCase:",				"SDL2 class>>#findSDL2",				"SDL2AthensDrawingExample>>#redraw",				"SDL2TouchExample>>#drawMoves",				"SHRBTextStyler>>#visitEnglobingErrorNode:",				"SHRBTextStyler>>#visitNode:",				"SHRBTextStyler>>#styleOpenParenthese:",				"SHRBTextStyler>>#visitArrayNode:",				"SHRBTextStyler>>#styleDocComment:",				"SHRBTextStyler>>#visitPragmaNode:",				"SHRBTextStyler>>#visitMessageNode:",				"SHRBTextStyler>>#visitMethodNode:",				"SHRBTextStyler>>#visitMethodComments:",				"SHRBTextStyler>>#visitSequenceNode:",				"SHRBTextStyler>>#visitBlockNode:",				"SHRBTextStyler>>#visitArgumentNodes:",				"SHRBTextStyler>>#visitTemporaryNodes:",				"SHRBTextStyler>>#visitCascadeNode:",				"SHRBTextStyler>>#visitLiteralArrayNode:",				"SHRBTextStyler class>>#removeFromSystem:",				"SHRBTextStyler class>>#attributeArrayForColor:emphasis:font:",				"SHRBTextStyler class>>#recategorizeSelector:from:to:",				"SHRBTextStyler class>>#initialTextAttributesForPixelHeight:styleTable:",				"SHRBTextStyler class>>#initialTextAttributesForPixelHeight:",				"SHRBTextStyler class>>#traitComposition:",				"SHRBTextStyler class>>#fileOutLocalMethodsInCategory:on:",				"SHRBTextStyler class>>#doRebuildMethodDictionary",				"SMTPClient>>#mailFrom:to:text:",				"STCommandLineHandler>>#installSourceFiles",				"STONReaderTest>>#testError",				"STONReaderTest>>#testSetWithIndirectReferenceElements",				"STONReaderTest>>#testSetWithReferenceElements",				"STONTestMap class>>#classTree:",				"STONTestMap class>>#classTreeExtended:",				"STONWriter>>#encodeString:",				"STONWriter>>#writeObject:",				"SUnitTest>>#testRan",				"ScaledDecimalTest>>#testCoercion",				"ScaledDecimalTest>>#testConvertFromNonDecimalFraction",				"ScaledDecimalTest>>#testScaleExtension",				"ScheduleTest>>#testDateAndTimes",				"ScrollBarMorph class>>#boxSamples",				"ScrollBarMorph class>>#arrowSamples",				"SelectRuleBrowser>>#removeAllItems",				"SelectRuleBrowser>>#addAllItems",				"SelectionMorph>>#borderColor:",				"SelectionMorph>>#alignLeftEdges",				"SelectionMorph>>#alignCentersVertically",				"SelectionMorph>>#distributeHorizontally",				"SelectionMorph>>#fillStyle:",				"SelectionMorph>>#addHandlesTo:box:",				"SelectionMorph>>#dismissViaHalo",				"SelectionMorph>>#doDup:fromHalo:handle:",				"SelectionMorph>>#alignCentersHorizontally",				"SelectionMorph>>#privateFullMoveBy:",				"SelectionMorph>>#drawOn:",				"SelectionMorph>>#borderWidth:",				"SelectionMorph>>#alignBottomEdges",				"SelectionMorph>>#alignRightEdges",				"SelectionMorph>>#distributeVertically",				"SelectionMorph>>#alignTopEdges",				"SelfPropagatingLinkDemo>>#installOnAllSendsInMethod:",				"SequenceableCollection>>#groupByRuns:",				"SequenceableCollection>>#putOn:",				"SequenceableCollection>>#atAll:put:",				"SequenceableCollection>>#groupsOf:",				"SequenceableCollection>>#stFasterDifferencePreservingOrder:",				"SequenceableCollection>>#asStringWithCr",				"SequenceableCollection>>#flatCollect:",				"SequenceableCollection>>#kth:ranking:atRandom:",				"SequenceableCollection>>#topologicalSortByAssociations:onCycleDo:",				"SequenceableCollection>>#asDigitsAt:in:do:",				"SequenceableCollection>>#allPairsDo:",				"SequenceableCollection>>#scan:init:",				"SessionCategory>>#renamedClass:from:to:",				"SessionManager>>#renamedClass:from:to:",				"SessionManager>>#unregisterHandler:",				"Set>>#collect:",				"Set>>#parseOptions:",				"Set>>#intersection:",				"Set>>#=",				"Set>>#difference:",				"Set>>#grow",				"Set>>#rehash",				"SetTest>>#testPrintOn",				"SetTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"SetTest>>#testOccurrencesOf",				"SetTest>>#testCopyNonEmptyWithout",				"SetTest>>#assertNoDuplicates:whenConvertedTo:",				"SetTest>>#testAsStringOnDelimiterOne",				"SetTest>>#testDo2",				"SetTest>>#testCopyNonEmptyWith",				"SetTest>>#testAsStringOnDelimiterLastOne",				"SetTest>>#testPrintOnDelimiter",				"SetTest>>#testPrintElementsOn",				"SetTest>>#testAsSortedCollection",				"SetTest>>#testRemoveAllFoundIn",				"SetTest>>#testAsByteArray",				"SetTest>>#testCopyNonEmptyWithoutAll",				"SetTest>>#testCopyNonEmptyWithoutNotIncluded",				"SetTest>>#testAsCommaStringOne",				"SetTest>>#testAsStringOnDelimiterLastMore",				"SetTest>>#testIntersectionItself",				"SetTest>>#testAsStringOnDelimiterMore",				"SetTest>>#testPrintOnDelimiterLast",				"SetTest>>#testWithAll",				"SetTest>>#testAsCommaStringMore",				"SetTest>>#testCopyEmptyWithoutAll",				"SetTest>>#testDifferenceWithNonNullIntersection",				"SetTest>>#testRemoveAllSuchThat",				"SetTest>>#test0CopyTest",				"SetTest>>#testConcatenation",				"SetTest>>#testDifference",				"SetTest>>#testCopyNonEmpty",				"SetTest>>#testConcatenationWithDuplicate",				"SetTest>>#test0FixtureOccurrencesTest",				"SetTest>>#testCollect",				"SetTest>>#testDifferenceWithSeparateCollection",				"SetTest>>#testAsSortedCollectionWithSortBlock",				"SettingBrowser>>#getViewedPackageNames",				"SettingBrowser>>#updateAccordingTo:",				"SettingBrowser>>#setViewedPackageNames:",				"SettingBrowser>>#setAllToDefault",				"SettingBrowser class>>#refreshAllSettingBrowsers",				"SettingBrowser class>>#allSettingsState",				"SettingDeclaration>>#listenersForEvent:",				"SettingDeclaration>>#maxNameWidthForFont:",				"SettingNode>>#checkForUnknownTarget",				"SettingNode>>#deeplyDetect:",				"SettingNode>>#deeplySelect:in:",				"SettingNode>>#updateAccordingTo:",				"SettingTree>>#checkForUnknownParent",				"SettingTree>>#nodeList",				"SettingTree>>#checkForUnknownTarget",				"SettingTree>>#deeplyDetect:",				"SettingTree>>#pragmasDo:",				"SettingTree>>#deeplySelect:in:",				"SettingTree>>#retainedNodesFromList:",				"ShAbstractChangeDetector class>>#compareClass:with:",				"ShAbstractClassBuilderTest>>#doValidateMethods:on:",				"ShAbstractClassBuilderTest>>#validateSharedVariables:",				"ShDefaultBuilderEnhancer>>#propagateChangesToRelatedClasses:installer:",				"ShLayoutDefinition>>#validate",				"SharedPool class>>#localBindingOf:",				"ShiftClassBuilder>>#notifyChanges",				"ShiftClassBuilder>>#installSlotsAndVariables",				"ShiftClassBuilder>>#compileMethods",				"ShiftClassBuilder>>#compareWithOldClass",				"ShiftClassBuilder>>#propagateChangesTo:",				"ShiftClassInstaller>>#copyObject:to:",				"ShiftClassInstaller>>#updateBindings:of:",				"ShiftClassInstaller>>#migrateClassTo:",				"ShortIntegerArray>>#swapBytePairsHacky",				"ShortIntegerArray>>#write:littleEndianOn:",				"SignalLogger>>#nextPutAll:",				"SimpleButtonMorph>>#setArguments",				"SimpleButtonMorph class>>#removeFromSystem:",				"SimpleButtonMorph class>>#traitComposition:",				"SimpleButtonMorph class>>#fileOutLocalMethodsInCategory:on:",				"SimpleButtonMorph class>>#recategorizeSelector:from:to:",				"SimpleButtonMorph class>>#doRebuildMethodDictionary",				"SimpleHierarchicalListMorph>>#expandAll:",				"SimpleHierarchicalListMorph>>#expandAll",				"SimpleHierarchicalListMorph>>#drawLinesOn:",				"SimpleHierarchicalListMorph>>#expandAll:except:",				"SimpleHierarchicalListMorph>>#expandRoots",				"SimpleHierarchicalListMorph>>#expand:to:",				"SimpleHierarchicalListMorph>>#collapseAll",				"SimpleHierarchicalListMorph>>#addSubmorphsAfter:fromCollection:allowSorting:",				"SimpleHierarchicalListMorph>>#selectionOneOf:",				"SimpleHierarchicalListMorph>>#addMorphsTo:from:allowSorting:withExpandedItems:atLevel:",				"SimpleHierarchicalListMorph>>#collapseAll:",				"SimpleHierarchicalListMorph>>#toggleExpandedState:event:",				"SimpleTestResourceTestCase>>#testResourceCollection",				"SindarinDebugger>>#step",				"SindarinDebugger>>#skipMessageNodeWith:",				"SindarinDebugger>>#stepThrough",				"SindarinDebugger class>>#removeFromSystem:",				"SindarinDebugger class>>#closeAllDebuggers",				"SindarinDebugger class>>#traitComposition:",				"SindarinDebugger class>>#fileOutLocalMethodsInCategory:on:",				"SindarinDebugger class>>#recategorizeSelector:from:to:",				"SindarinDebugger class>>#doRebuildMethodDictionary",				"SindarinDebuggerTest>>#tearDown",				"SingleCodeCriticResultList>>#addCriticToToDo",				"SingleCodeCriticResultList>>#addCriticToFalsePositive",				"SingleCodeCriticResultList>>#addRuleToFalsePositive",				"SingleCodeCriticResultList>>#menu:shifted:",				"SingleCodeCriticResultList>>#removeCriticToFalsePositive",				"SingleCodeCriticResultList>>#removeCriticToToDo",				"SingleCodeCriticResultList>>#removeRuleToFalsePositive",				"SkewBinaryCanonicalNumber>>#asInteger",				"SlotClassBuilderTest>>#tearDown",				"SlotErrorsTest>>#testSlotWithReservedName",				"SlotErrorsTest>>#testClassSlotWithReservedName",				"SlotLayoutEqualityTest>>#testLayoutWithSlotsEquals",				"SlotLayoutEqualityTest>>#testLayoutEquals",				"SlotLayoutEqualityTest>>#testLayoutNotEquals",				"SlotLayoutEqualityTest>>#testLayoutWithSlotsNotEquals",				"SlotMigrationTest>>#testReshapeByteVariableToPointerPropagatesToDeepHierarchy",				"SlotMigrationTest>>#testReshapePointerToByteVariablePropagatesToDeepHierarchy",				"SmallDictionary>>#includesIdentity:",				"SmallDictionary>>#isHealthy",				"SmallDictionary>>#keysAndValuesRemove:",				"SmallDictionary>>#includes:",				"SmalllintManifestChecker>>#cleanAllManifest",				"SmalltalkImage>>#extractMinusParametersFrom:",				"SmalltalkImage>>#newSpecialObjectsArray",				"SmalltalkImage>>#fixObsoleteBindings",				"SmalltalkImage>>#restartMethods",				"SmalltalkImage>>#reportCPUandRAM",				"Socket class>>#pingPorts:on:timeOutSecs:",				"SocketAddress class>>#fromDottedString:",				"SocketAddressTest>>#testZero",				"SocketAddressTest>>#testIsPrivateAddress",				"SortedCollection>>#collect:",				"SortedCollection>>#groupedBy:",				"SortedCollection>>#addAll:",				"SortedCollectionTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"SortedCollectionTest>>#testOccurrencesOf",				"SortedCollectionTest>>#assertNoDuplicates:whenConvertedTo:",				"SortedCollectionTest>>#testDo2",				"SortedCollectionTest>>#testAsStringOnDelimiterOne",				"SortedCollectionTest>>#testCopyNonEmptyWith",				"SortedCollectionTest>>#test0FixtureOccurrencesForMultiplinessTest",				"SortedCollectionTest>>#testAsStringOnDelimiterMore",				"SortedCollectionTest>>#testAsCommaStringMore",				"SortedCollectionTest>>#testDifferenceWithNonNullIntersection",				"SortedCollectionTest>>#testRemoveAllSuchThat",				"SortedCollectionTest>>#testCopyReplaceAllWithForSorted",				"SortedCollectionTest>>#test0FixtureTConvertAsSetForMultiplinessTest",				"SortedCollectionTest>>#test0FixtureOccurrencesTest",				"SortedCollectionTest>>#testAsSetWithEqualsElements",				"SortedCollectionTest>>#testCopyNonEmptyWithout",				"SortedCollectionTest>>#testAsStringOnDelimiterLastOne",				"SortedCollectionTest>>#testPairsCollect",				"SortedCollectionTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"SortedCollectionTest>>#testAsSortedCollection",				"SortedCollectionTest>>#testRemoveAllFoundIn",				"SortedCollectionTest>>#testAsByteArray",				"SortedCollectionTest>>#testCopyNonEmptyWithoutAll",				"SortedCollectionTest>>#testCopyNonEmptyWithoutNotIncluded",				"SortedCollectionTest>>#testIntersectionItself",				"SortedCollectionTest>>#test0FixtureCopyPartOfSequenceableTest",				"SortedCollectionTest>>#testWithAll",				"SortedCollectionTest>>#testAsIdentitySetWithEqualsElements",				"SortedCollectionTest>>#testCopyFromToWithForSorted",				"SortedCollectionTest>>#testCopyEmptyWithoutAll",				"SortedCollectionTest>>#testAddAll2",				"SortedCollectionTest>>#testDifference",				"SortedCollectionTest>>#test0CopyTest",				"SortedCollectionTest>>#testKeysAndValuesDo",				"SortedCollectionTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"SortedCollectionTest>>#testDifferenceWithSeparateCollection",				"SortedCollectionTest>>#testAsSortedCollectionWithSortBlock",				"SortedCollectionTest>>#testAsIdentitySetWithIdentityEqualsElements",				"SourceCodeFonts class>>#registerFonts:",				"SourceFile>>#tryOpenReadOnly:",				"SourceFileArray>>#reportString",				"SourceFileArrayTest>>#testFileIndexFromSourcePointer",				"SourceFileBufferedReadWriteStream>>#nextPutAll:",				"SourceFileBufferedReadWriteStreamTest>>#testPeek",				"Sp1MorphicAdapter>>#release",				"Sp1RoassalPresenter>>#release",				"SpAbstractAdapterTest>>#runCase",				"SpAbstractLayoutTest>>#runCase",				"SpAbstractMorphicAdapter>>#type:",				"SpAbstractMorphicAdapter>>#addKeyBindingsTo:",				"SpAbstractPresenter>>#unsubscribe:",				"SpAbstractPresenter class>>#removeFromSystem:",				"SpAbstractPresenter class>>#traitComposition:",				"SpAbstractPresenter class>>#fileOutLocalMethodsInCategory:on:",				"SpAbstractPresenter class>>#recategorizeSelector:from:to:",				"SpAbstractPresenter class>>#doRebuildMethodDictionary",				"SpAbstractSelectionMode class>>#removeFromSystem:",				"SpAbstractSelectionMode class>>#traitComposition:",				"SpAbstractSelectionMode class>>#fileOutLocalMethodsInCategory:on:",				"SpAbstractSelectionMode class>>#recategorizeSelector:from:to:",				"SpAbstractSelectionMode class>>#doRebuildMethodDictionary",				"SpAbstractTextPresenter>>#typeByChar:",				"SpAbstractTreePresenter>>#shownOrderPreservingTree:",				"SpAbstractTreeSelectionMode>>#selectItems:",				"SpAbstractTreeSelectionMode class>>#removeFromSystem:",				"SpAbstractTreeSelectionMode class>>#traitComposition:",				"SpAbstractTreeSelectionMode class>>#fileOutLocalMethodsInCategory:on:",				"SpAbstractTreeSelectionMode class>>#recategorizeSelector:from:to:",				"SpAbstractTreeSelectionMode class>>#doRebuildMethodDictionary",				"SpAbstractWidgetPresenter>>#processDeferredActions",				"SpAbstractWidgetPresenter class>>#addDocumentSectionTransmissions:",				"SpAbstractWidgetPresenter class>>#addDocumentSection:label:methods:",				"SpActionBarPresenter>>#traverseInFocusOrderDo:excluding:",				"SpAdapterBindings>>#initializeBindings",				"SpApplication>>#closeAllWindows",				"SpBoxLayout class>>#removeFromSystem:",				"SpBoxLayout class>>#traitComposition:",				"SpBoxLayout class>>#fileOutLocalMethodsInCategory:on:",				"SpBoxLayout class>>#recategorizeSelector:from:to:",				"SpBoxLayout class>>#doRebuildMethodDictionary",				"SpButtonBarPresenter>>#items:",				"SpClassStyle>>#applyTo:",				"SpCodeAdapterTest>>#assertText:atInterval:isStyle:",				"SpCodeAdapterTest>>#styleTableAt:do:",				"SpCodePresenter>>#buildContextMenuWith:",				"SpCodePresenter>>#buildContextKeyBindingsWith:",				"SpCodePresenter class>>#codeNavigationCommandsGroupWith:",				"SpCodePresenter class>>#codeSelectionActionCommandsGroupWith:",				"SpCollectionListModel class>>#removeFromSystem:",				"SpCollectionListModel class>>#traitComposition:",				"SpCollectionListModel class>>#fileOutLocalMethodsInCategory:on:",				"SpCollectionListModel class>>#recategorizeSelector:from:to:",				"SpCollectionListModel class>>#doRebuildMethodDictionary",				"SpComposablePresenterWithAdditionalSubpresentersTest>>#testOpening",				"SpCompositeIconProvider>>#iconNamed:ifAbsent:",				"SpCompositeOutputPort>>#attachTransmission:",				"SpCompositeTableColumn>>#addAllColumns:",				"SpDemoTest>>#testSmokeTestForDemoPages",				"SpDialogPresenter class>>#addDocumentSection:label:methods:",				"SpDialogWindowPresenter>>#traverseInFocusOrderDo:excluding:",				"SpDocumentHierarchyBuilder>>#addLevel:from:",				"SpDocumentHierarchyBuilder>>#addLevel:from:to:",				"SpDocumentHierarchyBuilder>>#fillTreeWithSubclassesOf:",				"SpDocumentHierarchyBuilder>>#fillTreeWithSuperclassesOf:",				"SpDropListAdapterTest>>#testAddingIconsShowTheIcon",				"SpDropListAdapterTest>>#testRemovingIconsAfterAddingThem",				"SpDynamicSpecExample class>>#removeFromSystem:",				"SpDynamicSpecExample class>>#traitComposition:",				"SpDynamicSpecExample class>>#fileOutLocalMethodsInCategory:on:",				"SpDynamicSpecExample class>>#recategorizeSelector:from:to:",				"SpDynamicSpecExample class>>#doRebuildMethodDictionary",				"SpEventHandler>>#whenMouseMoveDo:",				"SpEventHandler>>#whenFocusLostDo:",				"SpEventHandler>>#whenKeyDownDo:",				"SpEventHandler>>#whenMouseLeaveDo:",				"SpEventHandler>>#whenMouseDownDo:",				"SpEventHandler>>#whenFocusReceivedDo:",				"SpEventHandler>>#whenMouseEnterDo:",				"SpEventHandler>>#whenDoubleClickDo:",				"SpEventHandler>>#whenKeyUpDo:",				"SpEventHandler>>#whenMouseUpDo:",				"SpEventHandler>>#installAllEventsTo:target:",				"SpExecutableLayout>>#parentLayoutOf:",				"SpExecutableLayout>>#removeBySymbol:",				"SpExecutableLayout>>#unsubscribe",				"SpExecutableLayout class>>#addDocumentSection:label:methods:",				"SpFilteringSelectableListPresenter>>#selectFrom:to:",				"SpFilteringSelectableListPresenter>>#activateAll",				"SpGeneratorListModel class>>#example",				"SpGridAxisConstraints class>>#removeFromSystem:",				"SpGridAxisConstraints class>>#traitComposition:",				"SpGridAxisConstraints class>>#fileOutLocalMethodsInCategory:on:",				"SpGridAxisConstraints class>>#recategorizeSelector:from:to:",				"SpGridAxisConstraints class>>#doRebuildMethodDictionary",				"SpGridConstraints class>>#removeFromSystem:",				"SpGridConstraints class>>#traitComposition:",				"SpGridConstraints class>>#fileOutLocalMethodsInCategory:on:",				"SpGridConstraints class>>#recategorizeSelector:from:to:",				"SpGridConstraints class>>#doRebuildMethodDictionary",				"SpLocationIconProvider>>#loadIconNamed:",				"SpLocationIconProvider>>#loadAllIcons",				"SpMenuGroupPresenter>>#initialize",				"SpMenuPresenter>>#fromSpec:",				"SpMenuPresenter>>#initialize",				"SpMenuPresenter class>>#addDocumentExtraSections:",				"SpMillerColumnPresenter>>#traverseInFocusOrderDo:excluding:",				"SpMillerLayout class>>#removeFromSystem:",				"SpMillerLayout class>>#traitComposition:",				"SpMillerLayout class>>#fileOutLocalMethodsInCategory:on:",				"SpMillerLayout class>>#recategorizeSelector:from:to:",				"SpMillerLayout class>>#doRebuildMethodDictionary",				"SpMockMenu class>>#removeFromSystem:",				"SpMockMenu class>>#traitComposition:",				"SpMockMenu class>>#fileOutLocalMethodsInCategory:on:",				"SpMockMenu class>>#recategorizeSelector:from:to:",				"SpMockMenu class>>#doRebuildMethodDictionary",				"SpMorphStyle>>#applyTo:",				"SpMorphStyle class>>#fromStylesheet:adapter:",				"SpMorphicActionBarAdapter>>#addModelTo:",				"SpMorphicBackendForTest class>>#removeFromSystem:",				"SpMorphicBackendForTest class>>#traitComposition:",				"SpMorphicBackendForTest class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicBackendForTest class>>#recategorizeSelector:from:to:",				"SpMorphicBackendForTest class>>#doRebuildMethodDictionary",				"SpMorphicBaseBoxLayout>>#applyHorizontalHomogeneousLayout:in:",				"SpMorphicBaseBoxLayout>>#applyVerticalHomogeneousLayout:in:",				"SpMorphicBaseTextAdapter>>#typeByChar:",				"SpMorphicBaseTextAdapter>>#removeAllTextSegmentDecorations",				"SpMorphicBaseTextAdapter class>>#removeFromSystem:",				"SpMorphicBaseTextAdapter class>>#traitComposition:",				"SpMorphicBaseTextAdapter class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicBaseTextAdapter class>>#recategorizeSelector:from:to:",				"SpMorphicBaseTextAdapter class>>#doRebuildMethodDictionary",				"SpMorphicBoxAdapter>>#updateSpacing",				"SpMorphicBoxAdapter>>#layout:",				"SpMorphicButtonBarAdapter>>#addModelTo:",				"SpMorphicCodeAdapter>>#addKeyBindingsTo:",				"SpMorphicDialogWindowAdapter>>#buildButtonBar",				"SpMorphicGridLayout>>#basicLayout:in:",				"SpMorphicGridLayoutComputation>>#calculateHomogeneousRowHeights",				"SpMorphicGridLayoutComputation>>#computeCellExtents",				"SpMorphicGridLayoutComputation>>#computeNumberOfRowsAndColumns",				"SpMorphicGridLayoutComputation>>#calculateHomogeneousColumnWidths",				"SpMorphicGridLayoutTest>>#setUp",				"SpMorphicMenuAdapter>>#buildWidget",				"SpMorphicMenuBarAdapter>>#adoptMenuGroupModel:first:",				"SpMorphicMenuBarAdapter>>#emptyAccumulator:",				"SpMorphicNotebookAdapter>>#updatePagesWith:",				"SpMorphicNotebookAdapter>>#addModelTo:",				"SpMorphicNotebookAdapter class>>#removeFromSystem:",				"SpMorphicNotebookAdapter class>>#traitComposition:",				"SpMorphicNotebookAdapter class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicNotebookAdapter class>>#recategorizeSelector:from:to:",				"SpMorphicNotebookAdapter class>>#doRebuildMethodDictionary",				"SpMorphicPaginatorAdapter class>>#removeFromSystem:",				"SpMorphicPaginatorAdapter class>>#traitComposition:",				"SpMorphicPaginatorAdapter class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicPaginatorAdapter class>>#recategorizeSelector:from:to:",				"SpMorphicPaginatorAdapter class>>#doRebuildMethodDictionary",				"SpMorphicPatchLineDecorator>>#drawOn:",				"SpMorphicRadioButtonAdapter>>#buildWidget",				"SpMorphicRoassalAdapter>>#release",				"SpMorphicTableAdapter>>#ifSorted:ifNotSorted:",				"SpMorphicTableAdapter>>#addModelTo:",				"SpMorphicTableColumnVisitor>>#visitCompositeColumn:",				"SpMorphicTableDataSource class>>#removeFromSystem:",				"SpMorphicTableDataSource class>>#traitComposition:",				"SpMorphicTableDataSource class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicTableDataSource class>>#recategorizeSelector:from:to:",				"SpMorphicTableDataSource class>>#doRebuildMethodDictionary",				"SpMorphicTextAdapter>>#codePaneMenu:shifted:",				"SpMorphicToggleButtonAdapter>>#buttonChanged",				"SpMorphicToolbarAdapter>>#updateItems:",				"SpMorphicToolbarMenuButtonMorph>>#font:",				"SpMorphicToolbarToggleButtonAdapter>>#buttonChanged",				"SpMorphicTreeTableAdapter>>#suspendSelectionEventsDuring:",				"SpMorphicTreeTableAdapter>>#registerColumnsChangedEventTo:",				"SpMorphicTreeTableDataSource>>#itemAtPath:expanding:",				"SpMorphicTreeTableDataSource class>>#removeFromSystem:",				"SpMorphicTreeTableDataSource class>>#traitComposition:",				"SpMorphicTreeTableDataSource class>>#fileOutLocalMethodsInCategory:on:",				"SpMorphicTreeTableDataSource class>>#recategorizeSelector:from:to:",				"SpMorphicTreeTableDataSource class>>#doRebuildMethodDictionary",				"SpMorphicWindowAdapter>>#rebuildWithSpecLayout:",				"SpNotebookMorph>>#suspendAnnouncementsDuring:",				"SpNotebookPage class>>#removeFromSystem:",				"SpNotebookPage class>>#traitComposition:",				"SpNotebookPage class>>#fileOutLocalMethodsInCategory:on:",				"SpNotebookPage class>>#recategorizeSelector:from:to:",				"SpNotebookPage class>>#doRebuildMethodDictionary",				"SpNotebookPresenter>>#pages:",				"SpNotebookPresenter>>#resetAllPageContents",				"SpObservablePoint class>>#removeFromSystem:",				"SpObservablePoint class>>#traitComposition:",				"SpObservablePoint class>>#fileOutLocalMethodsInCategory:on:",				"SpObservablePoint class>>#recategorizeSelector:from:to:",				"SpObservablePoint class>>#doRebuildMethodDictionary",				"SpOutputPort>>#transmitDo:transform:",				"SpOutputPort>>#transmitDo:",				"SpOutputPort>>#applyTransform:",				"SpOverlayConstraints class>>#removeFromSystem:",				"SpOverlayConstraints class>>#traitComposition:",				"SpOverlayConstraints class>>#fileOutLocalMethodsInCategory:on:",				"SpOverlayConstraints class>>#recategorizeSelector:from:to:",				"SpOverlayConstraints class>>#doRebuildMethodDictionary",				"SpPaginatorMorph>>#addPages:",				"SpPaginatorMorph class>>#removeFromSystem:",				"SpPaginatorMorph class>>#traitComposition:",				"SpPaginatorMorph class>>#fileOutLocalMethodsInCategory:on:",				"SpPaginatorMorph class>>#recategorizeSelector:from:to:",				"SpPaginatorMorph class>>#doRebuildMethodDictionary",				"SpPaginatorPresenter>>#pages:",				"SpPanelMorphWithSplitters>>#addPaneVSplitterBetween:and:",				"SpPanelMorphWithSplitters>>#linkSplittersToSplitters",				"SpPanelMorphWithSplitters>>#addPaneHSplitterBetween:and:",				"SpPresenter>>#traverseInFocusOrderDo:excluding:",				"SpPresenter>>#instantiatePresenters:",				"SpPresenter>>#presentersDo:",				"SpPresenter>>#applyKeyBindingsFromMenu:",				"SpPresenter>>#traversePresentersDo:excluding:",				"SpPresenter class>>#buildExtensionCommandsWith:forRoot:",				"SpPresenterBuilder class>>#removeFromSystem:",				"SpPresenterBuilder class>>#traitComposition:",				"SpPresenterBuilder class>>#fileOutLocalMethodsInCategory:on:",				"SpPresenterBuilder class>>#recategorizeSelector:from:to:",				"SpPresenterBuilder class>>#doRebuildMethodDictionary",				"SpPresenterFocusOrderTest class>>#removeFromSystem:",				"SpPresenterFocusOrderTest class>>#traitComposition:",				"SpPresenterFocusOrderTest class>>#fileOutLocalMethodsInCategory:on:",				"SpPresenterFocusOrderTest class>>#recategorizeSelector:from:to:",				"SpPresenterFocusOrderTest class>>#doRebuildMethodDictionary",				"SpPropertyStyle>>#mergeWith:",				"SpRadioButtonPresenter>>#state:",				"SpRadioButtonPresenter>>#associatedRadioButtons:",				"SpRoassalPresenter>>#release",				"SpRunCommandLineHandler>>#listApplications",				"SpScrollableLayout class>>#removeFromSystem:",				"SpScrollableLayout class>>#traitComposition:",				"SpScrollableLayout class>>#fileOutLocalMethodsInCategory:on:",				"SpScrollableLayout class>>#recategorizeSelector:from:to:",				"SpScrollableLayout class>>#doRebuildMethodDictionary",				"SpStringTableColumn class>>#removeFromSystem:",				"SpStringTableColumn class>>#traitComposition:",				"SpStringTableColumn class>>#fileOutLocalMethodsInCategory:on:",				"SpStringTableColumn class>>#recategorizeSelector:from:to:",				"SpStringTableColumn class>>#doRebuildMethodDictionary",				"SpStyleEnvironmentVariable class>>#addDocumentValidValues:",				"SpTAlignable classTrait>>#traitComposition:",				"SpTAlignable classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTAlignable classTrait>>#recategorizeSelector:from:to:",				"SpTAlignable classTrait>>#doRebuildMethodDictionary",				"SpTBackendUpdating classTrait>>#traitComposition:",				"SpTBackendUpdating classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTBackendUpdating classTrait>>#recategorizeSelector:from:to:",				"SpTBackendUpdating classTrait>>#doRebuildMethodDictionary",				"SpTContextMenu classTrait>>#traitComposition:",				"SpTContextMenu classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTContextMenu classTrait>>#recategorizeSelector:from:to:",				"SpTContextMenu classTrait>>#doRebuildMethodDictionary",				"SpTDecoratedColumn classTrait>>#traitComposition:",				"SpTDecoratedColumn classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTDecoratedColumn classTrait>>#recategorizeSelector:from:to:",				"SpTDecoratedColumn classTrait>>#doRebuildMethodDictionary",				"SpTDynamicPresenter classTrait>>#traitComposition:",				"SpTDynamicPresenter classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTDynamicPresenter classTrait>>#recategorizeSelector:from:to:",				"SpTDynamicPresenter classTrait>>#doRebuildMethodDictionary",				"SpTHaveWrappingScrollBars classTrait>>#traitComposition:",				"SpTHaveWrappingScrollBars classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTHaveWrappingScrollBars classTrait>>#recategorizeSelector:from:to:",				"SpTHaveWrappingScrollBars classTrait>>#doRebuildMethodDictionary",				"SpTModel classTrait>>#traitComposition:",				"SpTModel classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTModel classTrait>>#recategorizeSelector:from:to:",				"SpTModel classTrait>>#doRebuildMethodDictionary",				"SpTMorphicTableDataSourceCommons classTrait>>#traitComposition:",				"SpTMorphicTableDataSourceCommons classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTMorphicTableDataSourceCommons classTrait>>#recategorizeSelector:from:to:",				"SpTMorphicTableDataSourceCommons classTrait>>#doRebuildMethodDictionary",				"SpTMorphicUIRedrawer classTrait>>#traitComposition:",				"SpTMorphicUIRedrawer classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTMorphicUIRedrawer classTrait>>#recategorizeSelector:from:to:",				"SpTMorphicUIRedrawer classTrait>>#doRebuildMethodDictionary",				"SpTObservable classTrait>>#traitComposition:",				"SpTObservable classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTObservable classTrait>>#recategorizeSelector:from:to:",				"SpTObservable classTrait>>#doRebuildMethodDictionary",				"SpTPresenterBuilder classTrait>>#traitComposition:",				"SpTPresenterBuilder classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTPresenterBuilder classTrait>>#recategorizeSelector:from:to:",				"SpTPresenterBuilder classTrait>>#doRebuildMethodDictionary",				"SpTSearchable classTrait>>#traitComposition:",				"SpTSearchable classTrait>>#fileOutLocalMethodsInCategory:on:",				"SpTSearchable classTrait>>#recategorizeSelector:from:to:",				"SpTSearchable classTrait>>#doRebuildMethodDictionary",				"SpTablePresenter>>#addColumns:",				"SpTablePresenter class>>#addDocumentExtraSections:",				"SpTestingPresenterWithAdditionalPresenters>>#initializePresenters",				"SpTestingPresenterWithAdditionalPresenters class>>#defaultSpec",				"SpTextPresenter class>>#textEditionCommandsGroupWith:",				"SpTextPresenter class>>#textSearchCommandsGroupWith:",				"SpToggleButtonPresenter>>#associatedToggleButtons:",				"SpToolCommand class>>#addDocumentContextRequiredSelectors:",				"SpToolbarPresenter>>#traverseInFocusOrderDo:excluding:",				"SpToolbarToggleButtonMorphTest class>>#removeFromSystem:",				"SpToolbarToggleButtonMorphTest class>>#traitComposition:",				"SpToolbarToggleButtonMorphTest class>>#fileOutLocalMethodsInCategory:on:",				"SpToolbarToggleButtonMorphTest class>>#recategorizeSelector:from:to:",				"SpToolbarToggleButtonMorphTest class>>#doRebuildMethodDictionary",				"SpToolbarToggleButtonPresenter>>#associatedToggleButtons:",				"SpTreeMultipleSelectionMode>>#selectPaths:",				"SpTreeTablePresenter class>>#addDocumentExtraSections:",				"SpValueHolder>>#valueChanged:",				"SpVerticalAlignment class>>#removeFromSystem:",				"SpVerticalAlignment class>>#traitComposition:",				"SpVerticalAlignment class>>#fileOutLocalMethodsInCategory:on:",				"SpVerticalAlignment class>>#recategorizeSelector:from:to:",				"SpVerticalAlignment class>>#doRebuildMethodDictionary",				"SpWindowPresenter>>#openWithSpecLayout:",				"SpWorldPresenter class>>#setUpWorld",				"SpaceTally>>#computeSpaceUsageResultsForClassesInstancesAssociations:",				"SpaceTally>>#printSpaceAnalysis:on:",				"SpaceTally>>#printSpaceDifferenceFrom:to:",				"SpaceTally>>#spaceForInstancesOf:",				"SpaceTally>>#computeSpaceUsage",				"SpaceTally>>#preAllocateResultsFor:",				"SpaceTally>>#compareTallyIn:to:",				"SpaceTally>>#saveTo:",				"SparseLargeTable>>#allDefaultValueSubtableAt:",				"SpecColumnLayout>>#countNumberOfProportionals",				"SpecLayout>>#computeNotSplitterWidgets",				"SpecLayout>>#computeSplitters",				"SpecLayout>>#computeNotSplitterWidget:",				"SpecPragmaCollector>>#reset",				"SpecRowLayout>>#countNumberOfProportionals",				"StBaseFilter>>#allItemsDo:",				"StCollectionIterator>>#elementsDo:",				"StDebugger>>#findFirstRelevantStackIndexIn:",				"StDebugger>>#updateExtensionsFrom:",				"StDebugger>>#clear",				"StDebugger>>#updateToolbar",				"StDebugger class>>#buildSindarinExtentionCommandsGroupWith:forRoot:",				"StDebuggerCodeCommandTreeBuilder>>#codeDebugCommands",				"StDebuggerExtensionSettings class>>#debuggerExtensionSettingsOn:",				"StDebuggerStackCommandTreeBuilder>>#stackContextMenuStackEditionsCommands",				"StDebuggerStackCommandTreeBuilder>>#stackContextMenuExplorationCommands",				"StDebuggerStackCommandTreeBuilder>>#stackMethodNavigationCommands",				"StDebuggerStackCommandTreeBuilder>>#stackContextMenuActionsCommands",				"StDebuggerStackCommandTreeBuilder>>#stackMethodSelectorNavigationCommands",				"StDebuggerStackCommandTreeBuilder>>#stackReceiverClassNavigationCommands",				"StDebuggerTest>>#testToolbarInDNUContext",				"StDebuggerToolCommandTreeBuilderTest>>#assertCommands:haveContext:",				"StDebuggerToolbarCommandTreeBuilder>>#buildCommandGroupFrom:named:description:",				"StDebuggerToolbarCommandTreeBuilderTest>>#testExecutionControlShortcuts",				"StFilterAlike>>#applyFilterWithQuery",				"StHaltAndBreakpointControlTest>>#compileMethodsWithHalts",				"StHaltAndBreakpointControlTest>>#removeMethodsWithHalts",				"StHaltAndBreakpointController>>#removeSkipLinksFor:",				"StHaltCache>>#buildCache",				"StHaltCache class>>#removeFromSystem:",				"StHaltCache class>>#traitComposition:",				"StHaltCache class>>#fileOutLocalMethodsInCategory:on:",				"StHaltCache class>>#recategorizeSelector:from:to:",				"StHaltCache class>>#doRebuildMethodDictionary",				"StHaltCacheTest>>#testAddingHaltToMethod",				"StHaltCacheTest>>#testInitialCacheBuild",				"StHelpBrowserPresenter>>#createTopicsFromFileOrFolder:",				"StHelpBrowserPresenter>>#createRootTopicFromFolder:",				"StHelpBrowserPresenter>>#propagateNodeIn:",				"StHelpBrowserPresenter class>>#internalizeHelpFrom:at:",				"StInspectionCollector>>#uniquePragmas:",				"StInspector>>#step",				"StInspectorCommand class>>#addDocumentContextRequiredSelectors:",				"StInspectorRefreshService>>#stepService",				"StMicrodownClassAPIHelpBuilder>>#buildSubnodesForSubclasses",				"StMicrodownClassAPIHelpBuilder>>#buildMethodTopicsOn:for:",				"StObjectInspectorPresenter>>#step",				"StObjectInspectorPresenter>>#trySelectAnyPageWithName:",				"StObjectInspectorPresenter class>>#buildCommandsGroupWith:forRoot:",				"StPlaygroundInteractionModel>>#addBindings:",				"StPlaygroundInteractionModel>>#bindings",				"StPlaygroundPagePresenter>>#addToolbarCommandsTo:",				"StPlaygroundPagePresenter>>#addMenuCommandsTo:",				"StQuery>>#textInSearchBar",				"StQuery>>#updateFromContext:",				"StRawInspection class>>#objectCentricBreakpointCommandsWith:forRootGroup:",				"StReporter>>#createTextForReport:",				"StSelector>>#spotterUsersFor:",				"StSendersIterator>>#elementsDo:",				"StSequenceIterator>>#doReset",				"StSequenceIterator>>#next",				"StSindarinDebuggerPresenter>>#buildToolbar",				"StSizeReporter>>#fillTopics",				"StSizeReporter>>#topicSpec",				"StSpotter>>#initializeWindow:",				"StSpotterCandidatesList>>#getCandidateLink:in:",				"StSpotterContext>>#continueFilter",				"StSpotterIterator>>#anySatisfy:",				"StSpotterIterator>>#collect:as:",				"StSpotterIterator>>#select:thenDo:",				"StSpotterIterator>>#detect:ifFound:ifNone:",				"StSpotterIterator>>#reject:as:",				"StSpotterIterator>>#withIndexDo:",				"StSpotterIterator>>#allSatisfy:",				"StSpotterIterator>>#do:",				"StSpotterIterator>>#select:as:",				"StSpotterIterator>>#reject:thenDo:",				"StSpotterModel>>#announceAllCandidatesAdded:",				"StSpotterModel>>#stSpotterProcessorsFor:",				"StSpotterProcessor>>#configureFilter",				"StSpotterQuery>>#process",				"StSpotterQuery>>#terminate",				"StSpotterStep>>#previousProcessorFrom:",				"StSystemReporter>>#reportOSEnvironment:",				"StSystemReporter>>#fillTopics",				"StSystemReporter>>#reportLinuxOSDetails:",				"StSystemReporter>>#reportModules:",				"StTopicBuilderVisitor>>#visitAll:",				"StWindowsProcessorTest>>#tearDown",				"StackTest class>>#removeFromSystem:",				"StackTest class>>#traitComposition:",				"StackTest class>>#fileOutLocalMethodsInCategory:on:",				"StackTest class>>#recategorizeSelector:from:to:",				"StackTest class>>#doRebuildMethodDictionary",				"StandardFonts class>>#setAllStandardFontsTo:",				"StandardFonts class>>#fixSmallDejaVuPunctuationMarks",				"StandardFonts class>>#setDefaultFonts:",				"StandardFonts class>>#printStandardSystemFonts",				"StandardFonts class>>#setFontsFromSpec:",				"StandardWindow>>#postOpenInWorld:",				"StandardWindow>>#openedFullscreen",				"StandardWindow class>>#removeFromSystem:",				"StandardWindow class>>#traitComposition:",				"StandardWindow class>>#fileOutLocalMethodsInCategory:on:",				"StandardWindow class>>#recategorizeSelector:from:to:",				"StandardWindow class>>#doRebuildMethodDictionary",				"StartupPreferencesHandler>>#perform",				"StartupPreferencesHandler>>#lookInFolder:",				"StartupPreferencesHandler>>#lookInFolder:forFilesMatching:",				"StartupPreferencesLoader>>#buildStreamFor:",				"StartupPreferencesLoader>>#load:",				"StoredSettingsMerger>>#addStoredSettings:",				"Stream>>#nextMatchAll:",				"Stream>>#nextPutAll:",				"StrikeFont>>#newFromStrike:",				"StrikeFont>>#readFromStrike2Stream:",				"StrikeFont>>#makeControlCharsVisible",				"StrikeFont>>#characters:in:displayAt:clippedBy:rule:fillColor:kernDelta:on:",				"StrikeFont class>>#fromUser:allowKeyboard:",				"StrikeFont class>>#useUnderscoreIfOver1bpp",				"StrikeFont class>>#makeLfInvisible",				"StrikeFont class>>#makeLfVisible",				"StrikeFont class>>#setupDefaultFallbackFont",				"StrikeFont class>>#saveSpace",				"StrikeFont class>>#limitTo16Bits",				"StrikeFont class>>#makeTabVisible",				"StrikeFont class>>#readStrikeFont2Family:fromDirectory:",				"StrikeFont class>>#makeControlCharsVisible",				"StrikeFont class>>#makeTabInvisible",				"StrikeFontSet class>>#familyName:size:",				"StrikeFontSet class>>#installNewFontAtIndex:fromOld:",				"StrikeFontSet class>>#removeFontsForEncoding:encodingName:",				"String>>#skipAnySubstring:startingAt:",				"String>>#findSelector",				"String>>#isAllSeparators",				"String>>#asComment",				"String>>#isAllAlphaNumerics",				"String>>#asUncommentedCode",				"String>>#withBlanksCondensed",				"String>>#asHex",				"String>>#isAllDigits",				"String>>#findDelimiters:startingAt:",				"String>>#asHTMLString",				"String>>#asShapeMultilineLabel:",				"String>>#asCamelCase",				"String>>#withSeparatorsCompacted",				"String class>>#newCaseSensitiveOrder",				"String class>>#newCaseInsensitiveOrder",				"StringMorph>>#privateSetContents:",				"StringMorph class>>#removeFromSystem:",				"StringMorph class>>#exampleManyStringMorphs",				"StringMorph class>>#traitComposition:",				"StringMorph class>>#fileOutLocalMethodsInCategory:on:",				"StringMorph class>>#recategorizeSelector:from:to:",				"StringMorph class>>#doRebuildMethodDictionary",				"StringTest>>#testSubstrings",				"StringTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"StringTest>>#assertNoDuplicates:whenConvertedTo:",				"StringTest>>#test0FixtureOccurrencesForMultiplinessTest",				"StringTest>>#testSort",				"StringTest>>#testShuffled",				"StringTest>>#testDifferenceWithNonNullIntersection",				"StringTest>>#testAtAllPut",				"StringTest>>#testAsSetWithEqualsElements",				"StringTest>>#test0SortingArrayedTest",				"StringTest>>#testWithInternetLineEndings",				"StringTest>>#testSortedUsingBlock",				"StringTest>>#testCopyNonEmptyWithoutAll",				"StringTest>>#testCopyNonEmptyWithoutNotIncluded",				"StringTest>>#test0FixtureCopyPartOfSequenceableTest",				"StringTest>>#testCopyEmptyWithoutAll",				"StringTest>>#testWthNoLineLongerThan",				"StringTest>>#testSortUsingSortBlock",				"StringTest>>#testCopyNonEmpty",				"StringTest>>#testMatch",				"StringTest>>#testDifferenceWithSeparateCollection",				"StringTest>>#testAsSortedCollectionWithSortBlock",				"StringTest>>#testOccurrencesOf",				"StringTest>>#testAsStringOnDelimiterOne",				"StringTest>>#testCopyNonEmptyWith",				"StringTest>>#testAsStringOnDelimiterMore",				"StringTest>>#testFormatExtended",				"StringTest>>#testFormat",				"StringTest>>#testAsCommaStringMore",				"StringTest>>#testCopyReplaceAllWithManyOccurrence",				"StringTest>>#test0FixturePutOneOrMoreElementsTest",				"StringTest>>#testAsSmalltalkComment",				"StringTest>>#testWriteStreamConvertsToWideString",				"StringTest>>#testWithUnixLineEndings",				"StringTest>>#test0FixtureOccurrencesTest",				"StringTest>>#testCopyNonEmptyWithout",				"StringTest>>#testAsStringOnDelimiterLastOne",				"StringTest>>#testPairsCollect",				"StringTest>>#testAsSortedCollection",				"StringTest>>#testSorted",				"StringTest>>#testIntersectionItself",				"StringTest>>#testWithInternalLineEndings",				"StringTest>>#testWithAll",				"StringTest>>#testAsIdentitySetWithEqualsElements",				"StringTest>>#testAtAllIndexesPut",				"StringTest>>#test0CopyTest",				"StringTest>>#testDifference",				"StringTest>>#testConcatenation",				"StringTest>>#testKeysAndValuesDo",				"SubscriptionRegistry>>#subscriptionsForClass:",				"SubscriptionRegistry>>#subscriptionsHandling:",				"SubscriptionRegistry>>#subscriptionsOf:do:",				"SubscriptionRegistry>>#getInteractionsForClass:",				"SycCategorizeAllUnclassifiedMethodsCommand>>#execute",				"SycChangeMessageSignatureCommand>>#computeInvalidArgNamesForSelector:",				"SycChangeMessageSignatureCommand class>>#removeFromSystem:",				"SycChangeMessageSignatureCommand class>>#traitComposition:",				"SycChangeMessageSignatureCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycChangeMessageSignatureCommand class>>#recategorizeSelector:from:to:",				"SycChangeMessageSignatureCommand class>>#doRebuildMethodDictionary",				"SycClassCommand>>#computeInvalidArgNamesForSelector:",				"SycClassCommand class>>#removeFromSystem:",				"SycClassCommand class>>#traitComposition:",				"SycClassCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycClassCommand class>>#recategorizeSelector:from:to:",				"SycClassCommand class>>#doRebuildMethodDictionary",				"SycCmCommand>>#computeInvalidArgNamesForSelector:",				"SycCmCommand class>>#addMenuItemsTo:onContext:",				"SycCmCommand class>>#addItemsToSubmenu:forContext:",				"SycDeprecateClassCommand>>#execute",				"SycExtractMethodCommand>>#computeInvalidArgNamesForSelector:",				"SycGenerateAllInstVarAccessorsCommand>>#asRefactorings",				"SycMethodCommand>>#computeInvalidArgNamesForSelector:",				"SycMethodCommand class>>#removeFromSystem:",				"SycMethodCommand class>>#traitComposition:",				"SycMethodCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycMethodCommand class>>#recategorizeSelector:from:to:",				"SycMethodCommand class>>#doRebuildMethodDictionary",				"SycMethodNameEditorPresenter>>#canRemoveArgs:",				"SycMethodNameEditorPresenter>>#canRenameArgs:",				"SycMethodNameEditorTest>>#testRemoveArguments",				"SycMethodNameEditorTest>>#testRenameArgument",				"SycMethodNameEditorTest>>#testAddArgument",				"SycMigrateReferencesOfClassCommand>>#execute",				"SycMoveMethodsToClassCommand>>#execute",				"SycMoveMethodsToPackageCommand>>#execute",				"SycMoveMethodsToPackageDefiningClassCommand>>#execute",				"SycRecompilePackageCommand>>#execute",				"SycRefactoringPreviewPresenter>>#selectectAllCheckBox",				"SycRefactoringPreviewPresenter>>#updateTablePresenter",				"SycRefactoringPreviewPresenter>>#generateChanges",				"SycRefactoringPreviewPresenter>>#accept",				"SycRefactoringPreviewPresenter>>#connectPresenters",				"SycRemoveClassCommand>>#executeRefactoringsAs:",				"SycRemoveEmptyMethodTagsCommand>>#execute",				"SycRemovePackageCommand>>#execute",				"SycSilentlyRemoveMethodStrategy>>#removeMethods:",				"SycSilentlyRemoveMethodStrategy>>#collectMethodTagsFrom:",				"SycSourceCodeCommand>>#computeInvalidArgNamesForSelector:",				"SycSourceCodeCommand class>>#removeFromSystem:",				"SycSourceCodeCommand class>>#traitComposition:",				"SycSourceCodeCommand class>>#fileOutLocalMethodsInCategory:on:",				"SycSourceCodeCommand class>>#recategorizeSelector:from:to:",				"SycSourceCodeCommand class>>#doRebuildMethodDictionary",				"SycTagMethodCommand>>#execute",				"Symbol class>>#allSymbolTablesDo:",				"SymbolTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"SymbolTest>>#testOccurrencesOf",				"SymbolTest>>#assertNoDuplicates:whenConvertedTo:",				"SymbolTest>>#testAsStringOnDelimiterOne",				"SymbolTest>>#testCopyNonEmptyWith",				"SymbolTest>>#test0FixtureOccurrencesForMultiplinessTest",				"SymbolTest>>#testAsStringOnDelimiterMore",				"SymbolTest>>#testAsCommaStringMore",				"SymbolTest>>#testCopyReplaceAllWithManyOccurrence",				"SymbolTest>>#test0FixtureOccurrencesTest",				"SymbolTest>>#testAsSetWithEqualsElements",				"SymbolTest>>#test0SortingArrayedTest",				"SymbolTest>>#testCopyNonEmptyWithout",				"SymbolTest>>#testAsStringOnDelimiterLastOne",				"SymbolTest>>#testPairsCollect",				"SymbolTest>>#testSortedUsingBlock",				"SymbolTest>>#testAsSortedCollection",				"SymbolTest>>#testCopyNonEmptyWithoutAll",				"SymbolTest>>#testCopyNonEmptyWithoutNotIncluded",				"SymbolTest>>#testSorted",				"SymbolTest>>#testIntersectionItself",				"SymbolTest>>#test0FixtureCopyPartOfSequenceableTest",				"SymbolTest>>#testAsIdentitySetWithEqualsElements",				"SymbolTest>>#testCopyEmptyWithoutAll",				"SymbolTest>>#test0CopyTest",				"SymbolTest>>#testDifference",				"SymbolTest>>#testConcatenation",				"SymbolTest>>#testKeysAndValuesDo",				"SymbolTest>>#testCopyNonEmpty",				"SymbolTest>>#testReadFrom",				"SymbolTest>>#testDifferenceWithSeparateCollection",				"SymbolTest>>#testAsSortedCollectionWithSortBlock",				"SymbolicIntegerTest class>>#removeFromSystem:",				"SymbolicIntegerTest class>>#recategorizeSelector:from:to:",				"SymbolicIntegerTest class>>#traitComposition:",				"SymbolicIntegerTest class>>#fileOutLocalMethodsInCategory:on:",				"SymbolicIntegerTest class>>#doRebuildMethodDictionary",				"SystemAnnouncer class>>#restoreAllNotifications",				"SystemDependenciesTest>>#testExternalIDEDependencies",				"SystemDictionary>>#allClassesAndTraitsDo:",				"SystemDictionary>>#allClassesDo:",				"SystemDictionary>>#allBehaviorsDo:",				"SystemDictionary>>#allTraitsDo:",				"SystemHelp class>>#asHelpTopic",				"SystemHelp2 class>>#asHelpTopic",				"SystemNavigation>>#allUnimplementedCalls",				"SystemNavigation>>#chooseInstVarFrom:thenDo:",				"SystemNavigation>>#allSentMessages",				"SystemNavigation>>#browseUndeclaredReferences",				"SystemNavigation>>#browseClassVarRefs:",				"SystemNavigation>>#methodsReferencingObsoleteClasses",				"SystemNavigation>>#allObjectsDo:",				"SystemNavigation>>#allSentMessagesInClass:do:",				"SystemNavigationTest>>#testIsMessageSentInSystemWithClassesActuallySendngTheMessage",				"SystemNavigationTest>>#testIsMessageSentInSystemWithTheSelectorInsideAnArray",				"SystemOrganizer>>#removeCategoriesMatching:",				"SystemOrganizer>>#fileOutCategory:on:initializing:",				"SystemOrganizerTest>>#testThatExistingPackagenamesDoesNotContainIllegalCharacters",				"SystemProgressMorph>>#show:from:to:during:",				"SystemProgressMorph class>>#removeFromSystem:",				"SystemProgressMorph class>>#recategorizeSelector:from:to:",				"SystemProgressMorph class>>#exampleLabelOnly",				"SystemProgressMorph class>>#traitComposition:",				"SystemProgressMorph class>>#fileOutLocalMethodsInCategory:on:",				"SystemProgressMorph class>>#doRebuildMethodDictionary",				"SystemSettingsPersistence>>#updateSettingNodes:",				"SystemSettingsPersistenceTest>>#testAccessRealValues",				"SystemSettingsPersistenceTest>>#testAccessibleRealValues",				"SystemSettingsPersistenceTest>>#testStoreAndLoadAllSystemSettings",				"SystemVersionTest>>#testParsingFromVersionString",				"SystemWindow>>#mouseUp:",				"SystemWindow>>#addPaneVSplitterBetween:and:",				"SystemWindow>>#paneWithLongestSide:near:",				"SystemWindow>>#setUpdatablePanesFrom:",				"SystemWindow>>#addPaneHSplitterBetween:and:",				"SystemWindow>>#minimizeAfterGeneratingThumbnail",				"SystemWindow>>#linkSplittersToSplitters",				"SystemWindow>>#minimizeOrRestore",				"SystemWindow>>#collapseOrExpand",				"SystemWindow>>#taskbarCloseAllLikeThis",				"SystemWindow>>#taskbarCloseAllToRight",				"SystemWindow>>#setPaneRectsFromBounds",				"SystemWindow>>#reframePanesAdjoining:along:to:",				"SystemWindow>>#putLabelItemsInLabelArea",				"SystemWindow>>#taskbarCloseAllToLeft",				"SystemWindow>>#removeEdgeGrips",				"SystemWindow class>>#windowsIn:satisfying:",				"T2TraitTest>>#testRemovingTraitsUpdatesCategories",				"TAbleToRotate classTrait>>#traitComposition:",				"TAbleToRotate classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAbleToRotate classTrait>>#recategorizeSelector:from:to:",				"TAbleToRotate classTrait>>#doRebuildMethodDictionary",				"TAddForIdentityCollectionsTest>>#test0FixtureAddForIdentityCollectionsTest",				"TAddForIdentityCollectionsTest classTrait>>#traitComposition:",				"TAddForIdentityCollectionsTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAddForIdentityCollectionsTest classTrait>>#recategorizeSelector:from:to:",				"TAddForIdentityCollectionsTest classTrait>>#doRebuildMethodDictionary",				"TAddForUniquenessTest classTrait>>#traitComposition:",				"TAddForUniquenessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAddForUniquenessTest classTrait>>#recategorizeSelector:from:to:",				"TAddForUniquenessTest classTrait>>#doRebuildMethodDictionary",				"TAddTest classTrait>>#traitComposition:",				"TAddTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAddTest classTrait>>#recategorizeSelector:from:to:",				"TAddTest classTrait>>#doRebuildMethodDictionary",				"TApplyingOnClassSide classTrait>>#traitComposition:",				"TApplyingOnClassSide classTrait>>#fileOutLocalMethodsInCategory:on:",				"TApplyingOnClassSide classTrait>>#recategorizeSelector:from:to:",				"TApplyingOnClassSide classTrait>>#doRebuildMethodDictionary",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterOne",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsCommaStringMore",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterLastOne",				"TAsStringCommaAndDelimiterSequenceableTest>>#testAsStringOnDelimiterMore",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#traitComposition:",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#recategorizeSelector:from:to:",				"TAsStringCommaAndDelimiterSequenceableTest classTrait>>#doRebuildMethodDictionary",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterOne",				"TAsStringCommaAndDelimiterTest>>#testAsCommaStringMore",				"TAsStringCommaAndDelimiterTest>>#testAsCommaStringOne",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterLastOne",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterLastMore",				"TAsStringCommaAndDelimiterTest>>#testAsStringOnDelimiterMore",				"TAsStringCommaAndDelimiterTest classTrait>>#traitComposition:",				"TAsStringCommaAndDelimiterTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAsStringCommaAndDelimiterTest classTrait>>#recategorizeSelector:from:to:",				"TAsStringCommaAndDelimiterTest classTrait>>#doRebuildMethodDictionary",				"TAssertable classTrait>>#traitComposition:",				"TAssertable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TAssertable classTrait>>#recategorizeSelector:from:to:",				"TAssertable classTrait>>#doRebuildMethodDictionary",				"TBeginsEndsWith classTrait>>#traitComposition:",				"TBeginsEndsWith classTrait>>#fileOutLocalMethodsInCategory:on:",				"TBeginsEndsWith classTrait>>#recategorizeSelector:from:to:",				"TBeginsEndsWith classTrait>>#doRebuildMethodDictionary",				"TBehavior classTrait>>#traitComposition:",				"TBehavior classTrait>>#fileOutLocalMethodsInCategory:on:",				"TBehavior classTrait>>#recategorizeSelector:from:to:",				"TBehavior classTrait>>#doRebuildMethodDictionary",				"TBehaviorCategorization classTrait>>#traitComposition:",				"TBehaviorCategorization classTrait>>#fileOutLocalMethodsInCategory:on:",				"TBehaviorCategorization classTrait>>#recategorizeSelector:from:to:",				"TBehaviorCategorization classTrait>>#doRebuildMethodDictionary",				"TCairoLibrary classTrait>>#traitComposition:",				"TCairoLibrary classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCairoLibrary classTrait>>#recategorizeSelector:from:to:",				"TCairoLibrary classTrait>>#doRebuildMethodDictionary",				"TChunkVisitor classTrait>>#traitComposition:",				"TChunkVisitor classTrait>>#recategorizeSelector:from:to:",				"TChunkVisitor classTrait>>#doRebuildMethodDictionary",				"TClass classTrait>>#traitComposition:",				"TClass classTrait>>#fileOutLocalMethodsInCategory:on:",				"TClass classTrait>>#recategorizeSelector:from:to:",				"TClass classTrait>>#doRebuildMethodDictionary",				"TClassDescription classTrait>>#traitComposition:",				"TClassDescription classTrait>>#fileOutLocalMethodsInCategory:on:",				"TClassDescription classTrait>>#recategorizeSelector:from:to:",				"TClassDescription classTrait>>#doRebuildMethodDictionary",				"TCloneTest>>#testCopyNonEmpty",				"TCloneTest classTrait>>#traitComposition:",				"TCloneTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCloneTest classTrait>>#recategorizeSelector:from:to:",				"TCloneTest classTrait>>#doRebuildMethodDictionary",				"TClyGenerateTestClass classTrait>>#traitComposition:",				"TClyGenerateTestClass classTrait>>#fileOutLocalMethodsInCategory:on:",				"TClyGenerateTestClass classTrait>>#recategorizeSelector:from:to:",				"TClyGenerateTestClass classTrait>>#doRebuildMethodDictionary",				"TComparable classTrait>>#traitComposition:",				"TComparable classTrait>>#recategorizeSelector:from:to:",				"TComparable classTrait>>#doRebuildMethodDictionary",				"TComposingDescription classTrait>>#traitComposition:",				"TComposingDescription classTrait>>#fileOutLocalMethodsInCategory:on:",				"TComposingDescription classTrait>>#recategorizeSelector:from:to:",				"TComposingDescription classTrait>>#doRebuildMethodDictionary",				"TConcatenationEqualElementsRemovedTest>>#testConcatenationWithDuplicate",				"TConcatenationEqualElementsRemovedTest>>#testConcatenation",				"TConcatenationEqualElementsRemovedTest classTrait>>#traitComposition:",				"TConcatenationEqualElementsRemovedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConcatenationEqualElementsRemovedTest classTrait>>#recategorizeSelector:from:to:",				"TConcatenationEqualElementsRemovedTest classTrait>>#doRebuildMethodDictionary",				"TConcatenationTest>>#testConcatenationWithDuplicate",				"TConcatenationTest>>#testConcatenation",				"TConcatenationTest classTrait>>#traitComposition:",				"TConcatenationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConcatenationTest classTrait>>#recategorizeSelector:from:to:",				"TConcatenationTest classTrait>>#doRebuildMethodDictionary",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsIdentitySetWithIdentityEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsIdentitySetWithEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsSetWithEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest>>#testAsIdentitySetWithoutIdentityEqualsElements",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#traitComposition:",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#recategorizeSelector:from:to:",				"TConvertAsSetForMultiplinessIdentityTest classTrait>>#doRebuildMethodDictionary",				"TConvertAsSetForMultiplinessTest>>#testAsSetWithEqualsElements",				"TConvertAsSetForMultiplinessTest>>#testAsIdentitySetWithEqualsElements",				"TConvertAsSetForMultiplinessTest classTrait>>#traitComposition:",				"TConvertAsSetForMultiplinessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertAsSetForMultiplinessTest classTrait>>#recategorizeSelector:from:to:",				"TConvertAsSetForMultiplinessTest classTrait>>#doRebuildMethodDictionary",				"TConvertAsSortedTest>>#testAsSortedCollectionWithSortBlock",				"TConvertAsSortedTest>>#testAsSortedCollection",				"TConvertAsSortedTest classTrait>>#traitComposition:",				"TConvertAsSortedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertAsSortedTest classTrait>>#recategorizeSelector:from:to:",				"TConvertAsSortedTest classTrait>>#doRebuildMethodDictionary",				"TConvertTest>>#testAsByteArray",				"TConvertTest>>#assertNonDuplicatedContents:whenConvertedTo:",				"TConvertTest>>#assertNoDuplicates:whenConvertedTo:",				"TConvertTest classTrait>>#traitComposition:",				"TConvertTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TConvertTest classTrait>>#recategorizeSelector:from:to:",				"TConvertTest classTrait>>#doRebuildMethodDictionary",				"TCopyPartOfSequenceable>>#test0FixtureCopyPartOfSequenceableTest",				"TCopyPartOfSequenceable classTrait>>#traitComposition:",				"TCopyPartOfSequenceable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyPartOfSequenceable classTrait>>#recategorizeSelector:from:to:",				"TCopyPartOfSequenceable classTrait>>#doRebuildMethodDictionary",				"TCopyPartOfSequenceableForMultipliness classTrait>>#traitComposition:",				"TCopyPartOfSequenceableForMultipliness classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyPartOfSequenceableForMultipliness classTrait>>#recategorizeSelector:from:to:",				"TCopyPartOfSequenceableForMultipliness classTrait>>#doRebuildMethodDictionary",				"TCopyPreservingIdentityTest classTrait>>#traitComposition:",				"TCopyPreservingIdentityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyPreservingIdentityTest classTrait>>#recategorizeSelector:from:to:",				"TCopyPreservingIdentityTest classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableSameContents>>#testShuffled",				"TCopySequenceableSameContents classTrait>>#traitComposition:",				"TCopySequenceableSameContents classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableSameContents classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableSameContents classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#traitComposition:",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableWithOrWithoutSpecificElements classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableWithReplacement>>#testCopyReplaceAllWithManyOccurrence",				"TCopySequenceableWithReplacement classTrait>>#traitComposition:",				"TCopySequenceableWithReplacement classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableWithReplacement classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableWithReplacement classTrait>>#doRebuildMethodDictionary",				"TCopySequenceableWithReplacementForSorted>>#testCopyReplaceAllWithForSorted",				"TCopySequenceableWithReplacementForSorted>>#testCopyFromToWithForSorted",				"TCopySequenceableWithReplacementForSorted classTrait>>#traitComposition:",				"TCopySequenceableWithReplacementForSorted classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopySequenceableWithReplacementForSorted classTrait>>#recategorizeSelector:from:to:",				"TCopySequenceableWithReplacementForSorted classTrait>>#doRebuildMethodDictionary",				"TCopyTest>>#testCopyNonEmptyWithoutAll",				"TCopyTest>>#test0CopyTest",				"TCopyTest>>#testCopyNonEmptyWithoutNotIncluded",				"TCopyTest>>#testCopyNonEmptyWith",				"TCopyTest>>#testCopyEmptyWithoutAll",				"TCopyTest>>#testCopyNonEmptyWithout",				"TCopyTest>>#testCopyNonEmptyWithoutAllNotIncluded",				"TCopyTest classTrait>>#traitComposition:",				"TCopyTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCopyTest classTrait>>#recategorizeSelector:from:to:",				"TCopyTest classTrait>>#doRebuildMethodDictionary",				"TCreationWithTest>>#testWithAll",				"TCreationWithTest classTrait>>#traitComposition:",				"TCreationWithTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TCreationWithTest classTrait>>#recategorizeSelector:from:to:",				"TCreationWithTest classTrait>>#doRebuildMethodDictionary",				"TDebugger classTrait>>#traitComposition:",				"TDebugger classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDebugger classTrait>>#recategorizeSelector:from:to:",				"TDebugger classTrait>>#doRebuildMethodDictionary",				"TDebuggerTest class>>#removeFromSystem:",				"TDebuggerTest class>>#traitComposition:",				"TDebuggerTest class>>#fileOutLocalMethodsInCategory:on:",				"TDebuggerTest class>>#recategorizeSelector:from:to:",				"TDebuggerTest class>>#doRebuildMethodDictionary",				"TDictionaryAddingTest classTrait>>#traitComposition:",				"TDictionaryAddingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryAddingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryAddingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryAssociationAccessTest classTrait>>#traitComposition:",				"TDictionaryAssociationAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryAssociationAccessTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryAssociationAccessTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryComparingTest classTrait>>#traitComposition:",				"TDictionaryComparingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryComparingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryComparingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryCopyingTest>>#testCopyNonEmpty",				"TDictionaryCopyingTest>>#testDictionaryConcatenationWithCommonKeysDifferentValues",				"TDictionaryCopyingTest classTrait>>#traitComposition:",				"TDictionaryCopyingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryCopyingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryCopyingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryEnumeratingTest>>#testCollect",				"TDictionaryEnumeratingTest>>#testSelect",				"TDictionaryEnumeratingTest>>#testAssociationsDo",				"TDictionaryEnumeratingTest>>#testKeysDo",				"TDictionaryEnumeratingTest>>#testKeysAndValuesDo",				"TDictionaryEnumeratingTest>>#testValuesDo",				"TDictionaryEnumeratingTest>>#testAssociationsSelect",				"TDictionaryEnumeratingTest>>#testDo",				"TDictionaryEnumeratingTest classTrait>>#traitComposition:",				"TDictionaryEnumeratingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryEnumeratingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryEnumeratingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryImplementationTest classTrait>>#traitComposition:",				"TDictionaryImplementationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryImplementationTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryImplementationTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryIncludesTest classTrait>>#traitComposition:",				"TDictionaryIncludesTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryIncludesTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryIncludesTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryIncludesWithIdentityCheckTest>>#test0FixtureDictionaryIncludesIdentity",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#traitComposition:",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryIncludesWithIdentityCheckTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryKeyAccessTest classTrait>>#traitComposition:",				"TDictionaryKeyAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryKeyAccessTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryKeyAccessTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryKeysValuesAssociationsAccess>>#testAssociations",				"TDictionaryKeysValuesAssociationsAccess>>#testKeys",				"TDictionaryKeysValuesAssociationsAccess>>#testKeysSortedSafely",				"TDictionaryKeysValuesAssociationsAccess>>#testValues",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#traitComposition:",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#recategorizeSelector:from:to:",				"TDictionaryKeysValuesAssociationsAccess classTrait>>#doRebuildMethodDictionary",				"TDictionaryPrintingTest classTrait>>#traitComposition:",				"TDictionaryPrintingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryPrintingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryPrintingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryRemovingTest classTrait>>#traitComposition:",				"TDictionaryRemovingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryRemovingTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryRemovingTest classTrait>>#doRebuildMethodDictionary",				"TDictionaryValueAccessTest classTrait>>#traitComposition:",				"TDictionaryValueAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TDictionaryValueAccessTest classTrait>>#recategorizeSelector:from:to:",				"TDictionaryValueAccessTest classTrait>>#doRebuildMethodDictionary",				"TEasilyThemed classTrait>>#traitComposition:",				"TEasilyThemed classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEasilyThemed classTrait>>#recategorizeSelector:from:to:",				"TEasilyThemed classTrait>>#doRebuildMethodDictionary",				"TEmpty classTrait>>#traitComposition:",				"TEmpty classTrait>>#recategorizeSelector:from:to:",				"TEmpty classTrait>>#doRebuildMethodDictionary",				"TEmptySequenceableTest classTrait>>#traitComposition:",				"TEmptySequenceableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEmptySequenceableTest classTrait>>#recategorizeSelector:from:to:",				"TEmptySequenceableTest classTrait>>#doRebuildMethodDictionary",				"TEmptyTest classTrait>>#traitComposition:",				"TEmptyTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEmptyTest classTrait>>#recategorizeSelector:from:to:",				"TEmptyTest classTrait>>#doRebuildMethodDictionary",				"TEnableOnHaloMenu classTrait>>#traitComposition:",				"TEnableOnHaloMenu classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEnableOnHaloMenu classTrait>>#recategorizeSelector:from:to:",				"TEnableOnHaloMenu classTrait>>#doRebuildMethodDictionary",				"TEnumeratingTest classTrait>>#traitComposition:",				"TEnumeratingTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TEnumeratingTest classTrait>>#recategorizeSelector:from:to:",				"TEnumeratingTest classTrait>>#doRebuildMethodDictionary",				"TFBasicTypeTest>>#testBasicTypesAreValid",				"TFCallback>>#validateTypes",				"TFCalloutMethodBuilder>>#generateFFICallout:spec:ffiLibrary:",				"TFFunctionDefinition>>#validate",				"TFPool>>#release",				"TFStructType>>#validate",				"TFinalizable classTrait>>#traitComposition:",				"TFinalizable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TFinalizable classTrait>>#recategorizeSelector:from:to:",				"TFinalizable classTrait>>#doRebuildMethodDictionary",				"TGWithCoordinates classTrait>>#traitComposition:",				"TGWithCoordinates classTrait>>#fileOutLocalMethodsInCategory:on:",				"TGWithCoordinates classTrait>>#recategorizeSelector:from:to:",				"TGWithCoordinates classTrait>>#doRebuildMethodDictionary",				"TGrowableTest classTrait>>#traitComposition:",				"TGrowableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TGrowableTest classTrait>>#recategorizeSelector:from:to:",				"TGrowableTest classTrait>>#doRebuildMethodDictionary",				"TIceCopyCommitId classTrait>>#traitComposition:",				"TIceCopyCommitId classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceCopyCommitId classTrait>>#recategorizeSelector:from:to:",				"TIceCopyCommitId classTrait>>#doRebuildMethodDictionary",				"TIceImagesExporting classTrait>>#recategorizeSelector:from:to:",				"TIceImagesExporting classTrait>>#traitComposition:",				"TIceImagesExporting classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceImagesExporting classTrait>>#doRebuildMethodDictionary",				"TIceRepositoryReader classTrait>>#traitComposition:",				"TIceRepositoryReader classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceRepositoryReader classTrait>>#recategorizeSelector:from:to:",				"TIceRepositoryReader classTrait>>#doRebuildMethodDictionary",				"TIceRepositoryWriter classTrait>>#traitComposition:",				"TIceRepositoryWriter classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIceRepositoryWriter classTrait>>#recategorizeSelector:from:to:",				"TIceRepositoryWriter classTrait>>#doRebuildMethodDictionary",				"TIdentityAddTest classTrait>>#traitComposition:",				"TIdentityAddTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIdentityAddTest classTrait>>#recategorizeSelector:from:to:",				"TIdentityAddTest classTrait>>#doRebuildMethodDictionary",				"TIncludesForIdentityCollectionsTest>>#test0FixtureInludesForIdentityCollectionsTest",				"TIncludesForIdentityCollectionsTest>>#testIncludesAnyOfForIdentityCollections",				"TIncludesForIdentityCollectionsTest>>#testIncludesAllOfForIdentityCollections",				"TIncludesForIdentityCollectionsTest classTrait>>#traitComposition:",				"TIncludesForIdentityCollectionsTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIncludesForIdentityCollectionsTest classTrait>>#recategorizeSelector:from:to:",				"TIncludesForIdentityCollectionsTest classTrait>>#doRebuildMethodDictionary",				"TIncludesTest classTrait>>#traitComposition:",				"TIncludesTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIncludesTest classTrait>>#recategorizeSelector:from:to:",				"TIncludesTest classTrait>>#doRebuildMethodDictionary",				"TIncludesWithIdentityCheckTest classTrait>>#traitComposition:",				"TIncludesWithIdentityCheckTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIncludesWithIdentityCheckTest classTrait>>#recategorizeSelector:from:to:",				"TIncludesWithIdentityCheckTest classTrait>>#doRebuildMethodDictionary",				"TIndexAccess classTrait>>#traitComposition:",				"TIndexAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIndexAccess classTrait>>#recategorizeSelector:from:to:",				"TIndexAccess classTrait>>#doRebuildMethodDictionary",				"TIndexAccessForMultipliness classTrait>>#traitComposition:",				"TIndexAccessForMultipliness classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIndexAccessForMultipliness classTrait>>#recategorizeSelector:from:to:",				"TIndexAccessForMultipliness classTrait>>#doRebuildMethodDictionary",				"TIterateSequencedReadableTest>>#testKeysAndValuesDo",				"TIterateSequencedReadableTest>>#testPairsCollect",				"TIterateSequencedReadableTest classTrait>>#traitComposition:",				"TIterateSequencedReadableTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIterateSequencedReadableTest classTrait>>#recategorizeSelector:from:to:",				"TIterateSequencedReadableTest classTrait>>#doRebuildMethodDictionary",				"TIterateTest>>#testBasicCollect",				"TIterateTest>>#testDoWithout",				"TIterateTest>>#testDoSeparatedBy",				"TIterateTest>>#testDo2",				"TIterateTest classTrait>>#traitComposition:",				"TIterateTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TIterateTest classTrait>>#recategorizeSelector:from:to:",				"TIterateTest classTrait>>#doRebuildMethodDictionary",				"TKTAbstractExecutor class>>#removeFromSystem:",				"TKTAbstractExecutor class>>#traitComposition:",				"TKTAbstractExecutor class>>#fileOutLocalMethodsInCategory:on:",				"TKTAbstractExecutor class>>#recategorizeSelector:from:to:",				"TKTAbstractExecutor class>>#doRebuildMethodDictionary",				"TKTCommonQueueWorkerPool>>#stop",				"TKTCommonQueueWorkerPool>>#reset",				"TKTCommonQueueWorkerPool>>#ensureIsWorking",				"TKTCommonQueueWorkerPool>>#privateManageWorkersAfter",				"TKTCommonQueueWorkerPool class>>#removeFromSystem:",				"TKTCommonQueueWorkerPool class>>#traitComposition:",				"TKTCommonQueueWorkerPool class>>#fileOutLocalMethodsInCategory:on:",				"TKTCommonQueueWorkerPool class>>#recategorizeSelector:from:to:",				"TKTCommonQueueWorkerPool class>>#doRebuildMethodDictionary",				"TKTCommonQueueWorkerPoolTest>>#testWorkerPoolStopStopsWorkers",				"TKTCommonQueueWorkerPoolTest>>#testWorkerPoolDoesNotExceedPoolSize",				"TKTFuture>>#deployFailure:",				"TKTFuture>>#deploySuccess:",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsInNewProcessEveryTime",				"TKTNewProcessTaskRunnerTest>>#testNewProcessTaskRunnerRunsNeverInLocalProcess",				"TKTProfile>>#activateProfile",				"TKTProfile>>#finalizeProfile",				"TKTQueueTaskScheduler class>>#removeFromSystem:",				"TKTQueueTaskScheduler class>>#traitComposition:",				"TKTQueueTaskScheduler class>>#fileOutLocalMethodsInCategory:on:",				"TKTQueueTaskScheduler class>>#recategorizeSelector:from:to:",				"TKTQueueTaskScheduler class>>#doRebuildMethodDictionary",				"TKTService>>#doStop",				"TKTWatchDog>>#stepService",				"TKTWorkerPool>>#priority:",				"TKTWorkerPool>>#stop",				"TKTWorkerPool class>>#removeFromSystem:",				"TKTWorkerPool class>>#traitComposition:",				"TKTWorkerPool class>>#fileOutLocalMethodsInCategory:on:",				"TKTWorkerPool class>>#recategorizeSelector:from:to:",				"TKTWorkerPool class>>#doRebuildMethodDictionary",				"TKTWorkerPoolTest>>#testWorkerPoolStopStopsWorkers",				"TKTWorkerPoolTest>>#testWorkerPoolDoesNotExceedPoolSize",				"TKTWorkerPoolTest>>#testPriorityAfterStart",				"TKTWorkerPoolTest>>#testPrioritySetBeforeStart",				"TLGitCalloutTrait classTrait>>#traitComposition:",				"TLGitCalloutTrait classTrait>>#fileOutLocalMethodsInCategory:on:",				"TLGitCalloutTrait classTrait>>#recategorizeSelector:from:to:",				"TLGitCalloutTrait classTrait>>#doRebuildMethodDictionary",				"TLGitPrintingTrait classTrait>>#traitComposition:",				"TLGitPrintingTrait classTrait>>#fileOutLocalMethodsInCategory:on:",				"TLGitPrintingTrait classTrait>>#recategorizeSelector:from:to:",				"TLGitPrintingTrait classTrait>>#doRebuildMethodDictionary",				"TMockWithComplexSlot classTrait>>#traitComposition:",				"TMockWithComplexSlot classTrait>>#fileOutLocalMethodsInCategory:on:",				"TMockWithComplexSlot classTrait>>#recategorizeSelector:from:to:",				"TMockWithComplexSlot classTrait>>#doRebuildMethodDictionary",				"TMockWithUseAndSlot classTrait>>#traitComposition:",				"TMockWithUseAndSlot classTrait>>#fileOutLocalMethodsInCategory:on:",				"TMockWithUseAndSlot classTrait>>#recategorizeSelector:from:to:",				"TMockWithUseAndSlot classTrait>>#doRebuildMethodDictionary",				"TModelBuilder>>#abstractVariableTestData",				"TModelBuilder>>#extractMethodTestData",				"TModelBuilder classTrait>>#traitComposition:",				"TModelBuilder classTrait>>#fileOutLocalMethodsInCategory:on:",				"TModelBuilder classTrait>>#recategorizeSelector:from:to:",				"TModelBuilder classTrait>>#doRebuildMethodDictionary",				"TObservable classTrait>>#traitComposition:",				"TObservable classTrait>>#fileOutLocalMethodsInCategory:on:",				"TObservable classTrait>>#recategorizeSelector:from:to:",				"TObservable classTrait>>#doRebuildMethodDictionary",				"TOccurrencesForIdentityCollectionsTest>>#test0FixtureOccurrencesForIdentityCollectionsTest",				"TOccurrencesForIdentityCollectionsTest classTrait>>#traitComposition:",				"TOccurrencesForIdentityCollectionsTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOccurrencesForIdentityCollectionsTest classTrait>>#recategorizeSelector:from:to:",				"TOccurrencesForIdentityCollectionsTest classTrait>>#doRebuildMethodDictionary",				"TOccurrencesForMultiplinessTest>>#testOccurrencesOf",				"TOccurrencesForMultiplinessTest>>#test0FixtureOccurrencesTest",				"TOccurrencesForMultiplinessTest>>#test0FixtureOccurrencesForMultiplinessTest",				"TOccurrencesForMultiplinessTest classTrait>>#traitComposition:",				"TOccurrencesForMultiplinessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOccurrencesForMultiplinessTest classTrait>>#recategorizeSelector:from:to:",				"TOccurrencesForMultiplinessTest classTrait>>#doRebuildMethodDictionary",				"TOccurrencesTest>>#testOccurrencesOf",				"TOccurrencesTest>>#test0FixtureOccurrencesTest",				"TOccurrencesTest classTrait>>#traitComposition:",				"TOccurrencesTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOccurrencesTest classTrait>>#recategorizeSelector:from:to:",				"TOccurrencesTest classTrait>>#doRebuildMethodDictionary",				"TOne classTrait>>#traitComposition:",				"TOne classTrait>>#fileOutLocalMethodsInCategory:on:",				"TOne classTrait>>#recategorizeSelector:from:to:",				"TOne classTrait>>#doRebuildMethodDictionary",				"TPointAccess>>#bounds",				"TPointAccess classTrait>>#traitComposition:",				"TPointAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPointAccess classTrait>>#recategorizeSelector:from:to:",				"TPointAccess classTrait>>#doRebuildMethodDictionary",				"TPrintOnSequencedTest classTrait>>#traitComposition:",				"TPrintOnSequencedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPrintOnSequencedTest classTrait>>#recategorizeSelector:from:to:",				"TPrintOnSequencedTest classTrait>>#doRebuildMethodDictionary",				"TPrintTest>>#testPrintOn",				"TPrintTest>>#testPrintOnDelimiter",				"TPrintTest>>#testPrintElementsOn",				"TPrintTest>>#testPrintOnDelimiterLast",				"TPrintTest classTrait>>#traitComposition:",				"TPrintTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPrintTest classTrait>>#recategorizeSelector:from:to:",				"TPrintTest classTrait>>#doRebuildMethodDictionary",				"TPutBasicTest classTrait>>#traitComposition:",				"TPutBasicTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPutBasicTest classTrait>>#recategorizeSelector:from:to:",				"TPutBasicTest classTrait>>#doRebuildMethodDictionary",				"TPutTest>>#test0FixturePutOneOrMoreElementsTest",				"TPutTest>>#testAtAllPut",				"TPutTest>>#testAtAllIndexesPut",				"TPutTest classTrait>>#traitComposition:",				"TPutTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TPutTest classTrait>>#recategorizeSelector:from:to:",				"TPutTest classTrait>>#doRebuildMethodDictionary",				"TRBProgramNodeVisitor>>#visitEnglobingErrorNode:",				"TRBProgramNodeVisitor>>#visitSequenceNode:",				"TRBProgramNodeVisitor>>#visitArgumentNodes:",				"TRBProgramNodeVisitor>>#visitArrayNode:",				"TRBProgramNodeVisitor>>#visitTemporaryNodes:",				"TRBProgramNodeVisitor>>#visitCascadeNode:",				"TRBProgramNodeVisitor>>#visitPragmaNode:",				"TRBProgramNodeVisitor>>#visitMessageNode:",				"TRBProgramNodeVisitor>>#visitMethodNode:",				"TRBProgramNodeVisitor>>#visitLiteralArrayNode:",				"TRBProgramNodeVisitor classTrait>>#traitComposition:",				"TRBProgramNodeVisitor classTrait>>#recategorizeSelector:from:to:",				"TRBProgramNodeVisitor classTrait>>#doRebuildMethodDictionary",				"TRGBehaviorTest>>#testBehaviorWithProtocols",				"TRGBehaviorTest>>#testBehaviorWithMethods",				"TRGBehaviorTest classTrait>>#traitComposition:",				"TRGBehaviorTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRGBehaviorTest classTrait>>#recategorizeSelector:from:to:",				"TRGBehaviorTest classTrait>>#doRebuildMethodDictionary",				"TRGClassDescriptionTest classTrait>>#traitComposition:",				"TRGClassDescriptionTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRGClassDescriptionTest classTrait>>#recategorizeSelector:from:to:",				"TRGClassDescriptionTest classTrait>>#doRebuildMethodDictionary",				"TRGReadOnlyTest>>#testReadOnlyErrors",				"TRGReadOnlyTest classTrait>>#traitComposition:",				"TRGReadOnlyTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRGReadOnlyTest classTrait>>#recategorizeSelector:from:to:",				"TRGReadOnlyTest classTrait>>#doRebuildMethodDictionary",				"TRefactoringCommandSupport>>#computeInvalidArgNamesForSelector:",				"TRefactoringCommandSupport classTrait>>#traitComposition:",				"TRefactoringCommandSupport classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRefactoringCommandSupport classTrait>>#recategorizeSelector:from:to:",				"TRefactoringCommandSupport classTrait>>#doRebuildMethodDictionary",				"TRemoveByIndexTest classTrait>>#traitComposition:",				"TRemoveByIndexTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRemoveByIndexTest classTrait>>#recategorizeSelector:from:to:",				"TRemoveByIndexTest classTrait>>#doRebuildMethodDictionary",				"TRemoveForMultiplenessTest>>#testRemoveAll",				"TRemoveForMultiplenessTest>>#testRemoveAllFoundIn",				"TRemoveForMultiplenessTest>>#testRemoveAllSuchThat",				"TRemoveForMultiplenessTest classTrait>>#traitComposition:",				"TRemoveForMultiplenessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRemoveForMultiplenessTest classTrait>>#recategorizeSelector:from:to:",				"TRemoveForMultiplenessTest classTrait>>#doRebuildMethodDictionary",				"TRemoveTest>>#testRemoveAll",				"TRemoveTest>>#testRemoveAllFoundIn",				"TRemoveTest>>#testRemoveAllSuchThat",				"TRemoveTest classTrait>>#traitComposition:",				"TRemoveTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRemoveTest classTrait>>#recategorizeSelector:from:to:",				"TRemoveTest classTrait>>#doRebuildMethodDictionary",				"TReplacementSequencedTest classTrait>>#traitComposition:",				"TReplacementSequencedTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TReplacementSequencedTest classTrait>>#recategorizeSelector:from:to:",				"TReplacementSequencedTest classTrait>>#doRebuildMethodDictionary",				"TRubWithLineNumber classTrait>>#traitComposition:",				"TRubWithLineNumber classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRubWithLineNumber classTrait>>#recategorizeSelector:from:to:",				"TRubWithLineNumber classTrait>>#doRebuildMethodDictionary",				"TRubWithWrapPolicy classTrait>>#traitComposition:",				"TRubWithWrapPolicy classTrait>>#fileOutLocalMethodsInCategory:on:",				"TRubWithWrapPolicy classTrait>>#recategorizeSelector:from:to:",				"TRubWithWrapPolicy classTrait>>#doRebuildMethodDictionary",				"TSequencedConcatenationTest>>#testConcatenation",				"TSequencedConcatenationTest classTrait>>#traitComposition:",				"TSequencedConcatenationTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSequencedConcatenationTest classTrait>>#recategorizeSelector:from:to:",				"TSequencedConcatenationTest classTrait>>#doRebuildMethodDictionary",				"TSequencedElementAccessTest classTrait>>#traitComposition:",				"TSequencedElementAccessTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSequencedElementAccessTest classTrait>>#recategorizeSelector:from:to:",				"TSequencedElementAccessTest classTrait>>#doRebuildMethodDictionary",				"TSequencedStructuralEqualityTest classTrait>>#traitComposition:",				"TSequencedStructuralEqualityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSequencedStructuralEqualityTest classTrait>>#recategorizeSelector:from:to:",				"TSequencedStructuralEqualityTest classTrait>>#doRebuildMethodDictionary",				"TSetArithmetic>>#testDifferenceWithSeparateCollection",				"TSetArithmetic>>#testDifference",				"TSetArithmetic>>#testDifferenceWithNonNullIntersection",				"TSetArithmetic>>#testIntersectionItself",				"TSetArithmetic classTrait>>#traitComposition:",				"TSetArithmetic classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSetArithmetic classTrait>>#recategorizeSelector:from:to:",				"TSetArithmetic classTrait>>#doRebuildMethodDictionary",				"TSetUpRefactorings classTrait>>#traitComposition:",				"TSetUpRefactorings classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSetUpRefactorings classTrait>>#recategorizeSelector:from:to:",				"TSetUpRefactorings classTrait>>#doRebuildMethodDictionary",				"TShowInTaskbar classTrait>>#traitComposition:",				"TShowInTaskbar classTrait>>#fileOutLocalMethodsInCategory:on:",				"TShowInTaskbar classTrait>>#recategorizeSelector:from:to:",				"TShowInTaskbar classTrait>>#doRebuildMethodDictionary",				"TSizeTest>>#testSize",				"TSizeTest classTrait>>#traitComposition:",				"TSizeTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSizeTest classTrait>>#recategorizeSelector:from:to:",				"TSizeTest classTrait>>#doRebuildMethodDictionary",				"TSortTest>>#testSortUsingSortBlock",				"TSortTest>>#test0SortingArrayedTest",				"TSortTest>>#testSortedUsingBlock",				"TSortTest>>#testSort",				"TSortTest>>#testSorted",				"TSortTest classTrait>>#traitComposition:",				"TSortTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSortTest classTrait>>#recategorizeSelector:from:to:",				"TSortTest classTrait>>#doRebuildMethodDictionary",				"TSortable classTrait>>#traitComposition:",				"TSortable classTrait>>#recategorizeSelector:from:to:",				"TSortable classTrait>>#doRebuildMethodDictionary",				"TStDebuggerExtension classTrait>>#traitComposition:",				"TStDebuggerExtension classTrait>>#fileOutLocalMethodsInCategory:on:",				"TStDebuggerExtension classTrait>>#recategorizeSelector:from:to:",				"TStDebuggerExtension classTrait>>#doRebuildMethodDictionary",				"TStructuralEqualityTest classTrait>>#traitComposition:",				"TStructuralEqualityTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TStructuralEqualityTest classTrait>>#recategorizeSelector:from:to:",				"TStructuralEqualityTest classTrait>>#doRebuildMethodDictionary",				"TSubCollectionAccess classTrait>>#traitComposition:",				"TSubCollectionAccess classTrait>>#fileOutLocalMethodsInCategory:on:",				"TSubCollectionAccess classTrait>>#recategorizeSelector:from:to:",				"TSubCollectionAccess classTrait>>#doRebuildMethodDictionary",				"TTLCache>>#removeStaleValues",				"TTaskExecutor classTrait>>#traitComposition:",				"TTaskExecutor classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTaskExecutor classTrait>>#recategorizeSelector:from:to:",				"TTaskExecutor classTrait>>#doRebuildMethodDictionary",				"TTaskScheduler classTrait>>#traitComposition:",				"TTaskScheduler classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTaskScheduler classTrait>>#recategorizeSelector:from:to:",				"TTaskScheduler classTrait>>#doRebuildMethodDictionary",				"TTranscript classTrait>>#traitComposition:",				"TTranscript classTrait>>#recategorizeSelector:from:to:",				"TTranscript classTrait>>#doRebuildMethodDictionary",				"TTutorialTest>>#testEachSelectorExists",				"TTutorialTest>>#testEachSelectorReturnsALesson",				"TTutorialTest classTrait>>#traitComposition:",				"TTutorialTest classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTutorialTest classTrait>>#recategorizeSelector:from:to:",				"TTutorialTest classTrait>>#doRebuildMethodDictionary",				"TTwo classTrait>>#traitComposition:",				"TTwo classTrait>>#fileOutLocalMethodsInCategory:on:",				"TTwo classTrait>>#recategorizeSelector:from:to:",				"TTwo classTrait>>#doRebuildMethodDictionary",				"TViewModel classTrait>>#traitComposition:",				"TViewModel classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModel classTrait>>#recategorizeSelector:from:to:",				"TViewModel classTrait>>#doRebuildMethodDictionary",				"TViewModelMock classTrait>>#traitComposition:",				"TViewModelMock classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModelMock classTrait>>#recategorizeSelector:from:to:",				"TViewModelMock classTrait>>#doRebuildMethodDictionary",				"TViewModelMock2 classTrait>>#traitComposition:",				"TViewModelMock2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModelMock2 classTrait>>#recategorizeSelector:from:to:",				"TViewModelMock2 classTrait>>#doRebuildMethodDictionary",				"TViewModelMock3 classTrait>>#traitComposition:",				"TViewModelMock3 classTrait>>#fileOutLocalMethodsInCategory:on:",				"TViewModelMock3 classTrait>>#recategorizeSelector:from:to:",				"TViewModelMock3 classTrait>>#doRebuildMethodDictionary",				"TWithBranchModel classTrait>>#traitComposition:",				"TWithBranchModel classTrait>>#fileOutLocalMethodsInCategory:on:",				"TWithBranchModel classTrait>>#recategorizeSelector:from:to:",				"TWithBranchModel classTrait>>#doRebuildMethodDictionary",				"TaRenameSlot>>#sourceCodeAt:",				"TaSequence>>#validateSlots:",				"TaSequence>>#removeUser:",				"TaSequence>>#addToSequence:",				"TaSequence>>#addUser:",				"TaSequence>>#addAll:",				"TaSequence>>#initializeObject:",				"TabBarMorph>>#adjustLayout",				"TabBarMorph>>#tabEmptyContents:",				"TabBarMorph>>#closeAllTabs",				"TabBarMorph>>#themeChanged",				"TabBarMorph>>#deleteSelectedTabs",				"TabBarMorph>>#tabResetSelection:",				"TabBarMorph>>#tabs:",				"TabExample>>#addTabs",				"TabGroupMorph>>#themeChanged",				"TabGroupMorph>>#labelsAndPages:",				"TabLabelItemMorph>>#drawSubmorphsOn:",				"TabManagerMorph>>#cleanProcesses",				"TabMorph>>#extraSpaceForActions",				"TabSelectorMorph>>#basicMinExtent",				"TabSelectorMorph>>#cornerStyle:",				"TabSelectorMorph>>#updateFont",				"TabSelectorMorph>>#updateTabs",				"TabSelectorMorph>>#passivate",				"TabSelectorMorph>>#activate",				"TableLayout>>#computeExtraSpacing:in:horizontal:target:",				"TableLayout>>#computeCellArrangement:in:horizontal:target:",				"TableLayout>>#minExtentOf:in:",				"TaskListMorph>>#postOpenInWorld:",				"TaskListMorph>>#updateTaskButtons",				"TaskListMorph>>#selectTask:",				"TaskbarMorph>>#updateOrderedTasksFrom:",				"TaskbarMorph>>#updateTasks",				"TaskbarMorph>>#updateTaskButtons",				"TaskbarMorph>>#removeFromWorld",				"TaskbarMorph class>>#reset",				"TaskbarMorphTest>>#updateOrderedTasksFrom:",				"TemporaryVariableTest>>#testReadNodes",				"TemporaryVariableTest>>#testTemporaryVariablesMethod",				"TemporaryVariableTest>>#testDeclaringNode",				"TestCase>>#cleanUpInstanceVariables",				"TestCase>>#runCase",				"TestCase>>#runCaseAsFailure:",				"TestCase class>>#buildMicroDownUsing:withComment:",				"TestCase class>>#addToSuite:fromMethods:",				"TestCase class>>#addTestsFor:toSuite:",				"TestCase class>>#buildSuite",				"TestCommandLineHandler>>#addPackagesMatchingGlob:to:",				"TestCommandLineHandler>>#addPackagesMatchingRegex:to:",				"TestExecutionEnvironment>>#cleanUpAfterTest",				"TestExecutionEnvironment>>#registerDefaultServices",				"TestExecutionEnvironment class>>#settingsOn:",				"TestExecutionEnvironmentTestCase>>#tearDown",				"TestFailedByForkedProcess>>#recordResultOf:inHDTestReport:",				"TestResource class>>#makeAvailable",				"TestResource class>>#resetOrAddResourcesTo:",				"TestResource class>>#resetResources:",				"TestResult>>#fileOutOn:",				"TestResult>>#dispatchResultsIntoHistory",				"TestResult>>#updateResultsInHistory",				"TestResult class>>#removeFromTestHistory:in:",				"TestReviver>>#selectTestFailures",				"TestRunner>>#showProgress",				"TestRunner>>#hasProgress",				"TestRunner>>#showDiffWith:",				"TestRunner>>#suiteForAllSelected",				"TestRunner>>#findPackages",				"TestRunner>>#addDeclaredPackagesUnderTestTo:",				"TestRunner>>#collectCoverageFor:",				"TestRunner>>#excludeClassesNotUnderTestFrom:",				"TestRunner>>#browseClass",				"TestRunner>>#storeResultIntoTestCases",				"TestSuite>>#addTests:",				"TestSuite>>#addDependentToHierachy:",				"TestSuite>>#runUnmanaged:",				"TestSuite>>#defaultResources",				"TestSuite>>#setUp",				"TestSuite>>#debug",				"TestSuite>>#removeDependentFromHierachy:",				"Text>>#alignmentAt:ifAbsent:",				"Text>>#unembellished",				"Text>>#treeRenderOn:bounds:color:font:from:",				"Text>>#fontAt:withStyle:",				"Text>>#removeAttributesThat:replaceAttributesThat:by:",				"Text>>#attributesAt:do:",				"Text>>#listRenderOn:atRow:bounds:color:backgroundColor:from:",				"Text>>#fontNumberAt:",				"Text>>#embeddedMorphsFrom:to:",				"Text>>#embeddedMorphs",				"Text class>>#addAttribute:toArray:",				"TextConverter>>#nextPutAll:toStream:",				"TextConverter class>>#allEncodingNames",				"TextDiffBuilder>>#patchSequenceDoIfMatch:ifInsert:ifRemove:",				"TextDiffBuilderTest>>#testIfSequence1",				"TextDiffBuilderTest>>#testIfSequence4",				"TextDiffBuilderTest>>#testIfSequence2",				"TextDiffBuilderTest>>#testIfPatchIsMinimal",				"TextDiffBuilderTest>>#testIfSequence6",				"TextDiffBuilderTest>>#convertToString:",				"TextDiffBuilderTest>>#testIfSequence5",				"TextDiffBuilderTest>>#testEmptyLcs3",				"TextDiffBuilderTest>>#testIfSequence3",				"TextEditor>>#changeEmphasis:",				"TextEditor>>#saveContentsInFile",				"TextEditor class>>#initializeCmdKeyShortcuts",				"TextEmphasisTest>>#testDominates",				"TextEmphasisTest>>#testSet",				"TextMorph>>#selectionChanged",				"TextMorph>>#debugDrawLineRectsOn:",				"TextMorph>>#newContents:",				"TextMorph class>>#removeFromSystem:",				"TextMorph class>>#traitComposition:",				"TextMorph class>>#fileOutLocalMethodsInCategory:on:",				"TextMorph class>>#recategorizeSelector:from:to:",				"TextMorph class>>#doRebuildMethodDictionary",				"TextStream>>#withAttributes:do:",				"TextStyle>>#addNewFontSize:",				"TextStyle class>>#actualTextStyles",				"TextStyle class>>#emphasisMenuForFont:target:selector:highlight:",				"TheManifestBuilder>>#buildArrayString:",				"TheManifestBuilder>>#addAllFalsePositive:of:version:",				"TheManifestBuilder>>#unwrap:",				"ThemeIcons class>>#uiFetchPacks",				"ThumbnailMorph class>>#removeFromSystem:",				"ThumbnailMorph class>>#traitComposition:",				"ThumbnailMorph class>>#fileOutLocalMethodsInCategory:on:",				"ThumbnailMorph class>>#recategorizeSelector:from:to:",				"ThumbnailMorph class>>#doRebuildMethodDictionary",				"TimeMeasuringTest>>#debug",				"TimeProfiler>>#rootTallyItems",				"TimeTest>>#testReadFromWithNanos",				"TimeTest>>#testReadFromWithError",				"TimespanTest>>#testSubclassArithmetic",				"ToggleMenuItemShortcut class>>#normalize:",				"TonelRepository>>#goferVersionFrom:",				"TonelWriter>>#writeExtensionMethods:className:",				"TonelWriter>>#writeClassSideMethodDefinitions:on:",				"TonelWriter>>#writeSnapshot:",				"TonelWriter>>#writeInstanceSideMethodDefinitions:on:",				"TonelWriterTest>>#testWriteSnapshotWithoutOrganization",				"ToolDockingBarMorph>>#adoptMenuGroupModel:first:",				"ToolDockingBarMorph>>#emptyAccumulator:",				"TopologicalSortAlgorithm>>#initializeValueLinksTable:",				"TopologicalSortAlgorithm>>#handleCycleInValueLinksTable:do:",				"TopologicalSortAlgorithm>>#sortOn:sinksValueLink:valueLinksTable:",				"Trait>>#removeFromSystem:",				"Trait>>#notifyOfRecategorizedSelector:from:to:",				"Trait>>#rebuildMethodDictionary",				"Trait1 classTrait>>#traitComposition:",				"Trait1 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait1 classTrait>>#recategorizeSelector:from:to:",				"Trait1 classTrait>>#doRebuildMethodDictionary",				"Trait2 classTrait>>#traitComposition:",				"Trait2 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait2 classTrait>>#recategorizeSelector:from:to:",				"Trait2 classTrait>>#doRebuildMethodDictionary",				"Trait3 classTrait>>#traitComposition:",				"Trait3 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait3 classTrait>>#recategorizeSelector:from:to:",				"Trait3 classTrait>>#doRebuildMethodDictionary",				"Trait4 classTrait>>#traitComposition:",				"Trait4 classTrait>>#fileOutLocalMethodsInCategory:on:",				"Trait4 classTrait>>#recategorizeSelector:from:to:",				"Trait4 classTrait>>#doRebuildMethodDictionary",				"TraitBuilderEnhancer>>#propagateChangesToRelatedClasses:installer:",				"TraitBuilderEnhancer>>#eliminateDuplicates:withSuperclassSlots:",				"TraitBuilderEnhancer>>#afterMigratingClass:installer:",				"TraitChange>>#applyOn:",				"TraitChange>>#remove:into:changes:",				"TraitChange>>#update:into:changes:",				"TraitFileOutTest>>#tearDown",				"TraitMethodDescription>>#methodsDo:",				"TraitMethodDescription>>#effectiveMethodCategoryCurrent:new:",				"TraitMethodDescription>>#providedLocatedMethod",				"TraitTest>>#testErrorClassCreation",				"TraitTest>>#testTraitsUsersSanity",				"TraitTest>>#testTraitsMethodClassSanity",				"TraitedClass>>#removeFromSystem:",				"TraitedClass>>#traitComposition:",				"TraitedClass>>#fileOutLocalMethodsInCategory:on:",				"TraitedClass>>#doRebuildMethodDictionary",				"TraitedClass>>#recategorizeSelector:from:to:",				"TraitedClass class>>#propagateChangeOf:",				"TraitedMetaclass>>#initializeBasicMethods",				"TraitedMetaclass>>#traitComposition:",				"TraitedMetaclass>>#fileOutLocalMethodsInCategory:on:",				"TraitedMetaclass>>#rebuildMethodDictionary",				"TraitedMetaclass>>#recategorizeSelector:from:to:",				"TraitsResource>>#tearDown",				"TraitsTestCase>>#tearDown",				"TransformMorph>>#drawSubmorphsOnAthensCanvas:",				"TransformMorph>>#fullBounds",				"TransformWithLayoutMorph>>#doLayoutIn:",				"TransformationMorph>>#removeFlexShell",				"TransformationMorph class>>#removeFromSystem:",				"TransformationMorph class>>#traitComposition:",				"TransformationMorph class>>#fileOutLocalMethodsInCategory:on:",				"TransformationMorph class>>#recategorizeSelector:from:to:",				"TransformationMorph class>>#doRebuildMethodDictionary",				"TreeListMorph>>#insertNewMorphs:",				"TreeNavigationBarMorph>>#asDisabledForm:",				"TreeNavigationBarMorph class>>#createIconMethods",				"TreeNodePresenter>>#unselectAllChildren",				"TreeNodePresenter>>#selectAllChildren",				"TreeNodePresenter>>#allUnselectedItems",				"TreeNodePresenter>>#isPartialMatch",				"TreeNodePresenter>>#allSelectedItems",				"TreePresenter>>#registerEvents",				"UIManager>>#showWaitCursorWhile:",				"UITheme>>#newExpanderIn:label:forAll:",				"UITheme>>#newStackIn:for:",				"UITheme>>#newColumnIn:for:",				"UITheme>>#newLabelGroupIn:for:font:labelColor:",				"UITheme>>#whiteTreeUnexpandedForm",				"UITheme>>#newToolbarIn:for:",				"UITheme>>#newLabelGroupIn:for:",				"UITheme>>#updateWorldDockingBars",				"UITheme>>#whiteTreeExpandedForm",				"UITheme>>#updateScrollBarButtonsAspect:color:",				"UITheme>>#newRowIn:for:",				"UITheme class>>#current:",				"UndefinedSlot>>#checkClassRebuild",				"UndoRedoGroup>>#redo",				"UnicodeTest>>#testNonCharacterPositive",				"Unit>>#multipliedBy:",				"VTermOutputStyle>>#setInDriver:",				"ValueLink>>#asLinkedList",				"ValueLink>>#do:",				"Variable>>#removeLink:",				"Variable>>#link:",				"Variable>>#invalidate",				"VariableBreakpoint>>#printTargetForBreakpointInspection",				"VariableBreakpoint>>#setAsNodeProperty",				"VariableBreakpoint>>#removeFromClass:",				"VariableBreakpoint>>#printContentsForBreakpointInspection",				"VariableBreakpoint>>#removeFromMethod:",				"VariableBreakpoint>>#install",				"VariableBreakpoint>>#removeFromNodeProperty",				"VariableBreakpointTest>>#testSetAsBreakpointProperty",				"VirtualBreakpoint>>#hitTest:",				"VirtualMachine>>#command",				"VirtualMachine>>#options",				"WaitfreeQueueTest>>#testNextOrNilSuchThat",				"WarpBlt class>>#rotate:degrees:center:scaleBy:smoothing:",				"Watch class>>#removeAll",				"WeakActionSequence>>#valueWithArguments:",				"WeakActionSequence>>#value",				"WeakArray class>>#doOldFinalization",				"WeakKeyDictionary>>#finalizeValues:",				"WeakKeyDictionaryTest>>#setUp",				"WeakKeyDictionaryTest class>>#timingMany",				"WeakKeyDictionaryTest class>>#timingLarge",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionSomeGarbageCollected",				"WeakOrderedCollectionTest>>#testWeakOrderedCollectionAllGarbageCollected",				"WeakRegistry>>#finalizeValues",				"WeakSet>>#asArray",				"WeakSet>>#printElementsOn:",				"WeakSetTest>>#testDoDontIterateOnReclaimedObjects",				"WeakSetTest>>#testIncludes",				"WeakSetTest>>#testCollisions",				"WeakSetTest>>#testDontGrowWhenUnecessary",				"WeakValueDictionary>>#associationsDo:",				"WeakValueDictionary>>#rehash",				"WeekTest>>#selectorsToBeIgnored",				"WideCharacterSet>>#hasWideCharacters",				"WidgetExample class>>#closeExampleDialogs",				"WikiStyleHelpBuilder>>#build",				"Win32WideStringTest>>#testCharactersAreEncodedInUnicode16Bits",				"WindowsStoreTest>>#testNetworkPathFullName",				"WindowsStoreTest>>#testRelativePath",				"WindowsStoreTest>>#testAbsoluteFullName",				"WindowsStoreTest>>#testNetworkPathIsAbsolute",				"WindowsStoreTest>>#testAbsolutePath",				"WorkingSession>>#runList:do:",				"WorldMorph>>#contentsMenu:",				"WorldMorph>>#addAllMorphs:",				"WorldMorph>>#install",				"WorldMorph class>>#doOneCycle",				"WorldPresenter class>>#setUpWorld",				"WorldState>>#isStepping:selector:",				"WorldState>>#adjustWakeupTimes:",				"WorldState>>#adjustAlarmTimes:",				"WorldState>>#cleanseStepListForWorld:",				"WorldState>>#checkIfUpdateNeeded",				"WorldState>>#drawWorld:submorphs:invalidAreasOn:",				"WorldState>>#isStepping:",				"WorldState>>#handsDo:",				"WriteBarrierTest>>#testSetIsReadOnlyImmediateProxy",				"WriteBarrierTest>>#testBasicWritable",				"WriteBarrierTest>>#testSetIsReadOnlySuccess",				"WriteBarrierTest>>#testBasicProxyReadOnly",				"WriteBarrierTest>>#testSetIsReadOnlyFailureProxy",				"WriteBarrierTest>>#testBasicReadOnly",				"WriteBarrierTest>>#testBasicProxyWritable",				"WriteBarrierTest>>#testMutateVariableObject",				"WriteBarrierTest>>#testObject:initialState:tuples:setReadOnlyBlock:",				"WriteBarrierTest>>#testSetIsReadOnlySuccessProxy",				"WriteBarrierTest>>#testSetIsReadOnlyFailure",				"WriteBarrierTest>>#testSetIsReadOnlyImmediate",				"ZdcIOBufferTest>>#testString",				"ZipArchive>>#extractAllTo:overwrite:",				"ZipArchive>>#close",				"ZipArchive>>#writeTo:",				"ZipArchive>>#writeCentralDirectoryTo:",				"ZipArchiveTest>>#testArchiveWithThousandFilesShouldWork",				"ZipEncoderTree>>#buildTree:maxDepth:",				"ZipStore>>#close",				"ZipStore>>#open",				"ZnBufferedReadStreamTest>>#testPeek",				"ZnBufferedStreamByteTest>>#testNextIntegerOfSizeSignedBigEndian",				"ZnBufferedStreamByteTest>>#testNextIntegerOfSizeSignedBigEndianPut",				"ZnCharacterEncoder>>#encodeCodePoints:",				"ZnCharacterEncoder class>>#detectEncoding:",				"ZnCharacterEncoderTest>>#testUTF8Boundaries",				"ZnCharacterEncoderTest>>#testCodePointEncodingDecoding",				"ZnCharacterEncoderTest>>#testUTF8EncoderIncomplete",				"ZnCharacterEncoderTest>>#testReadIntoStartingAtCountFromStream",				"ZnCharacterEncoderTest>>#testCodePointStreams",				"ZnCharacterEncoderTest>>#testReadIntoStartingAtCountFromStreamWide",				"ZnCharacterEncoderTest>>#testConvencienceMethods",				"ZnCharacterEncoderTest>>#encodeString:with:",				"ZnCharacterEncoderTest>>#testUTF32EncoderWide",				"ZnCharacterEncoderTest>>#testUTF8EncoderWide",				"ZnCharacterEncoderTest>>#testAllByteEncoderDomains",				"ZnCharacterEncoderTest>>#testKnownEncodingIdentifiers",				"ZnCharacterEncoderTest>>#testUTF8EncoderRandom",				"ZnCharacterEncoderTest>>#testNextPutAllStartingAtToStream",				"ZnCharacterStreamTest>>#testUpToAll",				"ZnChunkedStreamTest>>#testWriting",				"ZnChunkedStreamTest>>#testGzipWriteRead",				"ZnClient>>#receiveCookies",				"ZnClient>>#addPath:",				"ZnClientTest>>#testSpecialPosts",				"ZnCookieJar>>#add:",				"ZnCookieJar>>#cookieAt:forUrl:",				"ZnCrPortableWriteStreamTest>>#testNextPut",				"ZnCredential class>>#findRealmFor:",				"ZnDefaultServerDelegate>>#generateHelp",				"ZnDefaultServerDelegate>>#generateStatus",				"ZnDigestAuthenticator class>>#parseAuthRequest:",				"ZnEntityWriterTest>>#testGzippedAndChunked",				"ZnEntityWriterTest>>#testChunkedOnly",				"ZnHTTPSTest>>#testTransfers",				"ZnHTTPSTest>>#testTransfersSingleClient",				"ZnHTTPSTest class>>#generateTestFiles",				"ZnHeaders>>#headersDo:",				"ZnHtmlOutputStream>>#escapeAttributeValue:",				"ZnHtmlOutputStream>>#escape:",				"ZnHtmlOutputStreamTest>>#testNesting",				"ZnManagingMultiThreadedServer>>#closeConnections",				"ZnMessageBenchmarkTest>>#testRequests",				"ZnMessageBenchmarkTest>>#testResponses",				"ZnMimePart>>#detectContentDispositionValue:",				"ZnMimeType class>>#fromString:",				"ZnMimeType class>>#initializeExtensionsMap",				"ZnMimeType class>>#patchExtensionsMap",				"ZnMimeTypeTest>>#testMatches",				"ZnMimeTypeTest>>#testIsBinary",				"ZnMonticelloServerDelegate>>#repositoryListing",				"ZnMultiPartFormDataEntity>>#writeRepresentationOn:",				"ZnMultiPartFormDataEntity>>#partsDo:",				"ZnMultiValueDictionary>>#keysAndValuesDo:",				"ZnNewLineWriterStreamTest>>#testNextPut",				"ZnRequestTest>>#testCookiesWriting",				"ZnServer class>>#shutDown:",				"ZnServer class>>#startUp:",				"ZnServerTest>>#testFormTest3",				"ZnServerTest>>#testFormTest1",				"ZnServerTest>>#testFormTest2",				"ZnServerTest>>#testFormTest3Unspecified",				"ZnSimplifiedByteEncoder class>>#initializeByteTextConverters",				"ZnStaticFileServerDelegate>>#indexFileIn:",				"ZnUrl>>#addPathSegments:",				"ZnUrl>>#printPathOn:",				"ZnUrlCopy>>#addPathSegments:",				"ZnUrlCopy>>#printPathOn:",				"ZnUrlTest>>#testQueryRemoveAll",				"ZnUrlTest>>#testNoScheme",				"ZnUtils class>>#capitalizeString:",				"ZnUtils class>>#isCapitalizedString:"			],			"implementors" : {				"MetacelloSemanticVersionNumber" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Refer to the comment in Collection|do:.\"",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Refer to the comment in Collection|do:."					],					"hash" : 19876698,					"argumentNames" : [						"aBlock"					]				},				"Array2D" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Pass elements to aBlock one at a time in row-major order.\"",						"",						"\tcontents do: aBlock"					],					"body" : [						"contents do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Pass elements to aBlock one at a time in row-major order."					],					"hash" : 18691363,					"argumentNames" : [						"aBlock"					]				},				"AthensTextDisplayCommand" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| nn |",						"\tnn := self.",						"",						"\t[ nn isNil ] whileFalse: [ ",						"\t\taBlock value: nn.",						"\t\tnn := nn next ]"					],					"body" : [						"| nn |",						"nn := self.",						"",						"[ nn isNil ] whileFalse: [ ",						"\taBlock value: nn.",						"\tnn := nn next ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19766700,					"argumentNames" : [						"aBlock"					]				},				"IceEmptyNode" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Do nothing\"",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Do nothing"					],					"hash" : 20106380,					"argumentNames" : [						"aBlock"					]				},				"Dictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"An alias for valuesDo:. Evaluate aBlock for each of my values.\"",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"An alias for valuesDo:. Evaluate aBlock for each of my values."					],					"hash" : 18635712,					"argumentNames" : [						"aBlock"					]				},				"LGitRevwalk" : {					"sourceCode" : [						"do: aBlock",						"",						"\t[ self hasNext ] whileTrue: [ aBlock value: self next ]"					],					"body" : [						"[ self hasNext ] whileTrue: [ aBlock value: self next ]"					],					"isTestMethod" : false,					"category" : "walking",					"comment" : [ ],					"hash" : 20001424,					"argumentNames" : [						"aBlock"					]				},				"SpBaseEventDefinition class" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self new action: aBlock"					],					"body" : [						"^ self new action: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20283965,					"argumentNames" : [						"aBlock"					]				},				"RBProgramNode" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Hacked to fit collection protocols\"",						"",						"\taBlock value: self"					],					"body" : [						"aBlock value: self"					],					"isTestMethod" : false,					"category" : "enumeration",					"comment" : [						"Hacked to fit collection protocols"					],					"hash" : 18986862,					"argumentNames" : [						"aBlock"					]				},				"DoubleLinkedList" : {					"sourceCode" : [						"do: block",						"",						"\t\"Execute block for each of my elements.\"",						"",						"\tself linksDo: [ :each | block value: each value ]"					],					"body" : [						"self linksDo: [ :each | block value: each value ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Execute block for each of my elements."					],					"hash" : 19445412,					"argumentNames" : [						"block"					]				},				"Set" : {					"sourceCode" : [						"do: aBlock",						"",						"\ttally = 0 ifTrue: [ ^ self ].",						"\t1 to: array size do: [ :index | ",						"\t\t| each |",						"\t\t(each := array at: index) ifNotNil: [ ",						"\t\t\taBlock value: each enclosedElement ] ]"					],					"body" : [						"tally = 0 ifTrue: [ ^ self ].",						"1 to: array size do: [ :index | ",						"\t| each |",						"\t(each := array at: index) ifNotNil: [ ",						"\t\taBlock value: each enclosedElement ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19444019,					"argumentNames" : [						"aBlock"					]				},				"StSpotterIterator" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\" the iterator must keep an internal collection of items being iterated. This guarantees that the iteration is not done multiple times in case somebody sends multiple subsequent messages like #size, #items or #first:. This will slightly decrease performance while iterating \"",						"",						"\titems ifNotNil: [ items do: aBlock ] ifNil: [ ",						"\t\titems := self defaultItems.",						"\t\tself itemDo: [ :each | ",						"\t\t\titems add: each.",						"\t\t\taBlock value: each ] ]"					],					"body" : [						"items ifNotNil: [ items do: aBlock ] ifNil: [ ",						"\titems := self defaultItems.",						"\tself itemDo: [ :each | ",						"\t\titems add: each.",						"\t\taBlock value: each ] ]"					],					"isTestMethod" : false,					"category" : "mimic enumerating",					"comment" : [						" the iterator must keep an internal collection of items being iterated. This guarantees that the iteration is not done multiple times in case somebody sends multiple subsequent messages like #size, #items or #first:. This will slightly decrease performance while iterating "					],					"hash" : 23509112,					"argumentNames" : [						"aBlock"					]				},				"Bag" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.\"",						"",						"\tcontents associationsDo: [ :assoc | ",						"\t\tassoc value timesRepeat: [ aBlock value: assoc key ] ]"					],					"body" : [						"contents associationsDo: [ :assoc | ",						"\tassoc value timesRepeat: [ aBlock value: assoc key ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument."					],					"hash" : 18698328,					"argumentNames" : [						"aBlock"					]				},				"RelationSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.\"",						"",						"\tset do: aBlock"					],					"body" : [						"set do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument."					],					"hash" : 21506853,					"argumentNames" : [						"aBlock"					]				},				"PragmaMenuAndShortcutRegistration" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\tself currentItem action: aBlockClosure"					],					"body" : [						"self currentItem action: aBlockClosure"					],					"isTestMethod" : false,					"category" : "keymapping protocol",					"comment" : [ ],					"hash" : 18539816,					"argumentNames" : [						"aBlockClosure"					]				},				"OSEnvironment" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumeration",					"comment" : [ ],					"hash" : 19440832,					"argumentNames" : [						"aBlock"					]				},				"WideCharacterSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\tmap keysAndValuesDo: [ :index :lowmap | ",						"\t\t| high16Bits |",						"\t\thigh16Bits := index bitShift: 16.",						"\t\tself bitmap: lowmap do: [ :low16Bits | ",						"\t\t\taBlock value: (Character value: high16Bits + low16Bits) ] ]"					],					"body" : [						"map keysAndValuesDo: [ :index :lowmap | ",						"\t| high16Bits |",						"\thigh16Bits := index bitShift: 16.",						"\tself bitmap: lowmap do: [ :low16Bits | ",						"\t\taBlock value: (Character value: high16Bits + low16Bits) ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19021400,					"argumentNames" : [						"aBlock"					]				},				"ProcessList" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| aLink |",						"\taLink := firstLink.",						"\t[ aLink == nil ] whileFalse: [ ",						"\t\taBlock value: aLink value.",						"\t\taLink := aLink nextLink ]"					],					"body" : [						"| aLink |",						"aLink := firstLink.",						"[ aLink == nil ] whileFalse: [ ",						"\taBlock value: aLink value.",						"\taLink := aLink nextLink ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19189292,					"argumentNames" : [						"aBlock"					]				},				"Stream" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock for each of the objects accessible by receiver.\"",						"",						"\t[ self atEnd ] whileFalse: [ aBlock value: self next ]"					],					"body" : [						"[ self atEnd ] whileFalse: [ aBlock value: self next ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock for each of the objects accessible by receiver."					],					"hash" : 18670707,					"argumentNames" : [						"aBlock"					]				},				"CharacterSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"evaluate aBlock with each character in the set\"",						"",						"\tCharacter allByteCharacters do: [ :c | ",						"\t\t(self includes: c) ifTrue: [ aBlock value: c ] ]"					],					"body" : [						"Character allByteCharacters do: [ :c | ",						"\t(self includes: c) ifTrue: [ aBlock value: c ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"evaluate aBlock with each character in the set"					],					"hash" : 18718439,					"argumentNames" : [						"aBlock"					]				},				"OrderedDictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself valuesDo: aBlock"					],					"body" : [						"self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18915221,					"argumentNames" : [						"aBlock"					]				},				"FLLargeIdentitySet" : {					"sourceCode" : [						"do: aBlock",						"",						"\ttally = 0 ifTrue: [ ^ self ].",						"\tincludesNil ifTrue: [ aBlock value: nil ].",						"\t1 to: 4096 do: [ :arrayIndex | ",						"\t\t| subArray |",						"\t\tsubArray := array at: arrayIndex.",						"\t\t1 to: (tallies at: arrayIndex) do: [ :index | ",						"\t\taBlock value: (subArray at: index) ] ]"					],					"body" : [						"tally = 0 ifTrue: [ ^ self ].",						"includesNil ifTrue: [ aBlock value: nil ].",						"1 to: 4096 do: [ :arrayIndex | ",						"\t| subArray |",						"\tsubArray := array at: arrayIndex.",						"\t1 to: (tallies at: arrayIndex) do: [ :index | ",						"\taBlock value: (subArray at: index) ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19634930,					"argumentNames" : [						"aBlock"					]				},				"CharacterSetComplement" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"evaluate aBlock with each character in the set\"",						"",						"\t0 to: self size - 1 do: [ :codePoint | ",						"\t\t| ch |",						"\t\tch := Character value: codePoint.",						"\t\t(self includes: ch) ifTrue: [ aBlock value: ch ] ]"					],					"body" : [						"0 to: self size - 1 do: [ :codePoint | ",						"\t| ch |",						"\tch := Character value: codePoint.",						"\t(self includes: ch) ifTrue: [ aBlock value: ch ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"evaluate aBlock with each character in the set"					],					"hash" : 19509298,					"argumentNames" : [						"aBlock"					]				},				"WeakSet" : {					"sourceCode" : [						"do: aBlock",						"",						"\ttally = 0 ifTrue: [ ^ self ].",						"\t1 to: array size do: [ :index | ",						"\t\t(array at: index) ifNotNil: [ :object | ",						"\t\t\tobject == flag ifFalse: [ aBlock value: object enclosedElement ] ] ]"					],					"body" : [						"tally = 0 ifTrue: [ ^ self ].",						"1 to: array size do: [ :index | ",						"\t(array at: index) ifNotNil: [ :object | ",						"\t\tobject == flag ifFalse: [ aBlock value: object enclosedElement ] ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19432123,					"argumentNames" : [						"aBlock"					]				},				"DependentsArray" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate a Block on non nil elements of the receiver\"",						"",						"\t| dep |",						"\t1 to: self basicSize do: [ :i | ",						"\t(dep := self basicAt: i) ifNotNil: [ aBlock value: dep ] ]"					],					"body" : [						"| dep |",						"1 to: self basicSize do: [ :i | ",						"(dep := self basicAt: i) ifNotNil: [ aBlock value: dep ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate a Block on non nil elements of the receiver"					],					"hash" : 19558784,					"argumentNames" : [						"aBlock"					]				},				"IRSequence" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ sequence do: aBlock"					],					"body" : [						"^ sequence do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19078990,					"argumentNames" : [						"aBlock"					]				},				"IceAbstractNode" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\t\"Evaluate aBlockClosure on my value and the values of my children.\"",						"",						"\t^ self subclassResponsibility"					],					"body" : [						"^ self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Evaluate aBlockClosure on my value and the values of my children."					],					"hash" : 20106095,					"argumentNames" : [						"aBlockClosure"					]				},				"OrderedCollection" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Override the superclass for performance reasons.\"",						"",						"\tfirstIndex to: lastIndex do: [ :index | ",						"\taBlock value: (array at: index) ]"					],					"body" : [						"firstIndex to: lastIndex do: [ :index | ",						"aBlock value: (array at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Override the superclass for performance reasons."					],					"hash" : 19170817,					"argumentNames" : [						"aBlock"					]				},				"Interval" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock for each value of the interval.",						"\tImplementation note: instead of repeatedly incrementing the value",						"\t\taValue := aValue + step.",						"\tuntil stop is reached,",						"\tWe prefer to recompute value from start",						"\t\taValue := start + (index * step).",						"\tThis is better for floating points accuracy, while not degrading Integer and Fraction speed too much.",						"\tMoreover, this is consistent with methods #at: and #size\"",						"",						"\t| aValue index size |",						"\tindex := 0.",						"\tsize := self size.",						"\t[ index < size ] whileTrue: [ ",						"\t\taValue := start + (index * step).",						"\t\tindex := index + 1.",						"\t\taBlock value: aValue ]"					],					"body" : [						"| aValue index size |",						"index := 0.",						"size := self size.",						"[ index < size ] whileTrue: [ ",						"\taValue := start + (index * step).",						"\tindex := index + 1.",						"\taBlock value: aValue ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock for each value of the interval.",						"\tImplementation note: instead of repeatedly incrementing the value",						"\t\taValue := aValue + step.",						"\tuntil stop is reached,",						"\tWe prefer to recompute value from start",						"\t\taValue := start + (index * step).",						"\tThis is better for floating points accuracy, while not degrading Integer and Fraction speed too much.",						"\tMoreover, this is consistent with methods #at: and #size"					],					"hash" : 19427967,					"argumentNames" : [						"aBlock"					]				},				"MetacelloLoadData" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself dataMap valuesDo: [ :ar | ",						"\t\taBlock value: (ar at: 1) value: (ar at: 2) value: (ar at: 3) ]"					],					"body" : [						"self dataMap valuesDo: [ :ar | ",						"\taBlock value: (ar at: 1) value: (ar at: 2) value: (ar at: 3) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18168376,					"argumentNames" : [						"aBlock"					]				},				"LayoutCell" : {					"sourceCode" : [						"do: aBlock",						"",						"\taBlock value: self.",						"\tnextCell ifNotNil: [ nextCell do: aBlock ]"					],					"body" : [						"aBlock value: self.",						"nextCell ifNotNil: [ nextCell do: aBlock ]"					],					"isTestMethod" : false,					"category" : "collection",					"comment" : [ ],					"hash" : 18420130,					"argumentNames" : [						"aBlock"					]				},				"IceTipStandardAction" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself action: aBlock.",						"\tself execute"					],					"body" : [						"self action: aBlock.",						"self execute"					],					"isTestMethod" : false,					"category" : "executing",					"comment" : [ ],					"hash" : 24134222,					"argumentNames" : [						"aBlock"					]				},				"PragmaCollector" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself collected do: aBlock"					],					"body" : [						"self collected do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19287809,					"argumentNames" : [						"aBlock"					]				},				"CTOrderPreservingTree" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself pre: aBlock post: [ :anObj |  ]"					],					"body" : [						"self pre: aBlock post: [ :anObj |  ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20901555,					"argumentNames" : [						"aBlock"					]				},				"LayoutClassScope" : {					"sourceCode" : [						"do: aBlock",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19175258,					"argumentNames" : [						"aBlock"					]				},				"Path" : {					"sourceCode" : [						"do: aBlock",						"",						"\t1 to: self size do: [ :index | ",						"\t\t| segment |",						"\t\tsegment := self at: index.",						"\t\tsegment isEmpty ifFalse: [ aBlock value: segment ] ]"					],					"body" : [						"1 to: self size do: [ :index | ",						"\t| segment |",						"\tsegment := self at: index.",						"\tsegment isEmpty ifFalse: [ aBlock value: segment ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19457338,					"argumentNames" : [						"aBlock"					]				},				"CriticBrowserRulesGroup" : {					"sourceCode" : [						"do: aBlock",						"",						"\trules do: aBlock"					],					"body" : [						"rules do: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 21870884,					"argumentNames" : [						"aBlock"					]				},				"IRRemoteArray" : {					"sourceCode" : [						"do: aBlock",						"",						"\t1 to: size do: [ :idx | aBlock value: idx - 1 ]"					],					"body" : [						"1 to: size do: [ :idx | aBlock value: idx - 1 ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19604881,					"argumentNames" : [						"aBlock"					]				},				"LinkedList" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| aLink |",						"\taLink := firstLink.",						"\t[ aLink == nil ] whileFalse: [ ",						"\t\taBlock value: aLink value.",						"\t\taLink := aLink nextLink ]"					],					"body" : [						"| aLink |",						"aLink := firstLink.",						"[ aLink == nil ] whileFalse: [ ",						"\taBlock value: aLink value.",						"\taLink := aLink nextLink ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19122476,					"argumentNames" : [						"aBlock"					]				},				"ValueLink" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ super do: [ :each | aBlock value: each value ]"					],					"body" : [						"^ super do: [ :each | aBlock value: each value ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 19006259,					"argumentNames" : [						"aBlock"					]				},				"KMDispatchChain" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| currentTarget |",						"\tcurrentTarget := initialTarget.",						"\t[ currentTarget isNil ] whileFalse: [ ",						"\t\taBlock value: currentTarget.",						"\t\tcurrentTarget := currentTarget nextForKmChain: self ]"					],					"body" : [						"| currentTarget |",						"currentTarget := initialTarget.",						"[ currentTarget isNil ] whileFalse: [ ",						"\taBlock value: currentTarget.",						"\tcurrentTarget := currentTarget nextForKmChain: self ]"					],					"isTestMethod" : false,					"category" : "iterating",					"comment" : [ ],					"hash" : 18668254,					"argumentNames" : [						"aBlock"					]				},				"RunArray" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"This is refined for speed\"",						"",						"\t1 to: runs size do: [ :i | ",						"\t\t| r v |",						"\t\tv := values at: i.",						"\t\tr := runs at: i.",						"\t\t[ (r := r - 1) >= 0 ] whileTrue: [ aBlock value: v ] ]"					],					"body" : [						"1 to: runs size do: [ :i | ",						"\t| r v |",						"\tv := values at: i.",						"\tr := runs at: i.",						"\t[ (r := r - 1) >= 0 ] whileTrue: [ aBlock value: v ] ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"This is refined for speed"					],					"hash" : 20529460,					"argumentNames" : [						"aBlock"					]				},				"IceNode" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\taBlockClosure value: self value.",						"\tself childrenDo: [ :node | node do: aBlockClosure ]"					],					"body" : [						"aBlockClosure value: self value.",						"self childrenDo: [ :node | node do: aBlockClosure ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20108288,					"argumentNames" : [						"aBlockClosure"					]				},				"RPackageWithDoTest" : {					"sourceCode" : [						"do: aBlock",						"",						"\tx := 5.",						"\t[ aBlock value ] ensure: [ x := 3 ]"					],					"body" : [						"x := 5.",						"[ aBlock value ] ensure: [ x := 3 ]"					],					"isTestMethod" : false,					"category" : "tests - simple ensuring",					"comment" : [ ],					"hash" : 21168742,					"argumentNames" : [						"aBlock"					]				},				"SmallDictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18969280,					"argumentNames" : [						"aBlock"					]				},				"SystemProgressItemMorph" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"\t^ [ aBlock value: self ] ensure: [ self close ]"					],					"body" : [						"self changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"^ [ aBlock value: self ] ensure: [ self close ]"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [ ],					"hash" : 19672396,					"argumentNames" : [						"aBlock"					]				},				"JobProgressMorph" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"\t^ [ aBlock value: self ] ensure: [ self close ]"					],					"body" : [						"self changed. \"We may be in the UI thread, so this will give us a change to dsiplay ourselves before the block starts\"",						"^ [ aBlock value: self ] ensure: [ self close ]"					],					"isTestMethod" : false,					"category" : "private",					"comment" : [ ],					"hash" : 18597196,					"argumentNames" : [						"aBlock"					]				},				"SequenceableCollection" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Refer to the comment in Collection|do:.\"",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Refer to the comment in Collection|do:."					],					"hash" : 19217242,					"argumentNames" : [						"aBlock"					]				},				"UndefinedObject" : {					"sourceCode" : [						"do: aFullBlockClosure",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18620556,					"argumentNames" : [						"aFullBlockClosure"					]				},				"Link" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| link |",						"\tlink := self.",						"\t[ link ] whileNotNil: [ ",						"\t\taBlock value: link.",						"\t\tlink := link nextLink.",						"\t\tlink == self ifTrue: [ link := nil ] ]"					],					"body" : [						"| link |",						"link := self.",						"[ link ] whileNotNil: [ ",						"\taBlock value: link.",						"\tlink := link nextLink.",						"\tlink == self ifTrue: [ link := nil ] ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 19120886,					"argumentNames" : [						"aBlock"					]				},				"FLLargeIdentityDictionary" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self valuesDo: aBlock"					],					"body" : [						"^ self valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 18582464,					"argumentNames" : [						"aBlock"					]				},				"SpTransmission" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Will create a generic action block to handle transmission\"",						"",						"\tself toPort: (SpActionPort newAction: aBlock)"					],					"body" : [						"self toPort: (SpActionPort newAction: aBlock)"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [						"Will create a generic action block to handle transmission"					],					"hash" : 20505948,					"argumentNames" : [						"aBlock"					]				},				"MetacelloVersionNumber" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Refer to the comment in Collection|do:.\"",						"",						"\t1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"body" : [						"1 to: self size do: [ :index | aBlock value: (self at: index) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Refer to the comment in Collection|do:."					],					"hash" : 19878234,					"argumentNames" : [						"aBlock"					]				},				"MTSession" : {					"sourceCode" : [						"do: aBlock",						"",						"\tdecorators valuesDo: aBlock"					],					"body" : [						"decorators valuesDo: aBlock"					],					"isTestMethod" : false,					"category" : "*MethodWrappers",					"comment" : [ ],					"hash" : 20360522,					"argumentNames" : [						"aBlock"					]				},				"SettingNodeBuilder" : {					"sourceCode" : [						"do: aBlockClosure",						"",						"\tnode item action: aBlockClosure"					],					"body" : [						"node item action: aBlockClosure"					],					"isTestMethod" : false,					"category" : "*Keymapping-Settings",					"comment" : [ ],					"hash" : 18459356,					"argumentNames" : [						"aBlockClosure"					]				},				"Heap" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.\"",						"",						"\t1 to: tally do: [ :i | aBlock value: (array at: i) ]"					],					"body" : [						"1 to: tally do: [ :i | aBlock value: (array at: i) ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument."					],					"hash" : 19362640,					"argumentNames" : [						"aBlock"					]				},				"WeakRegistry" : {					"sourceCode" : [						"do: aBlock",						"",						"\t^ self protected: [ valueDictionary keysDo: aBlock ]"					],					"body" : [						"^ self protected: [ valueDictionary keysDo: aBlock ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 19018959,					"argumentNames" : [						"aBlock"					]				},				"CTLinkedStoragePoolCircular" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| p |",						"\tp := head nextLink.",						"\t[ p == head ] whileFalse: [ ",						"\t\taBlock value: p value.",						"\t\tp := p nextLink ]"					],					"body" : [						"| p |",						"p := head nextLink.",						"[ p == head ] whileFalse: [ ",						"\taBlock value: p value.",						"\tp := p nextLink ]"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [ ],					"hash" : 20747616,					"argumentNames" : [						"aBlock"					]				},				"AthensPathSegment" : {					"sourceCode" : [						"do: aBlock",						"",						"\t| segment |",						"\tsegment := self.",						"",						"\t[ ",						"\taBlock value: segment.",						"\tsegment := segment next.",						"\tsegment notNil ] whileTrue"					],					"body" : [						"| segment |",						"segment := self.",						"",						"[ ",						"aBlock value: segment.",						"segment := segment next.",						"segment notNil ] whileTrue"					],					"isTestMethod" : false,					"category" : "iterating",					"comment" : [ ],					"hash" : 21266294,					"argumentNames" : [						"aBlock"					]				},				"Collection" : {					"sourceCode" : [						"do: aBlock",						"",						"\t\"Evaluate aBlock with each of the receiver's elements as the argument.\"",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "enumerating",					"comment" : [						"Evaluate aBlock with each of the receiver's elements as the argument."					],					"hash" : 18684484,					"argumentNames" : [						"aBlock"					]				},				"MetacelloMemberListSpec" : {					"sourceCode" : [						"do: aBlock",						"",						"\tself map values do: aBlock"					],					"body" : [						"self map values do: aBlock"					],					"isTestMethod" : false,					"category" : "enumeration",					"comment" : [ ],					"hash" : 19321748,					"argumentNames" : [						"aBlock"					]				}			}		},		"nextFromLink:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"Link>>#next:"			],			"implementors" : {				"Link" : {					"sourceCode" : [						"nextFromLink: aLink",						"",						"\t^ aLink nextLink: self"					],					"body" : [						"^ aLink nextLink: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18857152,					"argumentNames" : [						"aLink"					]				},				"Integer" : {					"sourceCode" : [						"nextFromLink: aLink",						"",						"\t^ aLink nextInteger: self"					],					"body" : [						"^ aLink nextInteger: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18845632,					"argumentNames" : [						"aLink"					]				}			}		},		"includes:equalityBlock:" : {			"implementors" : {				"CTSkipList" : {					"sourceCode" : [						"includes: aKey equalityBlock: eqBlock",						"",						"\t| link |",						"\tlink := (self predecessors: aKey) value.",						"\t^ eqBlock value: link nextLink value value: aKey"					],					"body" : [						"| link |",						"link := (self predecessors: aKey) value.",						"^ eqBlock value: link nextLink value value: aKey"					],					"isTestMethod" : false,					"category" : "testing",					"comment" : [ ],					"hash" : 37912980,					"argumentNames" : [						"aKey",						"eqBlock"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipListTest>>#testProfileInclusion"			]		},		"predecessors:" : {			"implementors" : {				"DAPackageRelationGraph" : {					"sourceCode" : [						"predecessors: aPackage",						"",						"\t\"returns a Collection with the predecessors of the package\"",						"",						"\t| aCollection |",						"\taCollection := OrderedCollection new.",						"\tself packages do: [ :package | ",						"\t\tpackage dependencies do: [ :dependency | ",						"\t\t\tdependency target = aPackage ifTrue: [ aCollection add: package ] ] ].",						"\t^ aCollection"					],					"body" : [						"| aCollection |",						"aCollection := OrderedCollection new.",						"self packages do: [ :package | ",						"\tpackage dependencies do: [ :dependency | ",						"\t\tdependency target = aPackage ifTrue: [ aCollection add: package ] ] ].",						"^ aCollection"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"returns a Collection with the predecessors of the package"					],					"hash" : 20104460,					"argumentNames" : [						"aPackage"					]				},				"CTSkipList" : {					"sourceCode" : [						"predecessors: key",						"",						"\t| link predecessors |",						"\tpredecessors := nil.",						"\tlink := lists value.",						"",						"\t[ link ] whileNotNil: [ ",						"\t\t[ sortBlock value: link nextLink value value: key ] whileTrue: [ ",						"\t\t\tlink := link nextLink ].",						"",						"\t\tpredecessors := link ~~> predecessors.",						"",						"\t\tlink := link previousLink ].",						"",						"\t^ predecessors"					],					"body" : [						"| link predecessors |",						"predecessors := nil.",						"link := lists value.",						"",						"[ link ] whileNotNil: [ ",						"\t[ sortBlock value: link nextLink value value: key ] whileTrue: [ ",						"\t\tlink := link nextLink ].",						"",						"\tpredecessors := link ~~> predecessors.",						"",						"\tlink := link previousLink ].",						"",						"^ predecessors"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20874875,					"argumentNames" : [						"key"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList>>#includes:equalityBlock:",				"CTSkipList>>#add:atHeight:",				"CTSkipListTest>>#testProfileInclusion",				"DAPackageCycleDetector>>#parentsFrom:For:",				"DAPackageRelationGraphTest>>#testPredecessors"			]		},		"add:atHeight:" : {			"implementors" : {				"CTSkipList" : {					"sourceCode" : [						"add: key atHeight: r",						"",						"\t| predecessors height newLink |",						"\tpredecessors := self predecessors: key.",						"",						"\theight := self height.",						"",						"\tnewLink := self",						"\t\t           add: key",						"\t\t           atHeight: (r min: height)",						"\t\t           predecessors: predecessors.",						"",						"\tr > height ifTrue: [ ",						"\t\t| newList list |",						"\t\tlist := lists value.",						"",						"\t\tnewList := CTDoubleValueLink new",						"\t\t\t           value: lowerBound;",						"\t\t\t           previousLink: list;",						"\t\t\t           nextLink: (CTDoubleValueLink new",						"\t\t\t\t\t            value: key;",						"\t\t\t\t\t            previousLink: newLink;",						"\t\t\t\t\t            nextLink: (CTDoubleValueLink new",						"\t\t\t\t\t\t\t             value: upperBound;",						"\t\t\t\t\t\t\t             previousLink: (list ifNotNil: [ list last ]);",						"\t\t\t\t\t\t\t             nextLink: nil;",						"\t\t\t\t\t\t\t             yourself);",						"\t\t\t\t\t            yourself);",						"\t\t\t           yourself.",						"",						"\t\tlists := newList ~~> lists ]"					],					"body" : [						"| predecessors height newLink |",						"predecessors := self predecessors: key.",						"",						"height := self height.",						"",						"newLink := self",						"\t           add: key",						"\t           atHeight: (r min: height)",						"\t           predecessors: predecessors.",						"",						"r > height ifTrue: [ ",						"\t| newList list |",						"\tlist := lists value.",						"",						"\tnewList := CTDoubleValueLink new",						"\t\t           value: lowerBound;",						"\t\t           previousLink: list;",						"\t\t           nextLink: (CTDoubleValueLink new",						"\t\t\t\t            value: key;",						"\t\t\t\t            previousLink: newLink;",						"\t\t\t\t            nextLink: (CTDoubleValueLink new",						"\t\t\t\t\t\t             value: upperBound;",						"\t\t\t\t\t\t             previousLink: (list ifNotNil: [ list last ]);",						"\t\t\t\t\t\t             nextLink: nil;",						"\t\t\t\t\t\t             yourself);",						"\t\t\t\t            yourself);",						"\t\t           yourself.",						"",						"\tlists := newList ~~> lists ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 38963822,					"argumentNames" : [						"key",						"r"					]				}			},			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipList>>#add:",				"CTSkipListTest>>#testProfileAdditionOf35"			]		},		"testEmptyLink" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testEmptyLink",						"",						"\t| l |",						"\tl := Link new.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l |",						"l := Link new.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3704113,					"argumentNames" : [ ]				}			}		},		"nextInteger:" : {			"senders" : [				"Bag>>#atRandom:",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTHeapQTest>>#testUpdate",				"Collection>>#atRandom:",				"CollectionTest>>#randomRelationOfSize:max:",				"DelayBenchmark>>#generateDelayProcesses:priority:maxDuration:fromSeed:",				"EssentialsObjectTest>>#testInspectSet",				"EssentialsObjectTest>>#testInspectProbabilisticMedianRatioWithSorting",				"FloatTest>>#testFractionAsFloat",				"HiExampleCommit class>>#randomlyGenerated",				"Integer>>#nextFromLink:",				"Integer>>#atRandom:",				"LargePositiveIntegerTest>>#testReciprocalModulo",				"Link>>#nextInteger:",				"MTVisualizationsTest>>#testInspectProbabilisticMedian",				"NumberParserTest>>#testFloatPrintString",				"OrderedDictionary>>#atRandom:",				"Random>>#nextIntegerBetween:and:",				"RandomTest>>#testNextInteger",				"SequenceableCollection>>#shuffleBy:",				"SequenceableCollection>>#atRandom:",				"Set>>#atRandom:",				"SharedRandom>>#nextInteger:",				"SpRGBSlidersPresenterTest>>#testColor",				"Stdio class>>#createStdioFileFor:",				"UUIDGenerator>>#nextRandom16",				"ValueLink>>#nextInteger:"			],			"implementors" : {				"SharedRandom" : {					"sourceCode" : [						"nextInteger: anInteger",						"",						"\t^ mutex critical: [ super nextInteger: anInteger ]"					],					"body" : [						"^ mutex critical: [ super nextInteger: anInteger ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18963592,					"argumentNames" : [						"anInteger"					]				},				"UndefinedObject" : {					"sourceCode" : [						"nextInteger: n",						"",						"\t^ self"					],					"body" : [						"^ self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18620556,					"argumentNames" : [						"n"					]				},				"Link" : {					"sourceCode" : [						"nextInteger: n",						"",						"\t^ n = 0",						"\t\t  ifTrue: [ nil ]",						"\t\t  ifFalse: [ self class nextLink: (nextLink nextInteger: n - 1) ]"					],					"body" : [						"^ n = 0",						"\t  ifTrue: [ nil ]",						"\t  ifFalse: [ self class nextLink: (nextLink nextInteger: n - 1) ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 18858368,					"argumentNames" : [						"n"					]				},				"Random" : {					"sourceCode" : [						"nextInteger: anInteger",						"",						"\t\"Answer a random integer in the interval [1, anInteger].",						"\tHandle large numbers too (for cryptography).\"",						"",						"\tanInteger strictlyPositive ifFalse: [ ",						"\t\tself error: 'Range must be positive' ].",						"\tanInteger asFloat isInfinite ifTrue: [ ",						"\t\t^ (self privateNextValue asFraction * anInteger) truncated + 1 ]. \"are we outside the range of float? - use fraction\"",						"\t^ (self privateNextValue * anInteger) truncated + 1"					],					"body" : [						"anInteger strictlyPositive ifFalse: [ ",						"\tself error: 'Range must be positive' ].",						"anInteger asFloat isInfinite ifTrue: [ ",						"\t^ (self privateNextValue asFraction * anInteger) truncated + 1 ]. \"are we outside the range of float? - use fraction\"",						"^ (self privateNextValue * anInteger) truncated + 1"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Answer a random integer in the interval [1, anInteger].",						"\tHandle large numbers too (for cryptography)."					],					"hash" : 18941739,					"argumentNames" : [						"anInteger"					]				},				"ValueLink" : {					"sourceCode" : [						"nextInteger: n",						"",						"\t^ (super nextInteger: n) ifNotNil: [ :aValueLink | ",						"\t\t  aValueLink",						"\t\t\t  value: value;",						"\t\t\t  yourself ]"					],					"body" : [						"^ (super nextInteger: n) ifNotNil: [ :aValueLink | ",						"\t  aValueLink",						"\t\t  value: value;",						"\t\t  yourself ]"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 19269720,					"argumentNames" : [						"n"					]				}			}		},		"sutCrescenzi" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipListTest>>#testProfileInclusion",				"CTSkipListTest>>#testProfileAdditionOf35",				"CTSkipListTest>>#testCrescenzi"			],			"implementors" : {				"CTSkipListTest" : {					"sourceCode" : [						"sutCrescenzi",						"",						"\t| collection |",						"\tcollection := #( 5 10 16 18 30 41 80 ) asSortedCollection: #<.",						"",						"\t^ CTSkipList",						"\t\t  onSortedCollection: collection",						"\t\t  lowerBound: Float negativeInfinity",						"\t\t  upperBound: Float infinity"					],					"body" : [						"| collection |",						"collection := #( 5 10 16 18 30 41 80 ) asSortedCollection: #<.",						"",						"^ CTSkipList",						"\t  onSortedCollection: collection",						"\t  lowerBound: Float negativeInfinity",						"\t  upperBound: Float infinity"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 3835250,					"argumentNames" : [ ]				}			}		},		"testLinkNext3" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testLinkNext3",						"",						"\t| l1 l2 l3 l |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"\tl3 := Link new.",						"",						"\tl1 next: l2.",						"\tl2 next: l3.",						"\tl3 next: l1.",						"",						"\tl := l1 next: 3.",						"",						"\tself assert: l nextLink nextLink nextLink equals: nil.",						"",						"\t^ self exportSlotsGraphOf: l"					],					"body" : [						"| l1 l2 l3 l |",						"l1 := Link new.",						"l2 := Link new.",						"l3 := Link new.",						"",						"l1 next: l2.",						"l2 next: l3.",						"l3 next: l1.",						"",						"l := l1 next: 3.",						"",						"self assert: l nextLink nextLink nextLink equals: nil.",						"",						"^ self exportSlotsGraphOf: l"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4494271,					"argumentNames" : [ ]				}			}		},		"asLinkedList" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptValueLinkMessagesForDoc",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTBinomialHeap>>#asShapeForest",				"CTBinomialTree>>#nodes",				"CTBinomialTree>>#edges:",				"CTLinksValueLinkTest>>#testAsLinkedList",				"CTLinksValueLinkTest>>#testAsLinkedList4321",				"CTLinksValueLinkTest>>#testNilAsLinkedList",				"CTOrderPreservingTreeTest>>#testCycle",				"SequenceableCollection>>#asLinkedList"			],			"implementors" : {				"ValueLink" : {					"sourceCode" : [						"asLinkedList",						"",						"\t| list |",						"\tlist := LinkedList empty.",						"\tself do: [ :each | list addLast: each ].",						"\t^ list"					],					"body" : [						"| list |",						"list := LinkedList empty.",						"self do: [ :each | list addLast: each ].",						"^ list"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 2229578,					"argumentNames" : [ ]				},				"UndefinedObject" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ LinkedList empty"					],					"body" : [						"^ LinkedList empty"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1581381,					"argumentNames" : [ ]				},				"SequenceableCollection" : {					"sourceCode" : [						"asLinkedList",						"",						"\t^ self asValueLink asLinkedList"					],					"body" : [						"^ self asValueLink asLinkedList"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [ ],					"hash" : 1650690,					"argumentNames" : [ ]				}			}		},		"onSortedCollection:lowerBound:upperBound:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTSkipListTest>>#sutCrescenzi"			],			"implementors" : {				"CTSkipList class" : {					"sourceCode" : [						"onSortedCollection: aCollection lowerBound: lower upperBound: upper",						"",						"\t^ self",						"\t\t  onSortedCollection: aCollection",						"\t\t  lowerBound: lower",						"\t\t  upperBound: upper",						"\t\t  atRandom: ((RandomGeometric seed: 541)",						"\t\t\t\t   p: 0.5;",						"\t\t\t\t   yourself)"					],					"body" : [						"^ self",						"\t  onSortedCollection: aCollection",						"\t  lowerBound: lower",						"\t  upperBound: upper",						"\t  atRandom: ((RandomGeometric seed: 541)",						"\t\t\t   p: 0.5;",						"\t\t\t   yourself)"					],					"isTestMethod" : false,					"category" : "creation",					"comment" : [ ],					"hash" : 54690156,					"argumentNames" : [						"aCollection",						"lower",						"upper"					]				}			}		},		"testLinkReferencingAnotherLink" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc"			],			"implementors" : {				"CTLinksLinkTest" : {					"sourceCode" : [						"testLinkReferencingAnotherLink",						"",						"\t| l1 l2 |",						"\tl1 := Link new.",						"\tl2 := Link new.",						"",						"\tl1 next: l2.",						"",						"\t^ self exportSlotsGraphOf: l1"					],					"body" : [						"| l1 l2 |",						"l1 := Link new.",						"l2 := Link new.",						"",						"l1 next: l2.",						"",						"^ self exportSlotsGraphOf: l1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3967121,					"argumentNames" : [ ]				}			}		},		"nextLink:" : {			"senders" : [				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"CTBinaryTreeAbstract>>#leftBinaryTreeElement:value:rightBinaryTreeElement:",				"CTBinaryTreeNodeBalancedRed>>#asBlackNode",				"CTBinaryTreeNodeUnbalanced>>#push:witness:continuation:inSet:",				"CTDfsWalker>>#visitingShape:of:",				"CTLinkedStoragePool>>#releaseLink:",				"CTLinkedStoragePoolCircular>>#initialize",				"CTLinkedStoragePoolCircular>>#push:",				"CTLinkedStoragePoolCircular>>#pop",				"CTLinkedStoragePoolCircularDoubly>>#pop",				"CTLinkedStoragePoolPolynomial>>#addPolynomial:headLink:",				"CTLinkedStoragePoolQueue>>#removeAll",				"CTLinkedStoragePoolQueue>>#push:",				"CTLinkedStoragePoolStack>>#removeAll",				"CTLinkedStoragePoolStack>>#push:",				"CTLinksValueLinkTest>>#test43214ValueLinks",				"CTLinksValueLinkTest>>#test11ValueLinksLoop",				"CTSkipList>>#add:atHeight:predecessors:",				"CTSkipList>>#add:atHeight:",				"CTSkipList class>>#onSortedCollection:lowerBound:upperBound:atRandom:",				"DoubleLinkedList>>#addLast:",				"DoubleLinkedList>>#removeLast",				"DoubleLinkedList>>#removeLink:",				"DoubleLinkedList>>#stRemoveCycledLink:",				"DoubleLinkedList>>#addFirst:",				"DoubleLinkedList>>#add:afterLink:",				"DoubleLinkedList>>#add:beforeLink:",				"FLBasicSerializationTest>>#testCyclicLinksInArray",				"FLBasicSerializationTest>>#testCyclicLinks",				"FLBasicSerializationTest>>#testCyclicLink",				"FreeTypeCacheLinkedList>>#add:after:",				"FreeTypeCacheLinkedList>>#addFirst:",				"FreeTypeCacheLinkedList>>#add:before:",				"FreeTypeCacheLinkedList>>#removeFirst",				"FreeTypeCacheLinkedList>>#removeLast",				"FreeTypeCacheLinkedList>>#addLast:",				"FreeTypeCacheLinkedList>>#remove:ifAbsent:",				"FreeTypeCacheLinkedList>>#moveDown:",				"FreeTypeCacheTest>>#testFreeTypeCacheEntry",				"Link>>#asLinkPrepend:",				"Link>>#nextFromLink:",				"Link>>#nextInteger:",				"Link>>#withValueLink:collect:onSizeMismatchDo:",				"Link>>#reversed:",				"Link class>>#nextLink:",				"LinkedList>>#removeLink:ifAbsent:",				"LinkedList>>#postCopy",				"LinkedList>>#removeLast",				"LinkedList>>#add:afterLink:",				"LinkedList>>#swap:with:",				"LinkedList>>#removeFirst",				"LinkedList>>#add:beforeLink:",				"LinkedList>>#addLast:",				"LinkedList>>#at:putLink:",				"LinkedList>>#addFirst:",				"ProcessList>>#removeLink:ifAbsent:",				"ProcessList>>#addLast:",				"ProcessList>>#postCopy",				"ProcessList>>#at:putLink:",				"ProcessList>>#removeLast",				"ProcessList>>#addFirst:",				"ProcessList>>#add:afterLink:",				"ProcessList>>#swap:with:",				"ProcessList>>#removeFirst",				"ProcessList>>#add:beforeLink:",				"QSystemTally>>#tallyMethod:by:",				"QSystemTally>>#tallyPath:by:",				"RSHorizontalVanDerPloegTreeLayout>>#updateIYL:at:rest:",				"RSTWalkBasedRegularTreeLayout>>#updateIYL:at:rest:",				"RSVanDerPloegTreeLayout>>#updateIYL:at:rest:",				"ValueLinkTest>>#testPushingOnValueLinks"			],			"implementors" : {				"Link" : {					"sourceCode" : [						"nextLink: aLink",						"",						"\t\"Store the argument, aLink, as the link to which the receiver refers. ",						"\tAnswer aLink.\"",						"",						"\t^ nextLink := aLink"					],					"body" : [						"^ nextLink := aLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Store the argument, aLink, as the link to which the receiver refers. ",						"\tAnswer aLink."					],					"hash" : 18857158,					"argumentNames" : [						"aLink"					]				},				"LinkedListTest" : {					"sourceCode" : [						"nextLink: aLink",						"",						"\tnextLink := aLink"					],					"body" : [						"nextLink := aLink"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 21648280,					"argumentNames" : [						"aLink"					]				},				"Link class" : {					"sourceCode" : [						"nextLink: aLink",						"",						"\t\"Answer an instance of me referring to the argument, aLink.\"",						"",						"\t^ self new",						"\t\t  nextLink: aLink;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  nextLink: aLink;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"Answer an instance of me referring to the argument, aLink."					],					"hash" : 18857469,					"argumentNames" : [						"aLink"					]				},				"DoubleLink" : {					"sourceCode" : [						"nextLink: anObject",						"",						"\tnextLink := anObject"					],					"body" : [						"nextLink := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19444375,					"argumentNames" : [						"anObject"					]				}			}		},		"yourself:" : {			"senders" : [				"Array2D>>#asShapeMod2",				"BaselineOfBookletDSst>>#scriptLinkMessagesForDoc",				"ByteArray>>#asShapeBitsDump",				"CTBinaryTreeAbstract>>#pop",				"CTBinaryTreeAbstract class>>#empty",				"CTBinaryTreeAbstract class>>#withArrayedCollection:",				"CTBinomialHeap>>#asShapeForest",				"CTBinomialHeap class>>#withArrayedCollection:",				"CTCollapsedSccDfsPainter>>#dfsWalk",				"CTDfsShapeBuilder>>#labelForClass:",				"CTLinkedStoragePool>>#allocateOrReuseLink",				"CTLinkedStoragePoolCircular>>#pop",				"CTLinkedStoragePoolCircularDoubly>>#pop",				"CTLinkedStoragePoolPolynomial class>>#termAssociations:",				"CTLinkedStoragePoolQueue>>#pop",				"CTLinkedStoragePoolStack>>#pop",				"CTSccDfsPainter>>#dfsWalk",				"CTSlotDescriptorsVisitorClassHierarchy>>#visitClass:",				"EssentialsObjectTest>>#testInspectSkewBinaryCanonicalSparse",				"Fraction>>#asShapeFordCircles",				"Integer>>#asShapeBinaryDots:",				"MTTemperaturePresenter>>#xLabels:yLabels:matrix:",				"ObjectTest>>#testYourselfBlock",				"Point>>#asShapeWrtOrigin",				"PointArray>>#asShapeDots",				"RBProgramNode>>#inspectorRoassalTree",				"SlotDescriptorsVisitorOneToManyForValueLinkTesting>>#visitValueLink:",				"TopologicalSortAlgorithm>>#handleCycleInValueLinksTable:do:",				"TopologicalSortAlgorithm>>#sortOn:sinksValueLink:valueLinksTable:"			],			"implementors" : {				"Object" : {					"sourceCode" : [						"yourself: aBlock",						"",						"\t\"I invoke the given block giving myself as argument if it needs to consume me.",						"\t Then I return my self discarding the value returned by the given block.\"",						"",						"\t^ aBlock",						"\t\t  cull: self;",						"\t\t  itself: self"					],					"body" : [						"^ aBlock",						"\t  cull: self;",						"\t  itself: self"					],					"isTestMethod" : false,					"category" : "*Containers-Essentials",					"comment" : [						"I invoke the given block giving myself as argument if it needs to consume me.",						"\t Then I return my self discarding the value returned by the given block."					],					"hash" : 18639837,					"argumentNames" : [						"aBlock"					]				}			}		}	}}